// Auto-generated component data
window.COMPONENT_DATA = [
  {
    "name": "calculatePatientCost",
    "description": "A recursive function to calculate the total cost of a patient's stay\nincluding all procedures, medications, and room charges",
    "props": [],
    "filePath": "examples/DocumentAll.tsx",
    "sourceCode": "import React from 'react';\nimport App from './App';\nimport Todo, { TodoItem as TodoItemType } from './Todo';\nimport TodoItem from './TodoItem';\nimport RecursiveExamples, {\n    factorial,\n    fibonacci as recursiveExamplesFibonacci,\n    sumNestedArray,\n    depthFirstTraversal,\n    RecursiveTreeProcessor,\n    CommentThread,\n    deepClone,\n    traverseDOM,\n    recursivePromiseChain,\n    Comment,\n    TreeNode\n} from './RecursiveExamples';\nimport UseRecursiveExamples from './UseRecursiveExamples';\nimport FibonacciExample, { fibonacci } from './Fibonacci';\n\n/**\n * This component brings together all the components, functions and examples\n * for documentation generation purposes.\n */\nconst DocumentAll: React.FC = () => {\n    // Create demo data for examples\n    const demoTree: TreeNode<string> = {\n        value: 'root',\n        children: [{ value: 'child', children: [] }]\n    };\n\n    const demoComments: Comment[] = [\n        { id: '1', text: 'Example comment', author: 'User', replies: [] }\n    ];\n\n    // This component is never actually rendered, it just exists to document everything\n    return (\n        <div>\n            <h1>Documentation Components</h1>\n\n            {/* Standard App Components */}\n            <App title=\"Example App\" showRecursiveExamples={true} />\n            <Todo\n                initialTodos={[{ id: '1', text: 'Test Todo', completed: false }]}\n                onTodoAdded={(todo) => console.log(todo)}\n                title=\"Example Todos\"\n            />\n            <TodoItem\n                todo={{ id: '1', text: 'Test Todo', completed: false }}\n                onToggle={() => { }}\n                onDelete={() => { }}\n            />\n\n            {/* Recursive Examples */}\n            <RecursiveExamples />\n            <UseRecursiveExamples />\n            <CommentThread comments={demoComments} />\n            <FibonacciExample />\n\n            {/* These would normally be hidden, but included for documentation */}\n            <div style={{ display: 'none' }}>\n                <h2>Recursive Functions (TypeScript)</h2>\n                <p>{`factorial(5) = ${factorial(5)}`}</p>\n\n                {/* Make sure fibonacci is properly documented with explicit implementation */}\n                <div id=\"fibonacci-example\">\n                    <h3>Fibonacci Function</h3>\n                    <p>{`Imported fibonacci(10) = ${fibonacci(10)}`}</p>\n                    <p>{`RecursiveExamples fibonacci(10) = ${recursiveExamplesFibonacci(10)}`}</p>\n                    <pre>\n                        {`\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                        `}\n                    </pre>\n                </div>\n\n                <p>{`sumNestedArray([1, [2, 3]]) = ${sumNestedArray([1, [2, 3]])}`}</p>\n\n                <h2>Hospital Test JavaScript</h2>\n                <div id=\"hospital-examples\">\n                    {(() => {\n                        // Sample patient data\n                        const patient = {\n                            id: 'P1001',\n                            name: 'John Doe',\n                            roomCharge: 500,\n                            procedures: [\n                                { name: 'X-Ray', cost: 250 },\n                                { name: 'Blood Test', cost: 100 }\n                            ],\n                            medications: [\n                                { name: 'Antibiotic', cost: 75 },\n                                { name: 'Pain Reliever', cost: 25 }\n                            ]\n                        };\n\n                        // Sample hospital hierarchy\n                        const hospital = {\n                            type: 'hospital',\n                            name: 'General Hospital',\n                            children: [\n                                {\n                                    type: 'floor',\n                                    name: 'Floor 1',\n                                    children: [\n                                        {\n                                            type: 'room',\n                                            name: 'Room 101',\n                                            children: [\n                                                { type: 'patient', id: 'P1001', name: 'John Doe' }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        };\n\n                        // Sample org chart data\n                        const orgChart = {\n                            name: 'Dr. Smith',\n                            role: 'Chief of Medicine',\n                            subordinates: [\n                                {\n    ...\n// (code truncated for brevity)",
    "childComponents": [
      {
        "name": "App",
        "description": "Main application component that serves as the entry point",
        "props": [
          {
            "name": "title",
            "type": "string",
            "required": false,
            "defaultValue": "My Todo App",
            "description": "Title for the application"
          },
          {
            "name": "showRecursiveExamples",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Whether to show recursive examples"
          }
        ],
        "filePath": "examples/App.tsx",
        "sourceCode": "import React from 'react';\nimport Todo, { TodoItem } from './Todo';\nimport RecursiveExamples from './RecursiveExamples';\n\n/**\n * Props for the App component\n */\ninterface AppProps {\n    /**\n     * Title for the application\n     */\n    title?: string;\n\n    /**\n     * Whether to show recursive examples\n     */\n    showRecursiveExamples?: boolean;\n}\n\n/**\n * Main application component that serves as the entry point\n */\nconst App: React.FC<AppProps> = ({\n    title = 'My Todo App',\n    showRecursiveExamples = false\n}) => {\n    const initialTodos: TodoItem[] = [\n        { id: '1', text: 'Learn React', completed: true },\n        { id: '2', text: 'Build an app', completed: false },\n        { id: '3', text: 'Deploy to production', completed: false },\n    ];\n\n    const handleTodoAdded = (todo: TodoItem) => {\n        console.log('New todo added:', todo);\n    };\n\n    return (\n        <div className=\"app\">\n            <header className=\"app-header\">\n                <h1>{title}</h1>\n            </header>\n\n            <main className=\"app-content\">\n                <Todo\n                    initialTodos={initialTodos}\n                    onTodoAdded={handleTodoAdded}\n                    title=\"My Tasks\"\n                />\n\n                {showRecursiveExamples && (\n                    <div className=\"recursive-examples-container\">\n                        <h2>Recursive Examples</h2>\n                        <RecursiveExamples />\n                    </div>\n                )}\n            </main>\n\n            <footer className=\"app-footer\">\n                <p>Created with React</p>\n            </footer>\n        </div>\n    );\n};\n\nexport default App;\n",
        "childComponents": [
          {
            "name": "Todo",
            "description": "A component for managing a list of todo items",
            "props": [
              {
                "name": "initialTodos",
                "type": "TodoItem[]",
                "required": false,
                "defaultValue": "[]",
                "description": "Initial todo items to display"
              },
              {
                "name": "onTodoAdded",
                "type": "((todo: TodoItem) => void)",
                "required": false,
                "description": "Callback triggered when a todo item is added"
              },
              {
                "name": "title",
                "type": "string",
                "required": false,
                "defaultValue": "Todo List",
                "description": "Title of the todo list"
              }
            ],
            "filePath": "examples/Todo.tsx",
            "sourceCode": "import React, { useState } from 'react';\nimport TodoItem from './TodoItem';\n\n/**\n * Todo list component that displays a list of tasks\n */\ninterface TodoProps {\n    /**\n     * Initial todo items to display\n     */\n    initialTodos?: TodoItem[];\n\n    /**\n     * Callback triggered when a todo item is added\n     */\n    onTodoAdded?: (todo: TodoItem) => void;\n\n    /**\n     * Title of the todo list\n     */\n    title?: string;\n}\n\nexport interface TodoItem {\n    id: string;\n    text: string;\n    completed: boolean;\n}\n\n/**\n * A component for managing a list of todo items\n */\nconst Todo: React.FC<TodoProps> = ({\n    initialTodos = [],\n    onTodoAdded,\n    title = 'Todo List'\n}) => {\n    const [todos, setTodos] = useState<TodoItem[]>(initialTodos);\n    const [newTodoText, setNewTodoText] = useState('');\n\n    const handleAddTodo = () => {\n        if (!newTodoText.trim()) return;\n\n        const newTodo: TodoItem = {\n            id: Date.now().toString(),\n            text: newTodoText,\n            completed: false\n        };\n\n        setTodos([...todos, newTodo]);\n        setNewTodoText('');\n\n        if (onTodoAdded) {\n            onTodoAdded(newTodo);\n        }\n    };\n\n    const handleToggleTodo = (id: string) => {\n        setTodos(\n            todos.map(todo =>\n                todo.id === id ? { ...todo, completed: !todo.completed } : todo\n            )\n        );\n    };\n\n    const handleDeleteTodo = (id: string) => {\n        setTodos(todos.filter(todo => todo.id !== id));\n    };\n\n    return (\n        <div className=\"todo-container\">\n            <h2>{title}</h2>\n\n            <div className=\"todo-input\">\n                <input\n                    type=\"text\"\n                    value={newTodoText}\n                    onChange={e => setNewTodoText(e.target.value)}\n                    placeholder=\"Add a new task\"\n                />\n                <button onClick={handleAddTodo}>Add</button>\n            </div>\n\n            <ul className=\"todo-list\">\n                {todos.map(todo => (\n                    <TodoItem\n                        key={todo.id}\n                        todo={todo}\n                        onToggle={() => handleToggleTodo(todo.id)}\n                        onDelete={() => handleDeleteTodo(todo.id)}\n                    />\n                ))}\n            </ul>\n\n            <div className=\"todo-summary\">\n                <p>{todos.filter(todo => todo.completed).length} of {todos.length} tasks completed</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Todo;\n",
            "childComponents": [
              {
                "name": "TodoItem",
                "description": "Component that displays a single todo item with controls to toggle completion or delete",
                "props": [
                  {
                    "name": "todo",
                    "type": "TodoItem",
                    "required": true,
                    "description": "The todo item to display"
                  },
                  {
                    "name": "onToggle",
                    "type": "() => void",
                    "required": true,
                    "description": "Callback triggered when the todo completion status is toggled"
                  },
                  {
                    "name": "onDelete",
                    "type": "() => void",
                    "required": true,
                    "description": "Callback triggered when the todo is deleted"
                  }
                ],
                "filePath": "examples/TodoItem.tsx",
                "sourceCode": "import React from 'react';\nimport { TodoItem as TodoItemType } from './Todo';\n\n/**\n * Props for the TodoItem component\n */\ninterface TodoItemProps {\n    /**\n     * The todo item to display\n     */\n    todo: TodoItemType;\n\n    /**\n     * Callback triggered when the todo completion status is toggled\n     */\n    onToggle: () => void;\n\n    /**\n     * Callback triggered when the todo is deleted\n     */\n    onDelete: () => void;\n}\n\n/**\n * Component that displays a single todo item with controls to toggle completion or delete\n */\nconst TodoItem: React.FC<TodoItemProps> = ({ todo, onToggle, onDelete }) => {\n    return (\n        <li className={`todo-item ${todo.completed ? 'completed' : ''}`}>\n            <div className=\"todo-content\">\n                <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={onToggle}\n                    className=\"todo-checkbox\"\n                />\n                <span className=\"todo-text\">{todo.text}</span>\n            </div>\n            <button\n                className=\"todo-delete\"\n                onClick={onDelete}\n                aria-label=\"Delete todo\"\n            >\n                Delete\n            </button>\n        </li>\n    );\n};\n\nexport default TodoItem;\n",
                "childComponents": []
              }
            ],
            "methods": [
              {
                "name": "handleAddTodo",
                "description": "Handler for AddTodo event",
                "params": [],
                "returnType": "void",
                "code": "const handleAddTodo = () => {\n        if (!newTodoText.trim()) return;\n\n        const newTodo: TodoItem = {\n            id: Date.now().toString(),\n            text: newTodoText,\n            completed: false\n        };\n\n        setTodos([...todos, newTodo]);\n        setNewTodoText('');\n\n        if (onTodoAdded) {\n            onTodoAdded(newTodo);\n        }\n    }"
              },
              {
                "name": "handleToggleTodo",
                "description": "Handler for ToggleTodo event",
                "params": [
                  {
                    "name": "id",
                    "type": "string",
                    "description": ""
                  }
                ],
                "returnType": "void",
                "code": "const handleToggleTodo = (id: string) => {\n        setTodos(\n            todos.map(todo =>\n                todo.id === id ? { ...todo, completed: !todo.completed } : todo\n            )\n        );\n    }"
              },
              {
                "name": "handleDeleteTodo",
                "description": "Handler for DeleteTodo event",
                "params": [
                  {
                    "name": "id",
                    "type": "string",
                    "description": ""
                  }
                ],
                "returnType": "void",
                "code": "const handleDeleteTodo = (id: string) => {\n        setTodos(todos.filter(todo => todo.id !== id));\n    }"
              }
            ]
          },
          {
            "name": "factorial",
            "description": "Recursive functions in TypeScript",
            "props": [],
            "filePath": "examples/RecursiveExamples.tsx",
            "sourceCode": "import React, { useState } from 'react';\n\n/**\n * TypeScript recursive data structure examples\n */\n\n// Recursive type definition for nested comment structure\nexport interface Comment {\n    id: string;\n    text: string;\n    author: string;\n    replies: Comment[];\n}\n\n// Recursive type for tree node\nexport interface TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n}\n\n/**\n * Recursive functions in TypeScript\n */\n\n// Simple factorial calculation with recursion\nexport function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}\n\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n// Recursive function to calculate the sum of all numbers in a nested array\nexport function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}\n\n// Recursive tree traversal - depth-first search\nexport function depthFirstTraversal<T>(node: TreeNode<T>, callback: (value: T) => void): void {\n    // Process current node\n    callback(node.value);\n\n    // Recursively process all children\n    for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }\n}\n\n/**\n * Recursive class implementation in TypeScript\n */\nexport class RecursiveTreeProcessor<T> {\n    private root: TreeNode<T>;\n\n    constructor(root: TreeNode<T>) {\n        this.root = root;\n    }\n\n    // Method that uses recursion\n    public findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }\n\n    // Private recursive helper method\n    private findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }\n\n    // Another recursive method that transforms the tree\n    public mapTree<U>(mapFn: (value: T) => U): TreeNode<U> {\n        return this.mapNodeRecursive(this.root, mapFn);\n    }\n\n    private mapNodeRecursive<U>(node: TreeNode<T>, mapFn: (value: T) => U): TreeNode<U> {\n        return {\n            value: mapFn(node.value),\n            children: node.children.map(child => this.mapNodeRecursive(child, mapFn))\n        };\n    }\n}\n\n/**\n * React component that demonstrates recursive rendering\n */\nexport const CommentThread: React.FC<{ comments: Comment[] }> = ({ comments }) => {\n    const renderComment = (comment: Comment) => (\n        <div key={comment.id} className=\"comment\">\n            <div className=\"comment-header\">\n                <span className=\"author\">{comment.author}</span>\n            </div>\n            <div className=\"comment-text\">{comment.text}</div>\n\n            {/* Recursive rendering of replies */}\n            {comment.replies.length > 0 && (\n                <div className=\"comment-replies\">\n                    {comment.replies.map(reply => renderComment(reply))}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"comment-thread\">\n            {comments.map(comment => renderComment(comment))}\n        </div>\n    );\n};\n\n/**\n * JavaScript examples with recursion (using JS syntax, no types)\n */\n\n// Deep object clone with recursion\nexport function deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => deepClone(item)) as unknown as T;\n    }\n\n    const clonedObj: Record<string, any> = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }\n\n    return clonedObj as T;\n}\n\n// Recursive DOM traversal example in JavaScript\nexport function traverseDOM(element: Element, callback: (el: Element) => void): void {\n    // Process current element\n    callback(element);\n\n    // Recursively process all child nodes\n    Array.from(element.childNodes).forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }\n    });\n}\n\n// Recursive promise chain\nexport function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {\n    if (index >= actions.length) {\n        return Promise.resolve();\n    }\n\n    return Promise...\n// (code truncated for brevity)",
            "childComponents": [],
            "methods": [
              {
                "name": "runRecursiveExample",
                "description": "",
                "params": [],
                "returnType": "void",
                "code": "const runRecursiveExample = () => {\n        // Calculate factorial of 5\n        const fact5 = factorial(5);\n\n        // Calculate 10th Fibonacci number\n        const fib10 = fibonacci(10);\n\n        // Sum the nested array\n        const sum = sumNestedArray(nestedArray);\n\n        // Process the tree\n        const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n        const values: string[] = [];\n        depthFirstTraversal(sampleTree, (val) => values.push(val));\n\n        setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}\n      Sum of nested array: ${sum}\n      Tree values: ${values.join(', ')}\n    `);\n    }"
              }
            ]
          },
          {
            "name": "sumNestedArray",
            "description": "",
            "props": [],
            "filePath": "examples/RecursiveExamples.tsx",
            "sourceCode": "import React, { useState } from 'react';\n\n/**\n * TypeScript recursive data structure examples\n */\n\n// Recursive type definition for nested comment structure\nexport interface Comment {\n    id: string;\n    text: string;\n    author: string;\n    replies: Comment[];\n}\n\n// Recursive type for tree node\nexport interface TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n}\n\n/**\n * Recursive functions in TypeScript\n */\n\n// Simple factorial calculation with recursion\nexport function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}\n\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n// Recursive function to calculate the sum of all numbers in a nested array\nexport function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}\n\n// Recursive tree traversal - depth-first search\nexport function depthFirstTraversal<T>(node: TreeNode<T>, callback: (value: T) => void): void {\n    // Process current node\n    callback(node.value);\n\n    // Recursively process all children\n    for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }\n}\n\n/**\n * Recursive class implementation in TypeScript\n */\nexport class RecursiveTreeProcessor<T> {\n    private root: TreeNode<T>;\n\n    constructor(root: TreeNode<T>) {\n        this.root = root;\n    }\n\n    // Method that uses recursion\n    public findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }\n\n    // Private recursive helper method\n    private findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }\n\n    // Another recursive method that transforms the tree\n    public mapTree<U>(mapFn: (value: T) => U): TreeNode<U> {\n        return this.mapNodeRecursive(this.root, mapFn);\n    }\n\n    private mapNodeRecursive<U>(node: TreeNode<T>, mapFn: (value: T) => U): TreeNode<U> {\n        return {\n            value: mapFn(node.value),\n            children: node.children.map(child => this.mapNodeRecursive(child, mapFn))\n        };\n    }\n}\n\n/**\n * React component that demonstrates recursive rendering\n */\nexport const CommentThread: React.FC<{ comments: Comment[] }> = ({ comments }) => {\n    const renderComment = (comment: Comment) => (\n        <div key={comment.id} className=\"comment\">\n            <div className=\"comment-header\">\n                <span className=\"author\">{comment.author}</span>\n            </div>\n            <div className=\"comment-text\">{comment.text}</div>\n\n            {/* Recursive rendering of replies */}\n            {comment.replies.length > 0 && (\n                <div className=\"comment-replies\">\n                    {comment.replies.map(reply => renderComment(reply))}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"comment-thread\">\n            {comments.map(comment => renderComment(comment))}\n        </div>\n    );\n};\n\n/**\n * JavaScript examples with recursion (using JS syntax, no types)\n */\n\n// Deep object clone with recursion\nexport function deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => deepClone(item)) as unknown as T;\n    }\n\n    const clonedObj: Record<string, any> = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }\n\n    return clonedObj as T;\n}\n\n// Recursive DOM traversal example in JavaScript\nexport function traverseDOM(element: Element, callback: (el: Element) => void): void {\n    // Process current element\n    callback(element);\n\n    // Recursively process all child nodes\n    Array.from(element.childNodes).forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }\n    });\n}\n\n// Recursive promise chain\nexport function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {\n    if (index >= actions.length) {\n        return Promise.resolve();\n    }\n\n    return Promise...\n// (code truncated for brevity)",
            "childComponents": [],
            "methods": [
              {
                "name": "runRecursiveExample",
                "description": "",
                "params": [],
                "returnType": "void",
                "code": "const runRecursiveExample = () => {\n        // Calculate factorial of 5\n        const fact5 = factorial(5);\n\n        // Calculate 10th Fibonacci number\n        const fib10 = fibonacci(10);\n\n        // Sum the nested array\n        const sum = sumNestedArray(nestedArray);\n\n        // Process the tree\n        const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n        const values: string[] = [];\n        depthFirstTraversal(sampleTree, (val) => values.push(val));\n\n        setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}\n      Sum of nested array: ${sum}\n      Tree values: ${values.join(', ')}\n    `);\n    }"
              }
            ]
          },
          {
            "name": "deepClone",
            "description": "JavaScript examples with recursion (using JS syntax, no types)",
            "props": [],
            "filePath": "examples/RecursiveExamples.tsx",
            "sourceCode": "import React, { useState } from 'react';\n\n/**\n * TypeScript recursive data structure examples\n */\n\n// Recursive type definition for nested comment structure\nexport interface Comment {\n    id: string;\n    text: string;\n    author: string;\n    replies: Comment[];\n}\n\n// Recursive type for tree node\nexport interface TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n}\n\n/**\n * Recursive functions in TypeScript\n */\n\n// Simple factorial calculation with recursion\nexport function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}\n\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n// Recursive function to calculate the sum of all numbers in a nested array\nexport function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}\n\n// Recursive tree traversal - depth-first search\nexport function depthFirstTraversal<T>(node: TreeNode<T>, callback: (value: T) => void): void {\n    // Process current node\n    callback(node.value);\n\n    // Recursively process all children\n    for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }\n}\n\n/**\n * Recursive class implementation in TypeScript\n */\nexport class RecursiveTreeProcessor<T> {\n    private root: TreeNode<T>;\n\n    constructor(root: TreeNode<T>) {\n        this.root = root;\n    }\n\n    // Method that uses recursion\n    public findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }\n\n    // Private recursive helper method\n    private findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }\n\n    // Another recursive method that transforms the tree\n    public mapTree<U>(mapFn: (value: T) => U): TreeNode<U> {\n        return this.mapNodeRecursive(this.root, mapFn);\n    }\n\n    private mapNodeRecursive<U>(node: TreeNode<T>, mapFn: (value: T) => U): TreeNode<U> {\n        return {\n            value: mapFn(node.value),\n            children: node.children.map(child => this.mapNodeRecursive(child, mapFn))\n        };\n    }\n}\n\n/**\n * React component that demonstrates recursive rendering\n */\nexport const CommentThread: React.FC<{ comments: Comment[] }> = ({ comments }) => {\n    const renderComment = (comment: Comment) => (\n        <div key={comment.id} className=\"comment\">\n            <div className=\"comment-header\">\n                <span className=\"author\">{comment.author}</span>\n            </div>\n            <div className=\"comment-text\">{comment.text}</div>\n\n            {/* Recursive rendering of replies */}\n            {comment.replies.length > 0 && (\n                <div className=\"comment-replies\">\n                    {comment.replies.map(reply => renderComment(reply))}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"comment-thread\">\n            {comments.map(comment => renderComment(comment))}\n        </div>\n    );\n};\n\n/**\n * JavaScript examples with recursion (using JS syntax, no types)\n */\n\n// Deep object clone with recursion\nexport function deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => deepClone(item)) as unknown as T;\n    }\n\n    const clonedObj: Record<string, any> = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }\n\n    return clonedObj as T;\n}\n\n// Recursive DOM traversal example in JavaScript\nexport function traverseDOM(element: Element, callback: (el: Element) => void): void {\n    // Process current element\n    callback(element);\n\n    // Recursively process all child nodes\n    Array.from(element.childNodes).forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }\n    });\n}\n\n// Recursive promise chain\nexport function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {\n    if (index >= actions.length) {\n        return Promise.resolve();\n    }\n\n    return Promise...\n// (code truncated for brevity)",
            "childComponents": [],
            "methods": [
              {
                "name": "runRecursiveExample",
                "description": "",
                "params": [],
                "returnType": "void",
                "code": "const runRecursiveExample = () => {\n        // Calculate factorial of 5\n        const fact5 = factorial(5);\n\n        // Calculate 10th Fibonacci number\n        const fib10 = fibonacci(10);\n\n        // Sum the nested array\n        const sum = sumNestedArray(nestedArray);\n\n        // Process the tree\n        const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n        const values: string[] = [];\n        depthFirstTraversal(sampleTree, (val) => values.push(val));\n\n        setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}\n      Sum of nested array: ${sum}\n      Tree values: ${values.join(', ')}\n    `);\n    }"
              }
            ]
          },
          {
            "name": "RecursiveTreeProcessor",
            "description": "Recursive class implementation in TypeScript",
            "props": [],
            "filePath": "examples/RecursiveExamples.tsx",
            "sourceCode": "import React, { useState } from 'react';\n\n/**\n * TypeScript recursive data structure examples\n */\n\n// Recursive type definition for nested comment structure\nexport interface Comment {\n    id: string;\n    text: string;\n    author: string;\n    replies: Comment[];\n}\n\n// Recursive type for tree node\nexport interface TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n}\n\n/**\n * Recursive functions in TypeScript\n */\n\n// Simple factorial calculation with recursion\nexport function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}\n\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n// Recursive function to calculate the sum of all numbers in a nested array\nexport function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}\n\n// Recursive tree traversal - depth-first search\nexport function depthFirstTraversal<T>(node: TreeNode<T>, callback: (value: T) => void): void {\n    // Process current node\n    callback(node.value);\n\n    // Recursively process all children\n    for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }\n}\n\n/**\n * Recursive class implementation in TypeScript\n */\nexport class RecursiveTreeProcessor<T> {\n    private root: TreeNode<T>;\n\n    constructor(root: TreeNode<T>) {\n        this.root = root;\n    }\n\n    // Method that uses recursion\n    public findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }\n\n    // Private recursive helper method\n    private findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }\n\n    // Another recursive method that transforms the tree\n    public mapTree<U>(mapFn: (value: T) => U): TreeNode<U> {\n        return this.mapNodeRecursive(this.root, mapFn);\n    }\n\n    private mapNodeRecursive<U>(node: TreeNode<T>, mapFn: (value: T) => U): TreeNode<U> {\n        return {\n            value: mapFn(node.value),\n            children: node.children.map(child => this.mapNodeRecursive(child, mapFn))\n        };\n    }\n}\n\n/**\n * React component that demonstrates recursive rendering\n */\nexport const CommentThread: React.FC<{ comments: Comment[] }> = ({ comments }) => {\n    const renderComment = (comment: Comment) => (\n        <div key={comment.id} className=\"comment\">\n            <div className=\"comment-header\">\n                <span className=\"author\">{comment.author}</span>\n            </div>\n            <div className=\"comment-text\">{comment.text}</div>\n\n            {/* Recursive rendering of replies */}\n            {comment.replies.length > 0 && (\n                <div className=\"comment-replies\">\n                    {comment.replies.map(reply => renderComment(reply))}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"comment-thread\">\n            {comments.map(comment => renderComment(comment))}\n        </div>\n    );\n};\n\n/**\n * JavaScript examples with recursion (using JS syntax, no types)\n */\n\n// Deep object clone with recursion\nexport function deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => deepClone(item)) as unknown as T;\n    }\n\n    const clonedObj: Record<string, any> = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }\n\n    return clonedObj as T;\n}\n\n// Recursive DOM traversal example in JavaScript\nexport function traverseDOM(element: Element, callback: (el: Element) => void): void {\n    // Process current element\n    callback(element);\n\n    // Recursively process all child nodes\n    Array.from(element.childNodes).forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }\n    });\n}\n\n// Recursive promise chain\nexport function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {\n    if (index >= actions.length) {\n        return Promise.resolve();\n    }\n\n    return Promise...\n// (code truncated for brevity)",
            "childComponents": [],
            "methods": [
              {
                "name": "runRecursiveExample",
                "description": "",
                "params": [],
                "returnType": "void",
                "code": "const runRecursiveExample = () => {\n        // Calculate factorial of 5\n        const fact5 = factorial(5);\n\n        // Calculate 10th Fibonacci number\n        const fib10 = fibonacci(10);\n\n        // Sum the nested array\n        const sum = sumNestedArray(nestedArray);\n\n        // Process the tree\n        const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n        const values: string[] = [];\n        depthFirstTraversal(sampleTree, (val) => values.push(val));\n\n        setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}\n      Sum of nested array: ${sum}\n      Tree values: ${values.join(', ')}\n    `);\n    }"
              }
            ]
          },
          {
            "name": "CommentThread",
            "description": "React component that demonstrates recursive rendering",
            "props": [
              {
                "name": "comments",
                "type": "Comment[]",
                "required": true,
                "description": ""
              }
            ],
            "filePath": "examples/RecursiveExamples.tsx",
            "sourceCode": "import React, { useState } from 'react';\n\n/**\n * TypeScript recursive data structure examples\n */\n\n// Recursive type definition for nested comment structure\nexport interface Comment {\n    id: string;\n    text: string;\n    author: string;\n    replies: Comment[];\n}\n\n// Recursive type for tree node\nexport interface TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n}\n\n/**\n * Recursive functions in TypeScript\n */\n\n// Simple factorial calculation with recursion\nexport function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}\n\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n// Recursive function to calculate the sum of all numbers in a nested array\nexport function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}\n\n// Recursive tree traversal - depth-first search\nexport function depthFirstTraversal<T>(node: TreeNode<T>, callback: (value: T) => void): void {\n    // Process current node\n    callback(node.value);\n\n    // Recursively process all children\n    for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }\n}\n\n/**\n * Recursive class implementation in TypeScript\n */\nexport class RecursiveTreeProcessor<T> {\n    private root: TreeNode<T>;\n\n    constructor(root: TreeNode<T>) {\n        this.root = root;\n    }\n\n    // Method that uses recursion\n    public findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }\n\n    // Private recursive helper method\n    private findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }\n\n    // Another recursive method that transforms the tree\n    public mapTree<U>(mapFn: (value: T) => U): TreeNode<U> {\n        return this.mapNodeRecursive(this.root, mapFn);\n    }\n\n    private mapNodeRecursive<U>(node: TreeNode<T>, mapFn: (value: T) => U): TreeNode<U> {\n        return {\n            value: mapFn(node.value),\n            children: node.children.map(child => this.mapNodeRecursive(child, mapFn))\n        };\n    }\n}\n\n/**\n * React component that demonstrates recursive rendering\n */\nexport const CommentThread: React.FC<{ comments: Comment[] }> = ({ comments }) => {\n    const renderComment = (comment: Comment) => (\n        <div key={comment.id} className=\"comment\">\n            <div className=\"comment-header\">\n                <span className=\"author\">{comment.author}</span>\n            </div>\n            <div className=\"comment-text\">{comment.text}</div>\n\n            {/* Recursive rendering of replies */}\n            {comment.replies.length > 0 && (\n                <div className=\"comment-replies\">\n                    {comment.replies.map(reply => renderComment(reply))}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"comment-thread\">\n            {comments.map(comment => renderComment(comment))}\n        </div>\n    );\n};\n\n/**\n * JavaScript examples with recursion (using JS syntax, no types)\n */\n\n// Deep object clone with recursion\nexport function deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => deepClone(item)) as unknown as T;\n    }\n\n    const clonedObj: Record<string, any> = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }\n\n    return clonedObj as T;\n}\n\n// Recursive DOM traversal example in JavaScript\nexport function traverseDOM(element: Element, callback: (el: Element) => void): void {\n    // Process current element\n    callback(element);\n\n    // Recursively process all child nodes\n    Array.from(element.childNodes).forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }\n    });\n}\n\n// Recursive promise chain\nexport function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {\n    if (index >= actions.length) {\n        return Promise.resolve();\n    }\n\n    return Promise...\n// (code truncated for brevity)",
            "childComponents": [],
            "methods": [
              {
                "name": "runRecursiveExample",
                "description": "",
                "params": [],
                "returnType": "void",
                "code": "const runRecursiveExample = () => {\n        // Calculate factorial of 5\n        const fact5 = factorial(5);\n\n        // Calculate 10th Fibonacci number\n        const fib10 = fibonacci(10);\n\n        // Sum the nested array\n        const sum = sumNestedArray(nestedArray);\n\n        // Process the tree\n        const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n        const values: string[] = [];\n        depthFirstTraversal(sampleTree, (val) => values.push(val));\n\n        setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}\n      Sum of nested array: ${sum}\n      Tree values: ${values.join(', ')}\n    `);\n    }"
              }
            ]
          },
          {
            "name": "RecursiveExamples",
            "description": "",
            "props": [],
            "filePath": "examples/RecursiveExamples.tsx",
            "sourceCode": "import React, { useState } from 'react';\n\n/**\n * TypeScript recursive data structure examples\n */\n\n// Recursive type definition for nested comment structure\nexport interface Comment {\n    id: string;\n    text: string;\n    author: string;\n    replies: Comment[];\n}\n\n// Recursive type for tree node\nexport interface TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n}\n\n/**\n * Recursive functions in TypeScript\n */\n\n// Simple factorial calculation with recursion\nexport function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}\n\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n// Recursive function to calculate the sum of all numbers in a nested array\nexport function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}\n\n// Recursive tree traversal - depth-first search\nexport function depthFirstTraversal<T>(node: TreeNode<T>, callback: (value: T) => void): void {\n    // Process current node\n    callback(node.value);\n\n    // Recursively process all children\n    for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }\n}\n\n/**\n * Recursive class implementation in TypeScript\n */\nexport class RecursiveTreeProcessor<T> {\n    private root: TreeNode<T>;\n\n    constructor(root: TreeNode<T>) {\n        this.root = root;\n    }\n\n    // Method that uses recursion\n    public findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }\n\n    // Private recursive helper method\n    private findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }\n\n    // Another recursive method that transforms the tree\n    public mapTree<U>(mapFn: (value: T) => U): TreeNode<U> {\n        return this.mapNodeRecursive(this.root, mapFn);\n    }\n\n    private mapNodeRecursive<U>(node: TreeNode<T>, mapFn: (value: T) => U): TreeNode<U> {\n        return {\n            value: mapFn(node.value),\n            children: node.children.map(child => this.mapNodeRecursive(child, mapFn))\n        };\n    }\n}\n\n/**\n * React component that demonstrates recursive rendering\n */\nexport const CommentThread: React.FC<{ comments: Comment[] }> = ({ comments }) => {\n    const renderComment = (comment: Comment) => (\n        <div key={comment.id} className=\"comment\">\n            <div className=\"comment-header\">\n                <span className=\"author\">{comment.author}</span>\n            </div>\n            <div className=\"comment-text\">{comment.text}</div>\n\n            {/* Recursive rendering of replies */}\n            {comment.replies.length > 0 && (\n                <div className=\"comment-replies\">\n                    {comment.replies.map(reply => renderComment(reply))}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"comment-thread\">\n            {comments.map(comment => renderComment(comment))}\n        </div>\n    );\n};\n\n/**\n * JavaScript examples with recursion (using JS syntax, no types)\n */\n\n// Deep object clone with recursion\nexport function deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => deepClone(item)) as unknown as T;\n    }\n\n    const clonedObj: Record<string, any> = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }\n\n    return clonedObj as T;\n}\n\n// Recursive DOM traversal example in JavaScript\nexport function traverseDOM(element: Element, callback: (el: Element) => void): void {\n    // Process current element\n    callback(element);\n\n    // Recursively process all child nodes\n    Array.from(element.childNodes).forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }\n    });\n}\n\n// Recursive promise chain\nexport function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {\n    if (index >= actions.length) {\n        return Promise.resolve();\n    }\n\n    return Promise...\n// (code truncated for brevity)",
            "childComponents": [],
            "methods": [
              {
                "name": "runRecursiveExample",
                "description": "",
                "params": [],
                "returnType": "void",
                "code": "const runRecursiveExample = () => {\n        // Calculate factorial of 5\n        const fact5 = factorial(5);\n\n        // Calculate 10th Fibonacci number\n        const fib10 = fibonacci(10);\n\n        // Sum the nested array\n        const sum = sumNestedArray(nestedArray);\n\n        // Process the tree\n        const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n        const values: string[] = [];\n        depthFirstTraversal(sampleTree, (val) => values.push(val));\n\n        setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}\n      Sum of nested array: ${sum}\n      Tree values: ${values.join(', ')}\n    `);\n    }"
              }
            ]
          }
        ],
        "methods": [
          {
            "name": "handleTodoAdded",
            "description": "Handler for TodoAdded event",
            "params": [
              {
                "name": "todo",
                "type": "TodoItem",
                "description": ""
              }
            ],
            "returnType": "void",
            "code": "const handleTodoAdded = (todo: TodoItem) => {\n        console.log('New todo added:', todo);\n    }"
          }
        ]
      },
      {
        "name": "UseRecursiveExamples",
        "description": "This file demonstrates how to use the recursive examples in a test environment",
        "props": [],
        "filePath": "examples/UseRecursiveExamples.tsx",
        "sourceCode": "import React from 'react';\nimport RecursiveExamples, {\n    factorial,\n    fibonacci,\n    sumNestedArray,\n    TreeNode,\n    Comment,\n    CommentThread,\n    deepClone,\n    RecursiveTreeProcessor,\n    depthFirstTraversal\n} from './RecursiveExamples';\n\n/**\n * This file demonstrates how to use the recursive examples in a test environment\n */\nconst UseRecursiveExamples: React.FC = () => {\n    // Section 1: Test recursive functions\n    console.log('Testing recursive functions:');\n    console.log(`Factorial of 5: ${factorial(5)}`);\n    console.log(`Fibonacci of 10: ${fibonacci(10)}`);\n\n    const nestedArray = [1, 2, [3, 4, [5, 6]], 7, [8, [9, 10]]];\n    console.log(`Sum of nested array: ${sumNestedArray(nestedArray)}`);\n\n    // Section 2: Test recursive tree operations\n    console.log('\\nTesting recursive tree operations:');\n\n    // Create a sample tree\n    const sampleTree: TreeNode<string> = {\n        value: 'root',\n        children: [\n            {\n                value: 'child1',\n                children: [\n                    { value: 'grandchild1', children: [] },\n                    { value: 'grandchild2', children: [] }\n                ]\n            },\n            {\n                value: 'child2',\n                children: [\n                    { value: 'grandchild3', children: [] }\n                ]\n            }\n        ]\n    };\n\n    // Use the recursive tree processor\n    const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n\n    // Find a node by value\n    const foundNode = treeProcessor.findNodeByValue('grandchild2');\n    console.log('Found node:', foundNode ? foundNode.value : 'Not found');\n\n    // Map the tree - convert all string values to uppercase\n    const uppercaseTree = treeProcessor.mapTree(value => value.toUpperCase());\n    console.log('Tree with uppercase values:');\n    depthFirstTraversal(uppercaseTree, value => console.log(value));\n\n    // Section 3: Test deep clone recursive function\n    console.log('\\nTesting deep clone:');\n    const originalObj = {\n        name: 'original',\n        nested: {\n            count: 42,\n            items: [1, 2, 3]\n        }\n    };\n\n    const clonedObj = deepClone(originalObj);\n\n    // Modify the clone to show they're separate\n    clonedObj.name = 'clone';\n    clonedObj.nested.count = 100;\n    clonedObj.nested.items.push(4);\n\n    console.log('Original after clone modification:', originalObj);\n    console.log('Cloned and modified object:', clonedObj);\n\n    // Section 4: Test recursive promise chain\n    const testPromiseChain = async () => {\n        console.log('\\nTesting recursive promise chain:');\n\n        const actions = [\n            () => new Promise<void>(resolve => {\n                console.log('Step 1');\n                resolve();\n            }),\n            () => new Promise<void>(resolve => {\n                console.log('Step 2');\n                resolve();\n            }),\n            () => new Promise<void>(resolve => {\n                console.log('Step 3');\n                resolve();\n            })\n        ];\n\n        await import('./RecursiveExamples').then(module => {\n            return module.recursivePromiseChain(actions);\n        });\n\n        console.log('All steps completed');\n    };\n\n    // Call the async function\n    testPromiseChain().catch(err => console.error('Error in promise chain:', err));\n\n    // Section 5: Create a sample comment thread for the UI component\n    const sampleComments: Comment[] = [\n        {\n            id: '1',\n            text: 'This is a top-level comment',\n            author: 'User1',\n            replies: [\n                {\n                    id: '2',\n                    text: 'This is a reply to the top comment',\n                    author: 'User2',\n                    replies: [\n                        {\n                            id: '3',\n                            text: 'This is a nested reply',\n                            author: 'User3',\n                            replies: [\n                                {\n                                    id: '4',\n                                    text: 'This is a deeply nested reply',\n                                    author: 'User4',\n                                    replies: []\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    id: '5',\n                    text: 'This is another direct reply to the top comment',\n                    author: 'User5',\n                    replies: []\n                }\n            ]\n        },\n        {\n            id: '6',\n            text: 'This is a second top-level comment',\n            author: 'User6',\n            replies: []\n        }\n    ];\n\n    return (\n        <div className=\"recursive-examples-usage\">\n            <h1>Recursive Examples Usage</h1>\n\n            <section>\n                <h2>Full Recursive Examples Component</h2>\n                <RecursiveExamples />\n            </section>\n\n      ...\n// (code truncated for brevity)",
        "childComponents": []
      },
      {
        "name": "fibonacci",
        "description": "Fibonacci number calculator using recursion with memoization",
        "props": [],
        "filePath": "examples/Fibonacci.tsx",
        "sourceCode": "import React from 'react';\n\n/**\n * Fibonacci number calculator using recursion with memoization\n *\n * @param n The position in fibonacci sequence to calculate\n * @param memo Optional memoization object to improve performance\n * @returns The fibonacci number at position n\n */\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    // Base cases\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    // Recursive case with memoization\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n/**\n * Component that demonstrates the fibonacci sequence calculation\n */\nconst FibonacciExample: React.FC = () => {\n    // Calculate first 10 fibonacci numbers\n    const fibNumbers = Array.from({ length: 10 }, (_, i) => fibonacci(i));\n\n    return (\n        <div className=\"fibonacci-example\">\n            <h2>Fibonacci Sequence</h2>\n            <p>The fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones.</p>\n\n            <h3>First 10 Fibonacci Numbers:</h3>\n            <ul>\n                {fibNumbers.map((num, index) => (\n                    <li key={index}>\n                        F({index}) = {num}\n                    </li>\n                ))}\n            </ul>\n\n            <h3>Implementation:</h3>\n            <pre>\n                {`\n/**\n * Fibonacci number calculator using recursion with memoization\n */\nfunction fibonacci(n: number, memo: Record<number, number> = {}): number {\n    // Base cases\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    // Recursive case with memoization\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                `}\n            </pre>\n        </div>\n    );\n};\n\nexport default FibonacciExample;\n",
        "childComponents": []
      },
      {
        "name": "Fibonacci",
        "description": "Component that demonstrates the fibonacci sequence calculation",
        "props": [],
        "filePath": "examples/Fibonacci.tsx",
        "sourceCode": "import React from 'react';\n\n/**\n * Fibonacci number calculator using recursion with memoization\n *\n * @param n The position in fibonacci sequence to calculate\n * @param memo Optional memoization object to improve performance\n * @returns The fibonacci number at position n\n */\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    // Base cases\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    // Recursive case with memoization\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n/**\n * Component that demonstrates the fibonacci sequence calculation\n */\nconst FibonacciExample: React.FC = () => {\n    // Calculate first 10 fibonacci numbers\n    const fibNumbers = Array.from({ length: 10 }, (_, i) => fibonacci(i));\n\n    return (\n        <div className=\"fibonacci-example\">\n            <h2>Fibonacci Sequence</h2>\n            <p>The fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones.</p>\n\n            <h3>First 10 Fibonacci Numbers:</h3>\n            <ul>\n                {fibNumbers.map((num, index) => (\n                    <li key={index}>\n                        F({index}) = {num}\n                    </li>\n                ))}\n            </ul>\n\n            <h3>Implementation:</h3>\n            <pre>\n                {`\n/**\n * Fibonacci number calculator using recursion with memoization\n */\nfunction fibonacci(n: number, memo: Record<number, number> = {}): number {\n    // Base cases\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    // Recursive case with memoization\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                `}\n            </pre>\n        </div>\n    );\n};\n\nexport default FibonacciExample;\n",
        "childComponents": []
      }
    ]
  },
  {
    "name": "findPatient",
    "description": "Recursive function to find a patient in a hospital hierarchy (floors, wings, rooms)",
    "props": [],
    "filePath": "examples/DocumentAll.tsx",
    "sourceCode": "import React from 'react';\nimport App from './App';\nimport Todo, { TodoItem as TodoItemType } from './Todo';\nimport TodoItem from './TodoItem';\nimport RecursiveExamples, {\n    factorial,\n    fibonacci as recursiveExamplesFibonacci,\n    sumNestedArray,\n    depthFirstTraversal,\n    RecursiveTreeProcessor,\n    CommentThread,\n    deepClone,\n    traverseDOM,\n    recursivePromiseChain,\n    Comment,\n    TreeNode\n} from './RecursiveExamples';\nimport UseRecursiveExamples from './UseRecursiveExamples';\nimport FibonacciExample, { fibonacci } from './Fibonacci';\n\n/**\n * This component brings together all the components, functions and examples\n * for documentation generation purposes.\n */\nconst DocumentAll: React.FC = () => {\n    // Create demo data for examples\n    const demoTree: TreeNode<string> = {\n        value: 'root',\n        children: [{ value: 'child', children: [] }]\n    };\n\n    const demoComments: Comment[] = [\n        { id: '1', text: 'Example comment', author: 'User', replies: [] }\n    ];\n\n    // This component is never actually rendered, it just exists to document everything\n    return (\n        <div>\n            <h1>Documentation Components</h1>\n\n            {/* Standard App Components */}\n            <App title=\"Example App\" showRecursiveExamples={true} />\n            <Todo\n                initialTodos={[{ id: '1', text: 'Test Todo', completed: false }]}\n                onTodoAdded={(todo) => console.log(todo)}\n                title=\"Example Todos\"\n            />\n            <TodoItem\n                todo={{ id: '1', text: 'Test Todo', completed: false }}\n                onToggle={() => { }}\n                onDelete={() => { }}\n            />\n\n            {/* Recursive Examples */}\n            <RecursiveExamples />\n            <UseRecursiveExamples />\n            <CommentThread comments={demoComments} />\n            <FibonacciExample />\n\n            {/* These would normally be hidden, but included for documentation */}\n            <div style={{ display: 'none' }}>\n                <h2>Recursive Functions (TypeScript)</h2>\n                <p>{`factorial(5) = ${factorial(5)}`}</p>\n\n                {/* Make sure fibonacci is properly documented with explicit implementation */}\n                <div id=\"fibonacci-example\">\n                    <h3>Fibonacci Function</h3>\n                    <p>{`Imported fibonacci(10) = ${fibonacci(10)}`}</p>\n                    <p>{`RecursiveExamples fibonacci(10) = ${recursiveExamplesFibonacci(10)}`}</p>\n                    <pre>\n                        {`\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                        `}\n                    </pre>\n                </div>\n\n                <p>{`sumNestedArray([1, [2, 3]]) = ${sumNestedArray([1, [2, 3]])}`}</p>\n\n                <h2>Hospital Test JavaScript</h2>\n                <div id=\"hospital-examples\">\n                    {(() => {\n                        // Sample patient data\n                        const patient = {\n                            id: 'P1001',\n                            name: 'John Doe',\n                            roomCharge: 500,\n                            procedures: [\n                                { name: 'X-Ray', cost: 250 },\n                                { name: 'Blood Test', cost: 100 }\n                            ],\n                            medications: [\n                                { name: 'Antibiotic', cost: 75 },\n                                { name: 'Pain Reliever', cost: 25 }\n                            ]\n                        };\n\n                        // Sample hospital hierarchy\n                        const hospital = {\n                            type: 'hospital',\n                            name: 'General Hospital',\n                            children: [\n                                {\n                                    type: 'floor',\n                                    name: 'Floor 1',\n                                    children: [\n                                        {\n                                            type: 'room',\n                                            name: 'Room 101',\n                                            children: [\n                                                { type: 'patient', id: 'P1001', name: 'John Doe' }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        };\n\n                        // Sample org chart data\n                        const orgChart = {\n                            name: 'Dr. Smith',\n                            role: 'Chief of Medicine',\n                            subordinates: [\n                                {\n    ...\n// (code truncated for brevity)",
    "childComponents": []
  },
  {
    "name": "buildHospitalOrgChart",
    "description": "Recursively build a hospital organizational chart",
    "props": [],
    "filePath": "examples/DocumentAll.tsx",
    "sourceCode": "import React from 'react';\nimport App from './App';\nimport Todo, { TodoItem as TodoItemType } from './Todo';\nimport TodoItem from './TodoItem';\nimport RecursiveExamples, {\n    factorial,\n    fibonacci as recursiveExamplesFibonacci,\n    sumNestedArray,\n    depthFirstTraversal,\n    RecursiveTreeProcessor,\n    CommentThread,\n    deepClone,\n    traverseDOM,\n    recursivePromiseChain,\n    Comment,\n    TreeNode\n} from './RecursiveExamples';\nimport UseRecursiveExamples from './UseRecursiveExamples';\nimport FibonacciExample, { fibonacci } from './Fibonacci';\n\n/**\n * This component brings together all the components, functions and examples\n * for documentation generation purposes.\n */\nconst DocumentAll: React.FC = () => {\n    // Create demo data for examples\n    const demoTree: TreeNode<string> = {\n        value: 'root',\n        children: [{ value: 'child', children: [] }]\n    };\n\n    const demoComments: Comment[] = [\n        { id: '1', text: 'Example comment', author: 'User', replies: [] }\n    ];\n\n    // This component is never actually rendered, it just exists to document everything\n    return (\n        <div>\n            <h1>Documentation Components</h1>\n\n            {/* Standard App Components */}\n            <App title=\"Example App\" showRecursiveExamples={true} />\n            <Todo\n                initialTodos={[{ id: '1', text: 'Test Todo', completed: false }]}\n                onTodoAdded={(todo) => console.log(todo)}\n                title=\"Example Todos\"\n            />\n            <TodoItem\n                todo={{ id: '1', text: 'Test Todo', completed: false }}\n                onToggle={() => { }}\n                onDelete={() => { }}\n            />\n\n            {/* Recursive Examples */}\n            <RecursiveExamples />\n            <UseRecursiveExamples />\n            <CommentThread comments={demoComments} />\n            <FibonacciExample />\n\n            {/* These would normally be hidden, but included for documentation */}\n            <div style={{ display: 'none' }}>\n                <h2>Recursive Functions (TypeScript)</h2>\n                <p>{`factorial(5) = ${factorial(5)}`}</p>\n\n                {/* Make sure fibonacci is properly documented with explicit implementation */}\n                <div id=\"fibonacci-example\">\n                    <h3>Fibonacci Function</h3>\n                    <p>{`Imported fibonacci(10) = ${fibonacci(10)}`}</p>\n                    <p>{`RecursiveExamples fibonacci(10) = ${recursiveExamplesFibonacci(10)}`}</p>\n                    <pre>\n                        {`\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                        `}\n                    </pre>\n                </div>\n\n                <p>{`sumNestedArray([1, [2, 3]]) = ${sumNestedArray([1, [2, 3]])}`}</p>\n\n                <h2>Hospital Test JavaScript</h2>\n                <div id=\"hospital-examples\">\n                    {(() => {\n                        // Sample patient data\n                        const patient = {\n                            id: 'P1001',\n                            name: 'John Doe',\n                            roomCharge: 500,\n                            procedures: [\n                                { name: 'X-Ray', cost: 250 },\n                                { name: 'Blood Test', cost: 100 }\n                            ],\n                            medications: [\n                                { name: 'Antibiotic', cost: 75 },\n                                { name: 'Pain Reliever', cost: 25 }\n                            ]\n                        };\n\n                        // Sample hospital hierarchy\n                        const hospital = {\n                            type: 'hospital',\n                            name: 'General Hospital',\n                            children: [\n                                {\n                                    type: 'floor',\n                                    name: 'Floor 1',\n                                    children: [\n                                        {\n                                            type: 'room',\n                                            name: 'Room 101',\n                                            children: [\n                                                { type: 'patient', id: 'P1001', name: 'John Doe' }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        };\n\n                        // Sample org chart data\n                        const orgChart = {\n                            name: 'Dr. Smith',\n                            role: 'Chief of Medicine',\n                            subordinates: [\n                                {\n    ...\n// (code truncated for brevity)",
    "childComponents": []
  },
  {
    "name": "DocumentAll",
    "description": "This component brings together all the components, functions and examples\nfor documentation generation purposes.",
    "props": [],
    "filePath": "examples/DocumentAll.tsx",
    "sourceCode": "import React from 'react';\nimport App from './App';\nimport Todo, { TodoItem as TodoItemType } from './Todo';\nimport TodoItem from './TodoItem';\nimport RecursiveExamples, {\n    factorial,\n    fibonacci as recursiveExamplesFibonacci,\n    sumNestedArray,\n    depthFirstTraversal,\n    RecursiveTreeProcessor,\n    CommentThread,\n    deepClone,\n    traverseDOM,\n    recursivePromiseChain,\n    Comment,\n    TreeNode\n} from './RecursiveExamples';\nimport UseRecursiveExamples from './UseRecursiveExamples';\nimport FibonacciExample, { fibonacci } from './Fibonacci';\n\n/**\n * This component brings together all the components, functions and examples\n * for documentation generation purposes.\n */\nconst DocumentAll: React.FC = () => {\n    // Create demo data for examples\n    const demoTree: TreeNode<string> = {\n        value: 'root',\n        children: [{ value: 'child', children: [] }]\n    };\n\n    const demoComments: Comment[] = [\n        { id: '1', text: 'Example comment', author: 'User', replies: [] }\n    ];\n\n    // This component is never actually rendered, it just exists to document everything\n    return (\n        <div>\n            <h1>Documentation Components</h1>\n\n            {/* Standard App Components */}\n            <App title=\"Example App\" showRecursiveExamples={true} />\n            <Todo\n                initialTodos={[{ id: '1', text: 'Test Todo', completed: false }]}\n                onTodoAdded={(todo) => console.log(todo)}\n                title=\"Example Todos\"\n            />\n            <TodoItem\n                todo={{ id: '1', text: 'Test Todo', completed: false }}\n                onToggle={() => { }}\n                onDelete={() => { }}\n            />\n\n            {/* Recursive Examples */}\n            <RecursiveExamples />\n            <UseRecursiveExamples />\n            <CommentThread comments={demoComments} />\n            <FibonacciExample />\n\n            {/* These would normally be hidden, but included for documentation */}\n            <div style={{ display: 'none' }}>\n                <h2>Recursive Functions (TypeScript)</h2>\n                <p>{`factorial(5) = ${factorial(5)}`}</p>\n\n                {/* Make sure fibonacci is properly documented with explicit implementation */}\n                <div id=\"fibonacci-example\">\n                    <h3>Fibonacci Function</h3>\n                    <p>{`Imported fibonacci(10) = ${fibonacci(10)}`}</p>\n                    <p>{`RecursiveExamples fibonacci(10) = ${recursiveExamplesFibonacci(10)}`}</p>\n                    <pre>\n                        {`\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                        `}\n                    </pre>\n                </div>\n\n                <p>{`sumNestedArray([1, [2, 3]]) = ${sumNestedArray([1, [2, 3]])}`}</p>\n\n                <h2>Hospital Test JavaScript</h2>\n                <div id=\"hospital-examples\">\n                    {(() => {\n                        // Sample patient data\n                        const patient = {\n                            id: 'P1001',\n                            name: 'John Doe',\n                            roomCharge: 500,\n                            procedures: [\n                                { name: 'X-Ray', cost: 250 },\n                                { name: 'Blood Test', cost: 100 }\n                            ],\n                            medications: [\n                                { name: 'Antibiotic', cost: 75 },\n                                { name: 'Pain Reliever', cost: 25 }\n                            ]\n                        };\n\n                        // Sample hospital hierarchy\n                        const hospital = {\n                            type: 'hospital',\n                            name: 'General Hospital',\n                            children: [\n                                {\n                                    type: 'floor',\n                                    name: 'Floor 1',\n                                    children: [\n                                        {\n                                            type: 'room',\n                                            name: 'Room 101',\n                                            children: [\n                                                { type: 'patient', id: 'P1001', name: 'John Doe' }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        };\n\n                        // Sample org chart data\n                        const orgChart = {\n                            name: 'Dr. Smith',\n                            role: 'Chief of Medicine',\n                            subordinates: [\n                                {\n    ...\n// (code truncated for brevity)",
    "childComponents": []
  }
];