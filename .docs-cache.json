{
  "useTheme:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/utils/theme.ts": {
    "componentHash": "457e1ee5ebdedf7a5527ae0848c2c74a",
    "description": "A React component that renders a useTheme element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.555Z"
  },
  "applyTheme:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/utils/theme.ts": {
    "componentHash": "258ea9b177a48d7bbb22fc9048ce075d",
    "description": "A React component that renders a applyTheme element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.558Z"
  },
  "setCSSVariable:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/utils/theme.ts": {
    "componentHash": "d5b685a2261da772630c535e27fe33f8",
    "description": "A React component that renders a setCSSVariable element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.559Z"
  },
  "Logger:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/utils/logger.ts": {
    "componentHash": "c647e294f62ad9b340f48d3e9d33209d",
    "description": "A React component that renders a Logger element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.561Z"
  },
  "logAction:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/utils/logger.ts": {
    "componentHash": "e9daa8cf1300305e9fc2bee52244c519",
    "description": "A React component that renders a logAction element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.562Z"
  },
  "logError:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/utils/logger.ts": {
    "componentHash": "e5757e6a6eb1338ab30a78e16bbc2c44",
    "description": "A React component that renders a logError element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.564Z"
  },
  "logDebug:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/utils/logger.ts": {
    "componentHash": "bba19889b2b95a90d5c56f9533d559d0",
    "description": "A React component that renders a logDebug element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.565Z"
  },
  "ApiService:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/services/api.ts": {
    "componentHash": "9048888f26d7b094b0a221929a872734",
    "description": "A React component that renders a ApiService element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.566Z"
  },
  "fetchUser:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/services/api.ts": {
    "componentHash": "36482da64e1f79d65578853f263597fa",
    "description": "A React component that renders a fetchUser element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.567Z"
  },
  "createUserObject:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/services/api.ts": {
    "componentHash": "67425096e7b42a1006327a53c4c226de",
    "description": "A React component that renders a createUserObject element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.569Z"
  },
  "validateEmail:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/services/api.ts": {
    "componentHash": "8947604f0b2a32ee47f56961061d457c",
    "description": "A React component that renders a validateEmail element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.570Z"
  },
  "updateUserProfile:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/services/api.ts": {
    "componentHash": "a8385621382af31aebdba24bca3276d1",
    "description": "A React component that renders a updateUserProfile element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.571Z"
  },
  "Card:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/components/Card.tsx": {
    "componentHash": "4a5f0ea9fda589a50b7911d2a2d57c14",
    "description": "A React component that renders a Card element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.572Z"
  },
  "Button:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/components/Button.tsx": {
    "componentHash": "a9a0ae5ede35d757b4c592d8ebd6ea0a",
    "description": "A React component that renders a Button element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.574Z"
  },
  "handleClick:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/components/Button.tsx": {
    "componentHash": "970e757510575f193d86b26e072855e9",
    "description": "A React component that renders a handleClick element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.575Z"
  },
  "getButtonClasses:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/components/Button.tsx": {
    "componentHash": "fa8a4ecee86a6ddd1d85afefe618cf4f",
    "description": "A React component that renders a getButtonClasses element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.576Z"
  },
  "renderContent:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/components/Button.tsx": {
    "componentHash": "7ea5ce929d40c9b4e30c56fbb3e54a06",
    "description": "A React component that renders a renderContent element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.577Z"
  },
  "wrapInSpan:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/components/Button.tsx": {
    "componentHash": "d9fe3d3b9bef06854516b56418c090ff",
    "description": "A React component that renders a wrapInSpan element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.578Z"
  },
  "addIcon:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-project/src/components/Button.tsx": {
    "componentHash": "2a94a409440a1cafaa0329d1b93d2afe",
    "description": "A React component that renders a addIcon element.",
    "props": {},
    "lastUpdated": "2025-05-22T21:48:54.579Z"
  },
  "diffLines:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/types/diff.d.ts": {
    "componentHash": "f57566e338bea809203eb043f6b799c2",
    "description": "The `diffLines` component visually highlights the differences between two text strings, providing a clear side-by-side comparison for developers.",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:02.404Z"
  },
  "diffWords:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/types/diff.d.ts": {
    "componentHash": "b40646057a2f19abb81057dee52abf1a",
    "description": "Here are a few options for a concise, one-sentence description of the `diffWords` component, suitable for a developer explaining its function:\n\n**Option 1 (Most General):**\n\n\"The `diffWords` component is responsible for comparing and highlighting the differences between two input strings.\"\n\n**Option 2 (Slightly More Specific):**\n\n\"This component analyzes two strings and visually represents the words that differ between them.\"\n\n**Option 3 (If it has a visual element):**\n\n\"The `diffWords` component displays a visual representation of the words that are different between two provided text inputs.\"\n\n---\n\nTo give you the *best* possible description, I'd need to know more about what the component *actually does* within the `diff.d.ts` file. But these options provide a solid starting point.",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:05.494Z"
  },
  "diffChars:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/types/diff.d.ts": {
    "componentHash": "eb851b2195f9de3a77fb3e502dbeac6b",
    "description": "Okay, here's a concise, one-sentence description of the `diffChars` component, written from a developer's perspective, based on the provided information:\n\n“The `diffChars` component visually highlights the differences between two strings, providing a character-by-character comparison for debugging or display.” \n\n---\n\nWould you like me to generate a description for a different component, or perhaps refine this one based on specific details you can provide (e.g., what kind of differences it highlights, its visual style, etc.)?",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:07.560Z"
  },
  "ThemeProvider:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/theme-provider.tsx": {
    "componentHash": "6907679e9874743cd2e1031465e9090f",
    "description": "Here are a few concise one-sentence descriptions for the `ThemeProvider` component, suitable for a developer explaining its function:\n\n**Option 1 (Most Concise):**\n\n\"The `ThemeProvider` component provides a consistent theme context to all its descendant components, enabling dynamic styling based on the defined theme.\"\n\n**Option 2 (Slightly more detailed):**\n\n\"This `ThemeProvider` component manages and distributes a global theme object, allowing child components to access and utilize theme-related styling properties.\"\n\n**Option 3 (Focus on React Context):**\n\n\"The `ThemeProvider` utilizes React Context to centrally manage the application's theme, simplifying styling and theming across the component tree.\"\n\nI’ve tried to capture the core functionality clearly and accurately.  Let me know if you'd like me to adjust the wording based on a specific emphasis.",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:10.644Z"
  },
  "SimilarityList:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx": {
    "componentHash": "2041be50a3a4b3f13090944b1e5a8bba",
    "description": "Here are a few concise, one-sentence descriptions of the `SimilarityList` component from a developer’s perspective, considering the provided information:\n\n**Option 1 (Most General):**\n\n\"The `SimilarityList` component renders a list of items ranked by similarity, likely based on user input or data analysis.\"\n\n**Option 2 (Slightly more specific, assuming ranking):**\n\n\"This `SimilarityList` component displays a ranked list of items, presenting the most similar results to the user.\"\n\n**Option 3 (If it's displaying similarity scores):**\n\n\"The `SimilarityList` component visualizes a list of items, showcasing their similarity scores to facilitate comparison.\"\n\n**To help me refine the description further, could you tell me:**\n\n*   What kind of data is the component displaying? (e.g., text snippets, images, products?)\n*   How are items ranked for similarity? (e.g., based on cosine similarity, exact matches, etc.)",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:14.239Z"
  },
  "generateSyntheticSimilarityData:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx": {
    "componentHash": "c3c03a9fb9d9c51162b42aa5ac23fbb3",
    "description": "```markdown\n## generateSyntheticSimilarityData Component\n\nThe `generateSyntheticSimilarityData` component automatically adds synthetic similarity warnings to a list of React components.  It creates dummy similarity warnings, simulating potential code duplication by comparing each component to others in the `components` array, generating random similarity scores between 70% and 95%, and adding details like `filePath` and example code snippets. This component is typically used during development to proactively identify potential code duplication and improve code maintainability within a project.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:17.335Z"
  },
  "fetchComponents:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx": {
    "componentHash": "2e02f2d8dc9b3d72c44d89f750774743",
    "description": "Okay, here's a concise, one-sentence description of the `fetchComponents` React component, written from a developer's perspective, based on the provided information:\n\n\"The `fetchComponents` component is responsible for retrieving and loading a list of components from a data source.\" \n\n---\n\nWould you like me to refine this description further, perhaps adding a detail based on a specific functionality or use case (if you can provide more context about what the component *does* with the fetched components)?",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:16.599Z"
  },
  "processSimilarityWarnings:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx": {
    "componentHash": "afd102cc84b91d263813e6595a552487",
    "description": "Okay, here's a concise, one-sentence description of the `processSimilarityWarnings` component, written from a developer's perspective, based on the provided information:\n\n“The `processSimilarityWarnings` component displays a list of similarity warnings derived from processing text content.” \n\nWould you like me to refine this description further, or perhaps generate one based on different prop details (if you provide them)?",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:18.002Z"
  },
  "fetchComponentCode:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx": {
    "componentHash": "2f57127387f312cb8a62fd999dd2e3b3",
    "description": "```markdown\n## fetchComponentCode Component\n\nThe `fetchComponentCode` component asynchronously retrieves the source code for a given component from a remote data source (`/docs-data/${component.slug}.json`).  It prioritizes fetching method-specific code if a `methodName` is provided, falling back to the full component code or a default error message if the code isn't available. This component is typically used within a documentation system or code explorer to dynamically display the source code of a React component based on its identifier.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:19.685Z"
  },
  "handleCompare:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx": {
    "componentHash": "afa29e10fca8a0a48cef59c269688dea",
    "description": "Okay, here's a concise one-sentence description of the `handleCompare` component, written from a developer's perspective, based on the information you provided:\n\n“The `handleCompare` component facilitates the comparison of items within the similarity list, likely triggering a visual or functional action related to highlighting or detailing similarities.” \n\n**Note:** Since you didn't provide the specific props, I've made a general assumption about its function based on the name and file location (similarity-list).  If you provide the props, I can refine the description further.",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:20.430Z"
  },
  "SimilarComponentsSection:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similar-components-section.tsx": {
    "componentHash": "07a67fec3e0645bb398045f6fc8c329b",
    "description": "Okay, here's a concise one-sentence description of the `SimilarComponentsSection` React component, written from a developer's perspective, based on the provided information:\n\n“This component displays a section highlighting visually similar React components, likely for exploration or comparison purposes.” \n\n---\n\n**Note:**  I've created this description assuming the component's core function is to present related components.  If the component has a more specific purpose (e.g., suggesting similar components based on props), the description could be adjusted accordingly.",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:23.643Z"
  },
  "getMockCode:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similar-components-section.tsx": {
    "componentHash": "86d380c9825a8a8e8933093f044158f3",
    "description": "```markdown\n## getMockCode Component\n\nThe `getMockCode` component generates a valid React code snippet for a given component name, returning a string containing a basic React functional component with a title and child content.  This component is primarily used for quickly generating example code snippets within documentation or for demonstration purposes, offering a convenient way to present a functional component structure.  Typically, it's utilized in documentation tools or educational materials to provide a ready-to-use React component template for developers to build upon.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:24.172Z"
  },
  "handleCompare:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similar-components-section.tsx": {
    "componentHash": "890ed5690ca2320b4ad7b94dc2db5543",
    "description": "Okay, here are a few concise, one-sentence descriptions of the `handleCompare` component, suitable for a developer explaining its function, based on the provided information:\n\n**Option 1 (Most General):**\n\n\"The `handleCompare` component facilitates the comparison of similar components within the application.\"\n\n**Option 2 (Slightly More Specific):**\n\n\"This component is responsible for enabling the user to visually compare different component implementations within the application's similar components section.\"\n\n**Option 3 (Shortest):**\n\n\"The `handleCompare` component provides a mechanism for comparing related components.\"\n\n---\n\nTo help me refine the description even further, could you tell me:\n\n*   **What does the component *do* specifically when a comparison is triggered?** (e.g., highlights differences, displays a side-by-side view, etc.)",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:29.729Z"
  },
  "Sidebar:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/sidebar.tsx": {
    "componentHash": "a92845bfb7e466d4cd04bd529c027a31",
    "description": "Okay, here's a concise, one-sentence description of the `Sidebar` React component, written from a developer's perspective:\n\n\"The `Sidebar` component renders a persistent navigation menu for the application, allowing users to browse and access different sections.\"",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:30.682Z"
  },
  "SidebarWrapper:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/sidebar-wrapper.tsx": {
    "componentHash": "6ee07479963932c432354e69a2d076c0",
    "description": "Okay, here's a concise, one-sentence description of the `SidebarWrapper` component, from a developer's perspective, based on the provided information:\n\n“The `SidebarWrapper` component encapsulates and manages the presentation of the sidebar content within the application.” \n\n---\n\nWould you like me to generate a description based on different props or a specific focus for the description?",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:32.009Z"
  },
  "Search:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/search.tsx": {
    "componentHash": "a83a4127e49a022fbece10f328678afb",
    "description": "Here are a few concise, one-sentence descriptions of the `Search` React component, from a developer's perspective, based on the information provided:\n\n**Option 1 (Most General):**\n\n\"The `Search` component facilitates user input for querying data within the application.\"\n\n**Option 2 (Slightly more specific):**\n\n\"This `Search` component provides a search bar for users to input search terms and initiate data retrieval.\"\n\n**Option 3 (Focusing on the file path):**\n\n\"Located in `/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/search.tsx`, the `Search` component handles user-entered search queries.\" \n\n---\n\nTo help me tailor the description even further, could you tell me:\n\n*   **What kind of data is the search intended to find?** (e.g., documents, products, users)\n*   **What is the overall purpose of this component within the application?**",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:35.559Z"
  },
  "ModeToggle:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/mode-toggle.tsx": {
    "componentHash": "184c9465a5192d5d7b9cd4f33f9ef9c1",
    "description": "The `ModeToggle` component dynamically switches between light and dark mode themes based on user interaction, allowing for a customizable visual experience within the application.",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:36.116Z"
  },
  "toggleTheme:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/mode-toggle.tsx": {
    "componentHash": "aeaa50b49a9b7c41bb3436401859ea00",
    "description": "```markdown\n## toggleTheme Component\n\nThe `toggleTheme` component provides a simple mechanism to toggle between a light and dark theme for an application. It utilizes a `setTheme` function (assumed to be externally provided) to switch the currently active theme between 'light' and 'dark', offering a convenient way to dynamically adjust the user interface's appearance. This component is typically used in conjunction with a theme management system, allowing users to easily switch between light and dark modes based on preference or environmental conditions.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:26.679Z"
  },
  "Header:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/header.tsx": {
    "componentHash": "a50868323ea8e8327f98d2ddec297b9c",
    "description": "Okay, here's a concise, one-sentence description of the `Header` React component, written from a developer's perspective:\n\n\"The `Header` component renders a persistent navigation bar at the top of the application, providing key links and branding elements.\" \n\n**Note:** Since you didn't provide the props, I've focused on the general function of a header component. If you provide the props, I can refine the description further.",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:38.527Z"
  },
  "ComponentStats:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/component-stats.tsx": {
    "componentHash": "e95b1fb77d7737db64e7384eebea4af2",
    "description": "Please provide the props for the `ComponentStats` component. I need to know what data the component receives to generate an accurate, developer-focused description.  For example, tell me what props it takes (e.g., `data`, `label`, `value`, etc.) and what they represent.",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:39.612Z"
  },
  "fetchComponents:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/component-stats.tsx": {
    "componentHash": "7b3a05557773c89d6f79dd53d70453f8",
    "description": "Okay, here's a concise one-sentence description of the `fetchComponents` React component, written from a developer’s perspective, based on the provided information:\n\n\"The `fetchComponents` component retrieves component data (likely for stats or analysis) from an external source via an API call.\" \n\n**Note:** I've made assumptions about the component's purpose based on the filename \"component-stats.tsx\" and the typical use of `fetchComponents` in React projects.  If you can provide more details about what the component *does* with the data, I can refine the description further.",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:41.690Z"
  },
  "ComponentClient:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/component-client.tsx": {
    "componentHash": "6c534bc08ec4847228773aa391a88863",
    "description": "Please provide the props for the `ComponentClient` component. I need the prop definitions to generate an accurate, developer-focused one-sentence description.  For example, tell me what props the component accepts (e.g., `name: string`, `count: number`, etc.).",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:42.711Z"
  },
  "fetchComponent:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/component-client.tsx": {
    "componentHash": "b2b9170a99fd57670fce18494d4b2601",
    "description": "Please provide the content of the `fetchComponent` component (likely the code itself) so I can generate a concise, one-sentence description from a developer's perspective. I need to see the code to understand its primary function.",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:43.554Z"
  },
  "generateDescription:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/component-client.tsx": {
    "componentHash": "407d2ae0b62439970f2e07c70340fd91",
    "description": "Please provide the content of the `generateDescription` component. I need the code within the component to write a concise, one-sentence description from a developer's perspective.",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:44.208Z"
  },
  "ComparisonModal:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/comparison-modal.tsx": {
    "componentHash": "574e04de1a412cb9140e3471054be079",
    "description": "Here are a few concise, one-sentence descriptions for the `ComparisonModal` component, from a developer's perspective, based on the provided information.  I've offered a few options with slightly different nuances:\n\n**Option 1 (Most Direct):**\n\n\"This `ComparisonModal` component displays a side-by-side comparison of two items, allowing users to visually highlight differences.\"\n\n**Option 2 (Slightly more detailed):**\n\n\"The `ComparisonModal` component facilitates a direct comparison between two selected items, presenting them in a modal window for detailed review.\"\n\n**Option 3 (Focus on interaction):**\n\n\"This `ComparisonModal` component enables users to easily compare two elements by providing a visual comparison interface within a modal dialog.\"\n\nTo help me refine the description further, could you provide a brief description of what the component *does* (e.g., what types of items it compares, what kind of differences are highlighted)?",
    "props": {},
    "lastUpdated": "2025-06-11T13:43:47.456Z"
  },
  "extractMethodCode:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/comparison-modal.tsx": {
    "componentHash": "9826cd6e02883b78835312b2317a23ef",
    "description": "```markdown\n## extractMethodCode Component Description\n\nThe `extractMethodCode` component attempts to identify and extract method definitions from a given code string. It primarily focuses on recognizing common JavaScript function and method patterns, including standard function declarations, function expressions, arrow functions, and class methods.  This component is designed to be used when you need to isolate a method from a larger code block for comparison or analysis, and it handles various syntax variations to ensure robust extraction.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:33.158Z"
  },
  "normalizeForComparison:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/comparison-modal.tsx": {
    "componentHash": "21f1d1eaf9504b3f4825a7f17c4b0c03",
    "description": "```markdown\n## normalizeForComparison Component\n\nThe `normalizeForComparison` component is a utility function designed to standardize strings for comparison purposes. It takes a string as input and returns a single-spaced, trimmed version of that string, removing leading/trailing whitespace and collapsing multiple spaces into single spaces. This is particularly useful when comparing strings where whitespace inconsistencies could lead to inaccurate results, such as in code diffs or text similarity calculations.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:34.832Z"
  },
  "normalize:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/comparison-modal.tsx": {
    "componentHash": "2e88014a0c0c0aa34bb95081d9d1e582",
    "description": "```markdown\n## normalize Component Description\n\nThe `normalize` component is a utility function that cleans up a given code string by removing all single-line and multi-line comments, splitting the code into individual lines, trimming whitespace, and then joining them back together with a single space.  It's primarily used to prepare code snippets for display or processing by stripping away irrelevant comment content. Typical use cases include formatting code blocks within a comparison modal or any scenario where raw, uncommented code needs to be presented in a consistent format.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:36.896Z"
  },
  "visit:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-debug.js": {
    "componentHash": "86c942240a03fedc9b6399ef6b6ce862",
    "description": "```markdown\n## Visit Component\n\nThe `visit` component is a utility function designed to recursively traverse a TypeScript Abstract Syntax Tree (AST) node and log information about function and variable declarations. Specifically, it identifies function declarations and variable statements, logging the function name or variable name, and demonstrating how to access node text using `getText()`. This component is primarily used for debugging and understanding the structure of a TypeScript codebase by inspecting its AST representation.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:08:59.159Z"
  },
  "getAllEntities:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/mcp-server.js": {
    "componentHash": "e4575308647824d85ad1069ff537b46d",
    "description": "```markdown\n## getAllEntities Component Description\n\nThe `getAllEntities` component asynchronously retrieves all entity data from JSON files within the `component-index.json` file. It reads the index file, then dynamically reads and parses corresponding entity files based on the slugs provided, handling potential file read errors by returning `null` for missing files. This component is typically used to fetch a comprehensive list of entities for display or further processing within a larger application.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:00.968Z"
  },
  "runCommand:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/build-js.js": {
    "componentHash": "b77c931abdf5b6b7cd4288ee42f3a920",
    "description": "```markdown\n## runCommand Component Description\n\nThe `runCommand` component provides a simple way to execute shell commands within a React application. It safely executes a given command using `execSync`, inheriting standard input/output for real-time feedback, and includes error handling to catch and log any execution failures, making it ideal for tasks like running build scripts or interactive commands within a user interface.  This component is typically used when you need to trigger shell commands based on user interaction or other application events.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:02.874Z"
  },
  "build:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/build-js.js": {
    "componentHash": "628967a4966618407969b8a60745af44",
    "description": "```markdown\n## Build Component\n\nThe `build` component automatically transcompiles TypeScript code into JavaScript, ensuring your project is ready for deployment. It achieves this by first cleaning the `dist` directory, then running the `tsc` command based on the `tsconfig.json` file, followed by copying `package.json` to the `dist` folder and making the CLI executable for seamless execution. This component is typically used during the build process of a React project leveraging TypeScript to generate optimized JavaScript files.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:05.010Z"
  },
  "generateUniqueSlug:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/index.ts": {
    "componentHash": "10370f8656dd5b465a2ec5c962917072",
    "description": "```markdown\n## generateUniqueSlug Component\n\nThe `generateUniqueSlug` component creates a unique, URL-friendly slug from a component's file path and name. It converts the file path into a sanitized string, replacing special characters with underscores, removing file extensions, and then appending the component name, all while converting to lowercase and replacing spaces with hyphens.  This component is typically used within documentation generation workflows to create consistent and predictable slugs for component references.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:06.811Z"
  },
  "generateDocUI:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/index.ts": {
    "componentHash": "35a421386ad26a81a1c12d0379e737bf",
    "description": "## generateDocUI Component Description\n\nThe `generateDocUI` component automatically creates React component documentation by processing an array of component definitions. It generates a `component-index.json` file and individual JSON files for each component, tailored with options such as code display, method inclusion, and similarity highlighting, ultimately outputting documentation data to a specified directory. This component is ideal for quickly generating documentation for a React project, facilitating developers' understanding of component structure and functionality.",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:09.316Z"
  },
  "cn:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/lib/utils.ts": {
    "componentHash": "e0d890a77683998bdbb99df520e5d6d6",
    "description": "```markdown\n## cn Component\n\nThe `cn` component is a utility function designed to seamlessly merge CSS classes using the `clsx` library.  It takes a variable number of class names (as an array of `ClassValue` objects) and returns a single, combined string of classes, making it ideal for dynamic styling in React components.  This component is commonly used to build complex styling configurations by combining utility classes from libraries like Tailwind CSS or styled-components.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:11.126Z"
  },
  "CodeStructure:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-structure.tsx": {
    "componentHash": "0101cbec2539606620828c2b76b579d6",
    "description": "Okay, here's a concise description of the `CodeStructure` component, formatted for clarity and precision:\n\n**CodeStructure Component Description**\n\nThe `CodeStructure` component dynamically renders a visual tree representation of a project's codebase based on data fetched from a JSON file (`component-index.json`).  It organizes code files and folders into a hierarchical structure, grouping them by their file paths and displaying them as a navigable tree. This component is designed to visually map out a project's codebase, making it easier to understand file organization and relationships, and includes a loading state and a fallback message if no data is available.",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:41.232Z"
  },
  "fetchComponents:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-structure.tsx": {
    "componentHash": "edb4f28f05f057693d595e1586ceee6d",
    "description": "## fetchComponents Component\n\nThe `fetchComponents` component asynchronously fetches a hierarchical structure of all components from a `/docs-data/component-index.json` file.  It groups components by their file paths, constructing a tree-like representation with folders and files, suitable for display in a component explorer or navigation system. This component is designed to provide a dynamic, organized view of your component library based on its file structure.",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:45.016Z"
  },
  "sortStructure:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-structure.tsx": {
    "componentHash": "9d4e543401ddf5adf940a9f7cc501571",
    "description": "```markdown\n## sortStructure Component\n\nThe `sortStructure` component recursively sorts an array of `FileStructure` objects, prioritizing folders and then sorting files alphabetically. It's designed to present a file hierarchy in a consistently ordered manner, ideal for displaying project structures or file listings within a user interface.  This component is commonly used to organize and display files and folders within a codebase or document management system, ensuring predictable ordering for the user.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:46.822Z"
  },
  "renderTree:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-structure.tsx": {
    "componentHash": "0811a436d6a414af80b0722067f01434",
    "description": "```markdown\n## renderTree Component\n\nThe `renderTree` component recursively renders a hierarchical file structure as an unordered list (`<ul>`). It takes an array of `FileStructure` items and displays each item, including folders and files, with appropriate icons and links to documentation.  This component is typically used to visualize and navigate complex project structures, commonly found in documentation or code exploration tools.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:48.789Z"
  },
  "CodeRelationships:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-relationships.tsx": {
    "componentHash": "7b14682bb5640f44b1749570369c64a6",
    "description": "Okay, here's a concise description of the `CodeRelationships` component, formatted for clarity and focusing on the key aspects, suitable for documentation:\n\n**Component Description: CodeRelationships**\n\nThe `CodeRelationships` component dynamically displays relationships between code entities within a project.  It fetches data based on component slugs and displays these relationships (e.g., imports, dependencies, calls) in a visually structured format within a card.  The component supports filtering relationships by “all”, “dependencies”, or “dependents”. It uses the provided `entityId` to focus on the relationships for a specific code entity, and includes loading states and visual feedback.",
    "props": {},
    "lastUpdated": "2025-06-12T17:09:54.782Z"
  },
  "fetchData:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-relationships.tsx": {
    "componentHash": "159fae8a6f3e7373d3990932ae773b9d",
    "description": "The `fetchData` component asynchronously retrieves and analyzes component relationships from a JSON data source. It fetches an index of all components, then fetches detailed data for each component, identifying imports, method calls, and similarity warnings – ultimately constructing a list of relationships between components. This data is used to generate a dependency graph or visualization of the application's component ecosystem.",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:00.324Z"
  },
  "getEntityIcon:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-relationships.tsx": {
    "componentHash": "d998d21384ccacca4f28c43e3e976fad",
    "description": "```markdown\n## getEntityIcon Component\n\nThe `getEntityIcon` component renders a simple, icon-like representation of a code entity based on its type.  It uses a switch statement to map a `CodeEntity[\"type\"]` value (e.g., \"component\", \"class\") to a corresponding icon component (`Component`, `Code`, `Function`, or `FileCode`), ensuring a consistent visual representation across different code entities.  This component is typically used within a codebase visualization or code explorer to represent various code elements visually, enhancing readability and understanding.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:02.516Z"
  },
  "getRelationshipLabel:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-relationships.tsx": {
    "componentHash": "80f91589beffc76071865ff40880b12c",
    "description": "```markdown\n## getRelationshipLabel Component Description\n\nThe `getRelationshipLabel` component provides a standardized, localized string representation for various relationship types between code elements.  It takes a `type` prop (of type `Relationship[\"type\"]`) and returns a user-friendly label such as \"Imports\", \"Extends\", or \"Calls\", offering a consistent and readable way to display relationship information within a codebase. This component is commonly used in code visualization tools or documentation to clearly represent the connections between different code constructs.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:04.518Z"
  },
  "getRelationshipColor:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-relationships.tsx": {
    "componentHash": "c2f6f03a81fdc5673591518db8d17d09",
    "description": "```markdown\n## getRelationshipColor Component\n\nThe `getRelationshipColor` component dynamically returns a CSS class string based on the `type` of relationship provided. Specifically, it maps relationship types (like \"imports\", \"extends\", etc.) to corresponding color palettes with border styles, ensuring consistent visual representation of relationships within the codebase. This component is typically used within code visualization tools or diagramming libraries to style relationship edges based on their semantic meaning, offering a visually intuitive way to understand code dependencies.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:06.834Z"
  },
  "ArrowLeft:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-relationships.tsx": {
    "componentHash": "c671f279a9222fa6c3cd22c701a1adca",
    "description": "```markdown\n## ArrowLeft Component\n\nThe `ArrowLeft` component renders a standard left-pointing arrow icon, providing a simple visual cue for navigation or direction.  It's a basic SVG element with customizable stroke color and width, allowing developers to easily integrate it into designs using the `stroke` prop.  Typically, this component is used to indicate a \"previous\" link, a navigation direction, or as a stylistic element within a UI where a left-pointing arrow is relevant.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:08.857Z"
  },
  "CodeGraph:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx": {
    "componentHash": "37468363284ee81ebda3a5658c214a64",
    "description": "```markdown\n## Code Visualization Component\n\nThis component visualizes the relationships between code components, displaying them in a graph-like structure. It allows filtering by component type (Component, Class, Function, Method) and provides interactive zooming and panning.\n\n### Key Features\n\n*   **Component Graph:** Displays a network of code components with connections representing dependencies.\n*   **Filtering:** Filters the displayed components based on their type.\n*   **Zooming & Panning:** Allows users to zoom in and out of the graph and pan around to explore the entire structure.\n*   **Interactive Nodes:** Clicking on a component reveals its details.\n\n### Component Breakdown\n\n1.  **SVG Canvas:** The core of the visualization is an SVG canvas that renders the component graph.\n2.  **Component Nodes:** Each component is represented as a node in the graph.  Nodes are styled based on their component type.\n3.  **Edges (Connections):** Lines (edges) connect the nodes, indicating dependencies. The color and style of edges are also based on the relationship type (e.g., `imports`, `extends`, `calls`, `uses`).\n4.  **Interactive Details:** Clicking on a component node reveals a panel with the component's details.\n5.  **Filtering:** The component allows the user to select a specific component type to display.\n6.  **Zooming and Panning:** The user can interactively zoom in and out of the graph and pan around using the mousewheel or gestures.\n\n### Technical Details\n\n*   **React Component:** The component is built using React, a JavaScript library for building user interfaces.\n*   **SVG Manipulation:** The SVG canvas is manipulated using JavaScript code to render the graph and handle user interactions.\n*   **Data Structure:** The component data is likely represented as a JavaScript object or array, containing information about each component and its relationships.\n\n### Usage\n\n1.  Install the necessary dependencies in your React project.\n2.  Import the `CodeVisualizationComponent` into your application.\n3.  Pass the component data to the `CodeVisualizationComponent`.\n4.  Render the component in your application.\n\n### Example Data Structure (Illustrative)\n\n```javascript\nconst componentData = [\n  { id: \"comp1\", name: \"MyComponent\", type: \"Component\" },\n  { id: \"comp2\", name: \"MyClass\", type: \"Class\" },\n  { id: \"comp3\", name: \"MyFunction\", type: \"Function\" },\n  { id: \"comp4\", name: \"MyMethod\", type: \"Method\" },\n  // ... more components\n];\n```\n\n### Further Development\n\n*   **Edge Types:** Add more detailed information about edge types (e.g., the direction of the dependency).\n*   **Dynamic Data Loading:**  Implement a mechanism to load component data dynamically, perhaps from a database or API.\n*   **Advanced Filtering:**  Add more sophisticated filtering options, such as filtering by name or other properties.\n*   **Layout Algorithms:** Experiment with different graph layout algorithms to improve the visual clarity of the graph.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:25.672Z"
  },
  "fetchData:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx": {
    "componentHash": "26adb452f46b193aa41050ad5450cb6b",
    "description": "The `fetchData` component asynchronously retrieves and analyzes component data from a specified API endpoint, constructing a graph of component relationships. It fetches a component index, then iteratively retrieves data for each component, identifying dependencies (imports), method calls, and similarity warnings to establish relationships between components.  The resulting data is presented as an array of relationships, including source, target, and relationship type, which is used for visualization and navigation within the application. This component is ideal for situations where understanding the connections between components within a larger codebase is critical for development and documentation.",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:32.715Z"
  },
  "handleNodeClick:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx": {
    "componentHash": "c764a473eb4679ea959db81e7406c64c",
    "description": "```markdown\n## handleNodeClick Component Description\n\nThe `handleNodeClick` component is a utility function designed to respond to clicks on nodes within a code graph visualization. Upon a node click, it updates the `selectedEntity` and toggles the visibility of detailed node information by opening the `detailsOpen` state.  This component is typically used within a code graph implementation to enable users to interact with and select individual code entities for further examination.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:34.388Z"
  },
  "getNodeColor:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx": {
    "componentHash": "ca30b753b21479eed05f5202c050678a",
    "description": "```markdown\n## getNodeColor Component\n\nThe `getNodeColor` component provides a simple, deterministic way to assign a color based on the `type` of a `CodeEntity`. Specifically, it maps `CodeEntity` types like \"component\", \"class\", \"function\", and \"method\" to corresponding Material UI color palettes (e.g., violet-500, blue-500, emerald-500, amber-500), ensuring consistent color-coding within a code graph visualization. This component is typically used within a code graph library to visually differentiate node types, improving readability and understanding of the code structure.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:36.816Z"
  },
  "getEdgeColor:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx": {
    "componentHash": "9fd0ab5075d2ab88c6152f685fe9a1d9",
    "description": "```markdown\n## getEdgeColor Component\n\nThe `getEdgeColor` component is a utility function that returns a specific color based on the `type` of a relationship in a code graph.  It maps relationship types like \"imports,\" \"extends,\" or \"calls\" to corresponding color values (e.g., blue, violet, or amber) – these colors are defined within the component.  This component is typically used within a code graph visualization to visually differentiate relationships between code elements based on their type, enhancing the clarity and understanding of the graph.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:38.991Z"
  },
  "zoomIn:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx": {
    "componentHash": "632d405c6bd33db899c4e009502870c4",
    "description": "```markdown\n## zoomIn Component Description\n\nThe `zoomIn` component provides a simple way to increase the zoom level of an associated element (likely within a larger UI) by 0.1 on each click. It utilizes a state variable `zoom` to track the current zoom level, ensuring it never exceeds a maximum of 2, offering a smooth and controlled zooming experience. This component is commonly used within visualizations or interactive diagrams where a user needs to progressively increase the level of detail.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:40.774Z"
  },
  "zoomOut:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx": {
    "componentHash": "d8a23929b7be6e5301cb4f056b1c6816",
    "description": "```markdown\n## zoomOut Component\n\nThe `zoomOut` component is a utility function that dynamically reduces the zoom level of the application. It smoothly decreases the current zoom value from its current position to a maximum of 0.5, providing a subtle and intuitive way to step back from a detailed view. This component is typically used within interactive visualizations or diagrams where a user might want to quickly reduce the magnification for a broader overview.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:42.370Z"
  },
  "ArrowLeft:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx": {
    "componentHash": "95cbb1e03dc1483ca6786ab83ef39104",
    "description": "```markdown\n## ArrowLeft Component\n\nThe `ArrowLeft` component renders a simple, filled SVG arrow pointing to the left, using a customizable stroke color based on the `stroke` prop.  It's designed for visually indicating navigation or movement in a left direction within a UI, commonly used in interactive elements or diagrams to show a directional path.  Because it has no props, the component's appearance is fully controlled by the `stroke` property, allowing for consistent styling across applications.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:44.407Z"
  },
  "CodeEntityDetails:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-entity-details.tsx": {
    "componentHash": "83ea4f5f53e4438a038cdf66db776b02",
    "description": "## CodeEntityDetails Component Description\n\nThe `CodeEntityDetails` component displays detailed information about a code entity – such as a component, class, or function – in a modal dialog. It renders an icon representing the entity type, its name, and a type badge, alongside the entity's file path.  The component utilizes a Dialog component to present this information within a modal, and includes tabs for displaying the entity's code, usage examples, and dependencies, providing a comprehensive view of the code artifact.",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:47.452Z"
  },
  "getEntityIcon:/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-entity-details.tsx": {
    "componentHash": "da93d20e6c8403969f3b4ee145926d5f",
    "description": "```markdown\n## getEntityIcon Component Description\n\nThe `getEntityIcon` component renders an icon representing the type of a code entity (component, class, function, or method). It utilizes a switch statement to return a specific icon based on the `entity.type` prop, ensuring consistent visual representation of different code elements.  This component is typically used within code entity details displays to provide a clear visual cue for each entity type.\n```",
    "props": {},
    "lastUpdated": "2025-06-12T17:10:51.498Z"
  }
}
