[
  {
    "name": "ThemeProvider",
    "description": "",
    "props": [
      {
        "name": "attribute",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "defaultTheme",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "enableSystem",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "disableTransitionOnChange",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/theme-provider.tsx",
    "sourceCode": "export function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SimilarityList",
    "description": "",
    "props": [
      {
        "name": "threshold",
        "type": "number",
        "required": true,
        "description": ""
      },
      {
        "name": "preloadedComponents",
        "type": "ComponentData[]",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/similarity-list.tsx",
    "sourceCode": "export function SimilarityList({ threshold, preloadedComponents }: SimilarityListProps) {\n  const [comparisonOpen, setComparisonOpen] = useState(false)\n  const [selectedPair, setSelectedPair] = useState<{\n    component1: { name: string; code: string; filePath: string }\n    component2: { name: string; code: string; filePath: string }\n    similarity: number\n  } | null>(null)\n  const [components, setComponents] = useState<ComponentData[]>(preloadedComponents || [])\n  const [similarComponents, setSimilarComponents] = useState<{\n    pair: string[]\n    similarity: number\n    reason: string\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }[]>([])\n  const [loading, setLoading] = useState(!preloadedComponents)\n  const [error, setError] = useState<string | null>(null)\n\n  // Example method that demonstrates the functionality\n  // This is intentionally similar to methods in other components for testing\n  /* function zach(hi: string) {\n    const z = hi + hi\n    console.log(z)\n  } */\n\n  // Fetch component data (only if no preloaded data)\n  useEffect(() => {\n    if (preloadedComponents) {\n      console.log('Using preloaded component data:', preloadedComponents.length);\n      setLoading(false);\n      return;\n    }\n\n    async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }, [preloadedComponents])\n\n  // Process similarity data whenever components or threshold changes\n  useEffect(() => {\n    if (components.length === 0) return\n\n    console.log('Processing similarity data for', components.length, 'components at threshold', threshold)\n\n    const similarPairs: {\n      pair: string[]\n      similarity: number\n      reason: string\n      component1: ComponentData\n      component2: ComponentData\n      isMethodLevel?: boolean\n      method1?: string\n      method2?: string\n    }[] = []\n\n    // Track processed pairs to avoid duplicates AND store the highest score found\n    const processedPairs = new Map<string, {\n      similarity: number;\n      reason: string;\n      component1: ComponentData;\n      component2: ComponentData;\n      isMethodLevel?: boolean;\n      method1?: string;\n      method2?: string;\n    }>();\n\n    // Count similarity warnings for debugging\n    let totalWarnings = 0;\n    let crossComponentWarnings = 0;\n    let filteredWarnings = 0;\n\n    // Find components with similarity warnings\n    components.forEach(component => {\n      // Log each component being processed\n      console.log(`Processing component: ${component.name}, has warnings: ${component.similarityWarnings?.length || 0}, has methods: ${component.methods?.length || 0}`);\n\n      // Check top-level similarity warnings\n      if (component.similarityWarnings && component.similarityWarnings.length > 0) {\n        totalWarnings += component.similarityWarnings.length;\n        console.log(`Processing ${component.similarityWarnings.length} top-level warnings for ${component.name}`);\n        processSimilarityWarnings(component, component.similarityWarnings, false)\n      }\n\n      // Check method-level similarity warnings\n      if (component.methods && component.methods.length > 0) {\n        component.methods.forEach(method => {\n          if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n            console.log(`Processing ${method.similarityWarnings.length} warnings for method ${method.name} in ${component.name}`);\n            totalWarnings += method.similarityWarnings.length;\n            processSimilarityWarnings(component, method.similarityWarnings, true, method.name)\n          }\n        })\n      }\n    })\n\n    function processSimilarityWarnings(\n      component: ComponentData,\n      warnings: SimilarityWarning[],\n      isMethodLevel: boolean = false,\n      methodName?: string\n    ) {\n      warnings.forEach(warning => {\n        // Convert similarity score from 0-1 to percentage if needed\n        const similarityPercent = warning.score > 1 // Handles if score is already %, unlikely here\n          ? warning.score\n          : Math.round(warning.score * 100) // Converts 0-1 score to %\n\n        // Skip if below threshold\n        if (similarityPercent < threshold) {\n          filteredWarnings++;\n          return;\n        }\n\n        // Extract component name and method name from similarTo (format could be ComponentName or ComponentName.methodName)\n        const parts = warning.similarTo.split('.')\n        const similarCompName = parts[0]\n        const similarMethodName = parts.length > 1 ? parts[1] : undefined\n\n        // Find the referenced component\n        const similarComp = components.find(c => c.name === similarCompName)\n\n        // Include both cross-component and same-component method-level similarities\n        // Only filter out non-method level similarities within the same component\n        if (similarComp && (component.name !== similarComp.name || (isMethodLevel && methodName && similarMethodName))) {\n          if (component.name !== similarComp.name) {\n            crossComponentWarnings++;\n          }\n\n          // Create a unique key for this pair\n          // For method level, include method names in the key to avoid duplication but ensure sort order\n          // to avoid duplicates like A.method1 -> B.method2 and B.method2 -> A.method1\n          const pairKey = isMethodLevel\n            ? [\n              `${component.name}.${methodName}`,\n              `${similarComp.name}.${similarMethodName}`\n            ].sort().join('_')\n            : [component.name, similarComp.name].sort().join('_')\n\n          // Check if we've already seen this pair\n          const existingPair = processedPairs.get(pairKey);\n          if (existingPair) {\n            // If the new similarity is higher, update the entry\n            if (similarityPercent > existingPair.similarity) {\n              processedPairs.set(pairKey, {\n                similarity: similarityPercent,\n                reason: warning.reason, // Update reason as well\n                component1: component, // Keep component references\n                component2: similarComp,\n                isMethodLevel,\n                method1: methodName,\n                method2: similarMethodName\n              });\n            }\n          } else {\n            // Add the new pair\n            processedPairs.set(pairKey, {\n              similarity: similarityPercent,\n              reason: warning.reason,\n              component1: component,\n              component2: similarComp,\n              isMethodLevel,\n              method1: methodName,\n              method2: similarMethodName\n            });\n          }\n        }\n      })\n    }\n\n    // Convert the map values to an array\n    processedPairs.forEach((value, key) => {\n      // For method level similarities, need to handle the key differently\n      let name1, name2;\n      if (value.isMethodLevel) {\n        const [part1, part2] = key.split('_');\n        name1 = part1.split('.')[0];\n        name2 = part2.split('.')[0];\n      } else {\n        [name1, name2] = key.split('_');\n      }\n\n      // Allow pairs from the same component if they are method level similarities\n      if ((name1 === name2 && !value.isMethodLevel)) {\n        console.warn(`Skipping non-method same-component similarity pair: ${key}`);\n        return;\n      }\n\n      // Find the actual component data objects based on names stored in the key\n      const comp1Data = components.find(c => c.name === name1);\n      const comp2Data = components.find(c => c.name === name2);\n\n      // Ensure both components were found before pushing\n      if (comp1Data && comp2Data) {\n        similarPairs.push({\n          pair: [name1, name2],\n          similarity: value.similarity,\n          reason: value.isMethodLevel\n            ? `Method ${value.method1} is similar to ${value.method2}: ${value.reason}`\n            : value.reason,\n          component1: comp1Data,\n          component2: comp2Data,\n          isMethodLevel: value.isMethodLevel,\n          method1: value.method1,\n          method2: value.method2\n        });\n      } else {\n        console.warn(`Could not find component data for pair key: ${key}`);\n      }\n    });\n\n    // Sort by similarity (highest first)\n    similarPairs.sort((a, b) => b.similarity - a.similarity)\n    console.log('Similarity statistics:', {\n      totalWarnings,\n      crossComponentWarnings,\n      filteredWarnings,\n      processedPairs: processedPairs.size,\n      finalPairs: similarPairs.length\n    });\n\n    // Log each pair found for debugging\n    if (similarPairs.length > 0) {\n      console.log('Found similarity pairs:');\n      similarPairs.forEach((pair, index) => {\n        console.log(`Pair ${index + 1}: ${pair.component1.name}${pair.isMethodLevel ? `.${pair.method1}` : ''} -> ${pair.component2.name}${pair.isMethodLevel ? `.${pair.method2}` : ''} (${pair.similarity}%)`);\n      });\n    } else {\n      console.warn('No similarity pairs were found after processing. Check if threshold is too high or data format is correct.');\n    }\n\n    setSimilarComponents(similarPairs)\n\n    // Preload component codes for faster comparison\n    similarPairs.forEach(pair => {\n      // Helper function to fetch code\n      const fetchComponentCode = async (component: ComponentData) => {\n        if (component.code) return;\n\n        try {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n          component.code = data.sourceCode || data.code || `// No code available for ${component.name}`\n        } catch (error) {\n          console.error(`Error prefetching code for ${component.name}:`, error)\n        }\n      }\n\n      // Fetch codes in parallel\n      Promise.all([\n        fetchComponentCode(pair.component1),\n        fetchComponentCode(pair.component2)\n      ]);\n    });\n  }, [components, threshold])\n\n  const handleCompare = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    // Fetch code for components if not already available\n    const fetchComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }\n\n    // Set up the comparison\n    Promise.all([\n      fetchComponentCode(item.component1, item.isMethodLevel ? item.method1 : undefined),\n      fetchComponentCode(item.component2, item.isMethodLevel ? item.method2 : undefined)\n    ]).then(([code1, code2]) => {\n      // Perform direct code comparison to catch identical components\n      // This is a client-side fallback to ensure identical components show as 100% similar\n      let similarity = item.similarity;\n\n      if (code1 && code2) {\n        // Normalize the code by removing whitespace variations\n        const normalizedCode1 = code1.trim().replace(/\\s+/g, ' ');\n        const normalizedCode2 = code2.trim().replace(/\\s+/g, ' ');\n\n        // If codes are identical, set similarity to 100%\n        if (normalizedCode1 === normalizedCode2) {\n          similarity = 100;\n          console.log(`Components detected as identical via client-side check: ${item.component1.name}${item.isMethodLevel ? `.${item.method1}` : ''} and ${item.component2.name}${item.isMethodLevel ? `.${item.method2}` : ''}`);\n        }\n      }\n\n      setSelectedPair({\n        component1: {\n          name: item.component1.name,\n          code: code1,\n          filePath: item.component1.filePath || `components/${item.component1.name}`,\n        },\n        component2: {\n          name: item.component2.name,\n          code: code2,\n          filePath: item.component2.filePath || `components/${item.component2.name}`,\n        },\n        similarity: similarity,\n      })\n      setComparisonOpen(true)\n    })\n  }\n\n  if (loading) {\n    return (\n      <div className=\"text-center py-16 bg-white dark:bg-slate-900 rounded-xl shadow-sm\">\n        <p className=\"text-lg\">Loading similarity data...</p>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-16 bg-white dark:bg-slate-900 rounded-xl shadow-sm border border-red-300\">\n        <p className=\"text-lg text-red-600\">{error}</p>\n        <p className=\"text-sm text-muted-foreground mt-2\">Check console for more details.</p>\n      </div>\n    )\n  }\n\n  if (similarComponents.length === 0) {\n    return (\n      <div className=\"text-center py-16 bg-white dark:bg-slate-900 rounded-xl shadow-sm\">\n        <p className=\"text-lg text-muted-foreground\">No similar components found at {threshold}% threshold.</p>\n        <p className=\"text-sm text-muted-foreground mt-2\">Try lowering the threshold to see more results.</p>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"space-y-8\">\n        {similarComponents.map((item, index) => (\n          <div key={index} className=\"bg-white dark:bg-slate-900 rounded-xl shadow-sm overflow-hidden\">\n            <div className=\"p-6 border-b border-slate-100 dark:border-slate-800\">\n              <div className=\"flex items-center gap-3 flex-wrap\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-lg font-medium\">{item.pair[0]}</span>\n                  {item.isMethodLevel && (\n                    <span className=\"text-sm text-muted-foreground\">.{item.method1}</span>\n                  )}\n                </div>\n                <ArrowRightIcon className=\"h-4 w-4 text-muted-foreground\" />\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-lg font-medium\">{item.pair[1]}</span>\n                  {item.isMethodLevel && (\n                    <span className=\"text-sm text-muted-foreground\">.{item.method2}</span>\n                  )}\n                </div>\n                <Badge\n                  className={`ml-2 ${item.component1.code && item.component2.code &&\n                    item.component1.code.trim().replace(/\\s+/g, ' ') === item.component2.code.trim().replace(/\\s+/g, ' ')\n                    ? \"bg-green-50 text-green-700 border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800\"\n                    : item.similarity >= 80\n                      ? \"bg-red-50 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800\"\n                      : \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n                    }`}\n                >\n                  {item.component1.code && item.component2.code &&\n                    item.component1.code.trim().replace(/\\s+/g, ' ') === item.component2.code.trim().replace(/\\s+/g, ' ')\n                    ? \"Identical Components\"\n                    : `${item.similarity}% Similar`}\n                </Badge>\n                {item.isMethodLevel && (\n                  <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n                    Method Level\n                  </Badge>\n                )}\n              </div>\n            </div>\n            <div className=\"p-6\">\n              <p className=\"mb-6 text-lg\">{item.reason}</p>\n              <div className=\"flex gap-3 flex-wrap\">\n                <Button asChild variant=\"outline\" size=\"sm\">\n                  <Link href={`/docs/${item.component1.slug || item.pair[0].toLowerCase()}`}>View {item.pair[0]}</Link>\n                </Button>\n                <Button asChild variant=\"outline\" size=\"sm\">\n                  <Link href={`/docs/${item.component2.slug || item.pair[1].toLowerCase()}`}>View {item.pair[1]}</Link>\n                </Button>\n                <Button\n                  size=\"sm\"\n                  className=\"bg-gradient-to-r from-violet-500 to-indigo-600 hover:from-violet-600 hover:to-indigo-700\"\n                  onClick={() => handleCompare(item)}\n                >\n                  Compare Components\n                </Button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {selectedPair && (\n        <ComparisonModal\n          isOpen={comparisonOpen}\n          onClose={() => setComparisonOpen(false)}\n          component1={{\n            name: selectedPair.component1.name,\n            code: selectedPair.component1.code,\n            filePath: selectedPair.component1.filePath,\n          }}\n          component2={{\n            name: selectedPair.component2.name,\n            code: selectedPair.component2.code,\n            filePath: selectedPair.component2.filePath,\n          }}\n          similarityScore={selectedPair.similarity}\n          isMethodComparison={!!similarComponents.find(item =>\n            item.isMethodLevel &&\n            item.component1.name === selectedPair.component1.name &&\n            item.component2.name === selectedPair.component2.name\n          )}\n          methodName={similarComponents.find(item =>\n            item.isMethodLevel &&\n            item.component1.name === selectedPair.component1.name &&\n            item.component2.name === selectedPair.component2.name\n          )?.method1}\n        />\n      )}\n    </>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "callback_useEffect",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    if (preloadedComponents) {\n      console.log('Using preloaded component data:', preloadedComponents.length);\n      setLoading(false);\n      return;\n    }\n\n    async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.callback_useEffect",
            "score": 0.7414107782798991,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "CodeGraph.callback_useEffect",
            "score": 0.7414107782798991,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6785219740881092,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.callback_useEffect",
            "score": 0.645716676421617,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: any) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp, targetMethod] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: any) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6134730382049006,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarityList.handleCompare",
            "score": 0.6083022227181052,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/similarity-list.tsx",
            "code": " handleCompare = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    // Fetch code for components if not already available\n    const fetchComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }\n\n    // Set up the comparison\n    Promise.all([\n      fetchComponentCode(item.component1, item.isMethodLevel ? item.method1 : undefined),\n      fetchComponentCode(item.component2, item.isMethodLevel ? item.method2 : undefined)\n    ]).then(([code1, code2]) => {\n      // Perform direct code comparison to catch identical components\n      // This is a client-side fallback to ensure identical components show as 100% similar\n      let similarity = item.similarity;\n\n      if (code1 && code2) {\n        // Normalize the code by removing whitespace variations\n        const normalizedCode1 = code1.trim().replace(/\\s+/g, ' ');\n        const normalizedCode2 = code2.trim().replace(/\\s+/g, ' ');\n\n        // If codes are identical, set similarity to 100%\n        if (normalizedCode1 === normalizedCode2) {\n          similarity = 100;\n          console.log(`Components detected as identical via client-side check: ${item.component1.name}${item.isMethodLevel ? `.${item.method1}` : ''} and ${item.component2.name}${item.isMethodLevel ? `.${item.method2}` : ''}`);\n        }\n      }\n\n      setSelectedPair({\n        component1: {\n          name: item.component1.name,\n          code: code1,\n          filePath: item.component1.filePath || `components/${item.component1.name}`,\n        },\n        component2: {\n          name: item.component2.name,\n          code: code2,\n          filePath: item.component2.filePath || `components/${item.component2.name}`,\n        },\n        similarity: similarity,\n      })\n      setComparisonOpen(true)\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6009710338157367,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          }
        ]
      },
      {
        "name": "handleCompare",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " handleCompare = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    // Fetch code for components if not already available\n    const fetchComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }\n\n    // Set up the comparison\n    Promise.all([\n      fetchComponentCode(item.component1, item.isMethodLevel ? item.method1 : undefined),\n      fetchComponentCode(item.component2, item.isMethodLevel ? item.method2 : undefined)\n    ]).then(([code1, code2]) => {\n      // Perform direct code comparison to catch identical components\n      // This is a client-side fallback to ensure identical components show as 100% similar\n      let similarity = item.similarity;\n\n      if (code1 && code2) {\n        // Normalize the code by removing whitespace variations\n        const normalizedCode1 = code1.trim().replace(/\\s+/g, ' ');\n        const normalizedCode2 = code2.trim().replace(/\\s+/g, ' ');\n\n        // If codes are identical, set similarity to 100%\n        if (normalizedCode1 === normalizedCode2) {\n          similarity = 100;\n          console.log(`Components detected as identical via client-side check: ${item.component1.name}${item.isMethodLevel ? `.${item.method1}` : ''} and ${item.component2.name}${item.isMethodLevel ? `.${item.method2}` : ''}`);\n        }\n      }\n\n      setSelectedPair({\n        component1: {\n          name: item.component1.name,\n          code: code1,\n          filePath: item.component1.filePath || `components/${item.component1.name}`,\n        },\n        component2: {\n          name: item.component2.name,\n          code: code2,\n          filePath: item.component2.filePath || `components/${item.component2.name}`,\n        },\n        similarity: similarity,\n      })\n      setComparisonOpen(true)\n    })\n  }",
        "similarityWarnings": [
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.668173622730709,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.668173622730709,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.668173622730709,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "SimilarityList.callback_useEffect",
            "score": 0.6083022227181052,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/similarity-list.tsx",
            "code": "() => {\n    if (preloadedComponents) {\n      console.log('Using preloaded component data:', preloadedComponents.length);\n      setLoading(false);\n      return;\n    }\n\n    async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Badge",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"default\" | \"secondary\" | \"destructive\" | \"outline\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/badge.tsx",
    "sourceCode": "function Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Button",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"link\" | \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "size",
        "type": "\"default\" | \"sm\" | \"lg\" | \"icon\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/button.tsx",
    "sourceCode": "function Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "ComparisonModal",
    "description": "",
    "props": [
      {
        "name": "isOpen",
        "type": "boolean",
        "required": true,
        "description": ""
      },
      {
        "name": "onClose",
        "type": "() => void",
        "required": true,
        "description": ""
      },
      {
        "name": "component1",
        "type": "{ name: string; code: string; filePath: string; }",
        "required": true,
        "description": ""
      },
      {
        "name": "component2",
        "type": "{ name: string; code: string; filePath: string; }",
        "required": true,
        "description": ""
      },
      {
        "name": "similarityScore",
        "type": "number",
        "required": true,
        "description": ""
      },
      {
        "name": "methodName",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "isMethodComparison",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/comparison-modal.tsx",
    "sourceCode": "export function ComparisonModal({\n  isOpen,\n  onClose,\n  component1,\n  component2,\n  similarityScore: initialSimilarityScore,\n  methodName,\n  isMethodComparison = false\n}: ComparisonModalProps) {\n  const [view, setView] = useState<\"split\" | \"unified\">(\"split\")\n  const [isFullScreen, setIsFullScreen] = useState(false)\n  const [showHighlights, setShowHighlights] = useState(true)\n  const [similarityScore, setSimilarityScore] = useState(initialSimilarityScore)\n\n  // Extract method code if we're comparing methods\n  const extractMethodCode = (code: string, methodName?: string) => {\n    if (!isMethodComparison || !methodName) return code;\n\n    // If the code already appears to be just a method (starts with common function patterns) return as is\n    if (code.trim().startsWith('function') ||\n      code.trim().startsWith('const') ||\n      code.trim().startsWith('let') ||\n      code.trim().startsWith('export')) {\n      return code;\n    }\n\n    try {\n      // More comprehensive regex to find method definitions with various patterns\n      const methodPatterns = [\n        // Standard function declarations\n        `function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Function expression assignments (const/let/var)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function assignments\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function without braces (single expression)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*[^;{]*;?`,\n        // Class methods\n        `${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async functions\n        `async\\\\s+function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async arrow functions\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*async\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`\n      ];\n\n      // Join all patterns with OR\n      const combinedPattern = methodPatterns.join('|');\n      const methodRegex = new RegExp(combinedPattern, 'g');\n\n      let match;\n      // Find the first match\n      if ((match = methodRegex.exec(code)) !== null) {\n        return match[0];\n      }\n\n      // Alternative approach if the regex fails: try to find the method by looking for its name\n      // and then extracting a reasonable block after it\n      const methodStartIndex = code.indexOf(`function ${methodName}`) > -1\n        ? code.indexOf(`function ${methodName}`)\n        : code.indexOf(`${methodName} =`) > -1\n          ? code.indexOf(`${methodName} =`)\n          : code.indexOf(`${methodName}(`) > -1\n            ? code.indexOf(`${methodName}(`)\n            : -1;\n\n      if (methodStartIndex > -1) {\n        // Find a reasonable endpoint - either the next method or the end of the file\n        let depth = 0;\n        let endIndex = methodStartIndex;\n\n        // Go through the code character by character looking for matching braces\n        for (let i = methodStartIndex; i < code.length; i++) {\n          if (code[i] === '{') depth++;\n          else if (code[i] === '}') {\n            depth--;\n            if (depth === 0) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n\n        if (endIndex > methodStartIndex) {\n          return code.substring(methodStartIndex, endIndex);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error extracting method code:\", e);\n    }\n\n    return code;\n  };\n\n  // Process the component code\n  const processedCode1 = extractMethodCode(component1.code || '', methodName);\n  const processedCode2 = extractMethodCode(component2.code || '', methodName);\n\n  // Calculate diff using jsdiff\n  const diff = diffLines(processedCode1, processedCode2);\n\n  // Normalize code for comparison - trim trailing whitespace on each line\n  const normalizedCode1 = processedCode1.split('\\n').map(line => line.trimRight());\n  const normalizedCode2 = processedCode2.split('\\n').map(line => line.trimRight());\n\n  // Calculate diff for split view - more accurate line-by-line comparison\n  const lines1 = normalizedCode1;\n  const lines2 = normalizedCode2;\n\n  // For the split view, we want to know which lines are different\n  const normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ');\n\n  const highlightedCode1 = lines1.map((line, i) => {\n    // Consider a line different only if it's beyond the other file's length\n    // or if the normalized content differs\n    const isDifferent = i >= lines2.length ||\n      normalizeForComparison(line) !== normalizeForComparison(lines2[i]);\n\n    return {\n      line: line,\n      isDifferent: isDifferent\n    };\n  });\n\n  const highlightedCode2 = lines2.map((line, i) => {\n    // Consider a line different only if it's beyond the other file's length\n    // or if the normalized content differs\n    const isDifferent = i >= lines1.length ||\n      normalizeForComparison(line) !== normalizeForComparison(lines1[i]);\n\n    return {\n      line: line,\n      isDifferent: isDifferent\n    };\n  });\n\n  // Count differences (using jsdiff results for accuracy)\n  const diffCount = diff.reduce((count: number, part: Change) => {\n    if (part.added || part.removed) {\n      // Count lines in the changed part\n      return count + (part.value.match(/\\n/g) || []).length + (part.value.endsWith('\\n') ? 0 : 1);\n    }\n    return count;\n  }, 0);\n\n  // Double-check for identical code\n  React.useEffect(() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }, [processedCode1, processedCode2, initialSimilarityScore, diffCount]);\n\n  const modalClasses = isFullScreen\n    ? \"max-w-[99vw] w-[99vw] h-[99vh] flex flex-col p-0 rounded-lg shadow-2xl border-2 border-slate-200 dark:border-slate-700\"\n    : \"max-w-[98vw] w-[98vw] h-[95vh] flex flex-col p-0 rounded-lg shadow-2xl border-2 border-slate-200 dark:border-slate-700\"\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className={`${modalClasses} !max-w-screen-2xl !w-screen`}>\n        <DialogHeader className=\"p-6 border-b border-slate-200 dark:border-slate-700 bg-gradient-to-r from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-900\">\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-indigo-500 to-violet-700 dark:from-indigo-400 dark:to-violet-500\">\n              {isMethodComparison ? \"Method Comparison\" : \"Component Comparison\"}\n            </DialogTitle>\n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={() => setIsFullScreen(!isFullScreen)}\n                className=\"p-2 rounded-md hover:bg-slate-200 dark:hover:bg-slate-700 transition-all\"\n                title={isFullScreen ? \"Exit fullscreen\" : \"Enter fullscreen\"}\n              >\n                <EnterFullScreenIcon className=\"h-4 w-4 text-slate-500 dark:text-slate-400\" />\n              </button>\n              <Badge\n                className={`py-1.5 px-3 text-sm font-medium ${similarityScore >= 100 || similarityScore === 1\n                  ? \"bg-green-50 text-green-700 border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800\"\n                  : similarityScore >= 80\n                    ? \"bg-red-50 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800\"\n                    : \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n                  }`}\n              >\n                {similarityScore >= 100 || similarityScore === 1\n                  ? \"Identical Components\"\n                  : `${Math.round(similarityScore)}% Similar ${diffCount > 0\n                    ? `• ${diffCount} Differences`\n                    : similarityScore < 100 && similarityScore < 1\n                      ? \"• Semantic differences detected\"\n                      : \"\"}`}\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-8 mt-6\">\n            <div className=\"flex items-center gap-3 bg-white dark:bg-slate-800 rounded-lg p-3 shadow-sm\">\n              <div className=\"flex-shrink-0 p-2 rounded-full bg-indigo-100 dark:bg-indigo-900/30\">\n                <CodeIcon className=\"h-4 w-4 text-indigo-600 dark:text-indigo-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg\">\n                  {isMethodComparison && methodName\n                    ? `${component1.name}.${methodName}`\n                    : component1.name}\n                </h3>\n                <p className=\"text-xs text-muted-foreground font-mono\">{component1.filePath}</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3 bg-white dark:bg-slate-800 rounded-lg p-3 shadow-sm\">\n              <div className=\"flex-shrink-0 p-2 rounded-full bg-violet-100 dark:bg-violet-900/30\">\n                <CodeIcon className=\"h-4 w-4 text-violet-600 dark:text-violet-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg\">\n                  {isMethodComparison && methodName\n                    ? `${component2.name}.${methodName}`\n                    : component2.name}\n                </h3>\n                <p className=\"text-xs text-muted-foreground font-mono\">{component2.filePath}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end mt-4 gap-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"highlights-mode\"\n                checked={showHighlights}\n                onCheckedChange={setShowHighlights}\n              />\n              <Label htmlFor=\"highlights-mode\" className=\"cursor-pointer\">Show Differences</Label>\n            </div>\n            <Tabs value={view} onValueChange={(v) => setView(v as \"split\" | \"unified\")} className=\"w-auto\">\n              <TabsList className=\"bg-slate-100 dark:bg-slate-800 p-1 rounded-lg\">\n                <TabsTrigger value=\"split\" className=\"rounded-md data-[state=active]:bg-white dark:data-[state=active]:bg-slate-700 data-[state=active]:shadow-sm\">\n                  Split View\n                </TabsTrigger>\n                <TabsTrigger value=\"unified\" className=\"rounded-md data-[state=active]:bg-white dark:data-[state=active]:bg-slate-700 data-[state=active]:shadow-sm\">\n                  Unified View\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </div>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-hidden min-h-0 bg-white dark:bg-slate-900 rounded-b-lg\">\n          {view === \"split\" ? (\n            <div className=\"flex h-full w-full\">\n              <ScrollArea className=\"w-[50%] border-r border-slate-200 dark:border-slate-700\">\n                <div className=\"py-4 px-2 font-mono text-xs\">\n                  {highlightedCode1.map((line, i) => (\n                    <div\n                      key={i}\n                      className={`py-0.5 px-6 flex leading-relaxed ${line.isDifferent && showHighlights\n                        ? \"bg-red-50 dark:bg-red-900/20 border-l-4 border-red-400 dark:border-red-600\"\n                        : \"\"\n                        }`}\n                    >\n                      <span className={`select-none text-slate-400 w-16 mr-4 text-right text-xs`}>{i + 1}</span>\n                      <span className=\"whitespace-pre overflow-x-auto flex-1 text-xs\">{line.line}</span>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n              <ScrollArea className=\"w-[50%]\">\n                <div className=\"py-4 px-2 font-mono text-xs\">\n                  {highlightedCode2.map((line, i) => (\n                    <div\n                      key={i}\n                      className={`py-0.5 px-6 flex leading-relaxed ${line.isDifferent && showHighlights\n                        ? \"bg-green-50 dark:bg-green-900/20 border-l-4 border-green-400 dark:border-green-600\"\n                        : \"\"\n                        }`}\n                    >\n                      <span className={`select-none text-slate-400 w-16 mr-4 text-right text-xs`}>{i + 1}</span>\n                      <span className=\"whitespace-pre overflow-x-auto flex-1 text-xs\">{line.line}</span>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </div>\n          ) : (\n            <ScrollArea className=\"h-full\">\n              <div className=\"py-4 px-2 font-mono text-xs\">\n                {diff.map((part: Change, partIndex: number) => {\n                  // Ensure part.value is treated as a string\n                  const value = part.value || '';\n                  // Split lines, handling potential trailing newline correctly\n                  const lines = value.split('\\n').filter((l: string, i: number, arr: string[]) => i < arr.length - 1 || l !== '');\n                  const prefix = part.added ? '+' : part.removed ? '-' : ' ';\n                  const bgColor = part.added ? 'bg-green-50 dark:bg-green-900/20' : part.removed ? 'bg-red-50 dark:bg-red-900/20' : '';\n                  const textColor = part.added ? 'text-green-700 dark:text-green-400' : part.removed ? 'text-red-700 dark:text-red-400' : 'text-slate-400';\n                  const borderColor = part.added ? 'border-l-4 border-green-400 dark:border-green-600' : part.removed ? 'border-l-4 border-red-400 dark:border-red-600' : '';\n\n                  return lines.map((line: string, lineIndex: number) => (\n                    <div\n                      key={`${partIndex}-${lineIndex}`}\n                      className={`py-0.5 px-6 flex leading-relaxed ${showHighlights ? bgColor : ''} ${showHighlights ? borderColor : ''}`}\n                    >\n                      <span className={`select-none ${textColor} w-6 mr-2 text-center font-bold ${!showHighlights && (part.added || part.removed) ? 'opacity-0' : ''}`}>{prefix}</span>\n                      {/* No original line numbers in this basic view */}\n                      <span className=\"whitespace-pre overflow-x-auto flex-1\">{line}</span>\n                    </div>\n                  ));\n                })}\n              </div>\n            </ScrollArea>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "extractMethodCode",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " extractMethodCode = (code: string, methodName?: string) => {\n    if (!isMethodComparison || !methodName) return code;\n\n    // If the code already appears to be just a method (starts with common function patterns) return as is\n    if (code.trim().startsWith('function') ||\n      code.trim().startsWith('const') ||\n      code.trim().startsWith('let') ||\n      code.trim().startsWith('export')) {\n      return code;\n    }\n\n    try {\n      // More comprehensive regex to find method definitions with various patterns\n      const methodPatterns = [\n        // Standard function declarations\n        `function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Function expression assignments (const/let/var)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function assignments\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function without braces (single expression)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*[^;{]*;?`,\n        // Class methods\n        `${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async functions\n        `async\\\\s+function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async arrow functions\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*async\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`\n      ];\n\n      // Join all patterns with OR\n      const combinedPattern = methodPatterns.join('|');\n      const methodRegex = new RegExp(combinedPattern, 'g');\n\n      let match;\n      // Find the first match\n      if ((match = methodRegex.exec(code)) !== null) {\n        return match[0];\n      }\n\n      // Alternative approach if the regex fails: try to find the method by looking for its name\n      // and then extracting a reasonable block after it\n      const methodStartIndex = code.indexOf(`function ${methodName}`) > -1\n        ? code.indexOf(`function ${methodName}`)\n        : code.indexOf(`${methodName} =`) > -1\n          ? code.indexOf(`${methodName} =`)\n          : code.indexOf(`${methodName}(`) > -1\n            ? code.indexOf(`${methodName}(`)\n            : -1;\n\n      if (methodStartIndex > -1) {\n        // Find a reasonable endpoint - either the next method or the end of the file\n        let depth = 0;\n        let endIndex = methodStartIndex;\n\n        // Go through the code character by character looking for matching braces\n        for (let i = methodStartIndex; i < code.length; i++) {\n          if (code[i] === '{') depth++;\n          else if (code[i] === '}') {\n            depth--;\n            if (depth === 0) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n\n        if (endIndex > methodStartIndex) {\n          return code.substring(methodStartIndex, endIndex);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error extracting method code:\", e);\n    }\n\n    return code;\n  }"
      },
      {
        "name": "normalizeForComparison",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')",
        "similarityWarnings": [
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7765653211025729,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7413073368664149,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7413073368664149,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.7381232796393189,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.7381232796393189,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7020747307865115,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.698954428010989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6924605875915651,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6881434549071587,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6881434549071587,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6877269882629207,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6877269882629207,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6841159692001806,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6841159692001806,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6829002542534065,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6826747921783684,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6746384408422705,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6746384408422705,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6727090123372936,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6667333332056945,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6667333332056945,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6651711139379713,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6651711139379713,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6642413225853494,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6642413225853494,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6608050051478098,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6608050051478098,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6417508207732537,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6264952086401543,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          }
        ]
      },
      {
        "name": "callback_React.useEffect",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7870093926764367,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7166371454258212,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7153133584769668,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7122011674966203,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6904357534300279,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6904357534300279,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6853869019316426,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6853869019316426,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.671056189899051,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarityList.handleCompare",
            "score": 0.668173622730709,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/similarity-list.tsx",
            "code": " handleCompare = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    // Fetch code for components if not already available\n    const fetchComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }\n\n    // Set up the comparison\n    Promise.all([\n      fetchComponentCode(item.component1, item.isMethodLevel ? item.method1 : undefined),\n      fetchComponentCode(item.component2, item.isMethodLevel ? item.method2 : undefined)\n    ]).then(([code1, code2]) => {\n      // Perform direct code comparison to catch identical components\n      // This is a client-side fallback to ensure identical components show as 100% similar\n      let similarity = item.similarity;\n\n      if (code1 && code2) {\n        // Normalize the code by removing whitespace variations\n        const normalizedCode1 = code1.trim().replace(/\\s+/g, ' ');\n        const normalizedCode2 = code2.trim().replace(/\\s+/g, ' ');\n\n        // If codes are identical, set similarity to 100%\n        if (normalizedCode1 === normalizedCode2) {\n          similarity = 100;\n          console.log(`Components detected as identical via client-side check: ${item.component1.name}${item.isMethodLevel ? `.${item.method1}` : ''} and ${item.component2.name}${item.isMethodLevel ? `.${item.method2}` : ''}`);\n        }\n      }\n\n      setSelectedPair({\n        component1: {\n          name: item.component1.name,\n          code: code1,\n          filePath: item.component1.filePath || `components/${item.component1.name}`,\n        },\n        component2: {\n          name: item.component2.name,\n          code: code2,\n          filePath: item.component2.filePath || `components/${item.component2.name}`,\n        },\n        similarity: similarity,\n      })\n      setComparisonOpen(true)\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6665284356713298,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6580172574893719,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6578494662343545,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6578494662343545,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6547222558643515,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6547222558643515,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6403029293964069,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6366957166275647,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6366083435242419,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6366083435242419,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6304074321238731,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6304074321238731,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6265751890037171,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6265751890037171,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6244639634022595,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6244639634022595,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.605176311638849,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.605176311638849,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6021210309631648,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6021210309631648,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Dialog",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogClose",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogDescription",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogFooter",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogHeader",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogOverlay",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogPortal",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogTitle",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Tabs",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsList",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "ScrollArea",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/scroll-area.tsx",
    "sourceCode": "function ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "ScrollBar",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/scroll-area.tsx",
    "sourceCode": "function ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Switch",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/switch.tsx",
    "sourceCode": "function Switch({\n    className,\n    ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n    return (\n        <SwitchPrimitive.Root\n            data-slot=\"switch\"\n            className={cn(\n                \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n                className\n            )}\n            {...props}\n        >\n            <SwitchPrimitive.Thumb\n                data-slot=\"switch-thumb\"\n                className={cn(\n                    \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n                )}\n            />\n        </SwitchPrimitive.Root>\n    )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Label",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/label.tsx",
    "sourceCode": "function Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SimilarComponentsSection",
    "description": "",
    "props": [
      {
        "name": "components",
        "type": "SimilarComponent[]",
        "required": true,
        "description": ""
      },
      {
        "name": "currentComponent",
        "type": "{ name: string; code: string; filePath: string; }",
        "required": true,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/similar-components-section.tsx",
    "sourceCode": "export function SimilarComponentsSection({ components, currentComponent }: SimilarComponentsSectionProps) {\n  const [comparisonOpen, setComparisonOpen] = useState(false)\n  const [selectedComponent, setSelectedComponent] = useState<SimilarComponent | null>(null)\n\n  // Mock code for the similar component - in a real app, you'd fetch this\n  const getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }\n\n  const handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }\n\n  if (!components || components.length === 0) {\n    return null\n  }\n\n  return (\n    <>\n      <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-sm overflow-hidden\">\n        <div className=\"p-6 border-b border-slate-100 dark:border-slate-800\">\n          <h2 className=\"text-xl font-bold\">Similar Components</h2>\n          <p className=\"text-muted-foreground mt-1\">Components with similar functionality or structure</p>\n        </div>\n\n        <div className=\"divide-y divide-slate-100 dark:divide-slate-800\">\n          {components.map((component) => (\n            <div key={component.name} className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <h3 className=\"font-medium text-lg\">{component.name}</h3>\n                  <Badge\n                    className={`${component.similarity >= 80\n                        ? \"bg-red-50 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800\"\n                        : \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n                      }`}\n                  >\n                    {component.similarity}% Similar\n                  </Badge>\n                </div>\n                <div className=\"flex gap-3\">\n                  <Button asChild variant=\"outline\" size=\"sm\">\n                    <Link href={`/components/${component.name}`}>View Component</Link>\n                  </Button>\n                  <Button size=\"sm\" className=\"gap-2\" onClick={() => handleCompare(component)}>\n                    <GitCompare className=\"h-4 w-4\" />\n                    Compare\n                  </Button>\n                </div>\n              </div>\n              <p>{component.reason}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {selectedComponent && (\n        <ComparisonModal\n          isOpen={comparisonOpen}\n          onClose={() => setComparisonOpen(false)}\n          component1={currentComponent}\n          component2={{\n            name: selectedComponent.name,\n            code: getMockCode(selectedComponent.name),\n            filePath: `src/components/${selectedComponent.name}.tsx`,\n          }}\n          similarityScore={selectedComponent.similarity}\n          isMethodComparison={selectedComponent.isMethodLevel}\n          methodName={selectedComponent.methodName}\n        />\n      )}\n    </>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "getMockCode",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.8150103584493916,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.8031516017147106,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.8031516017147106,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.771694692882516,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7532056885412839,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7532056885412839,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7504618657794282,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7451880680839202,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7451880680839202,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.740580548875687,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7386536695189152,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7386536695189152,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7369406612059743,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7369406612059743,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.735625005597882,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7343059781397052,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.7164537893756712,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.7164537893756712,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.7164537893756712,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7153133584769668,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7153133584769668,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7153133584769668,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.698954428010989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.698954428010989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.698954428010989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6929213020414736,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6929213020414736,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6910851018989377,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6910851018989377,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6823580224691489,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6823580224691489,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6802453152667892,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6802453152667892,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6796592195536707,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6796592195536707,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6796592195536707,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6796592195536707,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6796592195536707,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6712982967450349,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6695759174647988,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6695759174647988,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6567858941886797,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          }
        ]
      },
      {
        "name": "handleCompare",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.817568041022956,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.817568041022956,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7911534608388863,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7765653211025729,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7765653211025729,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7765653211025729,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7757597712219153,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.771694692882516,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7642151508930309,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7400562481257751,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7400562481257751,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.724764328261452,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.724764328261452,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7242567074195291,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7211908333432424,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7211908333432424,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.7175861884795517,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.7175861884795517,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.7175861884795517,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7166371454258212,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7166371454258212,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7166371454258212,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7166046902391928,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7166046902391928,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7159443318146995,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7013082937076784,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7013082937076784,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6938937234467899,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6870626060103341,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6870626060103341,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6837471650460094,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6680302237032849,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6680302237032849,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6635128723705044,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6635128723705044,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6635128723705044,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6635128723705044,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6635128723705044,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6569636249082866,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6569636249082866,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6526577147996351,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6526577147996351,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.callback_useEffect",
            "score": 0.6144799840367834,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "CodeGraph.callback_useEffect",
            "score": 0.6144799840367834,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "SimilarityList.callback_useEffect",
            "score": 0.6134730382049006,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/similarity-list.tsx",
            "code": "() => {\n    if (preloadedComponents) {\n      console.log('Using preloaded component data:', preloadedComponents.length);\n      setLoading(false);\n      return;\n    }\n\n    async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Badge",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"default\" | \"secondary\" | \"destructive\" | \"outline\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/badge.tsx",
    "sourceCode": "function Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Button",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"link\" | \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "size",
        "type": "\"default\" | \"sm\" | \"lg\" | \"icon\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/button.tsx",
    "sourceCode": "function Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "ComparisonModal",
    "description": "",
    "props": [
      {
        "name": "isOpen",
        "type": "boolean",
        "required": true,
        "description": ""
      },
      {
        "name": "onClose",
        "type": "() => void",
        "required": true,
        "description": ""
      },
      {
        "name": "component1",
        "type": "{ name: string; code: string; filePath: string; }",
        "required": true,
        "description": ""
      },
      {
        "name": "component2",
        "type": "{ name: string; code: string; filePath: string; }",
        "required": true,
        "description": ""
      },
      {
        "name": "similarityScore",
        "type": "number",
        "required": true,
        "description": ""
      },
      {
        "name": "methodName",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "isMethodComparison",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/comparison-modal.tsx",
    "sourceCode": "export function ComparisonModal({\n  isOpen,\n  onClose,\n  component1,\n  component2,\n  similarityScore: initialSimilarityScore,\n  methodName,\n  isMethodComparison = false\n}: ComparisonModalProps) {\n  const [view, setView] = useState<\"split\" | \"unified\">(\"split\")\n  const [isFullScreen, setIsFullScreen] = useState(false)\n  const [showHighlights, setShowHighlights] = useState(true)\n  const [similarityScore, setSimilarityScore] = useState(initialSimilarityScore)\n\n  // Extract method code if we're comparing methods\n  const extractMethodCode = (code: string, methodName?: string) => {\n    if (!isMethodComparison || !methodName) return code;\n\n    // If the code already appears to be just a method (starts with common function patterns) return as is\n    if (code.trim().startsWith('function') ||\n      code.trim().startsWith('const') ||\n      code.trim().startsWith('let') ||\n      code.trim().startsWith('export')) {\n      return code;\n    }\n\n    try {\n      // More comprehensive regex to find method definitions with various patterns\n      const methodPatterns = [\n        // Standard function declarations\n        `function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Function expression assignments (const/let/var)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function assignments\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function without braces (single expression)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*[^;{]*;?`,\n        // Class methods\n        `${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async functions\n        `async\\\\s+function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async arrow functions\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*async\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`\n      ];\n\n      // Join all patterns with OR\n      const combinedPattern = methodPatterns.join('|');\n      const methodRegex = new RegExp(combinedPattern, 'g');\n\n      let match;\n      // Find the first match\n      if ((match = methodRegex.exec(code)) !== null) {\n        return match[0];\n      }\n\n      // Alternative approach if the regex fails: try to find the method by looking for its name\n      // and then extracting a reasonable block after it\n      const methodStartIndex = code.indexOf(`function ${methodName}`) > -1\n        ? code.indexOf(`function ${methodName}`)\n        : code.indexOf(`${methodName} =`) > -1\n          ? code.indexOf(`${methodName} =`)\n          : code.indexOf(`${methodName}(`) > -1\n            ? code.indexOf(`${methodName}(`)\n            : -1;\n\n      if (methodStartIndex > -1) {\n        // Find a reasonable endpoint - either the next method or the end of the file\n        let depth = 0;\n        let endIndex = methodStartIndex;\n\n        // Go through the code character by character looking for matching braces\n        for (let i = methodStartIndex; i < code.length; i++) {\n          if (code[i] === '{') depth++;\n          else if (code[i] === '}') {\n            depth--;\n            if (depth === 0) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n\n        if (endIndex > methodStartIndex) {\n          return code.substring(methodStartIndex, endIndex);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error extracting method code:\", e);\n    }\n\n    return code;\n  };\n\n  // Process the component code\n  const processedCode1 = extractMethodCode(component1.code || '', methodName);\n  const processedCode2 = extractMethodCode(component2.code || '', methodName);\n\n  // Calculate diff using jsdiff\n  const diff = diffLines(processedCode1, processedCode2);\n\n  // Normalize code for comparison - trim trailing whitespace on each line\n  const normalizedCode1 = processedCode1.split('\\n').map(line => line.trimRight());\n  const normalizedCode2 = processedCode2.split('\\n').map(line => line.trimRight());\n\n  // Calculate diff for split view - more accurate line-by-line comparison\n  const lines1 = normalizedCode1;\n  const lines2 = normalizedCode2;\n\n  // For the split view, we want to know which lines are different\n  const normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ');\n\n  const highlightedCode1 = lines1.map((line, i) => {\n    // Consider a line different only if it's beyond the other file's length\n    // or if the normalized content differs\n    const isDifferent = i >= lines2.length ||\n      normalizeForComparison(line) !== normalizeForComparison(lines2[i]);\n\n    return {\n      line: line,\n      isDifferent: isDifferent\n    };\n  });\n\n  const highlightedCode2 = lines2.map((line, i) => {\n    // Consider a line different only if it's beyond the other file's length\n    // or if the normalized content differs\n    const isDifferent = i >= lines1.length ||\n      normalizeForComparison(line) !== normalizeForComparison(lines1[i]);\n\n    return {\n      line: line,\n      isDifferent: isDifferent\n    };\n  });\n\n  // Count differences (using jsdiff results for accuracy)\n  const diffCount = diff.reduce((count: number, part: Change) => {\n    if (part.added || part.removed) {\n      // Count lines in the changed part\n      return count + (part.value.match(/\\n/g) || []).length + (part.value.endsWith('\\n') ? 0 : 1);\n    }\n    return count;\n  }, 0);\n\n  // Double-check for identical code\n  React.useEffect(() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }, [processedCode1, processedCode2, initialSimilarityScore, diffCount]);\n\n  const modalClasses = isFullScreen\n    ? \"max-w-[99vw] w-[99vw] h-[99vh] flex flex-col p-0 rounded-lg shadow-2xl border-2 border-slate-200 dark:border-slate-700\"\n    : \"max-w-[98vw] w-[98vw] h-[95vh] flex flex-col p-0 rounded-lg shadow-2xl border-2 border-slate-200 dark:border-slate-700\"\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className={`${modalClasses} !max-w-screen-2xl !w-screen`}>\n        <DialogHeader className=\"p-6 border-b border-slate-200 dark:border-slate-700 bg-gradient-to-r from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-900\">\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-indigo-500 to-violet-700 dark:from-indigo-400 dark:to-violet-500\">\n              {isMethodComparison ? \"Method Comparison\" : \"Component Comparison\"}\n            </DialogTitle>\n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={() => setIsFullScreen(!isFullScreen)}\n                className=\"p-2 rounded-md hover:bg-slate-200 dark:hover:bg-slate-700 transition-all\"\n                title={isFullScreen ? \"Exit fullscreen\" : \"Enter fullscreen\"}\n              >\n                <EnterFullScreenIcon className=\"h-4 w-4 text-slate-500 dark:text-slate-400\" />\n              </button>\n              <Badge\n                className={`py-1.5 px-3 text-sm font-medium ${similarityScore >= 100 || similarityScore === 1\n                  ? \"bg-green-50 text-green-700 border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800\"\n                  : similarityScore >= 80\n                    ? \"bg-red-50 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800\"\n                    : \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n                  }`}\n              >\n                {similarityScore >= 100 || similarityScore === 1\n                  ? \"Identical Components\"\n                  : `${Math.round(similarityScore)}% Similar ${diffCount > 0\n                    ? `• ${diffCount} Differences`\n                    : similarityScore < 100 && similarityScore < 1\n                      ? \"• Semantic differences detected\"\n                      : \"\"}`}\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-8 mt-6\">\n            <div className=\"flex items-center gap-3 bg-white dark:bg-slate-800 rounded-lg p-3 shadow-sm\">\n              <div className=\"flex-shrink-0 p-2 rounded-full bg-indigo-100 dark:bg-indigo-900/30\">\n                <CodeIcon className=\"h-4 w-4 text-indigo-600 dark:text-indigo-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg\">\n                  {isMethodComparison && methodName\n                    ? `${component1.name}.${methodName}`\n                    : component1.name}\n                </h3>\n                <p className=\"text-xs text-muted-foreground font-mono\">{component1.filePath}</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3 bg-white dark:bg-slate-800 rounded-lg p-3 shadow-sm\">\n              <div className=\"flex-shrink-0 p-2 rounded-full bg-violet-100 dark:bg-violet-900/30\">\n                <CodeIcon className=\"h-4 w-4 text-violet-600 dark:text-violet-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg\">\n                  {isMethodComparison && methodName\n                    ? `${component2.name}.${methodName}`\n                    : component2.name}\n                </h3>\n                <p className=\"text-xs text-muted-foreground font-mono\">{component2.filePath}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end mt-4 gap-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"highlights-mode\"\n                checked={showHighlights}\n                onCheckedChange={setShowHighlights}\n              />\n              <Label htmlFor=\"highlights-mode\" className=\"cursor-pointer\">Show Differences</Label>\n            </div>\n            <Tabs value={view} onValueChange={(v) => setView(v as \"split\" | \"unified\")} className=\"w-auto\">\n              <TabsList className=\"bg-slate-100 dark:bg-slate-800 p-1 rounded-lg\">\n                <TabsTrigger value=\"split\" className=\"rounded-md data-[state=active]:bg-white dark:data-[state=active]:bg-slate-700 data-[state=active]:shadow-sm\">\n                  Split View\n                </TabsTrigger>\n                <TabsTrigger value=\"unified\" className=\"rounded-md data-[state=active]:bg-white dark:data-[state=active]:bg-slate-700 data-[state=active]:shadow-sm\">\n                  Unified View\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </div>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-hidden min-h-0 bg-white dark:bg-slate-900 rounded-b-lg\">\n          {view === \"split\" ? (\n            <div className=\"flex h-full w-full\">\n              <ScrollArea className=\"w-[50%] border-r border-slate-200 dark:border-slate-700\">\n                <div className=\"py-4 px-2 font-mono text-xs\">\n                  {highlightedCode1.map((line, i) => (\n                    <div\n                      key={i}\n                      className={`py-0.5 px-6 flex leading-relaxed ${line.isDifferent && showHighlights\n                        ? \"bg-red-50 dark:bg-red-900/20 border-l-4 border-red-400 dark:border-red-600\"\n                        : \"\"\n                        }`}\n                    >\n                      <span className={`select-none text-slate-400 w-16 mr-4 text-right text-xs`}>{i + 1}</span>\n                      <span className=\"whitespace-pre overflow-x-auto flex-1 text-xs\">{line.line}</span>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n              <ScrollArea className=\"w-[50%]\">\n                <div className=\"py-4 px-2 font-mono text-xs\">\n                  {highlightedCode2.map((line, i) => (\n                    <div\n                      key={i}\n                      className={`py-0.5 px-6 flex leading-relaxed ${line.isDifferent && showHighlights\n                        ? \"bg-green-50 dark:bg-green-900/20 border-l-4 border-green-400 dark:border-green-600\"\n                        : \"\"\n                        }`}\n                    >\n                      <span className={`select-none text-slate-400 w-16 mr-4 text-right text-xs`}>{i + 1}</span>\n                      <span className=\"whitespace-pre overflow-x-auto flex-1 text-xs\">{line.line}</span>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </div>\n          ) : (\n            <ScrollArea className=\"h-full\">\n              <div className=\"py-4 px-2 font-mono text-xs\">\n                {diff.map((part: Change, partIndex: number) => {\n                  // Ensure part.value is treated as a string\n                  const value = part.value || '';\n                  // Split lines, handling potential trailing newline correctly\n                  const lines = value.split('\\n').filter((l: string, i: number, arr: string[]) => i < arr.length - 1 || l !== '');\n                  const prefix = part.added ? '+' : part.removed ? '-' : ' ';\n                  const bgColor = part.added ? 'bg-green-50 dark:bg-green-900/20' : part.removed ? 'bg-red-50 dark:bg-red-900/20' : '';\n                  const textColor = part.added ? 'text-green-700 dark:text-green-400' : part.removed ? 'text-red-700 dark:text-red-400' : 'text-slate-400';\n                  const borderColor = part.added ? 'border-l-4 border-green-400 dark:border-green-600' : part.removed ? 'border-l-4 border-red-400 dark:border-red-600' : '';\n\n                  return lines.map((line: string, lineIndex: number) => (\n                    <div\n                      key={`${partIndex}-${lineIndex}`}\n                      className={`py-0.5 px-6 flex leading-relaxed ${showHighlights ? bgColor : ''} ${showHighlights ? borderColor : ''}`}\n                    >\n                      <span className={`select-none ${textColor} w-6 mr-2 text-center font-bold ${!showHighlights && (part.added || part.removed) ? 'opacity-0' : ''}`}>{prefix}</span>\n                      {/* No original line numbers in this basic view */}\n                      <span className=\"whitespace-pre overflow-x-auto flex-1\">{line}</span>\n                    </div>\n                  ));\n                })}\n              </div>\n            </ScrollArea>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "extractMethodCode",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " extractMethodCode = (code: string, methodName?: string) => {\n    if (!isMethodComparison || !methodName) return code;\n\n    // If the code already appears to be just a method (starts with common function patterns) return as is\n    if (code.trim().startsWith('function') ||\n      code.trim().startsWith('const') ||\n      code.trim().startsWith('let') ||\n      code.trim().startsWith('export')) {\n      return code;\n    }\n\n    try {\n      // More comprehensive regex to find method definitions with various patterns\n      const methodPatterns = [\n        // Standard function declarations\n        `function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Function expression assignments (const/let/var)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function assignments\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function without braces (single expression)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*[^;{]*;?`,\n        // Class methods\n        `${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async functions\n        `async\\\\s+function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async arrow functions\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*async\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`\n      ];\n\n      // Join all patterns with OR\n      const combinedPattern = methodPatterns.join('|');\n      const methodRegex = new RegExp(combinedPattern, 'g');\n\n      let match;\n      // Find the first match\n      if ((match = methodRegex.exec(code)) !== null) {\n        return match[0];\n      }\n\n      // Alternative approach if the regex fails: try to find the method by looking for its name\n      // and then extracting a reasonable block after it\n      const methodStartIndex = code.indexOf(`function ${methodName}`) > -1\n        ? code.indexOf(`function ${methodName}`)\n        : code.indexOf(`${methodName} =`) > -1\n          ? code.indexOf(`${methodName} =`)\n          : code.indexOf(`${methodName}(`) > -1\n            ? code.indexOf(`${methodName}(`)\n            : -1;\n\n      if (methodStartIndex > -1) {\n        // Find a reasonable endpoint - either the next method or the end of the file\n        let depth = 0;\n        let endIndex = methodStartIndex;\n\n        // Go through the code character by character looking for matching braces\n        for (let i = methodStartIndex; i < code.length; i++) {\n          if (code[i] === '{') depth++;\n          else if (code[i] === '}') {\n            depth--;\n            if (depth === 0) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n\n        if (endIndex > methodStartIndex) {\n          return code.substring(methodStartIndex, endIndex);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error extracting method code:\", e);\n    }\n\n    return code;\n  }"
      },
      {
        "name": "normalizeForComparison",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')",
        "similarityWarnings": [
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7765653211025729,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7413073368664149,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7413073368664149,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.7381232796393189,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.7381232796393189,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7020747307865115,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.698954428010989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6924605875915651,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6881434549071587,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6881434549071587,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6877269882629207,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6877269882629207,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6841159692001806,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6841159692001806,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6829002542534065,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6826747921783684,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6746384408422705,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6746384408422705,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6727090123372936,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6667333332056945,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6667333332056945,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6651711139379713,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6651711139379713,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6642413225853494,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6642413225853494,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6608050051478098,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6608050051478098,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6417508207732537,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6264952086401543,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          }
        ]
      },
      {
        "name": "callback_React.useEffect",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7870093926764367,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7166371454258212,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7153133584769668,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7122011674966203,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6904357534300279,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6904357534300279,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6853869019316426,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6853869019316426,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.671056189899051,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarityList.handleCompare",
            "score": 0.668173622730709,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/similarity-list.tsx",
            "code": " handleCompare = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    // Fetch code for components if not already available\n    const fetchComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }\n\n    // Set up the comparison\n    Promise.all([\n      fetchComponentCode(item.component1, item.isMethodLevel ? item.method1 : undefined),\n      fetchComponentCode(item.component2, item.isMethodLevel ? item.method2 : undefined)\n    ]).then(([code1, code2]) => {\n      // Perform direct code comparison to catch identical components\n      // This is a client-side fallback to ensure identical components show as 100% similar\n      let similarity = item.similarity;\n\n      if (code1 && code2) {\n        // Normalize the code by removing whitespace variations\n        const normalizedCode1 = code1.trim().replace(/\\s+/g, ' ');\n        const normalizedCode2 = code2.trim().replace(/\\s+/g, ' ');\n\n        // If codes are identical, set similarity to 100%\n        if (normalizedCode1 === normalizedCode2) {\n          similarity = 100;\n          console.log(`Components detected as identical via client-side check: ${item.component1.name}${item.isMethodLevel ? `.${item.method1}` : ''} and ${item.component2.name}${item.isMethodLevel ? `.${item.method2}` : ''}`);\n        }\n      }\n\n      setSelectedPair({\n        component1: {\n          name: item.component1.name,\n          code: code1,\n          filePath: item.component1.filePath || `components/${item.component1.name}`,\n        },\n        component2: {\n          name: item.component2.name,\n          code: code2,\n          filePath: item.component2.filePath || `components/${item.component2.name}`,\n        },\n        similarity: similarity,\n      })\n      setComparisonOpen(true)\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6665284356713298,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6580172574893719,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6578494662343545,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6578494662343545,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6547222558643515,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6547222558643515,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6403029293964069,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6366957166275647,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6366083435242419,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6366083435242419,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6304074321238731,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6304074321238731,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6265751890037171,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6265751890037171,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6244639634022595,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6244639634022595,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.605176311638849,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.605176311638849,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6021210309631648,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6021210309631648,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Dialog",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogClose",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogDescription",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogFooter",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogHeader",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogOverlay",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogPortal",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogTitle",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Tabs",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsList",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "ScrollArea",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/scroll-area.tsx",
    "sourceCode": "function ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "ScrollBar",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/scroll-area.tsx",
    "sourceCode": "function ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Switch",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/switch.tsx",
    "sourceCode": "function Switch({\n    className,\n    ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n    return (\n        <SwitchPrimitive.Root\n            data-slot=\"switch\"\n            className={cn(\n                \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n                className\n            )}\n            {...props}\n        >\n            <SwitchPrimitive.Thumb\n                data-slot=\"switch-thumb\"\n                className={cn(\n                    \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n                )}\n            />\n        </SwitchPrimitive.Root>\n    )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Label",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/label.tsx",
    "sourceCode": "function Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "ComponentStats",
    "description": "",
    "props": [
      {
        "name": "type",
        "type": "enum",
        "required": false,
        "defaultValue": "component",
        "description": ""
      }
    ],
    "filePath": "src/ui/components/component-stats.tsx",
    "sourceCode": "export function ComponentStats({ type = 'component' }: ComponentStatsProps) {\n  const [components, setComponents] = useState<ComponentData[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }, [type])\n\n  if (loading) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-muted-foreground\">Loading component statistics...</p>\n      </div>\n    )\n  }\n\n  if (components.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-muted-foreground\">No {type}s found in the documentation.</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3\">\n      {components.map((component) => (\n        <Link key={component.slug} href={`/docs/${component.slug}`} passHref>\n          <Card className=\"h-full hover:shadow-md transition-shadow cursor-pointer border-none shadow-sm bg-white dark:bg-slate-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center gap-2\">\n                  {type === 'method' ? (\n                    <FileCode className=\"h-5 w-5 text-amber-500\" />\n                  ) : type === 'class' ? (\n                    <Code className=\"h-5 w-5 text-blue-500\" />\n                  ) : (\n                    <Code className=\"h-5 w-5 text-violet-500\" />\n                  )}\n                  <h3 className=\"font-medium text-lg\">{component.name}</h3>\n                </div>\n                <Badge variant=\"outline\" className=\"text-xs font-normal\">\n                  {component.methodCount > 0 ? `${component.methodCount} methods` : 'No methods'}\n                </Badge>\n              </div>\n              <p className=\"text-sm text-muted-foreground line-clamp-2 mb-4\">\n                {component.description || `A ${type} in your codebase.`}\n              </p>\n              <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                <Clock className=\"h-3 w-3\" />\n                <span>{component.filePath || 'File path not available'}</span>\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n      ))}\n    </div>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "callback_useEffect",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }",
        "similarityWarnings": [
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7911534608388863,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7870093926764367,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7870093926764367,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7870093926764367,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7661208518637541,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7661208518637541,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7637836595006662,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7559649428977571,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7504618657794282,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7401740502717719,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7401740502717719,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7251880086685029,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7251880086685029,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7211580980518396,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7211580980518396,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7151011487992612,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7142917939981817,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7142917939981817,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7080492348536783,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7080492348536783,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.707274098508059,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6889328704498463,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6889328704498463,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6886125891354897,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6851415646911032,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6851415646911032,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6851415646911032,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6829002542534065,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6829002542534065,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6829002542534065,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "SimilarityList.callback_useEffect",
            "score": 0.6785219740881092,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/similarity-list.tsx",
            "code": "() => {\n    if (preloadedComponents) {\n      console.log('Using preloaded component data:', preloadedComponents.length);\n      setLoading(false);\n      return;\n    }\n\n    async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.677159006408836,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.677159006408836,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6592678482352565,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6499643797926979,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6499643797926979,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6499643797926979,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6499643797926979,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6499643797926979,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6388429436985988,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6388429436985988,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6245331624648434,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6245331624648434,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.callback_useEffect",
            "score": 0.6143145929750012,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "CodeGraph.callback_useEffect",
            "score": 0.6143145929750012,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Card",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "zach",
        "description": "",
        "params": [
          {
            "name": "hi",
            "type": "string",
            "description": ""
          }
        ],
        "returnType": "void",
        "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.692900504930073,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6845602628176283,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6796592195536707,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6635128723705044,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6499643797926979,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6382429882561073,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6287765391900213,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6074109106795025,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardHeader",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardFooter",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardTitle",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardAction",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardDescription",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardContent",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Badge",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"default\" | \"secondary\" | \"destructive\" | \"outline\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/badge.tsx",
    "sourceCode": "function Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "ComparisonModal",
    "description": "",
    "props": [
      {
        "name": "isOpen",
        "type": "boolean",
        "required": true,
        "description": ""
      },
      {
        "name": "onClose",
        "type": "() => void",
        "required": true,
        "description": ""
      },
      {
        "name": "component1",
        "type": "{ name: string; code: string; filePath: string; }",
        "required": true,
        "description": ""
      },
      {
        "name": "component2",
        "type": "{ name: string; code: string; filePath: string; }",
        "required": true,
        "description": ""
      },
      {
        "name": "similarityScore",
        "type": "number",
        "required": true,
        "description": ""
      },
      {
        "name": "methodName",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "isMethodComparison",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/comparison-modal.tsx",
    "sourceCode": "export function ComparisonModal({\n  isOpen,\n  onClose,\n  component1,\n  component2,\n  similarityScore: initialSimilarityScore,\n  methodName,\n  isMethodComparison = false\n}: ComparisonModalProps) {\n  const [view, setView] = useState<\"split\" | \"unified\">(\"split\")\n  const [isFullScreen, setIsFullScreen] = useState(false)\n  const [showHighlights, setShowHighlights] = useState(true)\n  const [similarityScore, setSimilarityScore] = useState(initialSimilarityScore)\n\n  // Extract method code if we're comparing methods\n  const extractMethodCode = (code: string, methodName?: string) => {\n    if (!isMethodComparison || !methodName) return code;\n\n    // If the code already appears to be just a method (starts with common function patterns) return as is\n    if (code.trim().startsWith('function') ||\n      code.trim().startsWith('const') ||\n      code.trim().startsWith('let') ||\n      code.trim().startsWith('export')) {\n      return code;\n    }\n\n    try {\n      // More comprehensive regex to find method definitions with various patterns\n      const methodPatterns = [\n        // Standard function declarations\n        `function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Function expression assignments (const/let/var)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function assignments\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function without braces (single expression)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*[^;{]*;?`,\n        // Class methods\n        `${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async functions\n        `async\\\\s+function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async arrow functions\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*async\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`\n      ];\n\n      // Join all patterns with OR\n      const combinedPattern = methodPatterns.join('|');\n      const methodRegex = new RegExp(combinedPattern, 'g');\n\n      let match;\n      // Find the first match\n      if ((match = methodRegex.exec(code)) !== null) {\n        return match[0];\n      }\n\n      // Alternative approach if the regex fails: try to find the method by looking for its name\n      // and then extracting a reasonable block after it\n      const methodStartIndex = code.indexOf(`function ${methodName}`) > -1\n        ? code.indexOf(`function ${methodName}`)\n        : code.indexOf(`${methodName} =`) > -1\n          ? code.indexOf(`${methodName} =`)\n          : code.indexOf(`${methodName}(`) > -1\n            ? code.indexOf(`${methodName}(`)\n            : -1;\n\n      if (methodStartIndex > -1) {\n        // Find a reasonable endpoint - either the next method or the end of the file\n        let depth = 0;\n        let endIndex = methodStartIndex;\n\n        // Go through the code character by character looking for matching braces\n        for (let i = methodStartIndex; i < code.length; i++) {\n          if (code[i] === '{') depth++;\n          else if (code[i] === '}') {\n            depth--;\n            if (depth === 0) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n\n        if (endIndex > methodStartIndex) {\n          return code.substring(methodStartIndex, endIndex);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error extracting method code:\", e);\n    }\n\n    return code;\n  };\n\n  // Process the component code\n  const processedCode1 = extractMethodCode(component1.code || '', methodName);\n  const processedCode2 = extractMethodCode(component2.code || '', methodName);\n\n  // Calculate diff using jsdiff\n  const diff = diffLines(processedCode1, processedCode2);\n\n  // Normalize code for comparison - trim trailing whitespace on each line\n  const normalizedCode1 = processedCode1.split('\\n').map(line => line.trimRight());\n  const normalizedCode2 = processedCode2.split('\\n').map(line => line.trimRight());\n\n  // Calculate diff for split view - more accurate line-by-line comparison\n  const lines1 = normalizedCode1;\n  const lines2 = normalizedCode2;\n\n  // For the split view, we want to know which lines are different\n  const normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ');\n\n  const highlightedCode1 = lines1.map((line, i) => {\n    // Consider a line different only if it's beyond the other file's length\n    // or if the normalized content differs\n    const isDifferent = i >= lines2.length ||\n      normalizeForComparison(line) !== normalizeForComparison(lines2[i]);\n\n    return {\n      line: line,\n      isDifferent: isDifferent\n    };\n  });\n\n  const highlightedCode2 = lines2.map((line, i) => {\n    // Consider a line different only if it's beyond the other file's length\n    // or if the normalized content differs\n    const isDifferent = i >= lines1.length ||\n      normalizeForComparison(line) !== normalizeForComparison(lines1[i]);\n\n    return {\n      line: line,\n      isDifferent: isDifferent\n    };\n  });\n\n  // Count differences (using jsdiff results for accuracy)\n  const diffCount = diff.reduce((count: number, part: Change) => {\n    if (part.added || part.removed) {\n      // Count lines in the changed part\n      return count + (part.value.match(/\\n/g) || []).length + (part.value.endsWith('\\n') ? 0 : 1);\n    }\n    return count;\n  }, 0);\n\n  // Double-check for identical code\n  React.useEffect(() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }, [processedCode1, processedCode2, initialSimilarityScore, diffCount]);\n\n  const modalClasses = isFullScreen\n    ? \"max-w-[99vw] w-[99vw] h-[99vh] flex flex-col p-0 rounded-lg shadow-2xl border-2 border-slate-200 dark:border-slate-700\"\n    : \"max-w-[98vw] w-[98vw] h-[95vh] flex flex-col p-0 rounded-lg shadow-2xl border-2 border-slate-200 dark:border-slate-700\"\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className={`${modalClasses} !max-w-screen-2xl !w-screen`}>\n        <DialogHeader className=\"p-6 border-b border-slate-200 dark:border-slate-700 bg-gradient-to-r from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-900\">\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-indigo-500 to-violet-700 dark:from-indigo-400 dark:to-violet-500\">\n              {isMethodComparison ? \"Method Comparison\" : \"Component Comparison\"}\n            </DialogTitle>\n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={() => setIsFullScreen(!isFullScreen)}\n                className=\"p-2 rounded-md hover:bg-slate-200 dark:hover:bg-slate-700 transition-all\"\n                title={isFullScreen ? \"Exit fullscreen\" : \"Enter fullscreen\"}\n              >\n                <EnterFullScreenIcon className=\"h-4 w-4 text-slate-500 dark:text-slate-400\" />\n              </button>\n              <Badge\n                className={`py-1.5 px-3 text-sm font-medium ${similarityScore >= 100 || similarityScore === 1\n                  ? \"bg-green-50 text-green-700 border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800\"\n                  : similarityScore >= 80\n                    ? \"bg-red-50 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800\"\n                    : \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n                  }`}\n              >\n                {similarityScore >= 100 || similarityScore === 1\n                  ? \"Identical Components\"\n                  : `${Math.round(similarityScore)}% Similar ${diffCount > 0\n                    ? `• ${diffCount} Differences`\n                    : similarityScore < 100 && similarityScore < 1\n                      ? \"• Semantic differences detected\"\n                      : \"\"}`}\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-8 mt-6\">\n            <div className=\"flex items-center gap-3 bg-white dark:bg-slate-800 rounded-lg p-3 shadow-sm\">\n              <div className=\"flex-shrink-0 p-2 rounded-full bg-indigo-100 dark:bg-indigo-900/30\">\n                <CodeIcon className=\"h-4 w-4 text-indigo-600 dark:text-indigo-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg\">\n                  {isMethodComparison && methodName\n                    ? `${component1.name}.${methodName}`\n                    : component1.name}\n                </h3>\n                <p className=\"text-xs text-muted-foreground font-mono\">{component1.filePath}</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3 bg-white dark:bg-slate-800 rounded-lg p-3 shadow-sm\">\n              <div className=\"flex-shrink-0 p-2 rounded-full bg-violet-100 dark:bg-violet-900/30\">\n                <CodeIcon className=\"h-4 w-4 text-violet-600 dark:text-violet-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg\">\n                  {isMethodComparison && methodName\n                    ? `${component2.name}.${methodName}`\n                    : component2.name}\n                </h3>\n                <p className=\"text-xs text-muted-foreground font-mono\">{component2.filePath}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end mt-4 gap-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"highlights-mode\"\n                checked={showHighlights}\n                onCheckedChange={setShowHighlights}\n              />\n              <Label htmlFor=\"highlights-mode\" className=\"cursor-pointer\">Show Differences</Label>\n            </div>\n            <Tabs value={view} onValueChange={(v) => setView(v as \"split\" | \"unified\")} className=\"w-auto\">\n              <TabsList className=\"bg-slate-100 dark:bg-slate-800 p-1 rounded-lg\">\n                <TabsTrigger value=\"split\" className=\"rounded-md data-[state=active]:bg-white dark:data-[state=active]:bg-slate-700 data-[state=active]:shadow-sm\">\n                  Split View\n                </TabsTrigger>\n                <TabsTrigger value=\"unified\" className=\"rounded-md data-[state=active]:bg-white dark:data-[state=active]:bg-slate-700 data-[state=active]:shadow-sm\">\n                  Unified View\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </div>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-hidden min-h-0 bg-white dark:bg-slate-900 rounded-b-lg\">\n          {view === \"split\" ? (\n            <div className=\"flex h-full w-full\">\n              <ScrollArea className=\"w-[50%] border-r border-slate-200 dark:border-slate-700\">\n                <div className=\"py-4 px-2 font-mono text-xs\">\n                  {highlightedCode1.map((line, i) => (\n                    <div\n                      key={i}\n                      className={`py-0.5 px-6 flex leading-relaxed ${line.isDifferent && showHighlights\n                        ? \"bg-red-50 dark:bg-red-900/20 border-l-4 border-red-400 dark:border-red-600\"\n                        : \"\"\n                        }`}\n                    >\n                      <span className={`select-none text-slate-400 w-16 mr-4 text-right text-xs`}>{i + 1}</span>\n                      <span className=\"whitespace-pre overflow-x-auto flex-1 text-xs\">{line.line}</span>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n              <ScrollArea className=\"w-[50%]\">\n                <div className=\"py-4 px-2 font-mono text-xs\">\n                  {highlightedCode2.map((line, i) => (\n                    <div\n                      key={i}\n                      className={`py-0.5 px-6 flex leading-relaxed ${line.isDifferent && showHighlights\n                        ? \"bg-green-50 dark:bg-green-900/20 border-l-4 border-green-400 dark:border-green-600\"\n                        : \"\"\n                        }`}\n                    >\n                      <span className={`select-none text-slate-400 w-16 mr-4 text-right text-xs`}>{i + 1}</span>\n                      <span className=\"whitespace-pre overflow-x-auto flex-1 text-xs\">{line.line}</span>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </div>\n          ) : (\n            <ScrollArea className=\"h-full\">\n              <div className=\"py-4 px-2 font-mono text-xs\">\n                {diff.map((part: Change, partIndex: number) => {\n                  // Ensure part.value is treated as a string\n                  const value = part.value || '';\n                  // Split lines, handling potential trailing newline correctly\n                  const lines = value.split('\\n').filter((l: string, i: number, arr: string[]) => i < arr.length - 1 || l !== '');\n                  const prefix = part.added ? '+' : part.removed ? '-' : ' ';\n                  const bgColor = part.added ? 'bg-green-50 dark:bg-green-900/20' : part.removed ? 'bg-red-50 dark:bg-red-900/20' : '';\n                  const textColor = part.added ? 'text-green-700 dark:text-green-400' : part.removed ? 'text-red-700 dark:text-red-400' : 'text-slate-400';\n                  const borderColor = part.added ? 'border-l-4 border-green-400 dark:border-green-600' : part.removed ? 'border-l-4 border-red-400 dark:border-red-600' : '';\n\n                  return lines.map((line: string, lineIndex: number) => (\n                    <div\n                      key={`${partIndex}-${lineIndex}`}\n                      className={`py-0.5 px-6 flex leading-relaxed ${showHighlights ? bgColor : ''} ${showHighlights ? borderColor : ''}`}\n                    >\n                      <span className={`select-none ${textColor} w-6 mr-2 text-center font-bold ${!showHighlights && (part.added || part.removed) ? 'opacity-0' : ''}`}>{prefix}</span>\n                      {/* No original line numbers in this basic view */}\n                      <span className=\"whitespace-pre overflow-x-auto flex-1\">{line}</span>\n                    </div>\n                  ));\n                })}\n              </div>\n            </ScrollArea>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "extractMethodCode",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " extractMethodCode = (code: string, methodName?: string) => {\n    if (!isMethodComparison || !methodName) return code;\n\n    // If the code already appears to be just a method (starts with common function patterns) return as is\n    if (code.trim().startsWith('function') ||\n      code.trim().startsWith('const') ||\n      code.trim().startsWith('let') ||\n      code.trim().startsWith('export')) {\n      return code;\n    }\n\n    try {\n      // More comprehensive regex to find method definitions with various patterns\n      const methodPatterns = [\n        // Standard function declarations\n        `function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Function expression assignments (const/let/var)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function assignments\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function without braces (single expression)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*[^;{]*;?`,\n        // Class methods\n        `${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async functions\n        `async\\\\s+function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async arrow functions\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*async\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`\n      ];\n\n      // Join all patterns with OR\n      const combinedPattern = methodPatterns.join('|');\n      const methodRegex = new RegExp(combinedPattern, 'g');\n\n      let match;\n      // Find the first match\n      if ((match = methodRegex.exec(code)) !== null) {\n        return match[0];\n      }\n\n      // Alternative approach if the regex fails: try to find the method by looking for its name\n      // and then extracting a reasonable block after it\n      const methodStartIndex = code.indexOf(`function ${methodName}`) > -1\n        ? code.indexOf(`function ${methodName}`)\n        : code.indexOf(`${methodName} =`) > -1\n          ? code.indexOf(`${methodName} =`)\n          : code.indexOf(`${methodName}(`) > -1\n            ? code.indexOf(`${methodName}(`)\n            : -1;\n\n      if (methodStartIndex > -1) {\n        // Find a reasonable endpoint - either the next method or the end of the file\n        let depth = 0;\n        let endIndex = methodStartIndex;\n\n        // Go through the code character by character looking for matching braces\n        for (let i = methodStartIndex; i < code.length; i++) {\n          if (code[i] === '{') depth++;\n          else if (code[i] === '}') {\n            depth--;\n            if (depth === 0) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n\n        if (endIndex > methodStartIndex) {\n          return code.substring(methodStartIndex, endIndex);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error extracting method code:\", e);\n    }\n\n    return code;\n  }"
      },
      {
        "name": "normalizeForComparison",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')",
        "similarityWarnings": [
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7765653211025729,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7413073368664149,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7413073368664149,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.7381232796393189,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.7381232796393189,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7020747307865115,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.698954428010989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6924605875915651,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6881434549071587,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6881434549071587,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6877269882629207,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6877269882629207,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6841159692001806,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6841159692001806,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6829002542534065,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6826747921783684,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6746384408422705,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6746384408422705,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6727090123372936,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6667333332056945,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6667333332056945,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6651711139379713,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6651711139379713,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6642413225853494,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6642413225853494,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6608050051478098,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6608050051478098,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6417508207732537,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6264952086401543,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          }
        ]
      },
      {
        "name": "callback_React.useEffect",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7870093926764367,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7313709969718072,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7166371454258212,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7153133584769668,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7122011674966203,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6904357534300279,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6904357534300279,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6853869019316426,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6853869019316426,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.671056189899051,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarityList.handleCompare",
            "score": 0.668173622730709,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/similarity-list.tsx",
            "code": " handleCompare = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    // Fetch code for components if not already available\n    const fetchComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }\n\n    // Set up the comparison\n    Promise.all([\n      fetchComponentCode(item.component1, item.isMethodLevel ? item.method1 : undefined),\n      fetchComponentCode(item.component2, item.isMethodLevel ? item.method2 : undefined)\n    ]).then(([code1, code2]) => {\n      // Perform direct code comparison to catch identical components\n      // This is a client-side fallback to ensure identical components show as 100% similar\n      let similarity = item.similarity;\n\n      if (code1 && code2) {\n        // Normalize the code by removing whitespace variations\n        const normalizedCode1 = code1.trim().replace(/\\s+/g, ' ');\n        const normalizedCode2 = code2.trim().replace(/\\s+/g, ' ');\n\n        // If codes are identical, set similarity to 100%\n        if (normalizedCode1 === normalizedCode2) {\n          similarity = 100;\n          console.log(`Components detected as identical via client-side check: ${item.component1.name}${item.isMethodLevel ? `.${item.method1}` : ''} and ${item.component2.name}${item.isMethodLevel ? `.${item.method2}` : ''}`);\n        }\n      }\n\n      setSelectedPair({\n        component1: {\n          name: item.component1.name,\n          code: code1,\n          filePath: item.component1.filePath || `components/${item.component1.name}`,\n        },\n        component2: {\n          name: item.component2.name,\n          code: code2,\n          filePath: item.component2.filePath || `components/${item.component2.name}`,\n        },\n        similarity: similarity,\n      })\n      setComparisonOpen(true)\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6665284356713298,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6580172574893719,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6578494662343545,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6578494662343545,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6547222558643515,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6547222558643515,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6403029293964069,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6366957166275647,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6366083435242419,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6366083435242419,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6304074321238731,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6304074321238731,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6265751890037171,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6265751890037171,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6244639634022595,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6244639634022595,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.605176311638849,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.605176311638849,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6021210309631648,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6021210309631648,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Dialog",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogClose",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogDescription",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogFooter",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogHeader",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogOverlay",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogPortal",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogTitle",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Tabs",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsList",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Badge",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"default\" | \"secondary\" | \"destructive\" | \"outline\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/badge.tsx",
    "sourceCode": "function Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "ScrollArea",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/scroll-area.tsx",
    "sourceCode": "function ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "ScrollBar",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/scroll-area.tsx",
    "sourceCode": "function ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Switch",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/switch.tsx",
    "sourceCode": "function Switch({\n    className,\n    ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n    return (\n        <SwitchPrimitive.Root\n            data-slot=\"switch\"\n            className={cn(\n                \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n                className\n            )}\n            {...props}\n        >\n            <SwitchPrimitive.Thumb\n                data-slot=\"switch-thumb\"\n                className={cn(\n                    \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n                )}\n            />\n        </SwitchPrimitive.Root>\n    )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Label",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/label.tsx",
    "sourceCode": "function Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CodeRelationships",
    "description": "",
    "props": [
      {
        "name": "entityId",
        "type": "string",
        "required": false,
        "description": ""
      },
      {
        "name": "entityType",
        "type": "enum",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/code-relationships.tsx",
    "sourceCode": "export function CodeRelationships({ entityId, entityType }: CodeRelationshipsProps) {\n  const [view, setView] = useState<\"dependencies\" | \"dependents\" | \"all\">(\"all\")\n  const [components, setComponents] = useState<CodeEntity[]>([])\n  const [relationships, setRelationships] = useState<Relationship[]>([])\n  const [loading, setLoading] = useState(true)\n\n  // Fetch component data\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: any) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp, targetMethod] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: any) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  // If entityId is provided, filter relationships for this entity\n  const filteredRelationships = useMemo(() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }, [entityId, view, relationships])\n\n  // Get the entities involved in the filtered relationships\n  const filteredEntities = useMemo(() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }, [filteredRelationships, components])\n\n  // Get the current entity if entityId is provided\n  const currentEntity = useMemo(() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }, [entityId, components])\n\n  const getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }\n\n  const getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }\n\n  const getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }\n\n  if (loading) {\n    return (\n      <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n        <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n          <CardTitle>Code Relationships</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Loading relationship data...</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n      <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>{currentEntity ? `Code Relationships for ${currentEntity.name}` : \"Code Relationships\"}</CardTitle>\n          {currentEntity && (\n            <Tabs value={view} onValueChange={(v) => setView(v as any)}>\n              <TabsList className=\"bg-slate-100 dark:bg-slate-800\">\n                <TabsTrigger value=\"all\">All</TabsTrigger>\n                <TabsTrigger value=\"dependencies\">Dependencies</TabsTrigger>\n                <TabsTrigger value=\"dependents\">Dependents</TabsTrigger>\n              </TabsList>\n            </Tabs>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {filteredRelationships.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No relationships found.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {filteredRelationships.map((rel, index) => {\n              const sourceEntity = components.find((e) => e.id === rel.source)\n              const targetEntity = components.find((e) => e.id === rel.target)\n\n              if (!sourceEntity || !targetEntity) return null\n\n              return (\n                <div\n                  key={index}\n                  className=\"flex items-center gap-3 p-4 rounded-lg border border-slate-100 dark:border-slate-800\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    {getEntityIcon(sourceEntity.type)}\n                    <div>\n                      <div className=\"font-medium\">{sourceEntity.name}</div>\n                      <div className=\"text-xs text-muted-foreground font-mono\">{sourceEntity.filePath}</div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col items-center mx-4\">\n                    <Badge className={`${getRelationshipColor(rel.type)}`}>{getRelationshipLabel(rel.type)}</Badge>\n                    <ArrowRightIcon className=\"h-6 w-6 text-muted-foreground my-1\" />\n                  </div>\n\n                  <div className=\"flex items-center gap-2\">\n                    {getEntityIcon(targetEntity.type)}\n                    <div>\n                      <div className=\"font-medium\">{targetEntity.name}</div>\n                      <div className=\"text-xs text-muted-foreground font-mono\">{targetEntity.filePath}</div>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "callback_useEffect",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: any) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp, targetMethod] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: any) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.callback_useEffect",
            "score": 0.8635443192319595,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "CodeGraph.callback_useEffect",
            "score": 0.8635443192319595,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "SimilarityList.callback_useEffect",
            "score": 0.645716676421617,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/similarity-list.tsx",
            "code": "() => {\n    if (preloadedComponents) {\n      console.log('Using preloaded component data:', preloadedComponents.length);\n      setLoading(false);\n      return;\n    }\n\n    async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          }
        ]
      },
      {
        "name": "filteredRelationships_useMemo",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.9537847459729679,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.9537847459729679,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.9046267972711332,
            "reason": "Function appears to have similar functionality (90% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.8335437108188063,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.8335437108188063,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7780245048520426,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7776125198144376,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7673842937885624,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7673842937885624,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.736452813980108,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6886125891354897,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6837471650460094,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6762047284461544,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6762047284461544,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6712982967450349,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6665284356713298,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6665284356713298,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6665284356713298,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6592699819631732,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6558175490859315,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6558175490859315,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6504421656295001,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6504421656295001,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6264952086401543,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6264952086401543,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6264952086401543,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6256930638306002,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6256930638306002,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6207796848437774,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6207796848437774,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6135115375170851,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6135115375170851,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.callback_useEffect",
            "score": 0.6112226409896258,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "CodeGraph.callback_useEffect",
            "score": 0.6112226409896258,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6028758182830213,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6028758182830213,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          }
        ]
      },
      {
        "name": "filteredEntities_useMemo",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.9468337608002801,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.9468337608002801,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.9218607153827271,
            "reason": "Function appears to have similar functionality (92% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.9218607153827271,
            "reason": "Function appears to have similar functionality (92% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.9046267972711332,
            "reason": "Function appears to have similar functionality (90% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.8605999002553318,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.8091843893860919,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.8091843893860919,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7637836595006662,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7513776225623652,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7513776225623652,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7343059781397052,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7338673262458864,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7280881065768938,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7280881065768938,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7242567074195291,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7127903531274534,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7127903531274534,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7122011674966203,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7122011674966203,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.7122011674966203,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7044910373699316,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.690344394413162,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.690344394413162,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6826747921783684,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6826747921783684,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6826747921783684,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6724689130127456,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6527439703996272,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6527439703996272,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6401196187570274,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6401196187570274,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6389975451072761,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6389975451072761,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6124157036784413,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6124157036784413,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6124157036784413,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6074109106795025,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6074109106795025,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6074109106795025,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6074109106795025,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6074109106795025,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "SimilarityList.callback_useEffect",
            "score": 0.6009710338157367,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/similarity-list.tsx",
            "code": "() => {\n    if (preloadedComponents) {\n      console.log('Using preloaded component data:', preloadedComponents.length);\n      setLoading(false);\n      return;\n    }\n\n    async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          }
        ]
      },
      {
        "name": "currentEntity_useMemo",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.8605999002553318,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.8452022798496852,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.8452022798496852,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.8078055434207957,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.8078055434207957,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7945525635914849,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7945525635914849,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7916470088708548,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7881335813715676,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7881335813715676,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.7780245048520426,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7734503688287098,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7734503688287098,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7589248560607996,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7589248560607996,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.735625005597882,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7159443318146995,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7151011487992612,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7039525940573228,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7039525940573228,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.697276452511159,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6524600727745999,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6524600727745999,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6524600727745999,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6417508207732537,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6417508207732537,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6417508207732537,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6400634821929431,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6400634821929431,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6366957166275647,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6366957166275647,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6366957166275647,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6340487225581759,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6340487225581759,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6287765391900213,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6287765391900213,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6287765391900213,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6287765391900213,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6287765391900213,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6273838789430827,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.625414369362396,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.625414369362396,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          }
        ]
      },
      {
        "name": "getEntityIcon",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.9737405185329928,
            "reason": "Function appears to have similar functionality (97% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.9737405185329928,
            "reason": "Function appears to have similar functionality (97% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.8491824983587043,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.8491824983587043,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.8150103584493916,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8116366334717905,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8116366334717905,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7916470088708548,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7842095404109233,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7842095404109233,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7732415037414749,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7642151508930309,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7565395178401415,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7565395178401415,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7559649428977571,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7338673262458864,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.7128171049341161,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.7128171049341161,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.7070568230501257,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.7070568230501257,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.7070568230501257,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.7058433960756041,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7029215374692732,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7029215374692732,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6924605875915651,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6924605875915651,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6924605875915651,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6905775352637213,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6905775352637213,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6845602628176283,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6845602628176283,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6845602628176283,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6845602628176283,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6845602628176283,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6745478383679496,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6745478383679496,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.671056189899051,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.671056189899051,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.671056189899051,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6681662863732719,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6681662863732719,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6592699819631732,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          }
        ]
      },
      {
        "name": "getRelationshipLabel",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.8844906547606614,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.7980148835470727,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.7980148835470727,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7934447930089258,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7934447930089258,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.7776125198144376,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7757597712219153,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7732415037414749,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7596157780925331,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7596157780925331,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7577118027214033,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7577118027214033,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7494188533574244,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7494188533574244,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.740580548875687,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7299614297592901,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7299614297592901,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.707274098508059,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7044910373699316,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7020747307865115,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7020747307865115,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7020747307865115,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.697276452511159,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.692900504930073,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.692900504930073,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.692900504930073,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.692900504930073,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.692900504930073,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6863254032349733,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6863254032349733,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.68180212444583,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.68180212444583,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6782124798834633,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6782124798834633,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6782124798834633,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6731315149624216,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6731315149624216,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6680165017727264,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6680165017727264,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6580172574893719,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6580172574893719,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6580172574893719,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.callback_useEffect",
            "score": 0.6095413664480008,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "CodeGraph.callback_useEffect",
            "score": 0.6095413664480008,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          }
        ]
      },
      {
        "name": "getRelationshipColor",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.8844906547606614,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.87157898490665,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.87157898490665,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8256178059190924,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8256178059190924,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7633468963451983,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7633468963451983,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7461869022168497,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7461869022168497,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.736452813980108,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7125771822188961,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7125771822188961,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7058433960756041,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6938937234467899,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6727090123372936,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6727090123372936,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6727090123372936,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6724689130127456,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6592678482352565,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6567858941886797,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6463359592902597,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6463359592902597,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6403029293964069,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6403029293964069,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6403029293964069,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6397750426670186,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6397750426670186,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.638715240780519,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.638715240780519,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6382429882561073,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6382429882561073,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6382429882561073,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6382429882561073,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6382429882561073,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6374415704014486,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6374415704014486,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6273838789430827,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6237973667818495,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6237973667818495,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6204737700724535,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6204737700724535,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6204737700724535,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Card",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "zach",
        "description": "",
        "params": [
          {
            "name": "hi",
            "type": "string",
            "description": ""
          }
        ],
        "returnType": "void",
        "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.692900504930073,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6845602628176283,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6796592195536707,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6635128723705044,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6499643797926979,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6382429882561073,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6287765391900213,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6074109106795025,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardHeader",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardFooter",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardTitle",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardAction",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardDescription",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardContent",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Tabs",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsList",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Badge",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"default\" | \"secondary\" | \"destructive\" | \"outline\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/badge.tsx",
    "sourceCode": "function Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CodeGraph",
    "description": "",
    "props": [
      {
        "name": "entityId",
        "type": "string",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/code-graph.tsx",
    "sourceCode": "export function CodeGraph({ entityId }: CodeGraphProps) {\n  const [filter, setFilter] = useState<\"all\" | \"component\" | \"class\" | \"function\" | \"method\">(\"all\")\n  const [selectedEntity, setSelectedEntity] = useState<CodeEntity | null>(null)\n  const [detailsOpen, setDetailsOpen] = useState(false)\n  const [zoom, setZoom] = useState(1)\n  const svgRef = useRef<SVGSVGElement>(null)\n\n  const [components, setComponents] = useState<CodeEntity[]>([])\n  const [relationships, setRelationships] = useState<Relationship[]>([])\n  const [loading, setLoading] = useState(true)\n\n  // Fetch component data\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  // Use useMemo to prevent recalculation on every render\n  const filteredEntities = useMemo(() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }, [filter, components])\n\n  // Filter relationships based on the filtered entities\n  const filteredRelationships = useMemo(() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }, [filteredEntities, relationships])\n\n  // Calculate node positions in a circle layout\n  const positions = useMemo(() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }, [filteredEntities])\n\n  const handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }\n\n  const getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }\n\n  const getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }\n\n  const zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }\n\n  const zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }\n\n  if (loading) {\n    return (\n      <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n        <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n          <CardTitle>Code Visualization</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Loading code graph data...</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n      <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Code Visualization</CardTitle>\n          <div className=\"flex items-center gap-4\">\n            <Select value={filter} onValueChange={(value) => setFilter(value as any)}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"component\">Components</SelectItem>\n                <SelectItem value=\"class\">Classes</SelectItem>\n                <SelectItem value=\"function\">Functions</SelectItem>\n                <SelectItem value=\"method\">Methods</SelectItem>\n              </SelectContent>\n            </Select>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"icon\" onClick={zoomOut}>\n                <ZoomOut className=\"h-4 w-4\" />\n              </Button>\n              <span className=\"text-sm\">{Math.round(zoom * 100)}%</span>\n              <Button variant=\"outline\" size=\"icon\" onClick={zoomIn}>\n                <ZoomIn className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div className=\"relative bg-slate-50 dark:bg-slate-950 overflow-auto\" style={{ height: 600 }}>\n          <svg\n            ref={svgRef}\n            width=\"800\"\n            height=\"600\"\n            viewBox=\"0 0 800 600\"\n            className=\"mx-auto\"\n            style={{ transform: `scale(${zoom})`, transformOrigin: \"center\", transition: \"transform 0.2s\" }}\n          >\n            {/* Draw edges */}\n            {filteredRelationships.map((rel, index) => {\n              const sourcePos = positions.find((p) => p.id === rel.source)\n              const targetPos = positions.find((p) => p.id === rel.target)\n\n              if (!sourcePos || !targetPos) return null\n\n              // Calculate the angle for the arrow\n              const dx = targetPos.x - sourcePos.x\n              const dy = targetPos.y - sourcePos.y\n              const angle = Math.atan2(dy, dx)\n\n              // Calculate the position for the arrow (slightly before the target)\n              const nodeRadius = 30\n              const arrowX = targetPos.x - nodeRadius * Math.cos(angle)\n              const arrowY = targetPos.y - nodeRadius * Math.sin(angle)\n\n              // Calculate the label position (midpoint of the edge)\n              const labelX = (sourcePos.x + targetPos.x) / 2\n              const labelY = (sourcePos.y + targetPos.y) / 2 - 10\n\n              return (\n                <g key={`edge-${index}`}>\n                  <defs>\n                    <marker\n                      id={`arrowhead-${index}`}\n                      markerWidth=\"10\"\n                      markerHeight=\"7\"\n                      refX=\"0\"\n                      refY=\"3.5\"\n                      orient=\"auto\"\n                    >\n                      <polygon points=\"0 0, 10 3.5, 0 7\" fill={getEdgeColor(rel.type)} />\n                    </marker>\n                  </defs>\n                  <line\n                    x1={sourcePos.x}\n                    y1={sourcePos.y}\n                    x2={arrowX}\n                    y2={arrowY}\n                    stroke={getEdgeColor(rel.type)}\n                    strokeWidth=\"2\"\n                    markerEnd={`url(#arrowhead-${index})`}\n                  />\n                  <text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    fill={getEdgeColor(rel.type)}\n                    fontSize=\"12\"\n                    fontWeight=\"500\"\n                    className=\"select-none\"\n                  >\n                    {rel.type}\n                  </text>\n                </g>\n              )\n            })}\n\n            {/* Draw nodes */}\n            {filteredEntities.map((entity) => {\n              const pos = positions.find((p) => p.id === entity.id)\n              if (!pos) return null\n\n              const nodeColor = getNodeColor(entity.type)\n\n              return (\n                <g\n                  key={entity.id}\n                  transform={`translate(${pos.x}, ${pos.y})`}\n                  onClick={() => handleNodeClick(entity)}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <circle r=\"30\" fill=\"white\" stroke={nodeColor} strokeWidth=\"3\" className=\"dark:fill-slate-800\" />\n                  <text\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"middle\"\n                    fill={nodeColor}\n                    fontSize=\"12\"\n                    fontWeight=\"bold\"\n                    className=\"select-none\"\n                  >\n                    {entity.name.substring(0, 2)}\n                  </text>\n                  <text y=\"50\" textAnchor=\"middle\" fill=\"currentColor\" fontSize=\"12\" className=\"select-none\">\n                    {entity.name}\n                  </text>\n                </g>\n              )\n            })}\n          </svg>\n        </div>\n        <div className=\"p-4 border-t border-slate-100 dark:border-slate-800\">\n          <div className=\"flex flex-wrap gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-violet-500\"></div>\n              <span className=\"text-sm\">Component</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n              <span className=\"text-sm\">Class</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-emerald-500\"></div>\n              <span className=\"text-sm\">Function</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-amber-500\"></div>\n              <span className=\"text-sm\">Method</span>\n            </div>\n          </div>\n          <div className=\"mt-4 flex flex-wrap gap-4\">\n            <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n              imports\n            </Badge>\n            <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n              extends\n            </Badge>\n            <Badge className=\"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\">\n              implements\n            </Badge>\n            <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n              calls\n            </Badge>\n            <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n              renders\n            </Badge>\n            <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n              uses\n            </Badge>\n          </div>\n        </div>\n      </CardContent>\n      {selectedEntity && (\n        <CodeEntityDetails\n          entity={selectedEntity}\n          isOpen={detailsOpen}\n          onClose={() => setDetailsOpen(false)}\n        />\n      )}\n    </Card>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "callback_useEffect",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.callback_useEffect",
            "score": 0.8635443192319595,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: any) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp, targetMethod] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: any) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "SimilarityList.callback_useEffect",
            "score": 0.7414107782798991,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/similarity-list.tsx",
            "code": "() => {\n    if (preloadedComponents) {\n      console.log('Using preloaded component data:', preloadedComponents.length);\n      setLoading(false);\n      return;\n    }\n\n    async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6144799840367834,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6143145929750012,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6112226409896258,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6095413664480008,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          }
        ]
      },
      {
        "name": "filteredEntities_useMemo",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.9468337608002801,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.8584600424864354,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.8584600424864354,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.8452022798496852,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.8335437108188063,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7715586354115841,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7715586354115841,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7661208518637541,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7627373854664168,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7627373854664168,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7565395178401415,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7369406612059743,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7326161080130102,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7326161080130102,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.724764328261452,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7234391543340878,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7234391543340878,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6954968273862814,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6954968273862814,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6904357534300279,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6904357534300279,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6904357534300279,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6841159692001806,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6841159692001806,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6841159692001806,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6728929375554195,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6728929375554195,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6680165017727264,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6477429479818212,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6477429479818212,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6423753906414246,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6423753906414246,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6344118519067191,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6344118519067191,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6344118519067191,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6237973667818495,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          }
        ]
      },
      {
        "name": "filteredRelationships_useMemo",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.9537847459729679,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.9218607153827271,
            "reason": "Function appears to have similar functionality (92% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.8584600424864354,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.8584600424864354,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7934447930089258,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7910825769235851,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7910825769235851,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7881335813715676,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.7461869022168497,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7166046902391928,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7080492348536783,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6929213020414736,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6905775352637213,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6900662435541005,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6900662435541005,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6853869019316426,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6853869019316426,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6853869019316426,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6802388477858244,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6802388477858244,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6667333332056945,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6667333332056945,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6667333332056945,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.666694233794235,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.666694233794235,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6574617113286929,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6574617113286929,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6567578974348426,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6567578974348426,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6483389968197113,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6483389968197113,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6425367024713939,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6425367024713939,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          }
        ]
      },
      {
        "name": "positions_useMemo",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.8091843893860919,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7945525635914849,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7910825769235851,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7910825769235851,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7715586354115841,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7715586354115841,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.7673842937885624,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7081687896066112,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7081687896066112,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7029215374692732,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6889328704498463,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6863254032349733,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6836619201868064,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6836619201868064,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6827376242640502,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6827376242640502,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6823580224691489,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6762581673013961,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6762581673013961,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6706892256563064,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6706892256563064,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6608050051478098,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6608050051478098,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6608050051478098,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6569636249082866,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6381486601722658,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6381486601722658,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6374415704014486,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6274305033701065,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6274305033701065,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6274305033701065,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6265751890037171,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6265751890037171,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6265751890037171,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6158923697429082,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6158923697429082,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          }
        ]
      },
      {
        "name": "handleNodeClick",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.817568041022956,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7842095404109233,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7816915657691288,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7816915657691288,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7657815119981425,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7657815119981425,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7617456236191057,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7617456236191057,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7589248560607996,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7451880680839202,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.730115989577245,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.730115989577245,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.730115989577245,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7299614297592901,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7251880086685029,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7234391543340878,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7234391543340878,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7127903531274534,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6980831143493765,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6980831143493765,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6905409000863261,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6905409000863261,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6881434549071587,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6881434549071587,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6881434549071587,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6827376242640502,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6827376242640502,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6802388477858244,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6802388477858244,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6719574769388486,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6719574769388486,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6547222558643515,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6547222558643515,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6547222558643515,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6504421656295001,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6463359592902597,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          }
        ]
      },
      {
        "name": "getNodeColor",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.8749898465685859,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.8749898465685859,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.8430932432507714,
            "reason": "Function appears to have similar functionality (84% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.8430932432507714,
            "reason": "Function appears to have similar functionality (84% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.8256178059190924,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.8135864418359672,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.8135864418359672,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.8116366334717905,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7617456236191057,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7617456236191057,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7596157780925331,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7532056885412839,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7211908333432424,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7142917939981817,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7039525940573228,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6954968273862814,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6954968273862814,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.690344394413162,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6900392524257051,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6900392524257051,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6877269882629207,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6877269882629207,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6877269882629207,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.686276503692359,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.686276503692359,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6726865822383625,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6726865822383625,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6726865822383625,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6574617113286929,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6574617113286929,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6381486601722658,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6381486601722658,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6304074321238731,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6304074321238731,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6304074321238731,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6207796848437774,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          }
        ]
      },
      {
        "name": "getEdgeColor",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8749898465685859,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8749898465685859,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.87157898490665,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7980148835470727,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7792751611551054,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7792751611551054,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7203940703635279,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7203940703635279,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7128171049341161,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6910851018989377,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6870626060103341,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.677159006408836,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6761566110888013,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6761566110888013,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6719574769388486,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6719574769388486,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6690160675633217,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6690160675633217,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6690160675633217,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6668118201672683,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6668118201672683,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6651711139379713,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6651711139379713,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6651711139379713,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6567578974348426,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6567578974348426,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6423753906414246,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6423753906414246,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6401196187570274,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6256930638306002,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.625414369362396,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6158923697429082,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6158923697429082,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6021210309631648,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6021210309631648,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6021210309631648,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          }
        ]
      },
      {
        "name": "zoomIn",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.9459939112001708,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.9459939112001708,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7413073368664149,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7413073368664149,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7413073368664149,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6905409000863261,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6905409000863261,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6900392524257051,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6900392524257051,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.68180212444583,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6802453152667892,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6762581673013961,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6762581673013961,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6759040928808532,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6759040928808532,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6759040928808532,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6745478383679496,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6680302237032849,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6668118201672683,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6668118201672683,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6657208035103238,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6657208035103238,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6530165433147391,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6530165433147391,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6477429479818212,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6477429479818212,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6425367024713939,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6425367024713939,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6400634821929431,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6389975451072761,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.638715240780519,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6245331624648434,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.605176311638849,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.605176311638849,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.605176311638849,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6028758182830213,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          }
        ]
      },
      {
        "name": "zoomOut",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.9459939112001708,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.9459939112001708,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7381232796393189,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7381232796393189,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7381232796393189,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6980831143493765,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6980831143493765,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6963832864387989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6963832864387989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6963832864387989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.686276503692359,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.686276503692359,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6761566110888013,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6761566110888013,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6731315149624216,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6728929375554195,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6728929375554195,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6706892256563064,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6706892256563064,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6695759174647988,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6681662863732719,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.66000186790836,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.66000186790836,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6599948245609382,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6599948245609382,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6527439703996272,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6526577147996351,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6483389968197113,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6483389968197113,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6397750426670186,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6388429436985988,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6340487225581759,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6244639634022595,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6244639634022595,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6244639634022595,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6135115375170851,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Card",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "zach",
        "description": "",
        "params": [
          {
            "name": "hi",
            "type": "string",
            "description": ""
          }
        ],
        "returnType": "void",
        "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.692900504930073,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6845602628176283,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6796592195536707,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6635128723705044,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6499643797926979,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6382429882561073,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6287765391900213,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6074109106795025,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardHeader",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardFooter",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardTitle",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardAction",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardDescription",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardContent",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Select",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectGroup",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectItem",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectLabel",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectScrollDownButton",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectScrollUpButton",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectSeparator",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "size",
        "type": "enum",
        "required": false,
        "defaultValue": "default",
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectValue",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Badge",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"default\" | \"secondary\" | \"destructive\" | \"outline\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/badge.tsx",
    "sourceCode": "function Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Button",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"link\" | \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "size",
        "type": "\"default\" | \"sm\" | \"lg\" | \"icon\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/button.tsx",
    "sourceCode": "function Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CodeEntityDetails",
    "description": "",
    "props": [
      {
        "name": "entity",
        "type": "CodeEntity | null",
        "required": true,
        "description": ""
      },
      {
        "name": "isOpen",
        "type": "boolean",
        "required": true,
        "description": ""
      },
      {
        "name": "onClose",
        "type": "() => void",
        "required": true,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/code-entity-details.tsx",
    "sourceCode": "export function CodeEntityDetails({ entity, isOpen, onClose }: CodeEntityDetailsProps) {\n  if (!entity) return null\n\n  const getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }\n\n  const getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className=\"max-w-3xl\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-3\">\n            {getEntityIcon()}\n            <DialogTitle className=\"text-xl\">{entity.name}</DialogTitle>\n            {getEntityTypeBadge()}\n          </div>\n          <p className=\"text-sm text-muted-foreground font-mono mt-2\">{entity.filePath}</p>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"code\">\n          <TabsList className=\"mb-4\">\n            <TabsTrigger value=\"code\">Code</TabsTrigger>\n            <TabsTrigger value=\"usage\">Usage</TabsTrigger>\n            <TabsTrigger value=\"dependencies\">Dependencies</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"code\">\n            <CodeBlock code={entity.code || \"\"} language=\"tsx\" />\n          </TabsContent>\n          <TabsContent value=\"usage\">\n            <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md\">\n              <p className=\"text-muted-foreground\">Usage examples will appear here.</p>\n            </div>\n          </TabsContent>\n          <TabsContent value=\"dependencies\">\n            <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md\">\n              <p className=\"text-muted-foreground\">Dependencies will appear here.</p>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "getEntityIcon",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.9737405185329928,
            "reason": "Function appears to have similar functionality (97% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.8841725029484778,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.8841725029484778,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8135864418359672,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8135864418359672,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.8078055434207957,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.8031516017147106,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7816915657691288,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7816915657691288,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7627373854664168,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7627373854664168,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7577118027214033,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7513776225623652,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7401740502717719,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7400562481257751,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.7203940703635279,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.7203940703635279,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.7125771822188961,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7081687896066112,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7081687896066112,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6900662435541005,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6900662435541005,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6881498123294711,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6881498123294711,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6881498123294711,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6762047284461544,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6746384408422705,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6746384408422705,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6746384408422705,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6657208035103238,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6657208035103238,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.66000186790836,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.66000186790836,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6578494662343545,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6578494662343545,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6578494662343545,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          }
        ]
      },
      {
        "name": "getEntityTypeBadge",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.8841725029484778,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.8841725029484778,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.8491824983587043,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8430932432507714,
            "reason": "Function appears to have similar functionality (84% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8430932432507714,
            "reason": "Function appears to have similar functionality (84% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.7792751611551054,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.7792751611551054,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7734503688287098,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7657815119981425,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7657815119981425,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.7633468963451983,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7494188533574244,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7386536695189152,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7326161080130102,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7326161080130102,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7280881065768938,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7211580980518396,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7013082937076784,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6836619201868064,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6836619201868064,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.666694233794235,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.666694233794235,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6642413225853494,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6642413225853494,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6642413225853494,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6599948245609382,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6599948245609382,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6558175490859315,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6530165433147391,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6530165433147391,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496091925068673,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496091925068673,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496091925068673,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6366083435242419,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6366083435242419,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6366083435242419,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Dialog",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogClose",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogDescription",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogFooter",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogHeader",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogOverlay",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogPortal",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogTitle",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Tabs",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsList",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CodeBlock",
    "description": "",
    "props": [
      {
        "name": "code",
        "type": "string",
        "required": true,
        "description": ""
      },
      {
        "name": "language",
        "type": "string",
        "required": true,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/code-block.tsx",
    "sourceCode": "export function CodeBlock({ code, language }: CodeBlockProps) {\n  const [copied, setCopied] = useState(false)\n\n  const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }\n\n  return (\n    <div className=\"relative group\">\n      <pre\n        className={cn(\n          \"rounded-xl border border-slate-100 dark:border-slate-800 bg-white dark:bg-slate-900 p-6 overflow-x-auto shadow-sm\",\n          language === \"tsx\" && \"language-tsx\",\n          language === \"jsx\" && \"language-jsx\",\n          language === \"css\" && \"language-css\",\n        )}\n      >\n        <code className=\"text-sm font-mono\">{code}</code>\n      </pre>\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        className=\"absolute top-3 right-3 h-8 w-8 opacity-0 group-hover:opacity-100 transition-opacity\"\n        onClick={copyToClipboard}\n      >\n        {copied ? <CheckIcon className=\"h-4 w-4\" /> : <CopyIcon className=\"h-4 w-4\" />}\n      </Button>\n    </div>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "copyToClipboard",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.730115989577245,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.730115989577245,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7175861884795517,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7164537893756712,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7070568230501257,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6963832864387989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6963832864387989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6881498123294711,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6881498123294711,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6851415646911032,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6782124798834633,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6759040928808532,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6759040928808532,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6726865822383625,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6726865822383625,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6690160675633217,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6690160675633217,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6524600727745999,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6496091925068673,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6496091925068673,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6344118519067191,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6344118519067191,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6274305033701065,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6274305033701065,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6204737700724535,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6124157036784413,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "CodeEntityDetails",
    "description": "",
    "props": [
      {
        "name": "entity",
        "type": "CodeEntity | null",
        "required": true,
        "description": ""
      },
      {
        "name": "isOpen",
        "type": "boolean",
        "required": true,
        "description": ""
      },
      {
        "name": "onClose",
        "type": "() => void",
        "required": true,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/code-entity-details.tsx",
    "sourceCode": "export function CodeEntityDetails({ entity, isOpen, onClose }: CodeEntityDetailsProps) {\n  if (!entity) return null\n\n  const getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }\n\n  const getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className=\"max-w-3xl\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-3\">\n            {getEntityIcon()}\n            <DialogTitle className=\"text-xl\">{entity.name}</DialogTitle>\n            {getEntityTypeBadge()}\n          </div>\n          <p className=\"text-sm text-muted-foreground font-mono mt-2\">{entity.filePath}</p>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"code\">\n          <TabsList className=\"mb-4\">\n            <TabsTrigger value=\"code\">Code</TabsTrigger>\n            <TabsTrigger value=\"usage\">Usage</TabsTrigger>\n            <TabsTrigger value=\"dependencies\">Dependencies</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"code\">\n            <CodeBlock code={entity.code || \"\"} language=\"tsx\" />\n          </TabsContent>\n          <TabsContent value=\"usage\">\n            <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md\">\n              <p className=\"text-muted-foreground\">Usage examples will appear here.</p>\n            </div>\n          </TabsContent>\n          <TabsContent value=\"dependencies\">\n            <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md\">\n              <p className=\"text-muted-foreground\">Dependencies will appear here.</p>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "getEntityIcon",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.9737405185329928,
            "reason": "Function appears to have similar functionality (97% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.8841725029484778,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.8841725029484778,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8135864418359672,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8135864418359672,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.8078055434207957,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.8031516017147106,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7816915657691288,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7816915657691288,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7627373854664168,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7627373854664168,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7577118027214033,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7513776225623652,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7401740502717719,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7400562481257751,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.7203940703635279,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.7203940703635279,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.7125771822188961,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7081687896066112,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7081687896066112,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6900662435541005,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6900662435541005,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6881498123294711,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6881498123294711,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6881498123294711,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6762047284461544,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6746384408422705,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6746384408422705,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6746384408422705,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6657208035103238,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6657208035103238,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.66000186790836,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.66000186790836,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6578494662343545,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6578494662343545,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6578494662343545,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          }
        ]
      },
      {
        "name": "getEntityTypeBadge",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.8841725029484778,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.8841725029484778,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.8491824983587043,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8430932432507714,
            "reason": "Function appears to have similar functionality (84% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8430932432507714,
            "reason": "Function appears to have similar functionality (84% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.7792751611551054,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.7792751611551054,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7734503688287098,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7657815119981425,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7657815119981425,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.7633468963451983,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7494188533574244,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7386536695189152,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7326161080130102,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7326161080130102,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7280881065768938,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7211580980518396,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7013082937076784,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6836619201868064,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6836619201868064,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.666694233794235,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.666694233794235,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6642413225853494,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6642413225853494,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6642413225853494,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6599948245609382,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6599948245609382,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6558175490859315,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6530165433147391,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6530165433147391,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496091925068673,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496091925068673,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496091925068673,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6366083435242419,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6366083435242419,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6366083435242419,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Dialog",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogClose",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogDescription",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogFooter",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogHeader",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogOverlay",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogPortal",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogTitle",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Tabs",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsList",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Badge",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"default\" | \"secondary\" | \"destructive\" | \"outline\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/badge.tsx",
    "sourceCode": "function Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CodeBlock",
    "description": "",
    "props": [
      {
        "name": "code",
        "type": "string",
        "required": true,
        "description": ""
      },
      {
        "name": "language",
        "type": "string",
        "required": true,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/code-block.tsx",
    "sourceCode": "export function CodeBlock({ code, language }: CodeBlockProps) {\n  const [copied, setCopied] = useState(false)\n\n  const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }\n\n  return (\n    <div className=\"relative group\">\n      <pre\n        className={cn(\n          \"rounded-xl border border-slate-100 dark:border-slate-800 bg-white dark:bg-slate-900 p-6 overflow-x-auto shadow-sm\",\n          language === \"tsx\" && \"language-tsx\",\n          language === \"jsx\" && \"language-jsx\",\n          language === \"css\" && \"language-css\",\n        )}\n      >\n        <code className=\"text-sm font-mono\">{code}</code>\n      </pre>\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        className=\"absolute top-3 right-3 h-8 w-8 opacity-0 group-hover:opacity-100 transition-opacity\"\n        onClick={copyToClipboard}\n      >\n        {copied ? <CheckIcon className=\"h-4 w-4\" /> : <CopyIcon className=\"h-4 w-4\" />}\n      </Button>\n    </div>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "copyToClipboard",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.730115989577245,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.730115989577245,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7175861884795517,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7164537893756712,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7070568230501257,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6963832864387989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6963832864387989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6881498123294711,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6881498123294711,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6851415646911032,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6782124798834633,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6759040928808532,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6759040928808532,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6726865822383625,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6726865822383625,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6690160675633217,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6690160675633217,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6524600727745999,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6496091925068673,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6496091925068673,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6344118519067191,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6344118519067191,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6274305033701065,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6274305033701065,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6204737700724535,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6124157036784413,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Button",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"link\" | \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "size",
        "type": "\"default\" | \"sm\" | \"lg\" | \"icon\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/button.tsx",
    "sourceCode": "function Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CodeGraph",
    "description": "",
    "props": [
      {
        "name": "entityId",
        "type": "string",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/code-graph.tsx",
    "sourceCode": "export function CodeGraph({ entityId }: CodeGraphProps) {\n  const [filter, setFilter] = useState<\"all\" | \"component\" | \"class\" | \"function\" | \"method\">(\"all\")\n  const [selectedEntity, setSelectedEntity] = useState<CodeEntity | null>(null)\n  const [detailsOpen, setDetailsOpen] = useState(false)\n  const [zoom, setZoom] = useState(1)\n  const svgRef = useRef<SVGSVGElement>(null)\n\n  const [components, setComponents] = useState<CodeEntity[]>([])\n  const [relationships, setRelationships] = useState<Relationship[]>([])\n  const [loading, setLoading] = useState(true)\n\n  // Fetch component data\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  // Use useMemo to prevent recalculation on every render\n  const filteredEntities = useMemo(() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }, [filter, components])\n\n  // Filter relationships based on the filtered entities\n  const filteredRelationships = useMemo(() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }, [filteredEntities, relationships])\n\n  // Calculate node positions in a circle layout\n  const positions = useMemo(() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }, [filteredEntities])\n\n  const handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }\n\n  const getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }\n\n  const getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }\n\n  const zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }\n\n  const zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }\n\n  if (loading) {\n    return (\n      <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n        <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n          <CardTitle>Code Visualization</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Loading code graph data...</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n      <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Code Visualization</CardTitle>\n          <div className=\"flex items-center gap-4\">\n            <Select value={filter} onValueChange={(value) => setFilter(value as any)}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"component\">Components</SelectItem>\n                <SelectItem value=\"class\">Classes</SelectItem>\n                <SelectItem value=\"function\">Functions</SelectItem>\n                <SelectItem value=\"method\">Methods</SelectItem>\n              </SelectContent>\n            </Select>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"icon\" onClick={zoomOut}>\n                <ZoomOut className=\"h-4 w-4\" />\n              </Button>\n              <span className=\"text-sm\">{Math.round(zoom * 100)}%</span>\n              <Button variant=\"outline\" size=\"icon\" onClick={zoomIn}>\n                <ZoomIn className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div className=\"relative bg-slate-50 dark:bg-slate-950 overflow-auto\" style={{ height: 600 }}>\n          <svg\n            ref={svgRef}\n            width=\"800\"\n            height=\"600\"\n            viewBox=\"0 0 800 600\"\n            className=\"mx-auto\"\n            style={{ transform: `scale(${zoom})`, transformOrigin: \"center\", transition: \"transform 0.2s\" }}\n          >\n            {/* Draw edges */}\n            {filteredRelationships.map((rel, index) => {\n              const sourcePos = positions.find((p) => p.id === rel.source)\n              const targetPos = positions.find((p) => p.id === rel.target)\n\n              if (!sourcePos || !targetPos) return null\n\n              // Calculate the angle for the arrow\n              const dx = targetPos.x - sourcePos.x\n              const dy = targetPos.y - sourcePos.y\n              const angle = Math.atan2(dy, dx)\n\n              // Calculate the position for the arrow (slightly before the target)\n              const nodeRadius = 30\n              const arrowX = targetPos.x - nodeRadius * Math.cos(angle)\n              const arrowY = targetPos.y - nodeRadius * Math.sin(angle)\n\n              // Calculate the label position (midpoint of the edge)\n              const labelX = (sourcePos.x + targetPos.x) / 2\n              const labelY = (sourcePos.y + targetPos.y) / 2 - 10\n\n              return (\n                <g key={`edge-${index}`}>\n                  <defs>\n                    <marker\n                      id={`arrowhead-${index}`}\n                      markerWidth=\"10\"\n                      markerHeight=\"7\"\n                      refX=\"0\"\n                      refY=\"3.5\"\n                      orient=\"auto\"\n                    >\n                      <polygon points=\"0 0, 10 3.5, 0 7\" fill={getEdgeColor(rel.type)} />\n                    </marker>\n                  </defs>\n                  <line\n                    x1={sourcePos.x}\n                    y1={sourcePos.y}\n                    x2={arrowX}\n                    y2={arrowY}\n                    stroke={getEdgeColor(rel.type)}\n                    strokeWidth=\"2\"\n                    markerEnd={`url(#arrowhead-${index})`}\n                  />\n                  <text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    fill={getEdgeColor(rel.type)}\n                    fontSize=\"12\"\n                    fontWeight=\"500\"\n                    className=\"select-none\"\n                  >\n                    {rel.type}\n                  </text>\n                </g>\n              )\n            })}\n\n            {/* Draw nodes */}\n            {filteredEntities.map((entity) => {\n              const pos = positions.find((p) => p.id === entity.id)\n              if (!pos) return null\n\n              const nodeColor = getNodeColor(entity.type)\n\n              return (\n                <g\n                  key={entity.id}\n                  transform={`translate(${pos.x}, ${pos.y})`}\n                  onClick={() => handleNodeClick(entity)}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <circle r=\"30\" fill=\"white\" stroke={nodeColor} strokeWidth=\"3\" className=\"dark:fill-slate-800\" />\n                  <text\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"middle\"\n                    fill={nodeColor}\n                    fontSize=\"12\"\n                    fontWeight=\"bold\"\n                    className=\"select-none\"\n                  >\n                    {entity.name.substring(0, 2)}\n                  </text>\n                  <text y=\"50\" textAnchor=\"middle\" fill=\"currentColor\" fontSize=\"12\" className=\"select-none\">\n                    {entity.name}\n                  </text>\n                </g>\n              )\n            })}\n          </svg>\n        </div>\n        <div className=\"p-4 border-t border-slate-100 dark:border-slate-800\">\n          <div className=\"flex flex-wrap gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-violet-500\"></div>\n              <span className=\"text-sm\">Component</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n              <span className=\"text-sm\">Class</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-emerald-500\"></div>\n              <span className=\"text-sm\">Function</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-amber-500\"></div>\n              <span className=\"text-sm\">Method</span>\n            </div>\n          </div>\n          <div className=\"mt-4 flex flex-wrap gap-4\">\n            <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n              imports\n            </Badge>\n            <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n              extends\n            </Badge>\n            <Badge className=\"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\">\n              implements\n            </Badge>\n            <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n              calls\n            </Badge>\n            <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n              renders\n            </Badge>\n            <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n              uses\n            </Badge>\n          </div>\n        </div>\n      </CardContent>\n      {selectedEntity && (\n        <CodeEntityDetails\n          entity={selectedEntity}\n          isOpen={detailsOpen}\n          onClose={() => setDetailsOpen(false)}\n        />\n      )}\n    </Card>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "callback_useEffect",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.callback_useEffect",
            "score": 0.8635443192319595,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: any) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp, targetMethod] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: any) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }"
          },
          {
            "similarTo": "SimilarityList.callback_useEffect",
            "score": 0.7414107782798991,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/similarity-list.tsx",
            "code": "() => {\n    if (preloadedComponents) {\n      console.log('Using preloaded component data:', preloadedComponents.length);\n      setLoading(false);\n      return;\n    }\n\n    async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6144799840367834,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6143145929750012,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6112226409896258,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6095413664480008,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          }
        ]
      },
      {
        "name": "filteredEntities_useMemo",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.9468337608002801,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.8584600424864354,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.8584600424864354,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.8452022798496852,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.8335437108188063,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7715586354115841,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7715586354115841,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7661208518637541,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7627373854664168,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7627373854664168,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7565395178401415,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7369406612059743,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7326161080130102,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7326161080130102,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.724764328261452,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7234391543340878,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7234391543340878,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6954968273862814,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6954968273862814,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6904357534300279,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6904357534300279,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6904357534300279,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6841159692001806,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6841159692001806,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6841159692001806,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6728929375554195,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6728929375554195,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6680165017727264,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6477429479818212,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6477429479818212,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6423753906414246,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6423753906414246,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6344118519067191,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6344118519067191,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6344118519067191,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6237973667818495,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          }
        ]
      },
      {
        "name": "filteredRelationships_useMemo",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.9537847459729679,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.9218607153827271,
            "reason": "Function appears to have similar functionality (92% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.8584600424864354,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.8584600424864354,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7934447930089258,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7910825769235851,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.7910825769235851,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7881335813715676,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.7461869022168497,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7166046902391928,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7080492348536783,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6929213020414736,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6905775352637213,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6900662435541005,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6900662435541005,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6853869019316426,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6853869019316426,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6853869019316426,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6802388477858244,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6802388477858244,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6667333332056945,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6667333332056945,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6667333332056945,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.666694233794235,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.666694233794235,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6574617113286929,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6574617113286929,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6567578974348426,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6567578974348426,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6483389968197113,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6483389968197113,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6425367024713939,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6425367024713939,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          }
        ]
      },
      {
        "name": "positions_useMemo",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.8091843893860919,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7945525635914849,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7910825769235851,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.7910825769235851,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7715586354115841,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7715586354115841,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.7673842937885624,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7081687896066112,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7081687896066112,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7029215374692732,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6889328704498463,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6863254032349733,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6836619201868064,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6836619201868064,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6827376242640502,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6827376242640502,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6823580224691489,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6762581673013961,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6762581673013961,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6706892256563064,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6706892256563064,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6608050051478098,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6608050051478098,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6608050051478098,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6569636249082866,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6381486601722658,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6381486601722658,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6374415704014486,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6274305033701065,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6274305033701065,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6274305033701065,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6265751890037171,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6265751890037171,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6265751890037171,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6158923697429082,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6158923697429082,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          }
        ]
      },
      {
        "name": "handleNodeClick",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.817568041022956,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7842095404109233,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7816915657691288,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7816915657691288,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7657815119981425,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7657815119981425,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7617456236191057,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.7617456236191057,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7589248560607996,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7451880680839202,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.730115989577245,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.730115989577245,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.730115989577245,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7299614297592901,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7251880086685029,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7234391543340878,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.7234391543340878,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.7127903531274534,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6980831143493765,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6980831143493765,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6905409000863261,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6905409000863261,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6881434549071587,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6881434549071587,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6881434549071587,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6827376242640502,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6827376242640502,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6802388477858244,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6802388477858244,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6719574769388486,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6719574769388486,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6547222558643515,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6547222558643515,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6547222558643515,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6504421656295001,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6463359592902597,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          }
        ]
      },
      {
        "name": "getNodeColor",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.8749898465685859,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.8749898465685859,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.8430932432507714,
            "reason": "Function appears to have similar functionality (84% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.8430932432507714,
            "reason": "Function appears to have similar functionality (84% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.8256178059190924,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.8135864418359672,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.8135864418359672,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.8116366334717905,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7617456236191057,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.7617456236191057,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7596157780925331,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7532056885412839,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7211908333432424,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.7142917939981817,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.7039525940573228,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6954968273862814,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6954968273862814,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.690344394413162,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6900392524257051,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6900392524257051,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6877269882629207,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6877269882629207,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6877269882629207,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.686276503692359,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.686276503692359,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6726865822383625,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6726865822383625,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6726865822383625,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6574617113286929,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6574617113286929,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6381486601722658,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6381486601722658,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6304074321238731,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6304074321238731,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6304074321238731,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6207796848437774,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          }
        ]
      },
      {
        "name": "getEdgeColor",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8749898465685859,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.8749898465685859,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.87157898490665,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.7980148835470727,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7792751611551054,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.7792751611551054,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7203940703635279,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.7203940703635279,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7128171049341161,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6910851018989377,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6870626060103341,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.677159006408836,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6761566110888013,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6761566110888013,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6719574769388486,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6719574769388486,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6690160675633217,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6690160675633217,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6690160675633217,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6668118201672683,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6668118201672683,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6651711139379713,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6651711139379713,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6651711139379713,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6567578974348426,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6567578974348426,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6423753906414246,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6423753906414246,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6401196187570274,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6256930638306002,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.625414369362396,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6158923697429082,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6158923697429082,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6021210309631648,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6021210309631648,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6021210309631648,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          }
        ]
      },
      {
        "name": "zoomIn",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.9459939112001708,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.9459939112001708,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7413073368664149,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7413073368664149,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7413073368664149,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6905409000863261,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6905409000863261,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6900392524257051,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6900392524257051,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.68180212444583,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6802453152667892,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6762581673013961,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6762581673013961,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6759040928808532,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6759040928808532,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6759040928808532,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6745478383679496,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6680302237032849,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6668118201672683,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6668118201672683,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6657208035103238,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6657208035103238,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6530165433147391,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6530165433147391,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6477429479818212,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6477429479818212,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6425367024713939,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6425367024713939,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6400634821929431,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6389975451072761,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.638715240780519,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6245331624648434,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.605176311638849,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.605176311638849,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.605176311638849,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6028758182830213,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          }
        ]
      },
      {
        "name": "zoomOut",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.9459939112001708,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.9459939112001708,
            "reason": "Function appears to have similar functionality (95% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7381232796393189,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7381232796393189,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.7381232796393189,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6980831143493765,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6980831143493765,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6963832864387989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6963832864387989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6963832864387989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.686276503692359,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.686276503692359,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6761566110888013,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6761566110888013,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6731315149624216,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6728929375554195,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6728929375554195,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6706892256563064,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6706892256563064,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6695759174647988,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6681662863732719,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.66000186790836,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.66000186790836,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6599948245609382,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6599948245609382,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6527439703996272,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6526577147996351,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6483389968197113,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.6483389968197113,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6397750426670186,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6388429436985988,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6340487225581759,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6244639634022595,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6244639634022595,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.6244639634022595,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredRelationships_useMemo",
            "score": 0.6135115375170851,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Card",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "zach",
        "description": "",
        "params": [
          {
            "name": "hi",
            "type": "string",
            "description": ""
          }
        ],
        "returnType": "void",
        "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.692900504930073,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6845602628176283,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6796592195536707,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6635128723705044,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6499643797926979,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6382429882561073,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6287765391900213,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6074109106795025,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "CardHeader",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardFooter",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardTitle",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardAction",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardDescription",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardContent",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Select",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectGroup",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectItem",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectLabel",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectScrollDownButton",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectScrollUpButton",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectSeparator",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "size",
        "type": "enum",
        "required": false,
        "defaultValue": "default",
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectValue",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CodeBlock",
    "description": "",
    "props": [
      {
        "name": "code",
        "type": "string",
        "required": true,
        "description": ""
      },
      {
        "name": "language",
        "type": "string",
        "required": true,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/code-block.tsx",
    "sourceCode": "export function CodeBlock({ code, language }: CodeBlockProps) {\n  const [copied, setCopied] = useState(false)\n\n  const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }\n\n  return (\n    <div className=\"relative group\">\n      <pre\n        className={cn(\n          \"rounded-xl border border-slate-100 dark:border-slate-800 bg-white dark:bg-slate-900 p-6 overflow-x-auto shadow-sm\",\n          language === \"tsx\" && \"language-tsx\",\n          language === \"jsx\" && \"language-jsx\",\n          language === \"css\" && \"language-css\",\n        )}\n      >\n        <code className=\"text-sm font-mono\">{code}</code>\n      </pre>\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        className=\"absolute top-3 right-3 h-8 w-8 opacity-0 group-hover:opacity-100 transition-opacity\"\n        onClick={copyToClipboard}\n      >\n        {copied ? <CheckIcon className=\"h-4 w-4\" /> : <CopyIcon className=\"h-4 w-4\" />}\n      </Button>\n    </div>\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "copyToClipboard",
        "description": "",
        "params": [],
        "returnType": "void",
        "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.730115989577245,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.730115989577245,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.7175861884795517,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.7164537893756712,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.7070568230501257,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6963832864387989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6963832864387989,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6962183011721282,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6881498123294711,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6881498123294711,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6851415646911032,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.6782124798834633,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6759040928808532,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.6759040928808532,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6726865822383625,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6726865822383625,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6690160675633217,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6690160675633217,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "ComparisonModal.callback_React.useEffect",
            "score": 0.654942229357545,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": "() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6524600727745999,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "Card.zach",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/ui/card.tsx",
            "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6496091925068673,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6496091925068673,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6344118519067191,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6344118519067191,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6274305033701065,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6274305033701065,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6204737700724535,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6124157036784413,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "Button",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"link\" | \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "size",
        "type": "\"default\" | \"sm\" | \"lg\" | \"icon\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/button.tsx",
    "sourceCode": "function Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Textarea",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/textarea.tsx",
    "sourceCode": "function Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Tabs",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsList",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "TabsContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/tabs.tsx",
    "sourceCode": "function TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Switch",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/switch.tsx",
    "sourceCode": "function Switch({\n    className,\n    ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n    return (\n        <SwitchPrimitive.Root\n            data-slot=\"switch\"\n            className={cn(\n                \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n                className\n            )}\n            {...props}\n        >\n            <SwitchPrimitive.Thumb\n                data-slot=\"switch-thumb\"\n                className={cn(\n                    \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n                )}\n            />\n        </SwitchPrimitive.Root>\n    )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Slider",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/slider.tsx",
    "sourceCode": "function Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max]\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\"\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\"\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Select",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectGroup",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectItem",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectLabel",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectScrollDownButton",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectScrollUpButton",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectSeparator",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "size",
        "type": "enum",
        "required": false,
        "defaultValue": "default",
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "SelectValue",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/select.tsx",
    "sourceCode": "function SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "ScrollArea",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/scroll-area.tsx",
    "sourceCode": "function ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "ScrollBar",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/scroll-area.tsx",
    "sourceCode": "function ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Label",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/label.tsx",
    "sourceCode": "function Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenu",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuPortal",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuGroup",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuLabel",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "inset",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuItem",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "inset",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "variant",
        "type": "enum",
        "required": false,
        "defaultValue": "default",
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuCheckboxItem",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuRadioGroup",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuRadioItem",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuSeparator",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuShortcut",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuSub",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuSubTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "inset",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DropdownMenuSubContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dropdown-menu.tsx",
    "sourceCode": "function DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Dialog",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogClose",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogDescription",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogFooter",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogHeader",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogOverlay",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogPortal",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogTitle",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "DialogTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/dialog.tsx",
    "sourceCode": "function DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Command",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "label",
        "type": "string",
        "required": false,
        "description": "Accessible label for this command menu. Not shown visibly."
      },
      {
        "name": "shouldFilter",
        "type": "boolean",
        "required": false,
        "description": "Optionally set to `false` to turn off the automatic filtering and sorting.\nIf `false`, you must conditionally render valid items based on the search query yourself."
      },
      {
        "name": "filter",
        "type": "CommandFilter",
        "required": false,
        "description": "Custom filter function for whether each command menu item should matches the given search query.\nIt should return a number between 0 and 1, with 1 being the best match and 0 being hidden entirely.\nBy default, uses the `command-score` library."
      },
      {
        "name": "value",
        "type": "string",
        "required": false,
        "description": "Optional controlled state of the selected command menu item."
      },
      {
        "name": "onValueChange",
        "type": "((value: string) => void)",
        "required": false,
        "description": "Event handler called when the selected item of the menu changes."
      },
      {
        "name": "loop",
        "type": "boolean",
        "required": false,
        "description": "Optionally set to `true` to turn on looping around when using the arrow keys."
      },
      {
        "name": "disablePointerSelection",
        "type": "boolean",
        "required": false,
        "description": "Optionally set to `true` to disable selection via pointer events."
      },
      {
        "name": "vimBindings",
        "type": "boolean",
        "required": false,
        "description": "Set to `false` to disable ctrl+n/j/p/k shortcuts. Defaults to `true`."
      }
    ],
    "filePath": "src/ui/components/ui/command.tsx",
    "sourceCode": "function Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        \"bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CommandDialog",
    "description": "",
    "props": [
      {
        "name": "title",
        "type": "string",
        "required": false,
        "defaultValue": "Command Palette",
        "description": ""
      },
      {
        "name": "description",
        "type": "string",
        "required": false,
        "defaultValue": "Search for a command to run...",
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/command.tsx",
    "sourceCode": "function CommandDialog({\n  title = \"Command Palette\",\n  description = \"Search for a command to run...\",\n  children,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CommandInput",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "value",
        "type": "string",
        "required": false,
        "description": "Optional controlled state for the value of the search input."
      },
      {
        "name": "onValueChange",
        "type": "((search: string) => void)",
        "required": false,
        "description": "Event handler called when the search value changes."
      }
    ],
    "filePath": "src/ui/components/ui/command.tsx",
    "sourceCode": "function CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          \"placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CommandList",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "label",
        "type": "string",
        "required": false,
        "description": "Accessible label for this List of suggestions. Not shown visibly."
      }
    ],
    "filePath": "src/ui/components/ui/command.tsx",
    "sourceCode": "function CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        \"max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CommandEmpty",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/command.tsx",
    "sourceCode": "function CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CommandGroup",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "heading",
        "type": "ReactNode",
        "required": false,
        "description": "Optional heading to render for this group."
      },
      {
        "name": "value",
        "type": "string",
        "required": false,
        "description": "If no heading is provided, you must provide a value that is unique for this group."
      },
      {
        "name": "forceMount",
        "type": "boolean",
        "required": false,
        "description": "Whether this group is forcibly rendered regardless of filtering."
      }
    ],
    "filePath": "src/ui/components/ui/command.tsx",
    "sourceCode": "function CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        \"text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CommandItem",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Whether this item is currently disabled."
      },
      {
        "name": "onSelect",
        "type": "((value: string) => void)",
        "required": false,
        "description": "Event handler for when this item is selected, either via click or keyboard selection."
      },
      {
        "name": "value",
        "type": "string",
        "required": false,
        "description": "A unique value for this item.\nIf no value is provided, it will be inferred from `children` or the rendered `textContent`. If your `textContent` changes between renders, you _must_ provide a stable, unique `value`."
      },
      {
        "name": "keywords",
        "type": "string[]",
        "required": false,
        "description": "Optional keywords to match against when filtering."
      },
      {
        "name": "forceMount",
        "type": "boolean",
        "required": false,
        "description": "Whether this item is forcibly rendered regardless of filtering."
      }
    ],
    "filePath": "src/ui/components/ui/command.tsx",
    "sourceCode": "function CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CommandShortcut",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/command.tsx",
    "sourceCode": "function CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CommandSeparator",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      },
      {
        "name": "alwaysRender",
        "type": "boolean",
        "required": false,
        "description": "Whether this separator should always be rendered. Useful if you disable automatic filtering."
      }
    ],
    "filePath": "src/ui/components/ui/command.tsx",
    "sourceCode": "function CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn(\"bg-border -mx-1 h-px\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Card",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": [
      {
        "name": "zach",
        "description": "",
        "params": [
          {
            "name": "hi",
            "type": "string",
            "description": ""
          }
        ],
        "returnType": "void",
        "code": "\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }",
        "similarityWarnings": [
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomIn",
            "score": 0.7231308419681254,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.zoomOut",
            "score": 0.6993330709675166,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeGraph.handleNodeClick",
            "score": 0.6970871831623213,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipLabel",
            "score": 0.692900504930073,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getEntityIcon",
            "score": 0.6845602628176283,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityIcon",
            "score": 0.6823174757958043,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }"
          },
          {
            "similarTo": "SimilarComponentsSection.getMockCode",
            "score": 0.6796592195536707,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "ComparisonModal.normalizeForComparison",
            "score": 0.6747449258415463,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "src/ui/components/comparison-modal.tsx",
            "code": " normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ')"
          },
          {
            "similarTo": "SimilarComponentsSection.handleCompare",
            "score": 0.6635128723705044,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/similar-components-section.tsx",
            "code": " handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "CodeEntityDetails.getEntityTypeBadge",
            "score": 0.6613901680250328,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "src/ui/components/code-entity-details.tsx",
            "code": " getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }"
          },
          {
            "similarTo": "ComponentStats.callback_useEffect",
            "score": 0.6499643797926979,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/component-stats.tsx",
            "code": "() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getNodeColor",
            "score": 0.6497945005856519,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeBlock.copyToClipboard",
            "score": 0.6496248747527378,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-block.tsx",
            "code": " copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.positions_useMemo",
            "score": 0.6453372735525389,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeGraph.getEdgeColor",
            "score": 0.6397385171987833,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": " getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.getRelationshipColor",
            "score": 0.6382429882561073,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": " getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }"
          },
          {
            "similarTo": "CodeRelationships.currentEntity_useMemo",
            "score": 0.6287765391900213,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredRelationships_useMemo",
            "score": 0.616865038081783,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeGraph.filteredEntities_useMemo",
            "score": 0.6166573923722667,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "src/ui/components/code-graph.tsx",
            "code": "() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }"
          },
          {
            "similarTo": "CodeRelationships.filteredEntities_useMemo",
            "score": 0.6074109106795025,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "src/ui/components/code-relationships.tsx",
            "code": "() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardHeader",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardFooter",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardTitle",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardAction",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardDescription",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "CardContent",
    "description": "",
    "props": [],
    "filePath": "src/ui/components/ui/card.tsx",
    "sourceCode": "function CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Button",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"link\" | \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "size",
        "type": "\"default\" | \"sm\" | \"lg\" | \"icon\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/button.tsx",
    "sourceCode": "function Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Badge",
    "description": "",
    "props": [
      {
        "name": "variant",
        "type": "\"default\" | \"secondary\" | \"destructive\" | \"outline\" | null",
        "required": false,
        "description": ""
      },
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "defaultValue": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/badge.tsx",
    "sourceCode": "function Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Avatar",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/avatar.tsx",
    "sourceCode": "function Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "cn",
    "description": "",
    "props": [],
    "filePath": "src/ui/lib/utils.ts",
    "sourceCode": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "AvatarImage",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/avatar.tsx",
    "sourceCode": "function AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "AvatarFallback",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/avatar.tsx",
    "sourceCode": "function AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "Accordion",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/accordion.tsx",
    "sourceCode": "function Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "AccordionItem",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/accordion.tsx",
    "sourceCode": "function AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "AccordionTrigger",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/accordion.tsx",
    "sourceCode": "function AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}",
    "childComponents": [],
    "methods": []
  },
  {
    "name": "AccordionContent",
    "description": "",
    "props": [
      {
        "name": "asChild",
        "type": "boolean",
        "required": false,
        "description": ""
      }
    ],
    "filePath": "src/ui/components/ui/accordion.tsx",
    "sourceCode": "function AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn(\"pt-0 pb-4\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}",
    "childComponents": [],
    "methods": []
  }
]