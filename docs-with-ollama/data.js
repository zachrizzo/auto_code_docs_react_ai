// Auto-generated component data
window.COMPONENT_DATA = [
  {
    "name": "DocumentAll",
    "description": "Default export from DocumentAll.tsx",
    "props": [],
    "filePath": "examples/DocumentAll.tsx",
    "sourceCode": "import React from 'react';\nimport App from './App';\nimport Todo, { TodoItem as TodoItemType } from './Todo';\nimport TodoItem from './TodoItem';\nimport RecursiveExamples, {\n    factorial,\n    fibonacci as recursiveExamplesFibonacci,\n    sumNestedArray,\n    depthFirstTraversal,\n    RecursiveTreeProcessor,\n    CommentThread,\n    deepClone,\n    traverseDOM,\n    recursivePromiseChain,\n    Comment,\n    TreeNode\n} from './RecursiveExamples';\nimport UseRecursiveExamples from './UseRecursiveExamples';\nimport FibonacciExample, { fibonacci } from './Fibonacci';\n\n/**\n * This component brings together all the components, functions and examples\n * for documentation generation purposes.\n */\nconst DocumentAll: React.FC = () => {\n    // Create demo data for examples\n    const demoTree: TreeNode<string> = {\n        value: 'root',\n        children: [{ value: 'child', children: [] }]\n    };\n\n    const demoComments: Comment[] = [\n        { id: '1', text: 'Example comment', author: 'User', replies: [] }\n    ];\n\n    // This component is never actually rendered, it just exists to document everything\n    return (\n        <div>\n            <h1>Documentation Components</h1>\n\n            {/* Standard App Components */}\n            <App title=\"Example App\" showRecursiveExamples={true} />\n            <Todo\n                initialTodos={[{ id: '1', text: 'Test Todo', completed: false }]}\n                onTodoAdded={(todo) => console.log(todo)}\n                title=\"Example Todos\"\n            />\n            <TodoItem\n                todo={{ id: '1', text: 'Test Todo', completed: false }}\n                onToggle={() => { }}\n                onDelete={() => { }}\n            />\n\n            {/* Recursive Examples */}\n            <RecursiveExamples />\n            <UseRecursiveExamples />\n            <CommentThread comments={demoComments} />\n            <FibonacciExample />\n\n            {/* These would normally be hidden, but included for documentation */}\n            <div style={{ display: 'none' }}>\n                <h2>Recursive Functions (TypeScript)</h2>\n                <p>{`factorial(5) = ${factorial(5)}`}</p>\n\n                {/* Make sure fibonacci is properly documented with explicit implementation */}\n                <div id=\"fibonacci-example\">\n                    <h3>Fibonacci Function</h3>\n                    <p>{`Imported fibonacci(10) = ${fibonacci(10)}`}</p>\n                    <p>{`RecursiveExamples fibonacci(10) = ${recursiveExamplesFibonacci(10)}`}</p>\n                    <pre>\n                        {`\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                        `}\n                    </pre>\n                </div>\n\n                <p>{`sumNestedArray([1, [2, 3]]) = ${sumNestedArray([1, [2, 3]])}`}</p>\n\n                <h2>Hospital Test JavaScript</h2>\n                <div id=\"hospital-examples\">\n                    {(() => {\n                        // Sample patient data\n                        const patient = {\n                            id: 'P1001',\n                            name: 'John Doe',\n                            roomCharge: 500,\n                            procedures: [\n                                { name: 'X-Ray', cost: 250 },\n                                { name: 'Blood Test', cost: 100 }\n                            ],\n                            medications: [\n                                { name: 'Antibiotic', cost: 75 },\n                                { name: 'Pain Reliever', cost: 25 }\n                            ]\n                        };\n\n                        // Sample hospital hierarchy\n                        const hospital = {\n                            type: 'hospital',\n                            name: 'General Hospital',\n                            children: [\n                                {\n                                    type: 'floor',\n                                    name: 'Floor 1',\n                                    children: [\n                                        {\n                                            type: 'room',\n                                            name: 'Room 101',\n                                            children: [\n                                                { type: 'patient', id: 'P1001', name: 'John Doe' }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        };\n\n                        // Sample org chart data\n                        const orgChart = {\n                            name: 'Dr. Smith',\n                            role: 'Chief of Medicine',\n                            subordinates: [\n                                {\n    ...\n// (code truncated for brevity)",
    "childComponents": []
  },
  {
    "name": "calculatePatientCost",
    "description": "A recursive function to calculate the total cost of a patient's stay\nincluding all procedures, medications, and room charges",
    "props": [],
    "filePath": "examples/DocumentAll.tsx",
    "sourceCode": "import React from 'react';\nimport App from './App';\nimport Todo, { TodoItem as TodoItemType } from './Todo';\nimport TodoItem from './TodoItem';\nimport RecursiveExamples, {\n    factorial,\n    fibonacci as recursiveExamplesFibonacci,\n    sumNestedArray,\n    depthFirstTraversal,\n    RecursiveTreeProcessor,\n    CommentThread,\n    deepClone,\n    traverseDOM,\n    recursivePromiseChain,\n    Comment,\n    TreeNode\n} from './RecursiveExamples';\nimport UseRecursiveExamples from './UseRecursiveExamples';\nimport FibonacciExample, { fibonacci } from './Fibonacci';\n\n/**\n * This component brings together all the components, functions and examples\n * for documentation generation purposes.\n */\nconst DocumentAll: React.FC = () => {\n    // Create demo data for examples\n    const demoTree: TreeNode<string> = {\n        value: 'root',\n        children: [{ value: 'child', children: [] }]\n    };\n\n    const demoComments: Comment[] = [\n        { id: '1', text: 'Example comment', author: 'User', replies: [] }\n    ];\n\n    // This component is never actually rendered, it just exists to document everything\n    return (\n        <div>\n            <h1>Documentation Components</h1>\n\n            {/* Standard App Components */}\n            <App title=\"Example App\" showRecursiveExamples={true} />\n            <Todo\n                initialTodos={[{ id: '1', text: 'Test Todo', completed: false }]}\n                onTodoAdded={(todo) => console.log(todo)}\n                title=\"Example Todos\"\n            />\n            <TodoItem\n                todo={{ id: '1', text: 'Test Todo', completed: false }}\n                onToggle={() => { }}\n                onDelete={() => { }}\n            />\n\n            {/* Recursive Examples */}\n            <RecursiveExamples />\n            <UseRecursiveExamples />\n            <CommentThread comments={demoComments} />\n            <FibonacciExample />\n\n            {/* These would normally be hidden, but included for documentation */}\n            <div style={{ display: 'none' }}>\n                <h2>Recursive Functions (TypeScript)</h2>\n                <p>{`factorial(5) = ${factorial(5)}`}</p>\n\n                {/* Make sure fibonacci is properly documented with explicit implementation */}\n                <div id=\"fibonacci-example\">\n                    <h3>Fibonacci Function</h3>\n                    <p>{`Imported fibonacci(10) = ${fibonacci(10)}`}</p>\n                    <p>{`RecursiveExamples fibonacci(10) = ${recursiveExamplesFibonacci(10)}`}</p>\n                    <pre>\n                        {`\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                        `}\n                    </pre>\n                </div>\n\n                <p>{`sumNestedArray([1, [2, 3]]) = ${sumNestedArray([1, [2, 3]])}`}</p>\n\n                <h2>Hospital Test JavaScript</h2>\n                <div id=\"hospital-examples\">\n                    {(() => {\n                        // Sample patient data\n                        const patient = {\n                            id: 'P1001',\n                            name: 'John Doe',\n                            roomCharge: 500,\n                            procedures: [\n                                { name: 'X-Ray', cost: 250 },\n                                { name: 'Blood Test', cost: 100 }\n                            ],\n                            medications: [\n                                { name: 'Antibiotic', cost: 75 },\n                                { name: 'Pain Reliever', cost: 25 }\n                            ]\n                        };\n\n                        // Sample hospital hierarchy\n                        const hospital = {\n                            type: 'hospital',\n                            name: 'General Hospital',\n                            children: [\n                                {\n                                    type: 'floor',\n                                    name: 'Floor 1',\n                                    children: [\n                                        {\n                                            type: 'room',\n                                            name: 'Room 101',\n                                            children: [\n                                                { type: 'patient', id: 'P1001', name: 'John Doe' }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        };\n\n                        // Sample org chart data\n                        const orgChart = {\n                            name: 'Dr. Smith',\n                            role: 'Chief of Medicine',\n                            subordinates: [\n                                {\n    ...\n// (code truncated for brevity)",
    "childComponents": [
      {
        "name": "App",
        "description": "Main application component that serves as the entry point",
        "props": [
          {
            "name": "title",
            "type": "string",
            "required": false,
            "defaultValue": "My Todo App",
            "description": "Title for the application"
          },
          {
            "name": "showRecursiveExamples",
            "type": "boolean",
            "required": false,
            "defaultValue": false,
            "description": "Whether to show recursive examples"
          }
        ],
        "filePath": "examples/App.tsx",
        "sourceCode": "import React from 'react';\nimport Todo, { TodoItem } from './Todo';\nimport RecursiveExamples from './RecursiveExamples';\n\n/**\n * Props for the App component\n */\ninterface AppProps {\n    /**\n     * Title for the application\n     */\n    title?: string;\n\n    /**\n     * Whether to show recursive examples\n     */\n    showRecursiveExamples?: boolean;\n}\n\n/**\n * Main application component that serves as the entry point\n */\nconst App: React.FC<AppProps> = ({\n    title = 'My Todo App',\n    showRecursiveExamples = false\n}) => {\n    const initialTodos: TodoItem[] = [\n        { id: '1', text: 'Learn React', completed: true },\n        { id: '2', text: 'Build an app', completed: false },\n        { id: '3', text: 'Deploy to production', completed: false },\n    ];\n\n    const handleTodoAdded = (todo: TodoItem) => {\n        console.log('New todo added:', todo);\n    };\n\n    return (\n        <div className=\"app\">\n            <header className=\"app-header\">\n                <h1>{title}</h1>\n            </header>\n\n            <main className=\"app-content\">\n                <Todo\n                    initialTodos={initialTodos}\n                    onTodoAdded={handleTodoAdded}\n                    title=\"My Tasks\"\n                />\n\n                {showRecursiveExamples && (\n                    <div className=\"recursive-examples-container\">\n                        <h2>Recursive Examples</h2>\n                        <RecursiveExamples />\n                    </div>\n                )}\n            </main>\n\n            <footer className=\"app-footer\">\n                <p>Created with React</p>\n            </footer>\n        </div>\n    );\n};\n\nexport default App;\n",
        "childComponents": [
          {
            "name": "Todo",
            "description": "A component for managing a list of todo items",
            "props": [
              {
                "name": "initialTodos",
                "type": "TodoItem[]",
                "required": false,
                "defaultValue": "[]",
                "description": "Initial todo items to display"
              },
              {
                "name": "onTodoAdded",
                "type": "((todo: TodoItem) => void)",
                "required": false,
                "description": "Callback triggered when a todo item is added"
              },
              {
                "name": "title",
                "type": "string",
                "required": false,
                "defaultValue": "Todo List",
                "description": "Title of the todo list"
              }
            ],
            "filePath": "examples/Todo.tsx",
            "sourceCode": "import React, { useState } from 'react';\nimport TodoItem from './TodoItem';\n\n/**\n * Todo list component that displays a list of tasks\n */\ninterface TodoProps {\n    /**\n     * Initial todo items to display\n     */\n    initialTodos?: TodoItem[];\n\n    /**\n     * Callback triggered when a todo item is added\n     */\n    onTodoAdded?: (todo: TodoItem) => void;\n\n    /**\n     * Title of the todo list\n     */\n    title?: string;\n}\n\nexport interface TodoItem {\n    id: string;\n    text: string;\n    completed: boolean;\n}\n\n/**\n * A component for managing a list of todo items\n */\nconst Todo: React.FC<TodoProps> = ({\n    initialTodos = [],\n    onTodoAdded,\n    title = 'Todo List'\n}) => {\n    const [todos, setTodos] = useState<TodoItem[]>(initialTodos);\n    const [newTodoText, setNewTodoText] = useState('');\n\n    const handleAddTodo = () => {\n        if (!newTodoText.trim()) return;\n\n        const newTodo: TodoItem = {\n            id: Date.now().toString(),\n            text: newTodoText,\n            completed: false\n        };\n\n        setTodos([...todos, newTodo]);\n        setNewTodoText('');\n\n        if (onTodoAdded) {\n            onTodoAdded(newTodo);\n        }\n    };\n\n    const handleToggleTodo = (id: string) => {\n        setTodos(\n            todos.map(todo =>\n                todo.id === id ? { ...todo, completed: !todo.completed } : todo\n            )\n        );\n    };\n\n    const handleDeleteTodo = (id: string) => {\n        setTodos(todos.filter(todo => todo.id !== id));\n    };\n\n    return (\n        <div className=\"todo-container\">\n            <h2>{title}</h2>\n\n            <div className=\"todo-input\">\n                <input\n                    type=\"text\"\n                    value={newTodoText}\n                    onChange={e => setNewTodoText(e.target.value)}\n                    placeholder=\"Add a new task\"\n                />\n                <button onClick={handleAddTodo}>Add</button>\n            </div>\n\n            <ul className=\"todo-list\">\n                {todos.map(todo => (\n                    <TodoItem\n                        key={todo.id}\n                        todo={todo}\n                        onToggle={() => handleToggleTodo(todo.id)}\n                        onDelete={() => handleDeleteTodo(todo.id)}\n                    />\n                ))}\n            </ul>\n\n            <div className=\"todo-summary\">\n                <p>{todos.filter(todo => todo.completed).length} of {todos.length} tasks completed</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Todo;\n",
            "childComponents": [
              {
                "name": "TodoItem",
                "description": "Component that displays a single todo item with controls to toggle completion or delete",
                "props": [
                  {
                    "name": "todo",
                    "type": "TodoItem",
                    "required": true,
                    "description": "The todo item to display"
                  },
                  {
                    "name": "onToggle",
                    "type": "() => void",
                    "required": true,
                    "description": "Callback triggered when the todo completion status is toggled"
                  },
                  {
                    "name": "onDelete",
                    "type": "() => void",
                    "required": true,
                    "description": "Callback triggered when the todo is deleted"
                  }
                ],
                "filePath": "examples/TodoItem.tsx",
                "sourceCode": "import React from 'react';\nimport { TodoItem as TodoItemType } from './Todo';\n\n/**\n * Props for the TodoItem component\n */\ninterface TodoItemProps {\n    /**\n     * The todo item to display\n     */\n    todo: TodoItemType;\n\n    /**\n     * Callback triggered when the todo completion status is toggled\n     */\n    onToggle: () => void;\n\n    /**\n     * Callback triggered when the todo is deleted\n     */\n    onDelete: () => void;\n}\n\n/**\n * Component that displays a single todo item with controls to toggle completion or delete\n */\nconst TodoItem: React.FC<TodoItemProps> = ({ todo, onToggle, onDelete }) => {\n    return (\n        <li className={`todo-item ${todo.completed ? 'completed' : ''}`}>\n            <div className=\"todo-content\">\n                <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={onToggle}\n                    className=\"todo-checkbox\"\n                />\n                <span className=\"todo-text\">{todo.text}</span>\n            </div>\n            <button\n                className=\"todo-delete\"\n                onClick={onDelete}\n                aria-label=\"Delete todo\"\n            >\n                Delete\n            </button>\n        </li>\n    );\n};\n\nexport default TodoItem;\n",
                "childComponents": []
              }
            ],
            "methods": [
              {
                "name": "handleAddTodo",
                "params": [],
                "returnType": "void",
                "code": "const handleAddTodo = () => {\n        if (!newTodoText.trim()) return;\n\n        const newTodo: TodoItem = {\n            id: Date.now().toString(),\n            text: newTodoText,\n            completed: false\n        };\n\n        setTodos([...todos, newTodo]);\n        setNewTodoText('');\n\n        if (onTodoAdded) {\n            onTodoAdded(newTodo);\n        }\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.8900224065014124,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7369068026877345,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7232814393850779,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6924748972553607,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6636712841189745,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.647076250541386,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "onTodoAdded",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (onTodoAdded) {\n            onTodoAdded(newTodo);\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.8404455225793223,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.823800395977576,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7894213331441867,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7727156387722378,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7227659494708848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7170434491511634,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6578586870027666,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "handleToggleTodo",
                "params": [
                  {
                    "name": "id",
                    "type": "string"
                  }
                ],
                "returnType": "void",
                "code": "const handleToggleTodo = (id: string) => {\n        setTodos(\n            todos.map(todo =>\n                todo.id === id ? { ...todo, completed: !todo.completed } : todo\n            )\n        );\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.895207954880469,
                    "reason": "Function appears to have similar functionality (90% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.8949988422616934,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.761901996130523,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7419124095381487,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7190028662133026,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6844951695390067,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6656508458272453,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6402273425604142,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "handleDeleteTodo",
                "params": [
                  {
                    "name": "id",
                    "type": "string"
                  }
                ],
                "returnType": "void",
                "code": "const handleDeleteTodo = (id: string) => {\n        setTodos(todos.filter(todo => todo.id !== id));\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.9390329843658209,
                    "reason": "Function appears to have similar functionality (94% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.8776901411162971,
                    "reason": "Function appears to have similar functionality (88% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.8720990589967671,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7712807821190346,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7460030872022815,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7403172082263607,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6885634920642805,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6826400942756132,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6429582557247608,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              }
            ]
          },
          {
            "name": "RecursiveExamples",
            "description": "Default export from RecursiveExamples.tsx",
            "props": [],
            "filePath": "examples/RecursiveExamples.tsx",
            "sourceCode": "import React, { useState } from 'react';\n\n/**\n * TypeScript recursive data structure examples\n */\n\n// Recursive type definition for nested comment structure\nexport interface Comment {\n    id: string;\n    text: string;\n    author: string;\n    replies: Comment[];\n}\n\n// Recursive type for tree node\nexport interface TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n}\n\n/**\n * Recursive functions in TypeScript\n */\n\n// Simple factorial calculation with recursion\nexport function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}\n\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n// Recursive function to calculate the sum of all numbers in a nested array\nexport function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}\n\n// Recursive tree traversal - depth-first search\nexport function depthFirstTraversal<T>(node: TreeNode<T>, callback: (value: T) => void): void {\n    // Process current node\n    callback(node.value);\n\n    // Recursively process all children\n    for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }\n}\n\n/**\n * Recursive class implementation in TypeScript\n */\nexport class RecursiveTreeProcessor<T> {\n    private root: TreeNode<T>;\n\n    constructor(root: TreeNode<T>) {\n        this.root = root;\n    }\n\n    // Method that uses recursion\n    public findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }\n\n    // Private recursive helper method\n    private findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }\n\n    // Another recursive method that transforms the tree\n    public mapTree<U>(mapFn: (value: T) => U): TreeNode<U> {\n        return this.mapNodeRecursive(this.root, mapFn);\n    }\n\n    private mapNodeRecursive<U>(node: TreeNode<T>, mapFn: (value: T) => U): TreeNode<U> {\n        return {\n            value: mapFn(node.value),\n            children: node.children.map(child => this.mapNodeRecursive(child, mapFn))\n        };\n    }\n}\n\n/**\n * React component that demonstrates recursive rendering\n */\nexport const CommentThread: React.FC<{ comments: Comment[] }> = ({ comments }) => {\n    const renderComment = (comment: Comment) => (\n        <div key={comment.id} className=\"comment\">\n            <div className=\"comment-header\">\n                <span className=\"author\">{comment.author}</span>\n            </div>\n            <div className=\"comment-text\">{comment.text}</div>\n\n            {/* Recursive rendering of replies */}\n            {comment.replies.length > 0 && (\n                <div className=\"comment-replies\">\n                    {comment.replies.map(reply => renderComment(reply))}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"comment-thread\">\n            {comments.map(comment => renderComment(comment))}\n        </div>\n    );\n};\n\n/**\n * JavaScript examples with recursion (using JS syntax, no types)\n */\n\n// Deep object clone with recursion\nexport function deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => deepClone(item)) as unknown as T;\n    }\n\n    const clonedObj: Record<string, any> = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }\n\n    return clonedObj as T;\n}\n\n// Recursive DOM traversal example in JavaScript\nexport function traverseDOM(element: Element, callback: (el: Element) => void): void {\n    // Process current element\n    callback(element);\n\n    // Recursively process all child nodes\n    Array.from(element.childNodes).forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }\n    });\n}\n\n// Recursive promise chain\nexport function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {\n    if (index >= actions.length) {\n        return Promise.resolve();\n    }\n\n    return Promise...\n// (code truncated for brevity)",
            "childComponents": []
          },
          {
            "name": "factorial",
            "description": "Recursive functions in TypeScript",
            "props": [],
            "filePath": "examples/RecursiveExamples.tsx",
            "sourceCode": "import React, { useState } from 'react';\n\n/**\n * TypeScript recursive data structure examples\n */\n\n// Recursive type definition for nested comment structure\nexport interface Comment {\n    id: string;\n    text: string;\n    author: string;\n    replies: Comment[];\n}\n\n// Recursive type for tree node\nexport interface TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n}\n\n/**\n * Recursive functions in TypeScript\n */\n\n// Simple factorial calculation with recursion\nexport function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}\n\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n// Recursive function to calculate the sum of all numbers in a nested array\nexport function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}\n\n// Recursive tree traversal - depth-first search\nexport function depthFirstTraversal<T>(node: TreeNode<T>, callback: (value: T) => void): void {\n    // Process current node\n    callback(node.value);\n\n    // Recursively process all children\n    for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }\n}\n\n/**\n * Recursive class implementation in TypeScript\n */\nexport class RecursiveTreeProcessor<T> {\n    private root: TreeNode<T>;\n\n    constructor(root: TreeNode<T>) {\n        this.root = root;\n    }\n\n    // Method that uses recursion\n    public findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }\n\n    // Private recursive helper method\n    private findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }\n\n    // Another recursive method that transforms the tree\n    public mapTree<U>(mapFn: (value: T) => U): TreeNode<U> {\n        return this.mapNodeRecursive(this.root, mapFn);\n    }\n\n    private mapNodeRecursive<U>(node: TreeNode<T>, mapFn: (value: T) => U): TreeNode<U> {\n        return {\n            value: mapFn(node.value),\n            children: node.children.map(child => this.mapNodeRecursive(child, mapFn))\n        };\n    }\n}\n\n/**\n * React component that demonstrates recursive rendering\n */\nexport const CommentThread: React.FC<{ comments: Comment[] }> = ({ comments }) => {\n    const renderComment = (comment: Comment) => (\n        <div key={comment.id} className=\"comment\">\n            <div className=\"comment-header\">\n                <span className=\"author\">{comment.author}</span>\n            </div>\n            <div className=\"comment-text\">{comment.text}</div>\n\n            {/* Recursive rendering of replies */}\n            {comment.replies.length > 0 && (\n                <div className=\"comment-replies\">\n                    {comment.replies.map(reply => renderComment(reply))}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"comment-thread\">\n            {comments.map(comment => renderComment(comment))}\n        </div>\n    );\n};\n\n/**\n * JavaScript examples with recursion (using JS syntax, no types)\n */\n\n// Deep object clone with recursion\nexport function deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => deepClone(item)) as unknown as T;\n    }\n\n    const clonedObj: Record<string, any> = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }\n\n    return clonedObj as T;\n}\n\n// Recursive DOM traversal example in JavaScript\nexport function traverseDOM(element: Element, callback: (el: Element) => void): void {\n    // Process current element\n    callback(element);\n\n    // Recursively process all child nodes\n    Array.from(element.childNodes).forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }\n    });\n}\n\n// Recursive promise chain\nexport function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {\n    if (index >= actions.length) {\n        return Promise.resolve();\n    }\n\n    return Promise...\n// (code truncated for brevity)",
            "childComponents": [],
            "methods": [
              {
                "name": "fibonacci",
                "params": [
                  {
                    "name": "n",
                    "type": "number"
                  },
                  {
                    "name": "memo",
                    "type": "Record<number"
                  },
                  {
                    "name": "number> = {}",
                    "type": "any"
                  }
                ],
                "returnType": "number",
                "code": "function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7090007745876641,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6956737654351405,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6840577575779809,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6578586870027666,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6569147673276075,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.647076250541386,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6429582557247608,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6423463019919371,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6402273425604142,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  }
                ]
              },
              {
                "name": "sumNestedArray",
                "params": [
                  {
                    "name": "arr",
                    "type": "any[]"
                  }
                ],
                "returnType": "number",
                "code": "function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7501346835645263,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7406114060219362,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7249526760825332,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.709428080686487,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7046784518445957,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.664046985139496,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6619312105727757,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6526071637159528,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6423666824304443,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/App.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "item of arr",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8282278374991462,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7716469001391171,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.770627988253544,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7575491142758187,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7475705901556372,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7227841988041942,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7202023300289478,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7120926229156106,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.710767973312398,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "typeof item === 'number'",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (typeof item === 'number') {\n            sum += item;\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.8630942857758426,
                    "reason": "Function appears to have similar functionality (86% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.8341453921175941,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.797835553249666,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7609838961103115,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7566147079445718,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.755414657298411,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7480114453562031,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7328634952990171,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7060796486637402,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "child of node.children",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8846790514068484,
                    "reason": "Function appears to have similar functionality (88% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7600268688378505,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7497472011007151,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7454011341058312,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7453495718614734,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7448635602656204,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7375287916659509,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7343671397695378,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7186684581736398,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "constructor",
                "params": [
                  {
                    "name": "root",
                    "type": "TreeNode<T>"
                  }
                ],
                "returnType": "void",
                "code": "constructor(root: TreeNode<T>) {\n        this.root = root;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.769611897020359,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7465145186021734,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7446187095243846,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7373287761685619,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7268033687603705,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6967304471124952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6928029581827734,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.683391346145776,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6299892294288986,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "findNodeByValue",
                "params": [
                  {
                    "name": "value",
                    "type": "T"
                  }
                ],
                "returnType": "TreeNode<T> | null",
                "code": "findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7285521951428092,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7169283023018702,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7032811240301604,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6923660782211026,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6890342909172844,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6888484367721514,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6807409981514074,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.664420190513949,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6418231757924514,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "findNodeRecursive",
                "params": [
                  {
                    "name": "node",
                    "type": "TreeNode<T>"
                  },
                  {
                    "name": "value",
                    "type": "T"
                  }
                ],
                "returnType": "TreeNode<T> | null",
                "code": "findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7588146654200606,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6953214166397821,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6722776321075188,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6640242248551934,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6639084990167211,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6511056990427607,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6482964823488419,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6378304185924444,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6374196224066616,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "child of node.children",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.9100408143103078,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7997892678420998,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7856035008096867,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7748487801497511,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7496559691315793,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7335929343710416,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7304325639902208,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7300021281283297,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.726814542347334,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "renderComment",
                "params": [
                  {
                    "name": "comment",
                    "type": "Comment"
                  }
                ],
                "returnType": "void",
                "code": "const renderComment = (comment: Comment) => (",
                "similarityWarnings": [
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7413589968951217,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7316319573288714,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7112868913336283,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7033547556971663,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7023375195820198,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6897263715307208,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6558668770781725,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6381886573450434,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "obj === null || typeof obj !== 'object'",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.867198331883805,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.8627851103557966,
                    "reason": "Function appears to have similar functionality (86% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8048487229945663,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7908204776178391,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.778694420132138,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7653875793964119,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.760782417747895,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7587552727208159,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7011525212630815,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "key in obj",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8171222741239181,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7906633978354608,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.752305349567527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7495847049337491,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7460051042047396,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7380304645072575,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7363959808453021,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7268313461901309,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7267164543460003,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "traverseDOM",
                "params": [
                  {
                    "name": "element",
                    "type": "Element"
                  },
                  {
                    "name": "callback",
                    "type": "(el"
                  }
                ],
                "returnType": "void",
                "code": "function traverseDOM(element: Element, callback: (el: Element) => void): void {",
                "similarityWarnings": [
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7715535858963926,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7692445367527934,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7646429752642436,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7328845037882842,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7019004492865474,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6879583311277475,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6850145020503027,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6571588460843557,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6268184336719129,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "forEach",
                "params": [
                  {
                    "name": "child => {\n        if (child.nodeType === Node.ELEMENT_NODE",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7860948720786198,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.773902386191897,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7606696682520175,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7573371840524605,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7501058424136771,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7488452568715364,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7447364780789031,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7126589361776408,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7075487035531843,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "recursivePromiseChain",
                "params": [
                  {
                    "name": "actions",
                    "type": "(("
                  }
                ],
                "returnType": "void",
                "code": "function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6934624870704861,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6915317009635987,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6876205497449485,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6873262965091594,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6850329969103433,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6837095471345,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6811045713185263,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6796636167969574,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6405459161098245,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "index >= actions.length",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (index >= actions.length) {\n        return Promise.resolve();\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.8169967094742822,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7965160054432926,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7644192829838371,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7339863002361963,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7324852589360452,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7324838011991478,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7236481285633931,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7018998796365058,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6936394957378221,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "runRecursiveExample",
                "params": [],
                "returnType": "void",
                "code": "const runRecursiveExample = () => {\n        // Calculate factorial of 5\n        const fact5 = factorial(5);\n\n        // Calculate 10th Fibonacci number\n        const fib10 = fibonacci(10);\n\n        // Sum the nested array\n        const sum = sumNestedArray(nestedArray);\n\n        // Process the tree\n        const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n        const values: string[] = [];\n        depthFirstTraversal(sampleTree, (val) => values.push(val));\n\n        setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}\n      Sum of nested array: ${sum}\n      Tree values: ${values.join(', ')}\n    `);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.682708395490253,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6722934600565552,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6706875787510936,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6696125053538209,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.660924396269221,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6608968797157725,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.624843934134741,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.623898241630341,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6097587173402967,
                    "reason": "Function appears to have similar functionality (61% similar)",
                    "filePath": "examples/Todo.tsx"
                  }
                ]
              },
              {
                "name": "setResult",
                "params": [
                  {
                    "name": "`\n      Factorial of 5",
                    "type": "${fact5}\n      Fibonacci(10"
                  }
                ],
                "returnType": "$",
                "code": "setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}",
                "similarityWarnings": [
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6640123263764874,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6632817612784112,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6574758521048489,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6542221357308939,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6407558660531494,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6340209980623526,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6311620661041384,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6196363128721795,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6089953081375107,
                    "reason": "Function appears to have similar functionality (61% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              }
            ]
          },
          {
            "name": "sumNestedArray",
            "description": "",
            "props": [],
            "filePath": "examples/RecursiveExamples.tsx",
            "sourceCode": "import React, { useState } from 'react';\n\n/**\n * TypeScript recursive data structure examples\n */\n\n// Recursive type definition for nested comment structure\nexport interface Comment {\n    id: string;\n    text: string;\n    author: string;\n    replies: Comment[];\n}\n\n// Recursive type for tree node\nexport interface TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n}\n\n/**\n * Recursive functions in TypeScript\n */\n\n// Simple factorial calculation with recursion\nexport function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}\n\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n// Recursive function to calculate the sum of all numbers in a nested array\nexport function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}\n\n// Recursive tree traversal - depth-first search\nexport function depthFirstTraversal<T>(node: TreeNode<T>, callback: (value: T) => void): void {\n    // Process current node\n    callback(node.value);\n\n    // Recursively process all children\n    for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }\n}\n\n/**\n * Recursive class implementation in TypeScript\n */\nexport class RecursiveTreeProcessor<T> {\n    private root: TreeNode<T>;\n\n    constructor(root: TreeNode<T>) {\n        this.root = root;\n    }\n\n    // Method that uses recursion\n    public findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }\n\n    // Private recursive helper method\n    private findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }\n\n    // Another recursive method that transforms the tree\n    public mapTree<U>(mapFn: (value: T) => U): TreeNode<U> {\n        return this.mapNodeRecursive(this.root, mapFn);\n    }\n\n    private mapNodeRecursive<U>(node: TreeNode<T>, mapFn: (value: T) => U): TreeNode<U> {\n        return {\n            value: mapFn(node.value),\n            children: node.children.map(child => this.mapNodeRecursive(child, mapFn))\n        };\n    }\n}\n\n/**\n * React component that demonstrates recursive rendering\n */\nexport const CommentThread: React.FC<{ comments: Comment[] }> = ({ comments }) => {\n    const renderComment = (comment: Comment) => (\n        <div key={comment.id} className=\"comment\">\n            <div className=\"comment-header\">\n                <span className=\"author\">{comment.author}</span>\n            </div>\n            <div className=\"comment-text\">{comment.text}</div>\n\n            {/* Recursive rendering of replies */}\n            {comment.replies.length > 0 && (\n                <div className=\"comment-replies\">\n                    {comment.replies.map(reply => renderComment(reply))}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"comment-thread\">\n            {comments.map(comment => renderComment(comment))}\n        </div>\n    );\n};\n\n/**\n * JavaScript examples with recursion (using JS syntax, no types)\n */\n\n// Deep object clone with recursion\nexport function deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => deepClone(item)) as unknown as T;\n    }\n\n    const clonedObj: Record<string, any> = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }\n\n    return clonedObj as T;\n}\n\n// Recursive DOM traversal example in JavaScript\nexport function traverseDOM(element: Element, callback: (el: Element) => void): void {\n    // Process current element\n    callback(element);\n\n    // Recursively process all child nodes\n    Array.from(element.childNodes).forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }\n    });\n}\n\n// Recursive promise chain\nexport function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {\n    if (index >= actions.length) {\n        return Promise.resolve();\n    }\n\n    return Promise...\n// (code truncated for brevity)",
            "childComponents": [],
            "methods": [
              {
                "name": "factorial",
                "params": [
                  {
                    "name": "n",
                    "type": "number"
                  }
                ],
                "returnType": "number",
                "code": "function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7232716416423449,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7121863487930898,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6819023843086419,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6765010185301117,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6637900799960157,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6605886511727638,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6597131617562109,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6529534532762975,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6505718711493869,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "fibonacci",
                "params": [
                  {
                    "name": "n",
                    "type": "number"
                  },
                  {
                    "name": "memo",
                    "type": "Record<number"
                  },
                  {
                    "name": "number> = {}",
                    "type": "any"
                  }
                ],
                "returnType": "number",
                "code": "function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7090007745876641,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6956737654351405,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6840577575779809,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6578586870027666,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6569147673276075,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.647076250541386,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6429582557247608,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6423463019919371,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6402273425604142,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "item of arr",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8282278374991462,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7716469001391171,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.770627988253544,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7575491142758187,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7475705901556372,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7227841988041942,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7202023300289478,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7120926229156106,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.710767973312398,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "typeof item === 'number'",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (typeof item === 'number') {\n            sum += item;\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.8630942857758426,
                    "reason": "Function appears to have similar functionality (86% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.8341453921175941,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.797835553249666,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7609838961103115,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7566147079445718,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.755414657298411,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7480114453562031,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7328634952990171,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7060796486637402,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "child of node.children",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8846790514068484,
                    "reason": "Function appears to have similar functionality (88% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7600268688378505,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7497472011007151,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7454011341058312,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7453495718614734,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7448635602656204,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7375287916659509,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7343671397695378,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7186684581736398,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "constructor",
                "params": [
                  {
                    "name": "root",
                    "type": "TreeNode<T>"
                  }
                ],
                "returnType": "void",
                "code": "constructor(root: TreeNode<T>) {\n        this.root = root;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.constructor",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.769611897020359,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7465145186021734,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7446187095243846,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7373287761685619,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7268033687603705,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6967304471124952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6928029581827734,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.683391346145776,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6299892294288986,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "findNodeByValue",
                "params": [
                  {
                    "name": "value",
                    "type": "T"
                  }
                ],
                "returnType": "TreeNode<T> | null",
                "code": "findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7285521951428092,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7169283023018702,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7032811240301604,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6923660782211026,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6890342909172844,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6888484367721514,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6807409981514074,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.664420190513949,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6418231757924514,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "findNodeRecursive",
                "params": [
                  {
                    "name": "node",
                    "type": "TreeNode<T>"
                  },
                  {
                    "name": "value",
                    "type": "T"
                  }
                ],
                "returnType": "TreeNode<T> | null",
                "code": "findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7588146654200606,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6953214166397821,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6722776321075188,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6640242248551934,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6639084990167211,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6511056990427607,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6482964823488419,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6378304185924444,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6374196224066616,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "child of node.children",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.9100408143103078,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7997892678420998,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7856035008096867,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7748487801497511,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7496559691315793,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7335929343710416,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7304325639902208,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7300021281283297,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.726814542347334,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "renderComment",
                "params": [
                  {
                    "name": "comment",
                    "type": "Comment"
                  }
                ],
                "returnType": "void",
                "code": "const renderComment = (comment: Comment) => (",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7413589968951217,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7316319573288714,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7112868913336283,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7033547556971663,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7023375195820198,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6897263715307208,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6558668770781725,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6381886573450434,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "obj === null || typeof obj !== 'object'",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.867198331883805,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.8627851103557966,
                    "reason": "Function appears to have similar functionality (86% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8048487229945663,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7908204776178391,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.778694420132138,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7653875793964119,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.760782417747895,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7587552727208159,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7011525212630815,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "key in obj",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8171222741239181,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7906633978354608,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.752305349567527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7495847049337491,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7460051042047396,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7380304645072575,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7363959808453021,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7268313461901309,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7267164543460003,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "traverseDOM",
                "params": [
                  {
                    "name": "element",
                    "type": "Element"
                  },
                  {
                    "name": "callback",
                    "type": "(el"
                  }
                ],
                "returnType": "void",
                "code": "function traverseDOM(element: Element, callback: (el: Element) => void): void {",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7715535858963926,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7692445367527934,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7646429752642436,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7328845037882842,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7019004492865474,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6879583311277475,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6850145020503027,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6571588460843557,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6268184336719129,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "forEach",
                "params": [
                  {
                    "name": "child => {\n        if (child.nodeType === Node.ELEMENT_NODE",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7860948720786198,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.773902386191897,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7606696682520175,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7573371840524605,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7501058424136771,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7488452568715364,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7447364780789031,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7126589361776408,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7075487035531843,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "recursivePromiseChain",
                "params": [
                  {
                    "name": "actions",
                    "type": "(("
                  }
                ],
                "returnType": "void",
                "code": "function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6934624870704861,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6915317009635987,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6876205497449485,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6873262965091594,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6850329969103433,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6837095471345,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6811045713185263,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6796636167969574,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6405459161098245,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "index >= actions.length",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (index >= actions.length) {\n        return Promise.resolve();\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.8169967094742822,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7965160054432926,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7644192829838371,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7339863002361963,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7324852589360452,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7324838011991478,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7236481285633931,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7018998796365058,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6936394957378221,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "runRecursiveExample",
                "params": [],
                "returnType": "void",
                "code": "const runRecursiveExample = () => {\n        // Calculate factorial of 5\n        const fact5 = factorial(5);\n\n        // Calculate 10th Fibonacci number\n        const fib10 = fibonacci(10);\n\n        // Sum the nested array\n        const sum = sumNestedArray(nestedArray);\n\n        // Process the tree\n        const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n        const values: string[] = [];\n        depthFirstTraversal(sampleTree, (val) => values.push(val));\n\n        setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}\n      Sum of nested array: ${sum}\n      Tree values: ${values.join(', ')}\n    `);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.682708395490253,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6722934600565552,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6706875787510936,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6696125053538209,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.660924396269221,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6608968797157725,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.624843934134741,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.623898241630341,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6097587173402967,
                    "reason": "Function appears to have similar functionality (61% similar)",
                    "filePath": "examples/Todo.tsx"
                  }
                ]
              },
              {
                "name": "setResult",
                "params": [
                  {
                    "name": "`\n      Factorial of 5",
                    "type": "${fact5}\n      Fibonacci(10"
                  }
                ],
                "returnType": "$",
                "code": "setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.setResult",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6640123263764874,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6632817612784112,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6574758521048489,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6542221357308939,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6407558660531494,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6340209980623526,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6311620661041384,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6196363128721795,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6089953081375107,
                    "reason": "Function appears to have similar functionality (61% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              }
            ]
          },
          {
            "name": "deepClone",
            "description": "JavaScript examples with recursion (using JS syntax, no types)",
            "props": [],
            "filePath": "examples/RecursiveExamples.tsx",
            "sourceCode": "import React, { useState } from 'react';\n\n/**\n * TypeScript recursive data structure examples\n */\n\n// Recursive type definition for nested comment structure\nexport interface Comment {\n    id: string;\n    text: string;\n    author: string;\n    replies: Comment[];\n}\n\n// Recursive type for tree node\nexport interface TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n}\n\n/**\n * Recursive functions in TypeScript\n */\n\n// Simple factorial calculation with recursion\nexport function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}\n\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n// Recursive function to calculate the sum of all numbers in a nested array\nexport function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}\n\n// Recursive tree traversal - depth-first search\nexport function depthFirstTraversal<T>(node: TreeNode<T>, callback: (value: T) => void): void {\n    // Process current node\n    callback(node.value);\n\n    // Recursively process all children\n    for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }\n}\n\n/**\n * Recursive class implementation in TypeScript\n */\nexport class RecursiveTreeProcessor<T> {\n    private root: TreeNode<T>;\n\n    constructor(root: TreeNode<T>) {\n        this.root = root;\n    }\n\n    // Method that uses recursion\n    public findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }\n\n    // Private recursive helper method\n    private findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }\n\n    // Another recursive method that transforms the tree\n    public mapTree<U>(mapFn: (value: T) => U): TreeNode<U> {\n        return this.mapNodeRecursive(this.root, mapFn);\n    }\n\n    private mapNodeRecursive<U>(node: TreeNode<T>, mapFn: (value: T) => U): TreeNode<U> {\n        return {\n            value: mapFn(node.value),\n            children: node.children.map(child => this.mapNodeRecursive(child, mapFn))\n        };\n    }\n}\n\n/**\n * React component that demonstrates recursive rendering\n */\nexport const CommentThread: React.FC<{ comments: Comment[] }> = ({ comments }) => {\n    const renderComment = (comment: Comment) => (\n        <div key={comment.id} className=\"comment\">\n            <div className=\"comment-header\">\n                <span className=\"author\">{comment.author}</span>\n            </div>\n            <div className=\"comment-text\">{comment.text}</div>\n\n            {/* Recursive rendering of replies */}\n            {comment.replies.length > 0 && (\n                <div className=\"comment-replies\">\n                    {comment.replies.map(reply => renderComment(reply))}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"comment-thread\">\n            {comments.map(comment => renderComment(comment))}\n        </div>\n    );\n};\n\n/**\n * JavaScript examples with recursion (using JS syntax, no types)\n */\n\n// Deep object clone with recursion\nexport function deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => deepClone(item)) as unknown as T;\n    }\n\n    const clonedObj: Record<string, any> = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }\n\n    return clonedObj as T;\n}\n\n// Recursive DOM traversal example in JavaScript\nexport function traverseDOM(element: Element, callback: (el: Element) => void): void {\n    // Process current element\n    callback(element);\n\n    // Recursively process all child nodes\n    Array.from(element.childNodes).forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }\n    });\n}\n\n// Recursive promise chain\nexport function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {\n    if (index >= actions.length) {\n        return Promise.resolve();\n    }\n\n    return Promise...\n// (code truncated for brevity)",
            "childComponents": [],
            "methods": [
              {
                "name": "factorial",
                "params": [
                  {
                    "name": "n",
                    "type": "number"
                  }
                ],
                "returnType": "number",
                "code": "function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7232716416423449,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7121863487930898,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6819023843086419,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6765010185301117,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6637900799960157,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6605886511727638,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6597131617562109,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6529534532762975,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6505718711493869,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "fibonacci",
                "params": [
                  {
                    "name": "n",
                    "type": "number"
                  },
                  {
                    "name": "memo",
                    "type": "Record<number"
                  },
                  {
                    "name": "number> = {}",
                    "type": "any"
                  }
                ],
                "returnType": "number",
                "code": "function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7090007745876641,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6956737654351405,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6840577575779809,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6578586870027666,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6569147673276075,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.647076250541386,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6429582557247608,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6423463019919371,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6402273425604142,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "sumNestedArray",
                "params": [
                  {
                    "name": "arr",
                    "type": "any[]"
                  }
                ],
                "returnType": "number",
                "code": "function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7501346835645263,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7406114060219362,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7249526760825332,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.709428080686487,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7046784518445957,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.664046985139496,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6619312105727757,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6526071637159528,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6423666824304443,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/App.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "item of arr",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8282278374991462,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7716469001391171,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.770627988253544,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7575491142758187,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7475705901556372,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7227841988041942,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7202023300289478,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7120926229156106,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.710767973312398,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "typeof item === 'number'",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (typeof item === 'number') {\n            sum += item;\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.8630942857758426,
                    "reason": "Function appears to have similar functionality (86% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.8341453921175941,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.797835553249666,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7609838961103115,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7566147079445718,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.755414657298411,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7480114453562031,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7328634952990171,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7060796486637402,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "child of node.children",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8846790514068484,
                    "reason": "Function appears to have similar functionality (88% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7600268688378505,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7497472011007151,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7454011341058312,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7453495718614734,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7448635602656204,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7375287916659509,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7343671397695378,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7186684581736398,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "constructor",
                "params": [
                  {
                    "name": "root",
                    "type": "TreeNode<T>"
                  }
                ],
                "returnType": "void",
                "code": "constructor(root: TreeNode<T>) {\n        this.root = root;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.constructor",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.769611897020359,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7465145186021734,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7446187095243846,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7373287761685619,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7268033687603705,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6967304471124952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6928029581827734,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.683391346145776,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6299892294288986,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "findNodeByValue",
                "params": [
                  {
                    "name": "value",
                    "type": "T"
                  }
                ],
                "returnType": "TreeNode<T> | null",
                "code": "findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7285521951428092,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7169283023018702,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7032811240301604,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6923660782211026,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6890342909172844,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6888484367721514,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6807409981514074,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.664420190513949,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6418231757924514,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "findNodeRecursive",
                "params": [
                  {
                    "name": "node",
                    "type": "TreeNode<T>"
                  },
                  {
                    "name": "value",
                    "type": "T"
                  }
                ],
                "returnType": "TreeNode<T> | null",
                "code": "findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7588146654200606,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6953214166397821,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6722776321075188,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6640242248551934,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6639084990167211,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6511056990427607,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6482964823488419,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6378304185924444,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6374196224066616,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "child of node.children",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.9100408143103078,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7997892678420998,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7856035008096867,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7748487801497511,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7496559691315793,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7335929343710416,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7304325639902208,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7300021281283297,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.726814542347334,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "renderComment",
                "params": [
                  {
                    "name": "comment",
                    "type": "Comment"
                  }
                ],
                "returnType": "void",
                "code": "const renderComment = (comment: Comment) => (",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7413589968951217,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7316319573288714,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7112868913336283,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7033547556971663,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7023375195820198,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6897263715307208,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6558668770781725,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6381886573450434,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "obj === null || typeof obj !== 'object'",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.867198331883805,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.8627851103557966,
                    "reason": "Function appears to have similar functionality (86% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8048487229945663,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7908204776178391,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.778694420132138,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7653875793964119,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.760782417747895,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7587552727208159,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7011525212630815,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "key in obj",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8171222741239181,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7906633978354608,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.752305349567527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7495847049337491,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7460051042047396,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7380304645072575,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7363959808453021,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7268313461901309,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7267164543460003,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "traverseDOM",
                "params": [
                  {
                    "name": "element",
                    "type": "Element"
                  },
                  {
                    "name": "callback",
                    "type": "(el"
                  }
                ],
                "returnType": "void",
                "code": "function traverseDOM(element: Element, callback: (el: Element) => void): void {",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7715535858963926,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7692445367527934,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7646429752642436,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7328845037882842,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7019004492865474,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6879583311277475,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6850145020503027,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6571588460843557,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6268184336719129,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "forEach",
                "params": [
                  {
                    "name": "child => {\n        if (child.nodeType === Node.ELEMENT_NODE",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7860948720786198,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.773902386191897,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7606696682520175,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7573371840524605,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7501058424136771,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7488452568715364,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7447364780789031,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7126589361776408,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7075487035531843,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "recursivePromiseChain",
                "params": [
                  {
                    "name": "actions",
                    "type": "(("
                  }
                ],
                "returnType": "void",
                "code": "function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6934624870704861,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6915317009635987,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6876205497449485,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6873262965091594,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6850329969103433,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6837095471345,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6811045713185263,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6796636167969574,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6405459161098245,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "index >= actions.length",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (index >= actions.length) {\n        return Promise.resolve();\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.8169967094742822,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7965160054432926,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7644192829838371,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7339863002361963,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7324852589360452,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7324838011991478,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7236481285633931,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7018998796365058,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6936394957378221,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "runRecursiveExample",
                "params": [],
                "returnType": "void",
                "code": "const runRecursiveExample = () => {\n        // Calculate factorial of 5\n        const fact5 = factorial(5);\n\n        // Calculate 10th Fibonacci number\n        const fib10 = fibonacci(10);\n\n        // Sum the nested array\n        const sum = sumNestedArray(nestedArray);\n\n        // Process the tree\n        const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n        const values: string[] = [];\n        depthFirstTraversal(sampleTree, (val) => values.push(val));\n\n        setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}\n      Sum of nested array: ${sum}\n      Tree values: ${values.join(', ')}\n    `);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.682708395490253,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6722934600565552,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6706875787510936,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6696125053538209,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.660924396269221,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6608968797157725,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.624843934134741,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.623898241630341,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6097587173402967,
                    "reason": "Function appears to have similar functionality (61% similar)",
                    "filePath": "examples/Todo.tsx"
                  }
                ]
              },
              {
                "name": "setResult",
                "params": [
                  {
                    "name": "`\n      Factorial of 5",
                    "type": "${fact5}\n      Fibonacci(10"
                  }
                ],
                "returnType": "$",
                "code": "setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.setResult",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6640123263764874,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6632817612784112,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6574758521048489,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6542221357308939,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6407558660531494,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6340209980623526,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6311620661041384,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6196363128721795,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6089953081375107,
                    "reason": "Function appears to have similar functionality (61% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              }
            ]
          },
          {
            "name": "RecursiveTreeProcessor",
            "description": "Recursive class implementation in TypeScript",
            "props": [],
            "filePath": "examples/RecursiveExamples.tsx",
            "sourceCode": "import React, { useState } from 'react';\n\n/**\n * TypeScript recursive data structure examples\n */\n\n// Recursive type definition for nested comment structure\nexport interface Comment {\n    id: string;\n    text: string;\n    author: string;\n    replies: Comment[];\n}\n\n// Recursive type for tree node\nexport interface TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n}\n\n/**\n * Recursive functions in TypeScript\n */\n\n// Simple factorial calculation with recursion\nexport function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}\n\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n// Recursive function to calculate the sum of all numbers in a nested array\nexport function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}\n\n// Recursive tree traversal - depth-first search\nexport function depthFirstTraversal<T>(node: TreeNode<T>, callback: (value: T) => void): void {\n    // Process current node\n    callback(node.value);\n\n    // Recursively process all children\n    for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }\n}\n\n/**\n * Recursive class implementation in TypeScript\n */\nexport class RecursiveTreeProcessor<T> {\n    private root: TreeNode<T>;\n\n    constructor(root: TreeNode<T>) {\n        this.root = root;\n    }\n\n    // Method that uses recursion\n    public findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }\n\n    // Private recursive helper method\n    private findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }\n\n    // Another recursive method that transforms the tree\n    public mapTree<U>(mapFn: (value: T) => U): TreeNode<U> {\n        return this.mapNodeRecursive(this.root, mapFn);\n    }\n\n    private mapNodeRecursive<U>(node: TreeNode<T>, mapFn: (value: T) => U): TreeNode<U> {\n        return {\n            value: mapFn(node.value),\n            children: node.children.map(child => this.mapNodeRecursive(child, mapFn))\n        };\n    }\n}\n\n/**\n * React component that demonstrates recursive rendering\n */\nexport const CommentThread: React.FC<{ comments: Comment[] }> = ({ comments }) => {\n    const renderComment = (comment: Comment) => (\n        <div key={comment.id} className=\"comment\">\n            <div className=\"comment-header\">\n                <span className=\"author\">{comment.author}</span>\n            </div>\n            <div className=\"comment-text\">{comment.text}</div>\n\n            {/* Recursive rendering of replies */}\n            {comment.replies.length > 0 && (\n                <div className=\"comment-replies\">\n                    {comment.replies.map(reply => renderComment(reply))}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"comment-thread\">\n            {comments.map(comment => renderComment(comment))}\n        </div>\n    );\n};\n\n/**\n * JavaScript examples with recursion (using JS syntax, no types)\n */\n\n// Deep object clone with recursion\nexport function deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => deepClone(item)) as unknown as T;\n    }\n\n    const clonedObj: Record<string, any> = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }\n\n    return clonedObj as T;\n}\n\n// Recursive DOM traversal example in JavaScript\nexport function traverseDOM(element: Element, callback: (el: Element) => void): void {\n    // Process current element\n    callback(element);\n\n    // Recursively process all child nodes\n    Array.from(element.childNodes).forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }\n    });\n}\n\n// Recursive promise chain\nexport function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {\n    if (index >= actions.length) {\n        return Promise.resolve();\n    }\n\n    return Promise...\n// (code truncated for brevity)",
            "childComponents": [],
            "methods": [
              {
                "name": "factorial",
                "params": [
                  {
                    "name": "n",
                    "type": "number"
                  }
                ],
                "returnType": "number",
                "code": "function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7232716416423449,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7121863487930898,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6819023843086419,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6765010185301117,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6637900799960157,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6605886511727638,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6597131617562109,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6529534532762975,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6505718711493869,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "fibonacci",
                "params": [
                  {
                    "name": "n",
                    "type": "number"
                  },
                  {
                    "name": "memo",
                    "type": "Record<number"
                  },
                  {
                    "name": "number> = {}",
                    "type": "any"
                  }
                ],
                "returnType": "number",
                "code": "function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7090007745876641,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6956737654351405,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6840577575779809,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6578586870027666,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6569147673276075,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.647076250541386,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6429582557247608,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6423463019919371,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6402273425604142,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "sumNestedArray",
                "params": [
                  {
                    "name": "arr",
                    "type": "any[]"
                  }
                ],
                "returnType": "number",
                "code": "function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7501346835645263,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7406114060219362,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7249526760825332,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.709428080686487,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7046784518445957,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.664046985139496,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6619312105727757,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6526071637159528,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6423666824304443,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/App.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "item of arr",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8282278374991462,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7716469001391171,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.770627988253544,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7575491142758187,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7475705901556372,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7227841988041942,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7202023300289478,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7120926229156106,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.710767973312398,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "typeof item === 'number'",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (typeof item === 'number') {\n            sum += item;\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.8630942857758426,
                    "reason": "Function appears to have similar functionality (86% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.8341453921175941,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.797835553249666,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7609838961103115,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7566147079445718,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.755414657298411,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7480114453562031,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7328634952990171,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7060796486637402,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "child of node.children",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8846790514068484,
                    "reason": "Function appears to have similar functionality (88% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7600268688378505,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7497472011007151,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7454011341058312,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7453495718614734,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7448635602656204,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7375287916659509,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7343671397695378,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7186684581736398,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "constructor",
                "params": [
                  {
                    "name": "root",
                    "type": "TreeNode<T>"
                  }
                ],
                "returnType": "void",
                "code": "constructor(root: TreeNode<T>) {\n        this.root = root;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.constructor",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.769611897020359,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7465145186021734,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7446187095243846,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7373287761685619,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7268033687603705,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6967304471124952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6928029581827734,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.683391346145776,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6299892294288986,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "findNodeByValue",
                "params": [
                  {
                    "name": "value",
                    "type": "T"
                  }
                ],
                "returnType": "TreeNode<T> | null",
                "code": "findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7285521951428092,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7169283023018702,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7032811240301604,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6923660782211026,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6890342909172844,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6888484367721514,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6807409981514074,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.664420190513949,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6418231757924514,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "findNodeRecursive",
                "params": [
                  {
                    "name": "node",
                    "type": "TreeNode<T>"
                  },
                  {
                    "name": "value",
                    "type": "T"
                  }
                ],
                "returnType": "TreeNode<T> | null",
                "code": "findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7588146654200606,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6953214166397821,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6722776321075188,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6640242248551934,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6639084990167211,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6511056990427607,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6482964823488419,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6378304185924444,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6374196224066616,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "child of node.children",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.9100408143103078,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7997892678420998,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7856035008096867,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7748487801497511,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7496559691315793,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7335929343710416,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7304325639902208,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7300021281283297,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.726814542347334,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "renderComment",
                "params": [
                  {
                    "name": "comment",
                    "type": "Comment"
                  }
                ],
                "returnType": "void",
                "code": "const renderComment = (comment: Comment) => (",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7413589968951217,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7316319573288714,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7112868913336283,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7033547556971663,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7023375195820198,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6897263715307208,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6558668770781725,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6381886573450434,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "obj === null || typeof obj !== 'object'",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.867198331883805,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.8627851103557966,
                    "reason": "Function appears to have similar functionality (86% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8048487229945663,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7908204776178391,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.778694420132138,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7653875793964119,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.760782417747895,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7587552727208159,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7011525212630815,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "key in obj",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8171222741239181,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7906633978354608,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.752305349567527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7495847049337491,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7460051042047396,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7380304645072575,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7363959808453021,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7268313461901309,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7267164543460003,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "traverseDOM",
                "params": [
                  {
                    "name": "element",
                    "type": "Element"
                  },
                  {
                    "name": "callback",
                    "type": "(el"
                  }
                ],
                "returnType": "void",
                "code": "function traverseDOM(element: Element, callback: (el: Element) => void): void {",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7715535858963926,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7692445367527934,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7646429752642436,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7328845037882842,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7019004492865474,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6879583311277475,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6850145020503027,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6571588460843557,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6268184336719129,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "forEach",
                "params": [
                  {
                    "name": "child => {\n        if (child.nodeType === Node.ELEMENT_NODE",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7860948720786198,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.773902386191897,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7606696682520175,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7573371840524605,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7501058424136771,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7488452568715364,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7447364780789031,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7126589361776408,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7075487035531843,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "recursivePromiseChain",
                "params": [
                  {
                    "name": "actions",
                    "type": "(("
                  }
                ],
                "returnType": "void",
                "code": "function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6934624870704861,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6915317009635987,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6876205497449485,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6873262965091594,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6850329969103433,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6837095471345,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6811045713185263,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6796636167969574,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6405459161098245,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "index >= actions.length",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (index >= actions.length) {\n        return Promise.resolve();\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.8169967094742822,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7965160054432926,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7644192829838371,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7339863002361963,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7324852589360452,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7324838011991478,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7236481285633931,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7018998796365058,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6936394957378221,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "runRecursiveExample",
                "params": [],
                "returnType": "void",
                "code": "const runRecursiveExample = () => {\n        // Calculate factorial of 5\n        const fact5 = factorial(5);\n\n        // Calculate 10th Fibonacci number\n        const fib10 = fibonacci(10);\n\n        // Sum the nested array\n        const sum = sumNestedArray(nestedArray);\n\n        // Process the tree\n        const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n        const values: string[] = [];\n        depthFirstTraversal(sampleTree, (val) => values.push(val));\n\n        setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}\n      Sum of nested array: ${sum}\n      Tree values: ${values.join(', ')}\n    `);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.682708395490253,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6722934600565552,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6706875787510936,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6696125053538209,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.660924396269221,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6608968797157725,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.624843934134741,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.623898241630341,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6097587173402967,
                    "reason": "Function appears to have similar functionality (61% similar)",
                    "filePath": "examples/Todo.tsx"
                  }
                ]
              },
              {
                "name": "setResult",
                "params": [
                  {
                    "name": "`\n      Factorial of 5",
                    "type": "${fact5}\n      Fibonacci(10"
                  }
                ],
                "returnType": "$",
                "code": "setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.setResult",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6640123263764874,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6632817612784112,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6574758521048489,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6542221357308939,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6407558660531494,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6340209980623526,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6311620661041384,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6196363128721795,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6089953081375107,
                    "reason": "Function appears to have similar functionality (61% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              }
            ]
          },
          {
            "name": "CommentThread",
            "description": "React component that demonstrates recursive rendering",
            "props": [
              {
                "name": "comments",
                "type": "Comment[]",
                "required": true,
                "description": ""
              }
            ],
            "filePath": "examples/RecursiveExamples.tsx",
            "sourceCode": "import React, { useState } from 'react';\n\n/**\n * TypeScript recursive data structure examples\n */\n\n// Recursive type definition for nested comment structure\nexport interface Comment {\n    id: string;\n    text: string;\n    author: string;\n    replies: Comment[];\n}\n\n// Recursive type for tree node\nexport interface TreeNode<T> {\n    value: T;\n    children: TreeNode<T>[];\n}\n\n/**\n * Recursive functions in TypeScript\n */\n\n// Simple factorial calculation with recursion\nexport function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}\n\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n// Recursive function to calculate the sum of all numbers in a nested array\nexport function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}\n\n// Recursive tree traversal - depth-first search\nexport function depthFirstTraversal<T>(node: TreeNode<T>, callback: (value: T) => void): void {\n    // Process current node\n    callback(node.value);\n\n    // Recursively process all children\n    for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }\n}\n\n/**\n * Recursive class implementation in TypeScript\n */\nexport class RecursiveTreeProcessor<T> {\n    private root: TreeNode<T>;\n\n    constructor(root: TreeNode<T>) {\n        this.root = root;\n    }\n\n    // Method that uses recursion\n    public findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }\n\n    // Private recursive helper method\n    private findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }\n\n    // Another recursive method that transforms the tree\n    public mapTree<U>(mapFn: (value: T) => U): TreeNode<U> {\n        return this.mapNodeRecursive(this.root, mapFn);\n    }\n\n    private mapNodeRecursive<U>(node: TreeNode<T>, mapFn: (value: T) => U): TreeNode<U> {\n        return {\n            value: mapFn(node.value),\n            children: node.children.map(child => this.mapNodeRecursive(child, mapFn))\n        };\n    }\n}\n\n/**\n * React component that demonstrates recursive rendering\n */\nexport const CommentThread: React.FC<{ comments: Comment[] }> = ({ comments }) => {\n    const renderComment = (comment: Comment) => (\n        <div key={comment.id} className=\"comment\">\n            <div className=\"comment-header\">\n                <span className=\"author\">{comment.author}</span>\n            </div>\n            <div className=\"comment-text\">{comment.text}</div>\n\n            {/* Recursive rendering of replies */}\n            {comment.replies.length > 0 && (\n                <div className=\"comment-replies\">\n                    {comment.replies.map(reply => renderComment(reply))}\n                </div>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"comment-thread\">\n            {comments.map(comment => renderComment(comment))}\n        </div>\n    );\n};\n\n/**\n * JavaScript examples with recursion (using JS syntax, no types)\n */\n\n// Deep object clone with recursion\nexport function deepClone<T>(obj: T): T {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map(item => deepClone(item)) as unknown as T;\n    }\n\n    const clonedObj: Record<string, any> = {};\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }\n\n    return clonedObj as T;\n}\n\n// Recursive DOM traversal example in JavaScript\nexport function traverseDOM(element: Element, callback: (el: Element) => void): void {\n    // Process current element\n    callback(element);\n\n    // Recursively process all child nodes\n    Array.from(element.childNodes).forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }\n    });\n}\n\n// Recursive promise chain\nexport function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {\n    if (index >= actions.length) {\n        return Promise.resolve();\n    }\n\n    return Promise...\n// (code truncated for brevity)",
            "childComponents": [],
            "methods": [
              {
                "name": "factorial",
                "params": [
                  {
                    "name": "n",
                    "type": "number"
                  }
                ],
                "returnType": "number",
                "code": "function factorial(n: number): number {\n    // Base case\n    if (n <= 1) return 1;\n    // Recursive case\n    return n * factorial(n - 1);\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7232716416423449,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7121863487930898,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6819023843086419,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6765010185301117,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6637900799960157,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6605886511727638,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6597131617562109,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6529534532762975,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6505718711493869,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "fibonacci",
                "params": [
                  {
                    "name": "n",
                    "type": "number"
                  },
                  {
                    "name": "memo",
                    "type": "Record<number"
                  },
                  {
                    "name": "number> = {}",
                    "type": "any"
                  }
                ],
                "returnType": "number",
                "code": "function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.8153431375485499,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7090007745876641,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6956737654351405,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6840577575779809,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6578586870027666,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6569147673276075,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.647076250541386,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6429582557247608,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6423463019919371,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6402273425604142,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "sumNestedArray",
                "params": [
                  {
                    "name": "arr",
                    "type": "any[]"
                  }
                ],
                "returnType": "number",
                "code": "function sumNestedArray(arr: any[]): number {\n    let sum = 0;\n\n    for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }\n\n    return sum;\n}",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.7559116115312237,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7501346835645263,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7406114060219362,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.7288672988283411,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7249526760825332,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.709428080686487,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7046784518445957,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.664046985139496,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6619312105727757,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6526071637159528,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6423666824304443,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/App.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "item of arr",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const item of arr) {\n        if (Array.isArray(item)) {\n            // Recursion within recursion - we recursively process nested arrays\n            sum += sumNestedArray(item);\n        } else if (typeof item === 'number') {\n            sum += item;\n        }\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.9090412548532714,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8282278374991462,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7716469001391171,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.770627988253544,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7575491142758187,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7475705901556372,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.7232381611015153,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7227841988041942,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7202023300289478,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7120926229156106,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.710767973312398,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.7007747642257963,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "typeof item === 'number'",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (typeof item === 'number') {\n            sum += item;\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.8652531923357476,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.8630942857758426,
                    "reason": "Function appears to have similar functionality (86% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.8341453921175941,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.8142076207544133,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.797835553249666,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.7679271220524855,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7609838961103115,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7566147079445718,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.755414657298411,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7480114453562031,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.7364811190299572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7328634952990171,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7060796486637402,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "child of node.children",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const child of node.children) {\n        depthFirstTraversal(child, callback);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8846790514068484,
                    "reason": "Function appears to have similar functionality (88% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8091066762471273,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7600268688378505,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7497472011007151,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.7495099789124597,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7454011341058312,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7453495718614734,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7448635602656204,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7375287916659509,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7343671397695378,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7186684581736398,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.7110399967645118,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.6941093447605459,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.669858645489701,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "constructor",
                "params": [
                  {
                    "name": "root",
                    "type": "TreeNode<T>"
                  }
                ],
                "returnType": "void",
                "code": "constructor(root: TreeNode<T>) {\n        this.root = root;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.constructor",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.78014790239468,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.769611897020359,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7465145186021734,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7446187095243846,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7373287761685619,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7268033687603705,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.7114133548954874,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7071379830682962,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6967304471124952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6928029581827734,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.68740912935885,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.683391346145776,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.6599050221285014,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.6394318932459019,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6299892294288986,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "findNodeByValue",
                "params": [
                  {
                    "name": "value",
                    "type": "T"
                  }
                ],
                "returnType": "TreeNode<T> | null",
                "code": "findNodeByValue(value: T): TreeNode<T> | null {\n        return this.findNodeRecursive(this.root, value);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.constructor",
                    "score": 0.8163258464243646,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7307585047744672,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7285521951428092,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7169283023018702,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7032811240301604,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6923660782211026,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.6901004120048101,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6890342909172844,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6888484367721514,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.6807650277518137,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6807409981514074,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.67452077940662,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.664420190513949,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.6569786334730149,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.6473857614129871,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6418231757924514,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "findNodeRecursive",
                "params": [
                  {
                    "name": "node",
                    "type": "TreeNode<T>"
                  },
                  {
                    "name": "value",
                    "type": "T"
                  }
                ],
                "returnType": "TreeNode<T> | null",
                "code": "findNodeRecursive(node: TreeNode<T>, value: T): TreeNode<T> | null {\n        // Base case - found the node\n        if (node.value === value) return node;\n\n        // Recursive case - search in children\n        for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }\n\n        return null;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeByValue",
                    "score": 0.9141501085223763,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.constructor",
                    "score": 0.7649752680262721,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7588146654200606,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7533585611131527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6953214166397821,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.685657183883588,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6722776321075188,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.6657549254356895,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6640242248551934,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6639084990167211,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6511056990427607,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.6510262606973579,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6482964823488419,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.6471226781523196,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6378304185924444,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6374196224066616,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.6275203123501196,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "child of node.children",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const child of node.children) {\n            const result = this.findNodeRecursive(child, value);\n            if (result) return result;\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.9471819881355376,
                    "reason": "Function appears to have similar functionality (95% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.9100408143103078,
                    "reason": "Function appears to have similar functionality (91% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.848513262471062,
                    "reason": "Function appears to have similar functionality (85% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeRecursive",
                    "score": 0.8209730725276718,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7997892678420998,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.7929480882290492,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7856035008096867,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeByValue",
                    "score": 0.7819620806407677,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.constructor",
                    "score": 0.7816964773761886,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.7748487801497511,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.7515490312041064,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7496559691315793,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7335929343710416,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7304325639902208,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7300021281283297,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.726814542347334,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.708133596435041,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.6801493280378237,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "renderComment",
                "params": [
                  {
                    "name": "comment",
                    "type": "Comment"
                  }
                ],
                "returnType": "void",
                "code": "const renderComment = (comment: Comment) => (",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7413589968951217,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7316319573288714,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7121014956277059,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7112868913336283,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7100287016137715,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.constructor",
                    "score": 0.7042237615529898,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7033547556971663,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7023375195820198,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.697830486564181,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6897263715307208,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.6866782340893792,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6558668770781725,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.6514779601332815,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.6480292456349664,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6381886573450434,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.6048188904948657,
                    "reason": "Function appears to have similar functionality (60% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "obj === null || typeof obj !== 'object'",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8948650619849969,
                    "reason": "Function appears to have similar functionality (89% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.867198331883805,
                    "reason": "Function appears to have similar functionality (87% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.8627851103557966,
                    "reason": "Function appears to have similar functionality (86% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8048487229945663,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.8042748556694953,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.8037406625651053,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7908204776178391,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.778694420132138,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7726771148867405,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7653875793964119,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.760782417747895,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7587552727208159,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.constructor",
                    "score": 0.7322520064539532,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.7292832738333116,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.7267365439419878,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.7114222429749806,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeByValue",
                    "score": 0.7068516815544592,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7011525212630815,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.renderComment",
                    "score": 0.6993127464025944,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeRecursive",
                    "score": 0.6872915633168688,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "for",
                "params": [
                  {
                    "name": "key in obj",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            clonedObj[key] = deepClone((obj as Record<string, any>)[key]);\n        }\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8408218144009805,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8388699132434643,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.8280671605680024,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.8171222741239181,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8102249554108337,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7906633978354608,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.7562239928131216,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.constructor",
                    "score": 0.7523543728886246,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.752305349567527,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7495847049337491,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7460051042047396,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7380304645072575,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7363959808453021,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7268313461901309,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7267164543460003,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.7169502833582493,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeByValue",
                    "score": 0.695677388717658,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.renderComment",
                    "score": 0.6870666749572583,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.6755761168671692,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeRecursive",
                    "score": 0.6698529059354026,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.6459816249714102,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "traverseDOM",
                "params": [
                  {
                    "name": "element",
                    "type": "Element"
                  },
                  {
                    "name": "callback",
                    "type": "(el"
                  }
                ],
                "returnType": "void",
                "code": "function traverseDOM(element: Element, callback: (el: Element) => void): void {",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7715535858963926,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7692445367527934,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7646429752642436,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7552461618054934,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.constructor",
                    "score": 0.7463874611710514,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7328845037882842,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7241267023448508,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.723026956187554,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7172536324354425,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7019004492865474,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.7011175408583116,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.renderComment",
                    "score": 0.6989503674486257,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.6929359981715054,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6879583311277475,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6850145020503027,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeByValue",
                    "score": 0.6786262547908662,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.6621809486256424,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6571588460843557,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeRecursive",
                    "score": 0.6566146337025287,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.645175375866663,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.6386480614038008,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6268184336719129,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "forEach",
                "params": [
                  {
                    "name": "child => {\n        if (child.nodeType === Node.ELEMENT_NODE",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "forEach(child => {\n        if (child.nodeType === Node.ELEMENT_NODE) {\n            traverseDOM(child as Element, callback);\n        }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.traverseDOM",
                    "score": 0.8387468601070227,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.834499521302748,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.8298412045169077,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.8034453285541231,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.7945267589571301,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7860948720786198,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.773902386191897,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7721363736246976,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.constructor",
                    "score": 0.7714170652540433,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7662156308088471,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7606696682520175,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7573371840524605,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7501058424136771,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7488452568715364,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7447364780789031,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeByValue",
                    "score": 0.7197594264100848,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.7179464945576711,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeRecursive",
                    "score": 0.7176479061606179,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.7126589361776408,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7075487035531843,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.697721352125572,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.6921488587736232,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.renderComment",
                    "score": 0.6780408571658109,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "recursivePromiseChain",
                "params": [
                  {
                    "name": "actions",
                    "type": "(("
                  }
                ],
                "returnType": "void",
                "code": "function recursivePromiseChain(actions: (() => Promise<any>)[], index = 0): Promise<void> {",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 1,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7715292283657581,
                    "reason": "Function appears to have similar functionality (77% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.7526048791842751,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7466984850577812,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.forEach",
                    "score": 0.7442465300757086,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7251719250155905,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.traverseDOM",
                    "score": 0.722639932575238,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7209072221833402,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.constructor",
                    "score": 0.7148557075748233,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.7078565826212249,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.707173937517127,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.70504149546821,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.7046417072937028,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6934624870704861,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6915317009635987,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6876205497449485,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6873262965091594,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6850329969103433,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6837095471345,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6811045713185263,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6796636167969574,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeRecursive",
                    "score": 0.6729263419293852,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.renderComment",
                    "score": 0.670901095620101,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeByValue",
                    "score": 0.6684112900001902,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6405459161098245,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              },
              {
                "name": "if",
                "params": [
                  {
                    "name": "index >= actions.length",
                    "type": "any"
                  }
                ],
                "returnType": "void",
                "code": "if (index >= actions.length) {\n        return Promise.resolve();\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.if",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8384421610824954,
                    "reason": "Function appears to have similar functionality (84% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.recursivePromiseChain",
                    "score": 0.8340747219611144,
                    "reason": "Function appears to have similar functionality (83% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.8205204243558674,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.8169967094742822,
                    "reason": "Function appears to have similar functionality (82% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.7965160054432926,
                    "reason": "Function appears to have similar functionality (80% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.forEach",
                    "score": 0.793943821825866,
                    "reason": "Function appears to have similar functionality (79% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7750309858925472,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.7644192829838371,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7623652553437105,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7600300663561905,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.7339863002361963,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.7324852589360452,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.7324838011991478,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.7318834335922064,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.730855212065265,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.traverseDOM",
                    "score": 0.7256409235997483,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.7236481285633931,
                    "reason": "Function appears to have similar functionality (72% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.7122572932778818,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.7121582265305647,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.7018998796365058,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.constructor",
                    "score": 0.6973932086722081,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6936394957378221,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.renderComment",
                    "score": 0.6730442303534031,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeByValue",
                    "score": 0.6670008577880572,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeRecursive",
                    "score": 0.630476358982822,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  }
                ]
              },
              {
                "name": "runRecursiveExample",
                "params": [],
                "returnType": "void",
                "code": "const runRecursiveExample = () => {\n        // Calculate factorial of 5\n        const fact5 = factorial(5);\n\n        // Calculate 10th Fibonacci number\n        const fib10 = fibonacci(10);\n\n        // Sum the nested array\n        const sum = sumNestedArray(nestedArray);\n\n        // Process the tree\n        const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n        const values: string[] = [];\n        depthFirstTraversal(sampleTree, (val) => values.push(val));\n\n        setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}\n      Sum of nested array: ${sum}\n      Tree values: ${values.join(', ')}\n    `);\n    }",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.9999999999999999,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.setResult",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.7602208675727095,
                    "reason": "Function appears to have similar functionality (76% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.748973440084301,
                    "reason": "Function appears to have similar functionality (75% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.recursivePromiseChain",
                    "score": 0.7409298582624572,
                    "reason": "Function appears to have similar functionality (74% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.7330342530923258,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.7326628753137919,
                    "reason": "Function appears to have similar functionality (73% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeRecursive",
                    "score": 0.7115740513403175,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.constructor",
                    "score": 0.7057920567658791,
                    "reason": "Function appears to have similar functionality (71% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.703523351478677,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.7018079039039952,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.forEach",
                    "score": 0.6950334102674803,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeByValue",
                    "score": 0.6873849666288241,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.6835080584292695,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.682708395490253,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.traverseDOM",
                    "score": 0.6802956220224078,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.6761654981030178,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6722934600565552,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6706875787510936,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.renderComment",
                    "score": 0.6705925252251091,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6696125053538209,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.6691014611874258,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.6679372478314625,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.660924396269221,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6608968797157725,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.624843934134741,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.623898241630341,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6097587173402967,
                    "reason": "Function appears to have similar functionality (61% similar)",
                    "filePath": "examples/Todo.tsx"
                  }
                ]
              },
              {
                "name": "setResult",
                "params": [
                  {
                    "name": "`\n      Factorial of 5",
                    "type": "${fact5}\n      Fibonacci(10"
                  }
                ],
                "returnType": "$",
                "code": "setResult(`\n      Factorial of 5: ${fact5}\n      Fibonacci(10): ${fib10}",
                "similarityWarnings": [
                  {
                    "similarTo": "factorial.setResult",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.setResult",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.setResult",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.setResult",
                    "score": 1.0000000000000002,
                    "reason": "Function appears to have similar functionality (100% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.factorial",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.factorial",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.factorial",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.factorial",
                    "score": 0.8084742092492329,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.fibonacci",
                    "score": 0.8067977364596283,
                    "reason": "Function appears to have similar functionality (81% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.runRecursiveExample",
                    "score": 0.7785506463934652,
                    "reason": "Function appears to have similar functionality (78% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.7046243266486276,
                    "reason": "Function appears to have similar functionality (70% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.recursivePromiseChain",
                    "score": 0.6924732339535477,
                    "reason": "Function appears to have similar functionality (69% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.sumNestedArray",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.sumNestedArray",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.sumNestedArray",
                    "score": 0.6835578389097815,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.6781488628626234,
                    "reason": "Function appears to have similar functionality (68% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.6710804481127896,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.if",
                    "score": 0.6687741213180793,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.forEach",
                    "score": 0.6653157110997059,
                    "reason": "Function appears to have similar functionality (67% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.for",
                    "score": 0.6640123263764874,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "Todo.handleDeleteTodo",
                    "score": 0.6632817612784112,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.if",
                    "score": 0.6574758521048489,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.6554772415464032,
                    "reason": "Function appears to have similar functionality (66% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleToggleTodo",
                    "score": 0.6542221357308939,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.findNodeByValue",
                    "score": 0.6475124780266062,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.renderComment",
                    "score": 0.645247279447435,
                    "reason": "Function appears to have similar functionality (65% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.6431143984632735,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "factorial.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.constructor",
                    "score": 0.6422817722985525,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.handleAddTodo",
                    "score": 0.6407558660531494,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "factorial.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.traverseDOM",
                    "score": 0.6359312399284454,
                    "reason": "Function appears to have similar functionality (64% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "App.handleTodoAdded",
                    "score": 0.6340209980623526,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/App.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                    "score": 0.6311620661041384,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  },
                  {
                    "similarTo": "factorial.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "sumNestedArray.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "deepClone.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "RecursiveTreeProcessor.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "CommentThread.for",
                    "score": 0.6307144116098361,
                    "reason": "Function appears to have similar functionality (63% similar)",
                    "filePath": "examples/RecursiveExamples.tsx"
                  },
                  {
                    "similarTo": "Todo.if",
                    "score": 0.6196363128721795,
                    "reason": "Function appears to have similar functionality (62% similar)",
                    "filePath": "examples/Todo.tsx"
                  },
                  {
                    "similarTo": "calculatePatientCost.findPatient",
                    "score": 0.6089953081375107,
                    "reason": "Function appears to have similar functionality (61% similar)",
                    "filePath": "examples/DocumentAll.tsx"
                  }
                ]
              }
            ]
          }
        ],
        "methods": [
          {
            "name": "handleTodoAdded",
            "params": [
              {
                "name": "todo",
                "type": "TodoItem"
              }
            ],
            "returnType": "void",
            "code": "const handleTodoAdded = (todo: TodoItem) => {\n        console.log('New todo added:', todo);\n    }",
            "similarityWarnings": [
              {
                "similarTo": "calculatePatientCost.for",
                "score": 0.7207489780336567,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "calculatePatientCost.if",
                "score": 0.7167826412097928,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                "score": 0.6900460616131265,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "calculatePatientCost.fibonacci",
                "score": 0.6423463019919371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "calculatePatientCost.findPatient",
                "score": 0.6335338164081353,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/DocumentAll.tsx"
              }
            ]
          }
        ]
      },
      {
        "name": "UseRecursiveExamples",
        "description": "This file demonstrates how to use the recursive examples in a test environment",
        "props": [],
        "filePath": "examples/UseRecursiveExamples.tsx",
        "sourceCode": "import React from 'react';\nimport RecursiveExamples, {\n    factorial,\n    fibonacci,\n    sumNestedArray,\n    TreeNode,\n    Comment,\n    CommentThread,\n    deepClone,\n    RecursiveTreeProcessor,\n    depthFirstTraversal\n} from './RecursiveExamples';\n\n/**\n * This file demonstrates how to use the recursive examples in a test environment\n */\nconst UseRecursiveExamples: React.FC = () => {\n    // Section 1: Test recursive functions\n    console.log('Testing recursive functions:');\n    console.log(`Factorial of 5: ${factorial(5)}`);\n    console.log(`Fibonacci of 10: ${fibonacci(10)}`);\n\n    const nestedArray = [1, 2, [3, 4, [5, 6]], 7, [8, [9, 10]]];\n    console.log(`Sum of nested array: ${sumNestedArray(nestedArray)}`);\n\n    // Section 2: Test recursive tree operations\n    console.log('\\nTesting recursive tree operations:');\n\n    // Create a sample tree\n    const sampleTree: TreeNode<string> = {\n        value: 'root',\n        children: [\n            {\n                value: 'child1',\n                children: [\n                    { value: 'grandchild1', children: [] },\n                    { value: 'grandchild2', children: [] }\n                ]\n            },\n            {\n                value: 'child2',\n                children: [\n                    { value: 'grandchild3', children: [] }\n                ]\n            }\n        ]\n    };\n\n    // Use the recursive tree processor\n    const treeProcessor = new RecursiveTreeProcessor(sampleTree);\n\n    // Find a node by value\n    const foundNode = treeProcessor.findNodeByValue('grandchild2');\n    console.log('Found node:', foundNode ? foundNode.value : 'Not found');\n\n    // Map the tree - convert all string values to uppercase\n    const uppercaseTree = treeProcessor.mapTree(value => value.toUpperCase());\n    console.log('Tree with uppercase values:');\n    depthFirstTraversal(uppercaseTree, value => console.log(value));\n\n    // Section 3: Test deep clone recursive function\n    console.log('\\nTesting deep clone:');\n    const originalObj = {\n        name: 'original',\n        nested: {\n            count: 42,\n            items: [1, 2, 3]\n        }\n    };\n\n    const clonedObj = deepClone(originalObj);\n\n    // Modify the clone to show they're separate\n    clonedObj.name = 'clone';\n    clonedObj.nested.count = 100;\n    clonedObj.nested.items.push(4);\n\n    console.log('Original after clone modification:', originalObj);\n    console.log('Cloned and modified object:', clonedObj);\n\n    // Section 4: Test recursive promise chain\n    const testPromiseChain = async () => {\n        console.log('\\nTesting recursive promise chain:');\n\n        const actions = [\n            () => new Promise<void>(resolve => {\n                console.log('Step 1');\n                resolve();\n            }),\n            () => new Promise<void>(resolve => {\n                console.log('Step 2');\n                resolve();\n            }),\n            () => new Promise<void>(resolve => {\n                console.log('Step 3');\n                resolve();\n            })\n        ];\n\n        await import('./RecursiveExamples').then(module => {\n            return module.recursivePromiseChain(actions);\n        });\n\n        console.log('All steps completed');\n    };\n\n    // Call the async function\n    testPromiseChain().catch(err => console.error('Error in promise chain:', err));\n\n    // Section 5: Create a sample comment thread for the UI component\n    const sampleComments: Comment[] = [\n        {\n            id: '1',\n            text: 'This is a top-level comment',\n            author: 'User1',\n            replies: [\n                {\n                    id: '2',\n                    text: 'This is a reply to the top comment',\n                    author: 'User2',\n                    replies: [\n                        {\n                            id: '3',\n                            text: 'This is a nested reply',\n                            author: 'User3',\n                            replies: [\n                                {\n                                    id: '4',\n                                    text: 'This is a deeply nested reply',\n                                    author: 'User4',\n                                    replies: []\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    id: '5',\n                    text: 'This is another direct reply to the top comment',\n                    author: 'User5',\n                    replies: []\n                }\n            ]\n        },\n        {\n            id: '6',\n            text: 'This is a second top-level comment',\n            author: 'User6',\n            replies: []\n        }\n    ];\n\n    return (\n        <div className=\"recursive-examples-usage\">\n            <h1>Recursive Examples Usage</h1>\n\n            <section>\n                <h2>Full Recursive Examples Component</h2>\n                <RecursiveExamples />\n            </section>\n\n      ...\n// (code truncated for brevity)",
        "childComponents": [],
        "methods": [
          {
            "name": "testPromiseChain",
            "params": [],
            "returnType": "void",
            "code": "async function\n    testPromiseChain().catch(err => console.error('Error in promise chain:', err));",
            "similarityWarnings": [
              {
                "similarTo": "factorial.recursivePromiseChain",
                "score": 0.8295845457311828,
                "reason": "Function appears to have similar functionality (83% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.recursivePromiseChain",
                "score": 0.8295845457311828,
                "reason": "Function appears to have similar functionality (83% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.recursivePromiseChain",
                "score": 0.8295845457311828,
                "reason": "Function appears to have similar functionality (83% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                "score": 0.8295845457311828,
                "reason": "Function appears to have similar functionality (83% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.recursivePromiseChain",
                "score": 0.8295845457311828,
                "reason": "Function appears to have similar functionality (83% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.recursivePromiseChain",
                "score": 0.8295845457311828,
                "reason": "Function appears to have similar functionality (83% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.if",
                "score": 0.7483951998946744,
                "reason": "Function appears to have similar functionality (75% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.if",
                "score": 0.7483951998946744,
                "reason": "Function appears to have similar functionality (75% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.if",
                "score": 0.7483951998946744,
                "reason": "Function appears to have similar functionality (75% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.if",
                "score": 0.7483951998946744,
                "reason": "Function appears to have similar functionality (75% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.if",
                "score": 0.7483951998946744,
                "reason": "Function appears to have similar functionality (75% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.if",
                "score": 0.7483951998946744,
                "reason": "Function appears to have similar functionality (75% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.for",
                "score": 0.7382658737220035,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.for",
                "score": 0.7382658737220035,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.for",
                "score": 0.7382658737220035,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.for",
                "score": 0.7382658737220035,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.for",
                "score": 0.7382658737220035,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.for",
                "score": 0.7382658737220035,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.for",
                "score": 0.7264630563683581,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.for",
                "score": 0.7264630563683581,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.for",
                "score": 0.7264630563683581,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.for",
                "score": 0.7264630563683581,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.for",
                "score": 0.7264630563683581,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.for",
                "score": 0.7264630563683581,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.for",
                "score": 0.7229371529968075,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.for",
                "score": 0.7229371529968075,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.for",
                "score": 0.7229371529968075,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.for",
                "score": 0.7229371529968075,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.for",
                "score": 0.7229371529968075,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.for",
                "score": 0.7229371529968075,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.constructor",
                "score": 0.7223731499748528,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.constructor",
                "score": 0.7223731499748528,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.constructor",
                "score": 0.7223731499748528,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.constructor",
                "score": 0.7223731499748528,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.constructor",
                "score": 0.7223731499748528,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.constructor",
                "score": 0.7223731499748528,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.forEach",
                "score": 0.7127235516180082,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.forEach",
                "score": 0.7127235516180082,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.forEach",
                "score": 0.7127235516180082,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.forEach",
                "score": 0.7127235516180082,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.forEach",
                "score": 0.7127235516180082,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.forEach",
                "score": 0.7127235516180082,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.traverseDOM",
                "score": 0.7116943645790939,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.traverseDOM",
                "score": 0.7116943645790939,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.traverseDOM",
                "score": 0.7116943645790939,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.traverseDOM",
                "score": 0.7116943645790939,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.traverseDOM",
                "score": 0.7116943645790939,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.traverseDOM",
                "score": 0.7116943645790939,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "App.handleTodoAdded",
                "score": 0.7110963501494084,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/App.tsx"
              },
              {
                "similarTo": "factorial.if",
                "score": 0.7090200643414228,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.if",
                "score": 0.7090200643414228,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.if",
                "score": 0.7090200643414228,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.if",
                "score": 0.7090200643414228,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.if",
                "score": 0.7090200643414228,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.if",
                "score": 0.7090200643414228,
                "reason": "Function appears to have similar functionality (71% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "Todo.handleDeleteTodo",
                "score": 0.7046232463841179,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/Todo.tsx"
              },
              {
                "similarTo": "factorial.for",
                "score": 0.7028477797431063,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.for",
                "score": 0.7028477797431063,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.for",
                "score": 0.7028477797431063,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.for",
                "score": 0.7028477797431063,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.for",
                "score": 0.7028477797431063,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.for",
                "score": 0.7028477797431063,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "calculatePatientCost.for",
                "score": 0.7023339895037172,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.if",
                "score": 0.6985588555081123,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.if",
                "score": 0.6985588555081123,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.if",
                "score": 0.6985588555081123,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.if",
                "score": 0.6985588555081123,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.if",
                "score": 0.6985588555081123,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.if",
                "score": 0.6985588555081123,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "Todo.handleToggleTodo",
                "score": 0.698552691251521,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/Todo.tsx"
              },
              {
                "similarTo": "Todo.if",
                "score": 0.6823831753554742,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/Todo.tsx"
              },
              {
                "similarTo": "calculatePatientCost.if",
                "score": 0.6794482328472733,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.runRecursiveExample",
                "score": 0.678507814335306,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.runRecursiveExample",
                "score": 0.678507814335306,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.runRecursiveExample",
                "score": 0.678507814335306,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                "score": 0.678507814335306,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.runRecursiveExample",
                "score": 0.678507814335306,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.runRecursiveExample",
                "score": 0.678507814335306,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "Todo.handleAddTodo",
                "score": 0.6733058166110838,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/Todo.tsx"
              },
              {
                "similarTo": "factorial.findNodeByValue",
                "score": 0.6731606863194907,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.findNodeByValue",
                "score": 0.6731606863194907,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.findNodeByValue",
                "score": 0.6731606863194907,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                "score": 0.6731606863194907,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.findNodeByValue",
                "score": 0.6731606863194907,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.findNodeByValue",
                "score": 0.6731606863194907,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.renderComment",
                "score": 0.6628342114626985,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.renderComment",
                "score": 0.6628342114626985,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.renderComment",
                "score": 0.6628342114626985,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.renderComment",
                "score": 0.6628342114626985,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.renderComment",
                "score": 0.6628342114626985,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.renderComment",
                "score": 0.6628342114626985,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                "score": 0.6577029133380781,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.setResult",
                "score": 0.6573858591464055,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.setResult",
                "score": 0.6573858591464055,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.setResult",
                "score": 0.6573858591464055,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.setResult",
                "score": 0.6573858591464055,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.setResult",
                "score": 0.6573858591464055,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.setResult",
                "score": 0.6573858591464055,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "calculatePatientCost.fibonacci",
                "score": 0.6550903089337757,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.fibonacci",
                "score": 0.6550903089337757,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.fibonacci",
                "score": 0.6550903089337757,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.fibonacci",
                "score": 0.6550903089337757,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.fibonacci",
                "score": 0.6550903089337757,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.fibonacci",
                "score": 0.6550903089337757,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.fibonacci",
                "score": 0.6550903089337757,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.factorial",
                "score": 0.6529685645949378,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.factorial",
                "score": 0.6529685645949378,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.factorial",
                "score": 0.6529685645949378,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.factorial",
                "score": 0.6529685645949378,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.factorial",
                "score": 0.6529685645949378,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.sumNestedArray",
                "score": 0.6499451472639187,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.sumNestedArray",
                "score": 0.6499451472639187,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                "score": 0.6499451472639187,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.sumNestedArray",
                "score": 0.6499451472639187,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.sumNestedArray",
                "score": 0.6499451472639187,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "calculatePatientCost.findPatient",
                "score": 0.6499016714304724,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.findNodeRecursive",
                "score": 0.6490807225479168,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.findNodeRecursive",
                "score": 0.6490807225479168,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.findNodeRecursive",
                "score": 0.6490807225479168,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                "score": 0.6490807225479168,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.findNodeRecursive",
                "score": 0.6490807225479168,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.findNodeRecursive",
                "score": 0.6490807225479168,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              }
            ]
          }
        ]
      },
      {
        "name": "FibonacciExample",
        "description": "Default export from Fibonacci.tsx",
        "props": [],
        "filePath": "examples/Fibonacci.tsx",
        "sourceCode": "import React from 'react';\n\n/**\n * Fibonacci number calculator using recursion with memoization\n *\n * @param n The position in fibonacci sequence to calculate\n * @param memo Optional memoization object to improve performance\n * @returns The fibonacci number at position n\n */\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    // Base cases\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    // Recursive case with memoization\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n/**\n * Component that demonstrates the fibonacci sequence calculation\n */\nconst FibonacciExample: React.FC = () => {\n    // Calculate first 10 fibonacci numbers\n    const fibNumbers = Array.from({ length: 10 }, (_, i) => fibonacci(i));\n\n    return (\n        <div className=\"fibonacci-example\">\n            <h2>Fibonacci Sequence</h2>\n            <p>The fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones.</p>\n\n            <h3>First 10 Fibonacci Numbers:</h3>\n            <ul>\n                {fibNumbers.map((num, index) => (\n                    <li key={index}>\n                        F({index}) = {num}\n                    </li>\n                ))}\n            </ul>\n\n            <h3>Implementation:</h3>\n            <pre>\n                {`\n/**\n * Fibonacci number calculator using recursion with memoization\n */\nfunction fibonacci(n: number, memo: Record<number, number> = {}): number {\n    // Base cases\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    // Recursive case with memoization\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                `}\n            </pre>\n        </div>\n    );\n};\n\nexport default FibonacciExample;\n",
        "childComponents": []
      },
      {
        "name": "fibonacci",
        "description": "Fibonacci number calculator using recursion with memoization",
        "props": [],
        "filePath": "examples/Fibonacci.tsx",
        "sourceCode": "import React from 'react';\n\n/**\n * Fibonacci number calculator using recursion with memoization\n *\n * @param n The position in fibonacci sequence to calculate\n * @param memo Optional memoization object to improve performance\n * @returns The fibonacci number at position n\n */\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    // Base cases\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    // Recursive case with memoization\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n/**\n * Component that demonstrates the fibonacci sequence calculation\n */\nconst FibonacciExample: React.FC = () => {\n    // Calculate first 10 fibonacci numbers\n    const fibNumbers = Array.from({ length: 10 }, (_, i) => fibonacci(i));\n\n    return (\n        <div className=\"fibonacci-example\">\n            <h2>Fibonacci Sequence</h2>\n            <p>The fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones.</p>\n\n            <h3>First 10 Fibonacci Numbers:</h3>\n            <ul>\n                {fibNumbers.map((num, index) => (\n                    <li key={index}>\n                        F({index}) = {num}\n                    </li>\n                ))}\n            </ul>\n\n            <h3>Implementation:</h3>\n            <pre>\n                {`\n/**\n * Fibonacci number calculator using recursion with memoization\n */\nfunction fibonacci(n: number, memo: Record<number, number> = {}): number {\n    // Base cases\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    // Recursive case with memoization\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                `}\n            </pre>\n        </div>\n    );\n};\n\nexport default FibonacciExample;\n",
        "childComponents": []
      },
      {
        "name": "Fibonacci",
        "description": "Component that demonstrates the fibonacci sequence calculation",
        "props": [],
        "filePath": "examples/Fibonacci.tsx",
        "sourceCode": "import React from 'react';\n\n/**\n * Fibonacci number calculator using recursion with memoization\n *\n * @param n The position in fibonacci sequence to calculate\n * @param memo Optional memoization object to improve performance\n * @returns The fibonacci number at position n\n */\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    // Base cases\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    // Recursive case with memoization\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n\n/**\n * Component that demonstrates the fibonacci sequence calculation\n */\nconst FibonacciExample: React.FC = () => {\n    // Calculate first 10 fibonacci numbers\n    const fibNumbers = Array.from({ length: 10 }, (_, i) => fibonacci(i));\n\n    return (\n        <div className=\"fibonacci-example\">\n            <h2>Fibonacci Sequence</h2>\n            <p>The fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones.</p>\n\n            <h3>First 10 Fibonacci Numbers:</h3>\n            <ul>\n                {fibNumbers.map((num, index) => (\n                    <li key={index}>\n                        F({index}) = {num}\n                    </li>\n                ))}\n            </ul>\n\n            <h3>Implementation:</h3>\n            <pre>\n                {`\n/**\n * Fibonacci number calculator using recursion with memoization\n */\nfunction fibonacci(n: number, memo: Record<number, number> = {}): number {\n    // Base cases\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    // Recursive case with memoization\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                `}\n            </pre>\n        </div>\n    );\n};\n\nexport default FibonacciExample;\n",
        "childComponents": [],
        "methods": [
          {
            "name": "fibonacci",
            "params": [
              {
                "name": "n",
                "type": "number"
              },
              {
                "name": "memo",
                "type": "Record<number"
              },
              {
                "name": "number> = {}",
                "type": "any"
              }
            ],
            "returnType": "number",
            "code": "function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    // Base cases\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    // Recursive case with memoization\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}",
            "similarityWarnings": [
              {
                "similarTo": "calculatePatientCost.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.factorial",
                "score": 0.8166484101658408,
                "reason": "Function appears to have similar functionality (82% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.factorial",
                "score": 0.8166484101658408,
                "reason": "Function appears to have similar functionality (82% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.factorial",
                "score": 0.8166484101658408,
                "reason": "Function appears to have similar functionality (82% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.factorial",
                "score": 0.8166484101658408,
                "reason": "Function appears to have similar functionality (82% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.factorial",
                "score": 0.8166484101658408,
                "reason": "Function appears to have similar functionality (82% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.setResult",
                "score": 0.8023688525463882,
                "reason": "Function appears to have similar functionality (80% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.setResult",
                "score": 0.8023688525463882,
                "reason": "Function appears to have similar functionality (80% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.setResult",
                "score": 0.8023688525463882,
                "reason": "Function appears to have similar functionality (80% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.setResult",
                "score": 0.8023688525463882,
                "reason": "Function appears to have similar functionality (80% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.setResult",
                "score": 0.8023688525463882,
                "reason": "Function appears to have similar functionality (80% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.setResult",
                "score": 0.8023688525463882,
                "reason": "Function appears to have similar functionality (80% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.runRecursiveExample",
                "score": 0.7433410019307413,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.runRecursiveExample",
                "score": 0.7433410019307413,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.runRecursiveExample",
                "score": 0.7433410019307413,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                "score": 0.7433410019307413,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.runRecursiveExample",
                "score": 0.7433410019307413,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.runRecursiveExample",
                "score": 0.7433410019307413,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.sumNestedArray",
                "score": 0.7315557917007588,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.sumNestedArray",
                "score": 0.7315557917007588,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                "score": 0.7315557917007588,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.sumNestedArray",
                "score": 0.7315557917007588,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.sumNestedArray",
                "score": 0.7315557917007588,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.if",
                "score": 0.7206634698827985,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.if",
                "score": 0.7206634698827985,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.if",
                "score": 0.7206634698827985,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.if",
                "score": 0.7206634698827985,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.if",
                "score": 0.7206634698827985,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.if",
                "score": 0.7206634698827985,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.recursivePromiseChain",
                "score": 0.7192501486727917,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.recursivePromiseChain",
                "score": 0.7192501486727917,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.recursivePromiseChain",
                "score": 0.7192501486727917,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                "score": 0.7192501486727917,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.recursivePromiseChain",
                "score": 0.7192501486727917,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.recursivePromiseChain",
                "score": 0.7192501486727917,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.for",
                "score": 0.7016536057550088,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.for",
                "score": 0.7016536057550088,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.for",
                "score": 0.7016536057550088,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.for",
                "score": 0.7016536057550088,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.for",
                "score": 0.7016536057550088,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.for",
                "score": 0.7016536057550088,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.if",
                "score": 0.6967717970170818,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.if",
                "score": 0.6967717970170818,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.if",
                "score": 0.6967717970170818,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.if",
                "score": 0.6967717970170818,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.if",
                "score": 0.6967717970170818,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.if",
                "score": 0.6967717970170818,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.if",
                "score": 0.6941669419496242,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.if",
                "score": 0.6941669419496242,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.if",
                "score": 0.6941669419496242,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.if",
                "score": 0.6941669419496242,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.if",
                "score": 0.6941669419496242,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.if",
                "score": 0.6941669419496242,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "calculatePatientCost.if",
                "score": 0.6936288651601552,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "calculatePatientCost.for",
                "score": 0.683143324216927,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.forEach",
                "score": 0.6829939759199876,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.forEach",
                "score": 0.6829939759199876,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.forEach",
                "score": 0.6829939759199876,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.forEach",
                "score": 0.6829939759199876,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.forEach",
                "score": 0.6829939759199876,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.forEach",
                "score": 0.6829939759199876,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "calculatePatientCost.findPatient",
                "score": 0.6791060986429915,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.for",
                "score": 0.6711280511976194,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.for",
                "score": 0.6711280511976194,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.for",
                "score": 0.6711280511976194,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.for",
                "score": 0.6711280511976194,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.for",
                "score": 0.6711280511976194,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.for",
                "score": 0.6711280511976194,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.for",
                "score": 0.6634107377047741,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.for",
                "score": 0.6634107377047741,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.for",
                "score": 0.6634107377047741,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.for",
                "score": 0.6634107377047741,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.for",
                "score": 0.6634107377047741,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.for",
                "score": 0.6634107377047741,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.for",
                "score": 0.6611368441104044,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.for",
                "score": 0.6611368441104044,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.for",
                "score": 0.6611368441104044,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.for",
                "score": 0.6611368441104044,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.for",
                "score": 0.6611368441104044,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.for",
                "score": 0.6611368441104044,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                "score": 0.6566191106146329,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.findNodeByValue",
                "score": 0.6535112281309023,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.findNodeByValue",
                "score": 0.6535112281309023,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.findNodeByValue",
                "score": 0.6535112281309023,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                "score": 0.6535112281309023,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.findNodeByValue",
                "score": 0.6535112281309023,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.findNodeByValue",
                "score": 0.6535112281309023,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "UseRecursiveExamples.testPromiseChain",
                "score": 0.6493636393285941,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/UseRecursiveExamples.tsx"
              },
              {
                "similarTo": "Todo.if",
                "score": 0.643560370135653,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/Todo.tsx"
              },
              {
                "similarTo": "factorial.findNodeRecursive",
                "score": 0.6432965950893371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.findNodeRecursive",
                "score": 0.6432965950893371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.findNodeRecursive",
                "score": 0.6432965950893371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                "score": 0.6432965950893371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.findNodeRecursive",
                "score": 0.6432965950893371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.findNodeRecursive",
                "score": 0.6432965950893371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "Todo.handleAddTodo",
                "score": 0.6381403238576734,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/Todo.tsx"
              },
              {
                "similarTo": "App.handleTodoAdded",
                "score": 0.6348379037467314,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/App.tsx"
              },
              {
                "similarTo": "Todo.handleDeleteTodo",
                "score": 0.6348071071857134,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/Todo.tsx"
              },
              {
                "similarTo": "factorial.constructor",
                "score": 0.6342700139464703,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.constructor",
                "score": 0.6342700139464703,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.constructor",
                "score": 0.6342700139464703,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.constructor",
                "score": 0.6342700139464703,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.constructor",
                "score": 0.6342700139464703,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.constructor",
                "score": 0.6342700139464703,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "Todo.handleToggleTodo",
                "score": 0.6299867660419586,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/Todo.tsx"
              },
              {
                "similarTo": "factorial.traverseDOM",
                "score": 0.6297779262003784,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.traverseDOM",
                "score": 0.6297779262003784,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.traverseDOM",
                "score": 0.6297779262003784,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.traverseDOM",
                "score": 0.6297779262003784,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.traverseDOM",
                "score": 0.6297779262003784,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.traverseDOM",
                "score": 0.6297779262003784,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              }
            ]
          },
          {
            "name": "fibonacci",
            "params": [
              {
                "name": "n",
                "type": "number"
              },
              {
                "name": "memo",
                "type": "Record<number"
              },
              {
                "name": "number> = {}",
                "type": "any"
              }
            ],
            "returnType": "number",
            "code": "function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    // Base cases\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    // Recursive case with memoization\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}",
            "similarityWarnings": [
              {
                "similarTo": "calculatePatientCost.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.fibonacci",
                "score": 0.9936767154008945,
                "reason": "Function appears to have similar functionality (99% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.factorial",
                "score": 0.8166484101658408,
                "reason": "Function appears to have similar functionality (82% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.factorial",
                "score": 0.8166484101658408,
                "reason": "Function appears to have similar functionality (82% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.factorial",
                "score": 0.8166484101658408,
                "reason": "Function appears to have similar functionality (82% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.factorial",
                "score": 0.8166484101658408,
                "reason": "Function appears to have similar functionality (82% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.factorial",
                "score": 0.8166484101658408,
                "reason": "Function appears to have similar functionality (82% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.setResult",
                "score": 0.8023688525463882,
                "reason": "Function appears to have similar functionality (80% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.setResult",
                "score": 0.8023688525463882,
                "reason": "Function appears to have similar functionality (80% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.setResult",
                "score": 0.8023688525463882,
                "reason": "Function appears to have similar functionality (80% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.setResult",
                "score": 0.8023688525463882,
                "reason": "Function appears to have similar functionality (80% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.setResult",
                "score": 0.8023688525463882,
                "reason": "Function appears to have similar functionality (80% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.setResult",
                "score": 0.8023688525463882,
                "reason": "Function appears to have similar functionality (80% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.runRecursiveExample",
                "score": 0.7433410019307413,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.runRecursiveExample",
                "score": 0.7433410019307413,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.runRecursiveExample",
                "score": 0.7433410019307413,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
                "score": 0.7433410019307413,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.runRecursiveExample",
                "score": 0.7433410019307413,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.runRecursiveExample",
                "score": 0.7433410019307413,
                "reason": "Function appears to have similar functionality (74% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.sumNestedArray",
                "score": 0.7315557917007588,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.sumNestedArray",
                "score": 0.7315557917007588,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.sumNestedArray",
                "score": 0.7315557917007588,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.sumNestedArray",
                "score": 0.7315557917007588,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.sumNestedArray",
                "score": 0.7315557917007588,
                "reason": "Function appears to have similar functionality (73% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.if",
                "score": 0.7206634698827985,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.if",
                "score": 0.7206634698827985,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.if",
                "score": 0.7206634698827985,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.if",
                "score": 0.7206634698827985,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.if",
                "score": 0.7206634698827985,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.if",
                "score": 0.7206634698827985,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.recursivePromiseChain",
                "score": 0.7192501486727917,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.recursivePromiseChain",
                "score": 0.7192501486727917,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.recursivePromiseChain",
                "score": 0.7192501486727917,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
                "score": 0.7192501486727917,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.recursivePromiseChain",
                "score": 0.7192501486727917,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.recursivePromiseChain",
                "score": 0.7192501486727917,
                "reason": "Function appears to have similar functionality (72% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.for",
                "score": 0.7016536057550088,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.for",
                "score": 0.7016536057550088,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.for",
                "score": 0.7016536057550088,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.for",
                "score": 0.7016536057550088,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.for",
                "score": 0.7016536057550088,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.for",
                "score": 0.7016536057550088,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.if",
                "score": 0.6967717970170818,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.if",
                "score": 0.6967717970170818,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.if",
                "score": 0.6967717970170818,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.if",
                "score": 0.6967717970170818,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.if",
                "score": 0.6967717970170818,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.if",
                "score": 0.6967717970170818,
                "reason": "Function appears to have similar functionality (70% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.if",
                "score": 0.6941669419496242,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.if",
                "score": 0.6941669419496242,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.if",
                "score": 0.6941669419496242,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.if",
                "score": 0.6941669419496242,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.if",
                "score": 0.6941669419496242,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.if",
                "score": 0.6941669419496242,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "calculatePatientCost.if",
                "score": 0.6936288651601552,
                "reason": "Function appears to have similar functionality (69% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "calculatePatientCost.for",
                "score": 0.683143324216927,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.forEach",
                "score": 0.6829939759199876,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.forEach",
                "score": 0.6829939759199876,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.forEach",
                "score": 0.6829939759199876,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.forEach",
                "score": 0.6829939759199876,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.forEach",
                "score": 0.6829939759199876,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.forEach",
                "score": 0.6829939759199876,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "calculatePatientCost.findPatient",
                "score": 0.6791060986429915,
                "reason": "Function appears to have similar functionality (68% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.for",
                "score": 0.6711280511976194,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.for",
                "score": 0.6711280511976194,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.for",
                "score": 0.6711280511976194,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.for",
                "score": 0.6711280511976194,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.for",
                "score": 0.6711280511976194,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.for",
                "score": 0.6711280511976194,
                "reason": "Function appears to have similar functionality (67% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.for",
                "score": 0.6634107377047741,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.for",
                "score": 0.6634107377047741,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.for",
                "score": 0.6634107377047741,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.for",
                "score": 0.6634107377047741,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.for",
                "score": 0.6634107377047741,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.for",
                "score": 0.6634107377047741,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "factorial.for",
                "score": 0.6611368441104044,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.for",
                "score": 0.6611368441104044,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.for",
                "score": 0.6611368441104044,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.for",
                "score": 0.6611368441104044,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.for",
                "score": 0.6611368441104044,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.for",
                "score": 0.6611368441104044,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "calculatePatientCost.buildHospitalOrgChart",
                "score": 0.6566191106146329,
                "reason": "Function appears to have similar functionality (66% similar)",
                "filePath": "examples/DocumentAll.tsx"
              },
              {
                "similarTo": "factorial.findNodeByValue",
                "score": 0.6535112281309023,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.findNodeByValue",
                "score": 0.6535112281309023,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.findNodeByValue",
                "score": 0.6535112281309023,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.findNodeByValue",
                "score": 0.6535112281309023,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.findNodeByValue",
                "score": 0.6535112281309023,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.findNodeByValue",
                "score": 0.6535112281309023,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "UseRecursiveExamples.testPromiseChain",
                "score": 0.6493636393285941,
                "reason": "Function appears to have similar functionality (65% similar)",
                "filePath": "examples/UseRecursiveExamples.tsx"
              },
              {
                "similarTo": "Todo.if",
                "score": 0.643560370135653,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/Todo.tsx"
              },
              {
                "similarTo": "factorial.findNodeRecursive",
                "score": 0.6432965950893371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.findNodeRecursive",
                "score": 0.6432965950893371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.findNodeRecursive",
                "score": 0.6432965950893371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
                "score": 0.6432965950893371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.findNodeRecursive",
                "score": 0.6432965950893371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.findNodeRecursive",
                "score": 0.6432965950893371,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "Todo.handleAddTodo",
                "score": 0.6381403238576734,
                "reason": "Function appears to have similar functionality (64% similar)",
                "filePath": "examples/Todo.tsx"
              },
              {
                "similarTo": "App.handleTodoAdded",
                "score": 0.6348379037467314,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/App.tsx"
              },
              {
                "similarTo": "Todo.handleDeleteTodo",
                "score": 0.6348071071857134,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/Todo.tsx"
              },
              {
                "similarTo": "factorial.constructor",
                "score": 0.6342700139464703,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.constructor",
                "score": 0.6342700139464703,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.constructor",
                "score": 0.6342700139464703,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.constructor",
                "score": 0.6342700139464703,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.constructor",
                "score": 0.6342700139464703,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.constructor",
                "score": 0.6342700139464703,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "Todo.handleToggleTodo",
                "score": 0.6299867660419586,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/Todo.tsx"
              },
              {
                "similarTo": "factorial.traverseDOM",
                "score": 0.6297779262003784,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "sumNestedArray.traverseDOM",
                "score": 0.6297779262003784,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "deepClone.traverseDOM",
                "score": 0.6297779262003784,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveTreeProcessor.traverseDOM",
                "score": 0.6297779262003784,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "CommentThread.traverseDOM",
                "score": 0.6297779262003784,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              },
              {
                "similarTo": "RecursiveExamples.traverseDOM",
                "score": 0.6297779262003784,
                "reason": "Function appears to have similar functionality (63% similar)",
                "filePath": "examples/RecursiveExamples.tsx"
              }
            ]
          }
        ]
      }
    ],
    "methods": [
      {
        "name": "fibonacci",
        "params": [
          {
            "name": "n",
            "type": "number"
          },
          {
            "name": "memo",
            "type": "Record<number"
          },
          {
            "name": "number> = {}",
            "type": "any"
          }
        ],
        "returnType": "number",
        "code": "function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}"
      },
      {
        "name": "findPatient",
        "params": [
          {
            "name": "hospital",
            "type": "any"
          },
          {
            "name": "patientId",
            "type": "string"
          }
        ],
        "returnType": "any",
        "code": "function findPatient(hospital: any, patientId: string): any {\n    // Base case - if this is a patient object\n    if (hospital.type === 'patient' && hospital.id === patientId) {\n        return hospital;\n    }\n\n    // If this is a floor, wing, or room with children\n    if (hospital.children && Array.isArray(hospital.children)) {\n        for (const child of hospital.children) {\n            const result = findPatient(child, patientId);\n            if (result) return result;\n        }\n    }\n\n    return null;\n}",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.6840577575779809,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/DocumentAll.tsx"
          }
        ]
      },
      {
        "name": "if",
        "params": [
          {
            "name": "hospital.type === 'patient' && hospital.id === patientId",
            "type": "any"
          }
        ],
        "returnType": "void",
        "code": "if (hospital.type === 'patient' && hospital.id === patientId) {\n        return hospital;\n    }",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.8498360315518491,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/DocumentAll.tsx"
          }
        ]
      },
      {
        "name": "for",
        "params": [
          {
            "name": "child of hospital.children",
            "type": "any"
          }
        ],
        "returnType": "void",
        "code": "for (const child of hospital.children) {\n            const result = findPatient(child, patientId);\n            if (result) return result;\n        }",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.if",
            "score": 0.8872713905659667,
            "reason": "Function appears to have similar functionality (89% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.8718121677092725,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/DocumentAll.tsx"
          }
        ]
      },
      {
        "name": "buildHospitalOrgChart",
        "params": [
          {
            "name": "department",
            "type": "any"
          }
        ],
        "returnType": "string",
        "code": "function buildHospitalOrgChart(department: any): string {\n    let chart = `${department.name} (${department.role})\\n`;\n\n    if (department.subordinates && Array.isArray(department.subordinates)) {\n        department.subordinates.forEach((staff: any) => {\n            // Recursive call with indentation for each level\n            const subChart = buildHospitalOrgChart(staff)\n                .split('\\n')\n                .map(line => `  ${line}`)\n                .join('\\n');\n            chart += `${subChart}\\n`;\n        });\n    }\n\n    return chart.trim();\n}",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.7664497703557939,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.for",
            "score": 0.7560792716544408,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.if",
            "score": 0.7403637830478743,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.6569147673276075,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/DocumentAll.tsx"
          }
        ]
      }
    ]
  },
  {
    "name": "findPatient",
    "description": "Recursive function to find a patient in a hospital hierarchy (floors, wings, rooms)",
    "props": [],
    "filePath": "examples/DocumentAll.tsx",
    "sourceCode": "import React from 'react';\nimport App from './App';\nimport Todo, { TodoItem as TodoItemType } from './Todo';\nimport TodoItem from './TodoItem';\nimport RecursiveExamples, {\n    factorial,\n    fibonacci as recursiveExamplesFibonacci,\n    sumNestedArray,\n    depthFirstTraversal,\n    RecursiveTreeProcessor,\n    CommentThread,\n    deepClone,\n    traverseDOM,\n    recursivePromiseChain,\n    Comment,\n    TreeNode\n} from './RecursiveExamples';\nimport UseRecursiveExamples from './UseRecursiveExamples';\nimport FibonacciExample, { fibonacci } from './Fibonacci';\n\n/**\n * This component brings together all the components, functions and examples\n * for documentation generation purposes.\n */\nconst DocumentAll: React.FC = () => {\n    // Create demo data for examples\n    const demoTree: TreeNode<string> = {\n        value: 'root',\n        children: [{ value: 'child', children: [] }]\n    };\n\n    const demoComments: Comment[] = [\n        { id: '1', text: 'Example comment', author: 'User', replies: [] }\n    ];\n\n    // This component is never actually rendered, it just exists to document everything\n    return (\n        <div>\n            <h1>Documentation Components</h1>\n\n            {/* Standard App Components */}\n            <App title=\"Example App\" showRecursiveExamples={true} />\n            <Todo\n                initialTodos={[{ id: '1', text: 'Test Todo', completed: false }]}\n                onTodoAdded={(todo) => console.log(todo)}\n                title=\"Example Todos\"\n            />\n            <TodoItem\n                todo={{ id: '1', text: 'Test Todo', completed: false }}\n                onToggle={() => { }}\n                onDelete={() => { }}\n            />\n\n            {/* Recursive Examples */}\n            <RecursiveExamples />\n            <UseRecursiveExamples />\n            <CommentThread comments={demoComments} />\n            <FibonacciExample />\n\n            {/* These would normally be hidden, but included for documentation */}\n            <div style={{ display: 'none' }}>\n                <h2>Recursive Functions (TypeScript)</h2>\n                <p>{`factorial(5) = ${factorial(5)}`}</p>\n\n                {/* Make sure fibonacci is properly documented with explicit implementation */}\n                <div id=\"fibonacci-example\">\n                    <h3>Fibonacci Function</h3>\n                    <p>{`Imported fibonacci(10) = ${fibonacci(10)}`}</p>\n                    <p>{`RecursiveExamples fibonacci(10) = ${recursiveExamplesFibonacci(10)}`}</p>\n                    <pre>\n                        {`\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                        `}\n                    </pre>\n                </div>\n\n                <p>{`sumNestedArray([1, [2, 3]]) = ${sumNestedArray([1, [2, 3]])}`}</p>\n\n                <h2>Hospital Test JavaScript</h2>\n                <div id=\"hospital-examples\">\n                    {(() => {\n                        // Sample patient data\n                        const patient = {\n                            id: 'P1001',\n                            name: 'John Doe',\n                            roomCharge: 500,\n                            procedures: [\n                                { name: 'X-Ray', cost: 250 },\n                                { name: 'Blood Test', cost: 100 }\n                            ],\n                            medications: [\n                                { name: 'Antibiotic', cost: 75 },\n                                { name: 'Pain Reliever', cost: 25 }\n                            ]\n                        };\n\n                        // Sample hospital hierarchy\n                        const hospital = {\n                            type: 'hospital',\n                            name: 'General Hospital',\n                            children: [\n                                {\n                                    type: 'floor',\n                                    name: 'Floor 1',\n                                    children: [\n                                        {\n                                            type: 'room',\n                                            name: 'Room 101',\n                                            children: [\n                                                { type: 'patient', id: 'P1001', name: 'John Doe' }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        };\n\n                        // Sample org chart data\n                        const orgChart = {\n                            name: 'Dr. Smith',\n                            role: 'Chief of Medicine',\n                            subordinates: [\n                                {\n    ...\n// (code truncated for brevity)",
    "childComponents": [],
    "methods": [
      {
        "name": "fibonacci",
        "params": [
          {
            "name": "n",
            "type": "number"
          },
          {
            "name": "memo",
            "type": "Record<number"
          },
          {
            "name": "number> = {}",
            "type": "any"
          }
        ],
        "returnType": "number",
        "code": "function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.9936767154008945,
            "reason": "Function appears to have similar functionality (99% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.9936767154008945,
            "reason": "Function appears to have similar functionality (99% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "sumNestedArray.factorial",
            "score": 0.8153431375485499,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.factorial",
            "score": 0.8153431375485499,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.factorial",
            "score": 0.8153431375485499,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.factorial",
            "score": 0.8153431375485499,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.factorial",
            "score": 0.8153431375485499,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.setResult",
            "score": 0.8067977364596283,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.setResult",
            "score": 0.8067977364596283,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.setResult",
            "score": 0.8067977364596283,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.setResult",
            "score": 0.8067977364596283,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.setResult",
            "score": 0.8067977364596283,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.setResult",
            "score": 0.8067977364596283,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7364811190299572,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7364811190299572,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7364811190299572,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7364811190299572,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7364811190299572,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7364811190299572,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.runRecursiveExample",
            "score": 0.7330342530923258,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.runRecursiveExample",
            "score": 0.7330342530923258,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.runRecursiveExample",
            "score": 0.7330342530923258,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
            "score": 0.7330342530923258,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.runRecursiveExample",
            "score": 0.7330342530923258,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.runRecursiveExample",
            "score": 0.7330342530923258,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.sumNestedArray",
            "score": 0.7288672988283411,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.sumNestedArray",
            "score": 0.7288672988283411,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.sumNestedArray",
            "score": 0.7288672988283411,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.sumNestedArray",
            "score": 0.7288672988283411,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.sumNestedArray",
            "score": 0.7288672988283411,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7121582265305647,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7121582265305647,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7121582265305647,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7121582265305647,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7121582265305647,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7121582265305647,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7114222429749806,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7114222429749806,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7114222429749806,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7114222429749806,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7114222429749806,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7114222429749806,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.if",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.recursivePromiseChain",
            "score": 0.7046417072937028,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.recursivePromiseChain",
            "score": 0.7046417072937028,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.recursivePromiseChain",
            "score": 0.7046417072937028,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
            "score": 0.7046417072937028,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.recursivePromiseChain",
            "score": 0.7046417072937028,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.recursivePromiseChain",
            "score": 0.7046417072937028,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7007747642257963,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7007747642257963,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7007747642257963,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7007747642257963,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7007747642257963,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7007747642257963,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.for",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.forEach",
            "score": 0.6921488587736232,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.forEach",
            "score": 0.6921488587736232,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.forEach",
            "score": 0.6921488587736232,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.forEach",
            "score": 0.6921488587736232,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.forEach",
            "score": 0.6921488587736232,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.forEach",
            "score": 0.6921488587736232,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.6840577575779809,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.6801493280378237,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.6801493280378237,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.6801493280378237,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.6801493280378237,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.6801493280378237,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.6801493280378237,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.6755761168671692,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.6755761168671692,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.6755761168671692,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.6755761168671692,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.6755761168671692,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.6755761168671692,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.669858645489701,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.669858645489701,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.669858645489701,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.669858645489701,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.669858645489701,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.669858645489701,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.if",
            "score": 0.6578586870027666,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.findNodeByValue",
            "score": 0.6569786334730149,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeByValue",
            "score": 0.6569786334730149,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeByValue",
            "score": 0.6569786334730149,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeByValue",
            "score": 0.6569786334730149,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeByValue",
            "score": 0.6569786334730149,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeByValue",
            "score": 0.6569786334730149,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.buildHospitalOrgChart",
            "score": 0.6569147673276075,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "UseRecursiveExamples.testPromiseChain",
            "score": 0.6550903089337757,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/UseRecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleAddTodo",
            "score": 0.647076250541386,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "Todo.handleDeleteTodo",
            "score": 0.6429582557247608,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "App.handleTodoAdded",
            "score": 0.6423463019919371,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/App.tsx"
          },
          {
            "similarTo": "Todo.handleToggleTodo",
            "score": 0.6402273425604142,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.constructor",
            "score": 0.6394318932459019,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.constructor",
            "score": 0.6394318932459019,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.constructor",
            "score": 0.6394318932459019,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.constructor",
            "score": 0.6394318932459019,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.constructor",
            "score": 0.6394318932459019,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.constructor",
            "score": 0.6394318932459019,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.traverseDOM",
            "score": 0.6386480614038008,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.traverseDOM",
            "score": 0.6386480614038008,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.traverseDOM",
            "score": 0.6386480614038008,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.traverseDOM",
            "score": 0.6386480614038008,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.traverseDOM",
            "score": 0.6386480614038008,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.traverseDOM",
            "score": 0.6386480614038008,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.findNodeRecursive",
            "score": 0.6275203123501196,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeRecursive",
            "score": 0.6275203123501196,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeRecursive",
            "score": 0.6275203123501196,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
            "score": 0.6275203123501196,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeRecursive",
            "score": 0.6275203123501196,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeRecursive",
            "score": 0.6275203123501196,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.renderComment",
            "score": 0.6048188904948657,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.renderComment",
            "score": 0.6048188904948657,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.renderComment",
            "score": 0.6048188904948657,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.renderComment",
            "score": 0.6048188904948657,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.renderComment",
            "score": 0.6048188904948657,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.renderComment",
            "score": 0.6048188904948657,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          }
        ]
      },
      {
        "name": "calculatePatientCost",
        "params": [
          {
            "name": "patient",
            "type": "any"
          }
        ],
        "returnType": "number",
        "code": "function calculatePatientCost(patient: any): number {\n    let totalCost = patient.roomCharge || 0;\n\n    // Add procedure costs\n    if (patient.procedures && Array.isArray(patient.procedures)) {\n        totalCost += patient.procedures.reduce((acc: number, proc: any) =>\n            acc + proc.cost, 0);\n    }\n\n    // Add medication costs\n    if (patient.medications && Array.isArray(patient.medications)) {\n        totalCost += patient.medications.reduce((acc: number, med: any) =>\n            acc + med.cost, 0);\n    }\n\n    return totalCost;\n}",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.7968122894947479,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.for",
            "score": 0.7799499419220985,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.sumNestedArray",
            "score": 0.7724601446242829,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.sumNestedArray",
            "score": 0.7724601446242829,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.sumNestedArray",
            "score": 0.7724601446242829,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.sumNestedArray",
            "score": 0.7724601446242829,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.sumNestedArray",
            "score": 0.7724601446242829,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.if",
            "score": 0.7707255507521131,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.buildHospitalOrgChart",
            "score": 0.7459908914991796,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "sumNestedArray.factorial",
            "score": 0.7408602363711355,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.factorial",
            "score": 0.7408602363711355,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.factorial",
            "score": 0.7408602363711355,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.factorial",
            "score": 0.7408602363711355,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.factorial",
            "score": 0.7408602363711355,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.7290721553781677,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.7290721553781677,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7220824221502872,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7220824221502872,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7220824221502872,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7220824221502872,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7220824221502872,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7220824221502872,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7117050726553351,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7117050726553351,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7117050726553351,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7117050726553351,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7117050726553351,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7117050726553351,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7006389155961136,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7006389155961136,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7006389155961136,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7006389155961136,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7006389155961136,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7006389155961136,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.6972152315116377,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.6972152315116377,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.6972152315116377,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.6972152315116377,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.6972152315116377,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.6972152315116377,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.recursivePromiseChain",
            "score": 0.6849850743689699,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.recursivePromiseChain",
            "score": 0.6849850743689699,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.recursivePromiseChain",
            "score": 0.6849850743689699,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
            "score": 0.6849850743689699,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.recursivePromiseChain",
            "score": 0.6849850743689699,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.recursivePromiseChain",
            "score": 0.6849850743689699,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.forEach",
            "score": 0.6814100919027332,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.forEach",
            "score": 0.6814100919027332,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.forEach",
            "score": 0.6814100919027332,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.forEach",
            "score": 0.6814100919027332,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.forEach",
            "score": 0.6814100919027332,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.forEach",
            "score": 0.6814100919027332,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.6763939025586807,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.6763939025586807,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.6763939025586807,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.6763939025586807,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.6763939025586807,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.6763939025586807,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.6761336550134827,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.6761336550134827,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.6761336550134827,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.6761336550134827,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.6761336550134827,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.6761336550134827,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.runRecursiveExample",
            "score": 0.6678034441763365,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.runRecursiveExample",
            "score": 0.6678034441763365,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.runRecursiveExample",
            "score": 0.6678034441763365,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
            "score": 0.6678034441763365,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.runRecursiveExample",
            "score": 0.6678034441763365,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.runRecursiveExample",
            "score": 0.6678034441763365,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.6647474341740816,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.6647474341740816,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.6647474341740816,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.6647474341740816,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.6647474341740816,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.6647474341740816,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.setResult",
            "score": 0.658484012881366,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.setResult",
            "score": 0.658484012881366,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.setResult",
            "score": 0.658484012881366,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.setResult",
            "score": 0.658484012881366,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.setResult",
            "score": 0.658484012881366,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.setResult",
            "score": 0.658484012881366,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleDeleteTodo",
            "score": 0.643618263329078,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "Todo.if",
            "score": 0.6428143786479212,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "App.handleTodoAdded",
            "score": 0.6427376204976949,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/App.tsx"
          },
          {
            "similarTo": "factorial.traverseDOM",
            "score": 0.6411341198755892,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.traverseDOM",
            "score": 0.6411341198755892,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.traverseDOM",
            "score": 0.6411341198755892,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.traverseDOM",
            "score": 0.6411341198755892,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.traverseDOM",
            "score": 0.6411341198755892,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.traverseDOM",
            "score": 0.6411341198755892,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleAddTodo",
            "score": 0.6410716403569021,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "UseRecursiveExamples.testPromiseChain",
            "score": 0.6406823116373456,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/UseRecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.findNodeByValue",
            "score": 0.639887828920384,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeByValue",
            "score": 0.639887828920384,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeByValue",
            "score": 0.639887828920384,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeByValue",
            "score": 0.639887828920384,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeByValue",
            "score": 0.639887828920384,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeByValue",
            "score": 0.639887828920384,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleToggleTodo",
            "score": 0.6296097751534249,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.findNodeRecursive",
            "score": 0.6210773504117206,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeRecursive",
            "score": 0.6210773504117206,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeRecursive",
            "score": 0.6210773504117206,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
            "score": 0.6210773504117206,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeRecursive",
            "score": 0.6210773504117206,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeRecursive",
            "score": 0.6210773504117206,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.constructor",
            "score": 0.6153582871646196,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.constructor",
            "score": 0.6153582871646196,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.constructor",
            "score": 0.6153582871646196,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.constructor",
            "score": 0.6153582871646196,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.constructor",
            "score": 0.6153582871646196,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.constructor",
            "score": 0.6153582871646196,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          }
        ]
      },
      {
        "name": "if",
        "params": [
          {
            "name": "hospital.type === 'patient' && hospital.id === patientId",
            "type": "any"
          }
        ],
        "returnType": "void",
        "code": "if (hospital.type === 'patient' && hospital.id === patientId) {\n        return hospital;\n    }",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.if",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.for",
            "score": 0.8872713905659667,
            "reason": "Function appears to have similar functionality (89% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.867198331883805,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.867198331883805,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.867198331883805,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.867198331883805,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.867198331883805,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.867198331883805,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.8630942857758426,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.8630942857758426,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.8630942857758426,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.8630942857758426,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.8630942857758426,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.8630942857758426,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.8498360315518491,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Todo.if",
            "score": 0.823800395977576,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.8169967094742822,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.8169967094742822,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.8169967094742822,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.8169967094742822,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.8169967094742822,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.8169967094742822,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7748487801497511,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7748487801497511,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7748487801497511,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7748487801497511,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7748487801497511,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7748487801497511,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.forEach",
            "score": 0.773902386191897,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.forEach",
            "score": 0.773902386191897,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.forEach",
            "score": 0.773902386191897,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.forEach",
            "score": 0.773902386191897,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.forEach",
            "score": 0.773902386191897,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.forEach",
            "score": 0.773902386191897,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7716469001391171,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7716469001391171,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7716469001391171,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7716469001391171,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7716469001391171,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7716469001391171,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.calculatePatientCost",
            "score": 0.7707255507521131,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.752305349567527,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.752305349567527,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.752305349567527,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.752305349567527,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.752305349567527,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.752305349567527,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleDeleteTodo",
            "score": 0.7460030872022815,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7454011341058312,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7454011341058312,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7454011341058312,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7454011341058312,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7454011341058312,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7454011341058312,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleToggleTodo",
            "score": 0.7419124095381487,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "calculatePatientCost.buildHospitalOrgChart",
            "score": 0.7403637830478743,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Todo.handleAddTodo",
            "score": 0.7369068026877345,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "sumNestedArray.factorial",
            "score": 0.7232716416423449,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.factorial",
            "score": 0.7232716416423449,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.factorial",
            "score": 0.7232716416423449,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.factorial",
            "score": 0.7232716416423449,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.factorial",
            "score": 0.7232716416423449,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "App.handleTodoAdded",
            "score": 0.7167826412097928,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/App.tsx"
          },
          {
            "similarTo": "factorial.sumNestedArray",
            "score": 0.709428080686487,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.sumNestedArray",
            "score": 0.709428080686487,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.sumNestedArray",
            "score": 0.709428080686487,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.sumNestedArray",
            "score": 0.709428080686487,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.sumNestedArray",
            "score": 0.709428080686487,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.6936288651601552,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.6936288651601552,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "factorial.constructor",
            "score": 0.6928029581827734,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.constructor",
            "score": 0.6928029581827734,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.constructor",
            "score": 0.6928029581827734,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.constructor",
            "score": 0.6928029581827734,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.constructor",
            "score": 0.6928029581827734,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.constructor",
            "score": 0.6928029581827734,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.recursivePromiseChain",
            "score": 0.6850329969103433,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.recursivePromiseChain",
            "score": 0.6850329969103433,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.recursivePromiseChain",
            "score": 0.6850329969103433,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
            "score": 0.6850329969103433,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.recursivePromiseChain",
            "score": 0.6850329969103433,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.recursivePromiseChain",
            "score": 0.6850329969103433,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.traverseDOM",
            "score": 0.6850145020503027,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.traverseDOM",
            "score": 0.6850145020503027,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.traverseDOM",
            "score": 0.6850145020503027,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.traverseDOM",
            "score": 0.6850145020503027,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.traverseDOM",
            "score": 0.6850145020503027,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.traverseDOM",
            "score": 0.6850145020503027,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "UseRecursiveExamples.testPromiseChain",
            "score": 0.6794482328472733,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/UseRecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.findNodeByValue",
            "score": 0.664420190513949,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeByValue",
            "score": 0.664420190513949,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeByValue",
            "score": 0.664420190513949,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeByValue",
            "score": 0.664420190513949,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeByValue",
            "score": 0.664420190513949,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeByValue",
            "score": 0.664420190513949,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.setResult",
            "score": 0.6574758521048489,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.setResult",
            "score": 0.6574758521048489,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.setResult",
            "score": 0.6574758521048489,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.setResult",
            "score": 0.6574758521048489,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.setResult",
            "score": 0.6574758521048489,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.setResult",
            "score": 0.6574758521048489,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.renderComment",
            "score": 0.6558668770781725,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.renderComment",
            "score": 0.6558668770781725,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.renderComment",
            "score": 0.6558668770781725,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.renderComment",
            "score": 0.6558668770781725,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.renderComment",
            "score": 0.6558668770781725,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.renderComment",
            "score": 0.6558668770781725,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.findNodeRecursive",
            "score": 0.6374196224066616,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeRecursive",
            "score": 0.6374196224066616,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeRecursive",
            "score": 0.6374196224066616,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
            "score": 0.6374196224066616,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeRecursive",
            "score": 0.6374196224066616,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeRecursive",
            "score": 0.6374196224066616,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.runRecursiveExample",
            "score": 0.623898241630341,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.runRecursiveExample",
            "score": 0.623898241630341,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.runRecursiveExample",
            "score": 0.623898241630341,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
            "score": 0.623898241630341,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.runRecursiveExample",
            "score": 0.623898241630341,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.runRecursiveExample",
            "score": 0.623898241630341,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          }
        ]
      },
      {
        "name": "for",
        "params": [
          {
            "name": "child of hospital.children",
            "type": "any"
          }
        ],
        "returnType": "void",
        "code": "for (const child of hospital.children) {\n            const result = findPatient(child, patientId);\n            if (result) return result;\n        }",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.for",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.9100408143103078,
            "reason": "Function appears to have similar functionality (91% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.9100408143103078,
            "reason": "Function appears to have similar functionality (91% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.9100408143103078,
            "reason": "Function appears to have similar functionality (91% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.9100408143103078,
            "reason": "Function appears to have similar functionality (91% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.9100408143103078,
            "reason": "Function appears to have similar functionality (91% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.9100408143103078,
            "reason": "Function appears to have similar functionality (91% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.if",
            "score": 0.8872713905659667,
            "reason": "Function appears to have similar functionality (89% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.if",
            "score": 0.8872713905659667,
            "reason": "Function appears to have similar functionality (89% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.8846790514068484,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.8846790514068484,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.8846790514068484,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.8846790514068484,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.8846790514068484,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.8846790514068484,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.8718121677092725,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.8282278374991462,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.8282278374991462,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.8282278374991462,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.8282278374991462,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.8282278374991462,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.8282278374991462,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.8171222741239181,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.8171222741239181,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.8171222741239181,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.8171222741239181,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.8171222741239181,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.8171222741239181,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.8048487229945663,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.8048487229945663,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.8048487229945663,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.8048487229945663,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.8048487229945663,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.8048487229945663,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.797835553249666,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.797835553249666,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.797835553249666,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.797835553249666,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.797835553249666,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.797835553249666,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.calculatePatientCost",
            "score": 0.7799499419220985,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Todo.if",
            "score": 0.7727156387722378,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7644192829838371,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7644192829838371,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7644192829838371,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7644192829838371,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7644192829838371,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7644192829838371,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.forEach",
            "score": 0.7606696682520175,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.forEach",
            "score": 0.7606696682520175,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.forEach",
            "score": 0.7606696682520175,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.forEach",
            "score": 0.7606696682520175,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.forEach",
            "score": 0.7606696682520175,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.forEach",
            "score": 0.7606696682520175,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.buildHospitalOrgChart",
            "score": 0.7560792716544408,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Todo.handleDeleteTodo",
            "score": 0.7403172082263607,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.sumNestedArray",
            "score": 0.7249526760825332,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.sumNestedArray",
            "score": 0.7249526760825332,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.sumNestedArray",
            "score": 0.7249526760825332,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.sumNestedArray",
            "score": 0.7249526760825332,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.sumNestedArray",
            "score": 0.7249526760825332,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleAddTodo",
            "score": 0.7232814393850779,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "App.handleTodoAdded",
            "score": 0.7207489780336567,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/App.tsx"
          },
          {
            "similarTo": "Todo.handleToggleTodo",
            "score": 0.7190028662133026,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "sumNestedArray.factorial",
            "score": 0.7121863487930898,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.factorial",
            "score": 0.7121863487930898,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.factorial",
            "score": 0.7121863487930898,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.factorial",
            "score": 0.7121863487930898,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.factorial",
            "score": 0.7121863487930898,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "UseRecursiveExamples.testPromiseChain",
            "score": 0.7023339895037172,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/UseRecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.constructor",
            "score": 0.6967304471124952,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.constructor",
            "score": 0.6967304471124952,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.constructor",
            "score": 0.6967304471124952,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.constructor",
            "score": 0.6967304471124952,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.constructor",
            "score": 0.6967304471124952,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.constructor",
            "score": 0.6967304471124952,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.findNodeRecursive",
            "score": 0.6953214166397821,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeRecursive",
            "score": 0.6953214166397821,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeRecursive",
            "score": 0.6953214166397821,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
            "score": 0.6953214166397821,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeRecursive",
            "score": 0.6953214166397821,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeRecursive",
            "score": 0.6953214166397821,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.renderComment",
            "score": 0.6897263715307208,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.renderComment",
            "score": 0.6897263715307208,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.renderComment",
            "score": 0.6897263715307208,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.renderComment",
            "score": 0.6897263715307208,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.renderComment",
            "score": 0.6897263715307208,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.renderComment",
            "score": 0.6897263715307208,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.findNodeByValue",
            "score": 0.6888484367721514,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeByValue",
            "score": 0.6888484367721514,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeByValue",
            "score": 0.6888484367721514,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeByValue",
            "score": 0.6888484367721514,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeByValue",
            "score": 0.6888484367721514,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeByValue",
            "score": 0.6888484367721514,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.traverseDOM",
            "score": 0.6879583311277475,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.traverseDOM",
            "score": 0.6879583311277475,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.traverseDOM",
            "score": 0.6879583311277475,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.traverseDOM",
            "score": 0.6879583311277475,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.traverseDOM",
            "score": 0.6879583311277475,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.traverseDOM",
            "score": 0.6879583311277475,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.recursivePromiseChain",
            "score": 0.6873262965091594,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.recursivePromiseChain",
            "score": 0.6873262965091594,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.recursivePromiseChain",
            "score": 0.6873262965091594,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
            "score": 0.6873262965091594,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.recursivePromiseChain",
            "score": 0.6873262965091594,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.recursivePromiseChain",
            "score": 0.6873262965091594,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.683143324216927,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.683143324216927,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "factorial.setResult",
            "score": 0.6640123263764874,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.setResult",
            "score": 0.6640123263764874,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.setResult",
            "score": 0.6640123263764874,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.setResult",
            "score": 0.6640123263764874,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.setResult",
            "score": 0.6640123263764874,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.setResult",
            "score": 0.6640123263764874,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.runRecursiveExample",
            "score": 0.660924396269221,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.runRecursiveExample",
            "score": 0.660924396269221,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.runRecursiveExample",
            "score": 0.660924396269221,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
            "score": 0.660924396269221,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.runRecursiveExample",
            "score": 0.660924396269221,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.runRecursiveExample",
            "score": 0.660924396269221,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          }
        ]
      },
      {
        "name": "buildHospitalOrgChart",
        "params": [
          {
            "name": "department",
            "type": "any"
          }
        ],
        "returnType": "string",
        "code": "function buildHospitalOrgChart(department: any): string {\n    let chart = `${department.name} (${department.role})\\n`;\n\n    if (department.subordinates && Array.isArray(department.subordinates)) {\n        department.subordinates.forEach((staff: any) => {\n            // Recursive call with indentation for each level\n            const subChart = buildHospitalOrgChart(staff)\n                .split('\\n')\n                .map(line => `  ${line}`)\n                .join('\\n');\n            chart += `${subChart}\\n`;\n        });\n    }\n\n    return chart.trim();\n}",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.buildHospitalOrgChart",
            "score": 1,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.7664497703557939,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.for",
            "score": 0.7560792716544408,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.for",
            "score": 0.7560792716544408,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.sumNestedArray",
            "score": 0.7501346835645263,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.sumNestedArray",
            "score": 0.7501346835645263,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.sumNestedArray",
            "score": 0.7501346835645263,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.sumNestedArray",
            "score": 0.7501346835645263,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.sumNestedArray",
            "score": 0.7501346835645263,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7475705901556372,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7475705901556372,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7475705901556372,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7475705901556372,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7475705901556372,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7475705901556372,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.calculatePatientCost",
            "score": 0.7459908914991796,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.if",
            "score": 0.7403637830478743,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.if",
            "score": 0.7403637830478743,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7363959808453021,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7363959808453021,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7363959808453021,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7363959808453021,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7363959808453021,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7363959808453021,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.726814542347334,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.726814542347334,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.726814542347334,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.726814542347334,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.726814542347334,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.726814542347334,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7186684581736398,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7186684581736398,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7186684581736398,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7186684581736398,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7186684581736398,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7186684581736398,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.if",
            "score": 0.7170434491511634,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.forEach",
            "score": 0.7126589361776408,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.forEach",
            "score": 0.7126589361776408,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.forEach",
            "score": 0.7126589361776408,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.forEach",
            "score": 0.7126589361776408,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.forEach",
            "score": 0.7126589361776408,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.forEach",
            "score": 0.7126589361776408,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7060796486637402,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7060796486637402,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7060796486637402,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7060796486637402,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7060796486637402,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7060796486637402,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7011525212630815,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7011525212630815,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7011525212630815,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7011525212630815,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7011525212630815,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7011525212630815,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.6936394957378221,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.6936394957378221,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.6936394957378221,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.6936394957378221,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.6936394957378221,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.6936394957378221,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleAddTodo",
            "score": 0.6924748972553607,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "App.handleTodoAdded",
            "score": 0.6900460616131265,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/App.tsx"
          },
          {
            "similarTo": "Todo.handleToggleTodo",
            "score": 0.6844951695390067,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.constructor",
            "score": 0.683391346145776,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.constructor",
            "score": 0.683391346145776,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.constructor",
            "score": 0.683391346145776,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.constructor",
            "score": 0.683391346145776,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.constructor",
            "score": 0.683391346145776,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.constructor",
            "score": 0.683391346145776,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleDeleteTodo",
            "score": 0.6826400942756132,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.recursivePromiseChain",
            "score": 0.6796636167969574,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.recursivePromiseChain",
            "score": 0.6796636167969574,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.recursivePromiseChain",
            "score": 0.6796636167969574,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
            "score": 0.6796636167969574,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.recursivePromiseChain",
            "score": 0.6796636167969574,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.recursivePromiseChain",
            "score": 0.6796636167969574,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.runRecursiveExample",
            "score": 0.6696125053538209,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.runRecursiveExample",
            "score": 0.6696125053538209,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.runRecursiveExample",
            "score": 0.6696125053538209,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
            "score": 0.6696125053538209,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.runRecursiveExample",
            "score": 0.6696125053538209,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.runRecursiveExample",
            "score": 0.6696125053538209,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.factorial",
            "score": 0.6605886511727638,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.factorial",
            "score": 0.6605886511727638,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.factorial",
            "score": 0.6605886511727638,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.factorial",
            "score": 0.6605886511727638,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.factorial",
            "score": 0.6605886511727638,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "UseRecursiveExamples.testPromiseChain",
            "score": 0.6577029133380781,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/UseRecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.traverseDOM",
            "score": 0.6571588460843557,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.traverseDOM",
            "score": 0.6571588460843557,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.traverseDOM",
            "score": 0.6571588460843557,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.traverseDOM",
            "score": 0.6571588460843557,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.traverseDOM",
            "score": 0.6571588460843557,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.traverseDOM",
            "score": 0.6571588460843557,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.6569147673276075,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.fibonacci",
            "score": 0.6569147673276075,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.fibonacci",
            "score": 0.6569147673276075,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.fibonacci",
            "score": 0.6569147673276075,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.fibonacci",
            "score": 0.6569147673276075,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.fibonacci",
            "score": 0.6569147673276075,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.fibonacci",
            "score": 0.6569147673276075,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.fibonacci",
            "score": 0.6569147673276075,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.6566191106146329,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.6566191106146329,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "factorial.findNodeByValue",
            "score": 0.6418231757924514,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeByValue",
            "score": 0.6418231757924514,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeByValue",
            "score": 0.6418231757924514,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeByValue",
            "score": 0.6418231757924514,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeByValue",
            "score": 0.6418231757924514,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeByValue",
            "score": 0.6418231757924514,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.renderComment",
            "score": 0.6381886573450434,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.renderComment",
            "score": 0.6381886573450434,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.renderComment",
            "score": 0.6381886573450434,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.renderComment",
            "score": 0.6381886573450434,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.renderComment",
            "score": 0.6381886573450434,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.renderComment",
            "score": 0.6381886573450434,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.findNodeRecursive",
            "score": 0.6378304185924444,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeRecursive",
            "score": 0.6378304185924444,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeRecursive",
            "score": 0.6378304185924444,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
            "score": 0.6378304185924444,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeRecursive",
            "score": 0.6378304185924444,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeRecursive",
            "score": 0.6378304185924444,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.setResult",
            "score": 0.6311620661041384,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.setResult",
            "score": 0.6311620661041384,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.setResult",
            "score": 0.6311620661041384,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.setResult",
            "score": 0.6311620661041384,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.setResult",
            "score": 0.6311620661041384,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.setResult",
            "score": 0.6311620661041384,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          }
        ]
      }
    ]
  },
  {
    "name": "buildHospitalOrgChart",
    "description": "Recursively build a hospital organizational chart",
    "props": [],
    "filePath": "examples/DocumentAll.tsx",
    "sourceCode": "import React from 'react';\nimport App from './App';\nimport Todo, { TodoItem as TodoItemType } from './Todo';\nimport TodoItem from './TodoItem';\nimport RecursiveExamples, {\n    factorial,\n    fibonacci as recursiveExamplesFibonacci,\n    sumNestedArray,\n    depthFirstTraversal,\n    RecursiveTreeProcessor,\n    CommentThread,\n    deepClone,\n    traverseDOM,\n    recursivePromiseChain,\n    Comment,\n    TreeNode\n} from './RecursiveExamples';\nimport UseRecursiveExamples from './UseRecursiveExamples';\nimport FibonacciExample, { fibonacci } from './Fibonacci';\n\n/**\n * This component brings together all the components, functions and examples\n * for documentation generation purposes.\n */\nconst DocumentAll: React.FC = () => {\n    // Create demo data for examples\n    const demoTree: TreeNode<string> = {\n        value: 'root',\n        children: [{ value: 'child', children: [] }]\n    };\n\n    const demoComments: Comment[] = [\n        { id: '1', text: 'Example comment', author: 'User', replies: [] }\n    ];\n\n    // This component is never actually rendered, it just exists to document everything\n    return (\n        <div>\n            <h1>Documentation Components</h1>\n\n            {/* Standard App Components */}\n            <App title=\"Example App\" showRecursiveExamples={true} />\n            <Todo\n                initialTodos={[{ id: '1', text: 'Test Todo', completed: false }]}\n                onTodoAdded={(todo) => console.log(todo)}\n                title=\"Example Todos\"\n            />\n            <TodoItem\n                todo={{ id: '1', text: 'Test Todo', completed: false }}\n                onToggle={() => { }}\n                onDelete={() => { }}\n            />\n\n            {/* Recursive Examples */}\n            <RecursiveExamples />\n            <UseRecursiveExamples />\n            <CommentThread comments={demoComments} />\n            <FibonacciExample />\n\n            {/* These would normally be hidden, but included for documentation */}\n            <div style={{ display: 'none' }}>\n                <h2>Recursive Functions (TypeScript)</h2>\n                <p>{`factorial(5) = ${factorial(5)}`}</p>\n\n                {/* Make sure fibonacci is properly documented with explicit implementation */}\n                <div id=\"fibonacci-example\">\n                    <h3>Fibonacci Function</h3>\n                    <p>{`Imported fibonacci(10) = ${fibonacci(10)}`}</p>\n                    <p>{`RecursiveExamples fibonacci(10) = ${recursiveExamplesFibonacci(10)}`}</p>\n                    <pre>\n                        {`\n// Fibonacci calculation with recursion and memoization\nexport function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}\n                        `}\n                    </pre>\n                </div>\n\n                <p>{`sumNestedArray([1, [2, 3]]) = ${sumNestedArray([1, [2, 3]])}`}</p>\n\n                <h2>Hospital Test JavaScript</h2>\n                <div id=\"hospital-examples\">\n                    {(() => {\n                        // Sample patient data\n                        const patient = {\n                            id: 'P1001',\n                            name: 'John Doe',\n                            roomCharge: 500,\n                            procedures: [\n                                { name: 'X-Ray', cost: 250 },\n                                { name: 'Blood Test', cost: 100 }\n                            ],\n                            medications: [\n                                { name: 'Antibiotic', cost: 75 },\n                                { name: 'Pain Reliever', cost: 25 }\n                            ]\n                        };\n\n                        // Sample hospital hierarchy\n                        const hospital = {\n                            type: 'hospital',\n                            name: 'General Hospital',\n                            children: [\n                                {\n                                    type: 'floor',\n                                    name: 'Floor 1',\n                                    children: [\n                                        {\n                                            type: 'room',\n                                            name: 'Room 101',\n                                            children: [\n                                                { type: 'patient', id: 'P1001', name: 'John Doe' }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        };\n\n                        // Sample org chart data\n                        const orgChart = {\n                            name: 'Dr. Smith',\n                            role: 'Chief of Medicine',\n                            subordinates: [\n                                {\n    ...\n// (code truncated for brevity)",
    "childComponents": [],
    "methods": [
      {
        "name": "fibonacci",
        "params": [
          {
            "name": "n",
            "type": "number"
          },
          {
            "name": "memo",
            "type": "Record<number"
          },
          {
            "name": "number> = {}",
            "type": "any"
          }
        ],
        "returnType": "number",
        "code": "function fibonacci(n: number, memo: Record<number, number> = {}): number {\n    if (n in memo) return memo[n];\n    if (n <= 1) return n;\n\n    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);\n    return memo[n];\n}",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.fibonacci",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.9936767154008945,
            "reason": "Function appears to have similar functionality (99% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.9936767154008945,
            "reason": "Function appears to have similar functionality (99% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "sumNestedArray.factorial",
            "score": 0.8153431375485499,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.factorial",
            "score": 0.8153431375485499,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.factorial",
            "score": 0.8153431375485499,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.factorial",
            "score": 0.8153431375485499,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.factorial",
            "score": 0.8153431375485499,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.setResult",
            "score": 0.8067977364596283,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.setResult",
            "score": 0.8067977364596283,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.setResult",
            "score": 0.8067977364596283,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.setResult",
            "score": 0.8067977364596283,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.setResult",
            "score": 0.8067977364596283,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.setResult",
            "score": 0.8067977364596283,
            "reason": "Function appears to have similar functionality (81% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7364811190299572,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7364811190299572,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7364811190299572,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7364811190299572,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7364811190299572,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7364811190299572,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.calculatePatientCost",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.runRecursiveExample",
            "score": 0.7330342530923258,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.runRecursiveExample",
            "score": 0.7330342530923258,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.runRecursiveExample",
            "score": 0.7330342530923258,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
            "score": 0.7330342530923258,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.runRecursiveExample",
            "score": 0.7330342530923258,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.runRecursiveExample",
            "score": 0.7330342530923258,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.sumNestedArray",
            "score": 0.7288672988283411,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.sumNestedArray",
            "score": 0.7288672988283411,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.sumNestedArray",
            "score": 0.7288672988283411,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.sumNestedArray",
            "score": 0.7288672988283411,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.sumNestedArray",
            "score": 0.7288672988283411,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7121582265305647,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7121582265305647,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7121582265305647,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7121582265305647,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7121582265305647,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7121582265305647,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7114222429749806,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7114222429749806,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7114222429749806,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7114222429749806,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7114222429749806,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7114222429749806,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.if",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.if",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.recursivePromiseChain",
            "score": 0.7046417072937028,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.recursivePromiseChain",
            "score": 0.7046417072937028,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.recursivePromiseChain",
            "score": 0.7046417072937028,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
            "score": 0.7046417072937028,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.recursivePromiseChain",
            "score": 0.7046417072937028,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.recursivePromiseChain",
            "score": 0.7046417072937028,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7007747642257963,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7007747642257963,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7007747642257963,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7007747642257963,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7007747642257963,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7007747642257963,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.for",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.for",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.forEach",
            "score": 0.6921488587736232,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.forEach",
            "score": 0.6921488587736232,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.forEach",
            "score": 0.6921488587736232,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.forEach",
            "score": 0.6921488587736232,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.forEach",
            "score": 0.6921488587736232,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.forEach",
            "score": 0.6921488587736232,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.6840577575779809,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.6801493280378237,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.6801493280378237,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.6801493280378237,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.6801493280378237,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.6801493280378237,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.6801493280378237,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.6755761168671692,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.6755761168671692,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.6755761168671692,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.6755761168671692,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.6755761168671692,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.6755761168671692,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.669858645489701,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.669858645489701,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.669858645489701,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.669858645489701,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.669858645489701,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.669858645489701,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.if",
            "score": 0.6578586870027666,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.findNodeByValue",
            "score": 0.6569786334730149,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeByValue",
            "score": 0.6569786334730149,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeByValue",
            "score": 0.6569786334730149,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeByValue",
            "score": 0.6569786334730149,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeByValue",
            "score": 0.6569786334730149,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeByValue",
            "score": 0.6569786334730149,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.buildHospitalOrgChart",
            "score": 0.6569147673276075,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.buildHospitalOrgChart",
            "score": 0.6569147673276075,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "UseRecursiveExamples.testPromiseChain",
            "score": 0.6550903089337757,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/UseRecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleAddTodo",
            "score": 0.647076250541386,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "Todo.handleDeleteTodo",
            "score": 0.6429582557247608,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "App.handleTodoAdded",
            "score": 0.6423463019919371,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/App.tsx"
          },
          {
            "similarTo": "Todo.handleToggleTodo",
            "score": 0.6402273425604142,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.constructor",
            "score": 0.6394318932459019,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.constructor",
            "score": 0.6394318932459019,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.constructor",
            "score": 0.6394318932459019,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.constructor",
            "score": 0.6394318932459019,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.constructor",
            "score": 0.6394318932459019,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.constructor",
            "score": 0.6394318932459019,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.traverseDOM",
            "score": 0.6386480614038008,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.traverseDOM",
            "score": 0.6386480614038008,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.traverseDOM",
            "score": 0.6386480614038008,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.traverseDOM",
            "score": 0.6386480614038008,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.traverseDOM",
            "score": 0.6386480614038008,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.traverseDOM",
            "score": 0.6386480614038008,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.findNodeRecursive",
            "score": 0.6275203123501196,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeRecursive",
            "score": 0.6275203123501196,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeRecursive",
            "score": 0.6275203123501196,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
            "score": 0.6275203123501196,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeRecursive",
            "score": 0.6275203123501196,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeRecursive",
            "score": 0.6275203123501196,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.renderComment",
            "score": 0.6048188904948657,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.renderComment",
            "score": 0.6048188904948657,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.renderComment",
            "score": 0.6048188904948657,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.renderComment",
            "score": 0.6048188904948657,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.renderComment",
            "score": 0.6048188904948657,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.renderComment",
            "score": 0.6048188904948657,
            "reason": "Function appears to have similar functionality (60% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          }
        ]
      },
      {
        "name": "calculatePatientCost",
        "params": [
          {
            "name": "patient",
            "type": "any"
          }
        ],
        "returnType": "number",
        "code": "function calculatePatientCost(patient: any): number {\n    let totalCost = patient.roomCharge || 0;\n\n    // Add procedure costs\n    if (patient.procedures && Array.isArray(patient.procedures)) {\n        totalCost += patient.procedures.reduce((acc: number, proc: any) =>\n            acc + proc.cost, 0);\n    }\n\n    // Add medication costs\n    if (patient.medications && Array.isArray(patient.medications)) {\n        totalCost += patient.medications.reduce((acc: number, med: any) =>\n            acc + med.cost, 0);\n    }\n\n    return totalCost;\n}",
        "similarityWarnings": [
          {
            "similarTo": "findPatient.calculatePatientCost",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.7968122894947479,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.for",
            "score": 0.7799499419220985,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.for",
            "score": 0.7799499419220985,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.sumNestedArray",
            "score": 0.7724601446242829,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.sumNestedArray",
            "score": 0.7724601446242829,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.sumNestedArray",
            "score": 0.7724601446242829,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.sumNestedArray",
            "score": 0.7724601446242829,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.sumNestedArray",
            "score": 0.7724601446242829,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.if",
            "score": 0.7707255507521131,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.if",
            "score": 0.7707255507521131,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.buildHospitalOrgChart",
            "score": 0.7459908914991796,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.buildHospitalOrgChart",
            "score": 0.7459908914991796,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "sumNestedArray.factorial",
            "score": 0.7408602363711355,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.factorial",
            "score": 0.7408602363711355,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.factorial",
            "score": 0.7408602363711355,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.factorial",
            "score": 0.7408602363711355,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.factorial",
            "score": 0.7408602363711355,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "buildHospitalOrgChart.fibonacci",
            "score": 0.733780782526374,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.7290721553781677,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.7290721553781677,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7220824221502872,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7220824221502872,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7220824221502872,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7220824221502872,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7220824221502872,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7220824221502872,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7117050726553351,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7117050726553351,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7117050726553351,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7117050726553351,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7117050726553351,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7117050726553351,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7006389155961136,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7006389155961136,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7006389155961136,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7006389155961136,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7006389155961136,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7006389155961136,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.6972152315116377,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.6972152315116377,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.6972152315116377,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.6972152315116377,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.6972152315116377,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.6972152315116377,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.recursivePromiseChain",
            "score": 0.6849850743689699,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.recursivePromiseChain",
            "score": 0.6849850743689699,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.recursivePromiseChain",
            "score": 0.6849850743689699,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
            "score": 0.6849850743689699,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.recursivePromiseChain",
            "score": 0.6849850743689699,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.recursivePromiseChain",
            "score": 0.6849850743689699,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.forEach",
            "score": 0.6814100919027332,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.forEach",
            "score": 0.6814100919027332,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.forEach",
            "score": 0.6814100919027332,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.forEach",
            "score": 0.6814100919027332,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.forEach",
            "score": 0.6814100919027332,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.forEach",
            "score": 0.6814100919027332,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.6763939025586807,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.6763939025586807,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.6763939025586807,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.6763939025586807,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.6763939025586807,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.6763939025586807,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.6761336550134827,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.6761336550134827,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.6761336550134827,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.6761336550134827,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.6761336550134827,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.6761336550134827,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.runRecursiveExample",
            "score": 0.6678034441763365,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.runRecursiveExample",
            "score": 0.6678034441763365,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.runRecursiveExample",
            "score": 0.6678034441763365,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
            "score": 0.6678034441763365,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.runRecursiveExample",
            "score": 0.6678034441763365,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.runRecursiveExample",
            "score": 0.6678034441763365,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.6647474341740816,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.6647474341740816,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.6647474341740816,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.6647474341740816,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.6647474341740816,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.6647474341740816,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.setResult",
            "score": 0.658484012881366,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.setResult",
            "score": 0.658484012881366,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.setResult",
            "score": 0.658484012881366,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.setResult",
            "score": 0.658484012881366,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.setResult",
            "score": 0.658484012881366,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.setResult",
            "score": 0.658484012881366,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleDeleteTodo",
            "score": 0.643618263329078,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "Todo.if",
            "score": 0.6428143786479212,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "App.handleTodoAdded",
            "score": 0.6427376204976949,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/App.tsx"
          },
          {
            "similarTo": "factorial.traverseDOM",
            "score": 0.6411341198755892,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.traverseDOM",
            "score": 0.6411341198755892,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.traverseDOM",
            "score": 0.6411341198755892,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.traverseDOM",
            "score": 0.6411341198755892,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.traverseDOM",
            "score": 0.6411341198755892,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.traverseDOM",
            "score": 0.6411341198755892,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleAddTodo",
            "score": 0.6410716403569021,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "UseRecursiveExamples.testPromiseChain",
            "score": 0.6406823116373456,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/UseRecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.findNodeByValue",
            "score": 0.639887828920384,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeByValue",
            "score": 0.639887828920384,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeByValue",
            "score": 0.639887828920384,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeByValue",
            "score": 0.639887828920384,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeByValue",
            "score": 0.639887828920384,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeByValue",
            "score": 0.639887828920384,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleToggleTodo",
            "score": 0.6296097751534249,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.findNodeRecursive",
            "score": 0.6210773504117206,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeRecursive",
            "score": 0.6210773504117206,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeRecursive",
            "score": 0.6210773504117206,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
            "score": 0.6210773504117206,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeRecursive",
            "score": 0.6210773504117206,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeRecursive",
            "score": 0.6210773504117206,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.constructor",
            "score": 0.6153582871646196,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.constructor",
            "score": 0.6153582871646196,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.constructor",
            "score": 0.6153582871646196,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.constructor",
            "score": 0.6153582871646196,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.constructor",
            "score": 0.6153582871646196,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.constructor",
            "score": 0.6153582871646196,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          }
        ]
      },
      {
        "name": "findPatient",
        "params": [
          {
            "name": "hospital",
            "type": "any"
          },
          {
            "name": "patientId",
            "type": "string"
          }
        ],
        "returnType": "any",
        "code": "function findPatient(hospital: any, patientId: string): any {\n    // Base case - if this is a patient object\n    if (hospital.type === 'patient' && hospital.id === patientId) {\n        return hospital;\n    }\n\n    // If this is a floor, wing, or room with children\n    if (hospital.children && Array.isArray(hospital.children)) {\n        for (const child of hospital.children) {\n            const result = findPatient(child, patientId);\n            if (result) return result;\n        }\n    }\n\n    return null;\n}",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.for",
            "score": 0.8718121677092725,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.for",
            "score": 0.8718121677092725,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.if",
            "score": 0.8498360315518491,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.if",
            "score": 0.8498360315518491,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7997892678420998,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7997892678420998,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7997892678420998,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7997892678420998,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7997892678420998,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7997892678420998,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.calculatePatientCost",
            "score": 0.7968122894947479,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "buildHospitalOrgChart.calculatePatientCost",
            "score": 0.7968122894947479,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7908204776178391,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7908204776178391,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7908204776178391,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7908204776178391,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7908204776178391,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7908204776178391,
            "reason": "Function appears to have similar functionality (79% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.buildHospitalOrgChart",
            "score": 0.7664497703557939,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.buildHospitalOrgChart",
            "score": 0.7664497703557939,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.findNodeRecursive",
            "score": 0.7588146654200606,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeRecursive",
            "score": 0.7588146654200606,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeRecursive",
            "score": 0.7588146654200606,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
            "score": 0.7588146654200606,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeRecursive",
            "score": 0.7588146654200606,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeRecursive",
            "score": 0.7588146654200606,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7575491142758187,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7575491142758187,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7575491142758187,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7575491142758187,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7575491142758187,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7575491142758187,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.755414657298411,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.755414657298411,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.755414657298411,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.755414657298411,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.755414657298411,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.755414657298411,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7495847049337491,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7495847049337491,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7495847049337491,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7495847049337491,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7495847049337491,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7495847049337491,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7453495718614734,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7453495718614734,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7453495718614734,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7453495718614734,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7453495718614734,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7453495718614734,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.sumNestedArray",
            "score": 0.7406114060219362,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.sumNestedArray",
            "score": 0.7406114060219362,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.sumNestedArray",
            "score": 0.7406114060219362,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.sumNestedArray",
            "score": 0.7406114060219362,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.sumNestedArray",
            "score": 0.7406114060219362,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.findNodeByValue",
            "score": 0.7285521951428092,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeByValue",
            "score": 0.7285521951428092,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeByValue",
            "score": 0.7285521951428092,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeByValue",
            "score": 0.7285521951428092,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeByValue",
            "score": 0.7285521951428092,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeByValue",
            "score": 0.7285521951428092,
            "reason": "Function appears to have similar functionality (73% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7236481285633931,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7236481285633931,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7236481285633931,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7236481285633931,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7236481285633931,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7236481285633931,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.if",
            "score": 0.7227659494708848,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.forEach",
            "score": 0.7075487035531843,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.forEach",
            "score": 0.7075487035531843,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.forEach",
            "score": 0.7075487035531843,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.forEach",
            "score": 0.7075487035531843,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.forEach",
            "score": 0.7075487035531843,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.forEach",
            "score": 0.7075487035531843,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleDeleteTodo",
            "score": 0.6885634920642805,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.6840577575779809,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.fibonacci",
            "score": 0.6840577575779809,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.fibonacci",
            "score": 0.6840577575779809,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.fibonacci",
            "score": 0.6840577575779809,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.fibonacci",
            "score": 0.6840577575779809,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.fibonacci",
            "score": 0.6840577575779809,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.fibonacci",
            "score": 0.6840577575779809,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.fibonacci",
            "score": 0.6840577575779809,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "buildHospitalOrgChart.fibonacci",
            "score": 0.6840577575779809,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "sumNestedArray.factorial",
            "score": 0.6819023843086419,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.factorial",
            "score": 0.6819023843086419,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.factorial",
            "score": 0.6819023843086419,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.factorial",
            "score": 0.6819023843086419,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.factorial",
            "score": 0.6819023843086419,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.6791060986429915,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.6791060986429915,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "Todo.handleToggleTodo",
            "score": 0.6656508458272453,
            "reason": "Function appears to have similar functionality (67% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "Todo.handleAddTodo",
            "score": 0.6636712841189745,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "UseRecursiveExamples.testPromiseChain",
            "score": 0.6499016714304724,
            "reason": "Function appears to have similar functionality (65% similar)",
            "filePath": "examples/UseRecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.recursivePromiseChain",
            "score": 0.6405459161098245,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.recursivePromiseChain",
            "score": 0.6405459161098245,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.recursivePromiseChain",
            "score": 0.6405459161098245,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
            "score": 0.6405459161098245,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.recursivePromiseChain",
            "score": 0.6405459161098245,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.recursivePromiseChain",
            "score": 0.6405459161098245,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "App.handleTodoAdded",
            "score": 0.6335338164081353,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/App.tsx"
          },
          {
            "similarTo": "factorial.constructor",
            "score": 0.6299892294288986,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.constructor",
            "score": 0.6299892294288986,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.constructor",
            "score": 0.6299892294288986,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.constructor",
            "score": 0.6299892294288986,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.constructor",
            "score": 0.6299892294288986,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.constructor",
            "score": 0.6299892294288986,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.traverseDOM",
            "score": 0.6268184336719129,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.traverseDOM",
            "score": 0.6268184336719129,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.traverseDOM",
            "score": 0.6268184336719129,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.traverseDOM",
            "score": 0.6268184336719129,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.traverseDOM",
            "score": 0.6268184336719129,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.traverseDOM",
            "score": 0.6268184336719129,
            "reason": "Function appears to have similar functionality (63% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.runRecursiveExample",
            "score": 0.624843934134741,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.runRecursiveExample",
            "score": 0.624843934134741,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.runRecursiveExample",
            "score": 0.624843934134741,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
            "score": 0.624843934134741,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.runRecursiveExample",
            "score": 0.624843934134741,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.runRecursiveExample",
            "score": 0.624843934134741,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.setResult",
            "score": 0.6089953081375107,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.setResult",
            "score": 0.6089953081375107,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.setResult",
            "score": 0.6089953081375107,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.setResult",
            "score": 0.6089953081375107,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.setResult",
            "score": 0.6089953081375107,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.setResult",
            "score": 0.6089953081375107,
            "reason": "Function appears to have similar functionality (61% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          }
        ]
      },
      {
        "name": "if",
        "params": [
          {
            "name": "hospital.type === 'patient' && hospital.id === patientId",
            "type": "any"
          }
        ],
        "returnType": "void",
        "code": "if (hospital.type === 'patient' && hospital.id === patientId) {\n        return hospital;\n    }",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.if",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.if",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "calculatePatientCost.for",
            "score": 0.8872713905659667,
            "reason": "Function appears to have similar functionality (89% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.for",
            "score": 0.8872713905659667,
            "reason": "Function appears to have similar functionality (89% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.867198331883805,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.867198331883805,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.867198331883805,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.867198331883805,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.867198331883805,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.867198331883805,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.8630942857758426,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.8630942857758426,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.8630942857758426,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.8630942857758426,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.8630942857758426,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.8630942857758426,
            "reason": "Function appears to have similar functionality (86% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.8498360315518491,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "buildHospitalOrgChart.findPatient",
            "score": 0.8498360315518491,
            "reason": "Function appears to have similar functionality (85% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Todo.if",
            "score": 0.823800395977576,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.8169967094742822,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.8169967094742822,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.8169967094742822,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.8169967094742822,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.8169967094742822,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.8169967094742822,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7748487801497511,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7748487801497511,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7748487801497511,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7748487801497511,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7748487801497511,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7748487801497511,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.forEach",
            "score": 0.773902386191897,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.forEach",
            "score": 0.773902386191897,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.forEach",
            "score": 0.773902386191897,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.forEach",
            "score": 0.773902386191897,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.forEach",
            "score": 0.773902386191897,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.forEach",
            "score": 0.773902386191897,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7716469001391171,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7716469001391171,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7716469001391171,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7716469001391171,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7716469001391171,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7716469001391171,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.calculatePatientCost",
            "score": 0.7707255507521131,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "buildHospitalOrgChart.calculatePatientCost",
            "score": 0.7707255507521131,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.752305349567527,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.752305349567527,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.752305349567527,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.752305349567527,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.752305349567527,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.752305349567527,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleDeleteTodo",
            "score": 0.7460030872022815,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.7454011341058312,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.7454011341058312,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.7454011341058312,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.7454011341058312,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.7454011341058312,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.7454011341058312,
            "reason": "Function appears to have similar functionality (75% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleToggleTodo",
            "score": 0.7419124095381487,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "calculatePatientCost.buildHospitalOrgChart",
            "score": 0.7403637830478743,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.buildHospitalOrgChart",
            "score": 0.7403637830478743,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Todo.handleAddTodo",
            "score": 0.7369068026877345,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "sumNestedArray.factorial",
            "score": 0.7232716416423449,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.factorial",
            "score": 0.7232716416423449,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.factorial",
            "score": 0.7232716416423449,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.factorial",
            "score": 0.7232716416423449,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.factorial",
            "score": 0.7232716416423449,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "App.handleTodoAdded",
            "score": 0.7167826412097928,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/App.tsx"
          },
          {
            "similarTo": "factorial.sumNestedArray",
            "score": 0.709428080686487,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.sumNestedArray",
            "score": 0.709428080686487,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.sumNestedArray",
            "score": 0.709428080686487,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.sumNestedArray",
            "score": 0.709428080686487,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.sumNestedArray",
            "score": 0.709428080686487,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "buildHospitalOrgChart.fibonacci",
            "score": 0.7090007745876641,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.6936288651601552,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.6936288651601552,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "factorial.constructor",
            "score": 0.6928029581827734,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.constructor",
            "score": 0.6928029581827734,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.constructor",
            "score": 0.6928029581827734,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.constructor",
            "score": 0.6928029581827734,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.constructor",
            "score": 0.6928029581827734,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.constructor",
            "score": 0.6928029581827734,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.recursivePromiseChain",
            "score": 0.6850329969103433,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.recursivePromiseChain",
            "score": 0.6850329969103433,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.recursivePromiseChain",
            "score": 0.6850329969103433,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
            "score": 0.6850329969103433,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.recursivePromiseChain",
            "score": 0.6850329969103433,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.recursivePromiseChain",
            "score": 0.6850329969103433,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.traverseDOM",
            "score": 0.6850145020503027,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.traverseDOM",
            "score": 0.6850145020503027,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.traverseDOM",
            "score": 0.6850145020503027,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.traverseDOM",
            "score": 0.6850145020503027,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.traverseDOM",
            "score": 0.6850145020503027,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.traverseDOM",
            "score": 0.6850145020503027,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "UseRecursiveExamples.testPromiseChain",
            "score": 0.6794482328472733,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/UseRecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.findNodeByValue",
            "score": 0.664420190513949,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeByValue",
            "score": 0.664420190513949,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeByValue",
            "score": 0.664420190513949,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeByValue",
            "score": 0.664420190513949,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeByValue",
            "score": 0.664420190513949,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeByValue",
            "score": 0.664420190513949,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.setResult",
            "score": 0.6574758521048489,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.setResult",
            "score": 0.6574758521048489,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.setResult",
            "score": 0.6574758521048489,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.setResult",
            "score": 0.6574758521048489,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.setResult",
            "score": 0.6574758521048489,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.setResult",
            "score": 0.6574758521048489,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.renderComment",
            "score": 0.6558668770781725,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.renderComment",
            "score": 0.6558668770781725,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.renderComment",
            "score": 0.6558668770781725,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.renderComment",
            "score": 0.6558668770781725,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.renderComment",
            "score": 0.6558668770781725,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.renderComment",
            "score": 0.6558668770781725,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.findNodeRecursive",
            "score": 0.6374196224066616,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeRecursive",
            "score": 0.6374196224066616,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeRecursive",
            "score": 0.6374196224066616,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
            "score": 0.6374196224066616,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeRecursive",
            "score": 0.6374196224066616,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeRecursive",
            "score": 0.6374196224066616,
            "reason": "Function appears to have similar functionality (64% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.runRecursiveExample",
            "score": 0.623898241630341,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.runRecursiveExample",
            "score": 0.623898241630341,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.runRecursiveExample",
            "score": 0.623898241630341,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
            "score": 0.623898241630341,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.runRecursiveExample",
            "score": 0.623898241630341,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.runRecursiveExample",
            "score": 0.623898241630341,
            "reason": "Function appears to have similar functionality (62% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          }
        ]
      },
      {
        "name": "for",
        "params": [
          {
            "name": "child of hospital.children",
            "type": "any"
          }
        ],
        "returnType": "void",
        "code": "for (const child of hospital.children) {\n            const result = findPatient(child, patientId);\n            if (result) return result;\n        }",
        "similarityWarnings": [
          {
            "similarTo": "calculatePatientCost.for",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.for",
            "score": 0.9999999999999999,
            "reason": "Function appears to have similar functionality (100% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.9100408143103078,
            "reason": "Function appears to have similar functionality (91% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.9100408143103078,
            "reason": "Function appears to have similar functionality (91% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.9100408143103078,
            "reason": "Function appears to have similar functionality (91% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.9100408143103078,
            "reason": "Function appears to have similar functionality (91% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.9100408143103078,
            "reason": "Function appears to have similar functionality (91% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.9100408143103078,
            "reason": "Function appears to have similar functionality (91% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.if",
            "score": 0.8872713905659667,
            "reason": "Function appears to have similar functionality (89% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.if",
            "score": 0.8872713905659667,
            "reason": "Function appears to have similar functionality (89% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "buildHospitalOrgChart.if",
            "score": 0.8872713905659667,
            "reason": "Function appears to have similar functionality (89% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.8846790514068484,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.8846790514068484,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.8846790514068484,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.8846790514068484,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.8846790514068484,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.8846790514068484,
            "reason": "Function appears to have similar functionality (88% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.findPatient",
            "score": 0.8718121677092725,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "buildHospitalOrgChart.findPatient",
            "score": 0.8718121677092725,
            "reason": "Function appears to have similar functionality (87% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.8282278374991462,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.8282278374991462,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.8282278374991462,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.8282278374991462,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.8282278374991462,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.8282278374991462,
            "reason": "Function appears to have similar functionality (83% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.for",
            "score": 0.8171222741239181,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.for",
            "score": 0.8171222741239181,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.for",
            "score": 0.8171222741239181,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.for",
            "score": 0.8171222741239181,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.for",
            "score": 0.8171222741239181,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.for",
            "score": 0.8171222741239181,
            "reason": "Function appears to have similar functionality (82% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.8048487229945663,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.8048487229945663,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.8048487229945663,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.8048487229945663,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.8048487229945663,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.8048487229945663,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.797835553249666,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.797835553249666,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.797835553249666,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.797835553249666,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.797835553249666,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.797835553249666,
            "reason": "Function appears to have similar functionality (80% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.calculatePatientCost",
            "score": 0.7799499419220985,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "buildHospitalOrgChart.calculatePatientCost",
            "score": 0.7799499419220985,
            "reason": "Function appears to have similar functionality (78% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Todo.if",
            "score": 0.7727156387722378,
            "reason": "Function appears to have similar functionality (77% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.if",
            "score": 0.7644192829838371,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.if",
            "score": 0.7644192829838371,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.if",
            "score": 0.7644192829838371,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.if",
            "score": 0.7644192829838371,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.if",
            "score": 0.7644192829838371,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.if",
            "score": 0.7644192829838371,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.forEach",
            "score": 0.7606696682520175,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.forEach",
            "score": 0.7606696682520175,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.forEach",
            "score": 0.7606696682520175,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.forEach",
            "score": 0.7606696682520175,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.forEach",
            "score": 0.7606696682520175,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.forEach",
            "score": 0.7606696682520175,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.buildHospitalOrgChart",
            "score": 0.7560792716544408,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "findPatient.buildHospitalOrgChart",
            "score": 0.7560792716544408,
            "reason": "Function appears to have similar functionality (76% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "Todo.handleDeleteTodo",
            "score": 0.7403172082263607,
            "reason": "Function appears to have similar functionality (74% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "factorial.sumNestedArray",
            "score": 0.7249526760825332,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.sumNestedArray",
            "score": 0.7249526760825332,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.sumNestedArray",
            "score": 0.7249526760825332,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.sumNestedArray",
            "score": 0.7249526760825332,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.sumNestedArray",
            "score": 0.7249526760825332,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Todo.handleAddTodo",
            "score": 0.7232814393850779,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "App.handleTodoAdded",
            "score": 0.7207489780336567,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/App.tsx"
          },
          {
            "similarTo": "Todo.handleToggleTodo",
            "score": 0.7190028662133026,
            "reason": "Function appears to have similar functionality (72% similar)",
            "filePath": "examples/Todo.tsx"
          },
          {
            "similarTo": "sumNestedArray.factorial",
            "score": 0.7121863487930898,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.factorial",
            "score": 0.7121863487930898,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.factorial",
            "score": 0.7121863487930898,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.factorial",
            "score": 0.7121863487930898,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.factorial",
            "score": 0.7121863487930898,
            "reason": "Function appears to have similar functionality (71% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "UseRecursiveExamples.testPromiseChain",
            "score": 0.7023339895037172,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/UseRecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.constructor",
            "score": 0.6967304471124952,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.constructor",
            "score": 0.6967304471124952,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.constructor",
            "score": 0.6967304471124952,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.constructor",
            "score": 0.6967304471124952,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.constructor",
            "score": 0.6967304471124952,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.constructor",
            "score": 0.6967304471124952,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "calculatePatientCost.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "findPatient.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "buildHospitalOrgChart.fibonacci",
            "score": 0.6956737654351405,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/DocumentAll.tsx"
          },
          {
            "similarTo": "factorial.findNodeRecursive",
            "score": 0.6953214166397821,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeRecursive",
            "score": 0.6953214166397821,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeRecursive",
            "score": 0.6953214166397821,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeRecursive",
            "score": 0.6953214166397821,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeRecursive",
            "score": 0.6953214166397821,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeRecursive",
            "score": 0.6953214166397821,
            "reason": "Function appears to have similar functionality (70% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.renderComment",
            "score": 0.6897263715307208,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.renderComment",
            "score": 0.6897263715307208,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.renderComment",
            "score": 0.6897263715307208,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.renderComment",
            "score": 0.6897263715307208,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.renderComment",
            "score": 0.6897263715307208,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.renderComment",
            "score": 0.6897263715307208,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.findNodeByValue",
            "score": 0.6888484367721514,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.findNodeByValue",
            "score": 0.6888484367721514,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.findNodeByValue",
            "score": 0.6888484367721514,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.findNodeByValue",
            "score": 0.6888484367721514,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.findNodeByValue",
            "score": 0.6888484367721514,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.findNodeByValue",
            "score": 0.6888484367721514,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.traverseDOM",
            "score": 0.6879583311277475,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.traverseDOM",
            "score": 0.6879583311277475,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.traverseDOM",
            "score": 0.6879583311277475,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.traverseDOM",
            "score": 0.6879583311277475,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.traverseDOM",
            "score": 0.6879583311277475,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.traverseDOM",
            "score": 0.6879583311277475,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.recursivePromiseChain",
            "score": 0.6873262965091594,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.recursivePromiseChain",
            "score": 0.6873262965091594,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.recursivePromiseChain",
            "score": 0.6873262965091594,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.recursivePromiseChain",
            "score": 0.6873262965091594,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.recursivePromiseChain",
            "score": 0.6873262965091594,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.recursivePromiseChain",
            "score": 0.6873262965091594,
            "reason": "Function appears to have similar functionality (69% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.683143324216927,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "Fibonacci.fibonacci",
            "score": 0.683143324216927,
            "reason": "Function appears to have similar functionality (68% similar)",
            "filePath": "examples/Fibonacci.tsx"
          },
          {
            "similarTo": "factorial.setResult",
            "score": 0.6640123263764874,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.setResult",
            "score": 0.6640123263764874,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.setResult",
            "score": 0.6640123263764874,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.setResult",
            "score": 0.6640123263764874,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.setResult",
            "score": 0.6640123263764874,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.setResult",
            "score": 0.6640123263764874,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "factorial.runRecursiveExample",
            "score": 0.660924396269221,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "sumNestedArray.runRecursiveExample",
            "score": 0.660924396269221,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "deepClone.runRecursiveExample",
            "score": 0.660924396269221,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveTreeProcessor.runRecursiveExample",
            "score": 0.660924396269221,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "CommentThread.runRecursiveExample",
            "score": 0.660924396269221,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          },
          {
            "similarTo": "RecursiveExamples.runRecursiveExample",
            "score": 0.660924396269221,
            "reason": "Function appears to have similar functionality (66% similar)",
            "filePath": "examples/RecursiveExamples.tsx"
          }
        ]
      }
    ]
  }
];