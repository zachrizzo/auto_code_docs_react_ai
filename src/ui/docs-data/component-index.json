[
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node) {\n  if (ts.isFunctionDeclaration(node) && node.name) {\n    console.log('Function found:', node.name.text);\n    console.log('Using getText():', node.getText(sourceFile));\n    console.log('---');\n  } else if (ts.isVariableStatement(node)) {\n    for (const declaration of node.declarationList.declarations) {\n      if (declaration.name && ts.isIdentifier(declaration.name) && declaration.initializer) {\n        console.log('Variable found:', declaration.name.text);\n        console.log('Using parent.parent.getText():', declaration.parent.parent.getText(sourceFile));\n        console.log('---');\n      }\n    }\n  }\n  \n  ts.forEachChild(node, visit);\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-debug.js",
    "slug": "test-debug_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getAllEntities",
    "kind": "function",
    "code": "async function getAllEntities() {\n    const indexFile = await fs.readFile(path.join(DOCS_PATH, 'component-index.json'), 'utf-8');\n    const indexData = JSON.parse(indexFile);\n    \n    const entities = await Promise.all(indexData.map(async (item) => {\n        try {\n            const entityFile = await fs.readFile(path.join(DOCS_PATH, `${item.slug}.json`), 'utf-8');\n            return JSON.parse(entityFile);\n        } catch (e) {\n            return null; // Handle cases where a file might be missing\n        }\n    }));\n    return entities.filter(e => e !== null);\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/mcp-server.js",
    "slug": "mcp-server_getallentities",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "runCommand",
    "kind": "function",
    "code": "function runCommand(command, cwd = process.cwd()) {\n  console.log(`Running: ${command}`);\n  try {\n    execSync(command, { stdio: 'inherit', cwd });\n    return true;\n  } catch (error) {\n    console.error(`Error running command: ${command}`);\n    console.error(error.message);\n    return false;\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/build-js.js",
    "slug": "build-js_runcommand",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "build",
    "kind": "function",
    "code": "async function build() {\n  try {\n    console.log('Transpiling TypeScript files using tsc...');\n    // Ensure dist directory is clean\n    if (fs.existsSync('dist')) {\n      fs.rmSync('dist', { recursive: true, force: true });\n    }\n    // Run the TypeScript compiler\n    runCommand('npx tsc --project tsconfig.json');\n\n    // Copy package.json to dist\n    console.log('Copying package.json to dist...');\n    fs.copySync('package.json', 'dist/package.json');\n\n    // Make the CLI executable\n    console.log('Making CLI executable...');\n    const cliPath = path.join(process.cwd(), 'dist/cli/index.js');\n    if (fs.existsSync(cliPath)) {\n      const content = fs.readFileSync(cliPath, 'utf8');\n      if (!content.startsWith('#!/usr/bin/env node')) {\n        fs.writeFileSync(cliPath, '#!/usr/bin/env node\\n' + content);\n      }\n      fs.chmodSync(cliPath, '755');\n    }\n\n    console.log('Build completed successfully!');\n    return true;\n  } catch (error) {\n    console.error('Build failed:', error);\n    return false;\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/build-js.js",
    "slug": "build-js_build",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "generateUniqueSlug",
    "kind": "function",
    "code": "function generateUniqueSlug(componentName: string, filePath: string): string {\n  // For generateDocUI, we need to extract root directory from the file path\n  // This is a simplified version since we don't have rootDir readily available\n  const relativePath = filePath.replace(/^.*[\\/\\\\](src[\\/\\\\].*?)$/, '$1') || filePath;\n  return `${relativePath.replace(/[\\/\\\\]/g, '_').replace(/\\.(tsx?|jsx?)$/, '')}_${componentName}`.toLowerCase().replace(/\\s+/g, \"-\");\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/index.ts",
    "slug": "src_index_generateuniqueslug",
    "imports": [
      "AiDescriptionGenerator"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_index_generateuniqueslug",
        "target": "aidescriptiongenerator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 14,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 14,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "generateDocUI",
    "kind": "function",
    "code": "export async function generateDocUI(components: any[], options: any = {}) {\n  const {\n    title = \"React Component Documentation\",\n    description = \"Auto-generated documentation for React components\",\n    theme = \"light\",\n    outputDir = path.join(process.cwd(), \"docs\"),\n    showCode = true,\n    showMethods = true,\n    showSimilarity = true,\n  } = options;\n\n  // Write component data directly to the specified outputDir\n  // rather than creating a nested docs-data folder\n  const docsDataDir = outputDir;\n\n  // Clear the output directory to prevent duplicates from previous runs\n  if (await fs.pathExists(docsDataDir)) {\n    await fs.remove(docsDataDir);\n  }\n  // Ensure the output directory exists (it will be recreated if removed)\n  await fs.ensureDir(docsDataDir);\n\n  // Create component index file\n  const componentIndex = components.map((comp) => ({\n    name: comp.name,\n    description: comp.description || \"\",\n    filePath: comp.filePath || \"\",\n    methodCount: comp.methods ? comp.methods.length : 0,\n    slug: comp.slug || generateUniqueSlug(comp.name, comp.filePath || \"\"),\n  }));\n\n  await fs.writeJson(\n    path.join(docsDataDir, \"component-index.json\"),\n    componentIndex,\n    { spaces: 2 }\n  );\n\n  // Write individual component files\n  for (const component of components) {\n    const componentData = {\n      ...component,\n      slug: component.slug || generateUniqueSlug(component.name, component.filePath || \"\"),\n    };\n\n    await fs.writeJson(\n      path.join(docsDataDir, `${componentData.slug}.json`),\n      componentData,\n      { spaces: 2 }\n    );\n  }\n\n  // Create config file\n  const configData = {\n    title,\n    description,\n    theme,\n    showCode,\n    showMethods,\n    showSimilarity,\n    generatedAt: new Date().toISOString(),\n  };\n\n  await fs.writeJson(path.join(docsDataDir, \"config.json\"), configData, {\n    spaces: 2,\n  });\n\n  // Create a URL file that points to the documentation\n  const docsUrl = `http://localhost:3000/docs`;\n  await fs.writeFile(path.join(process.cwd(), \"docs-url.txt\"), docsUrl);\n\n  console.log(`Documentation data generated at: ${outputDir}`);\n  return outputDir;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/index.ts",
    "slug": "src_index_generatedocui",
    "imports": [
      "AiDescriptionGenerator"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_index_generatedocui",
        "target": "aidescriptiongenerator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 14,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 14,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "diffLines",
    "kind": "function",
    "code": "export function diffLines(oldStr: string, newStr: string): Change[];",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/types/diff.d.ts",
    "slug": "test-docs-project_types_diff.d_difflines",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "diffWords",
    "kind": "function",
    "code": "export function diffWords(oldStr: string, newStr: string): Change[];",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/types/diff.d.ts",
    "slug": "test-docs-project_types_diff.d_diffwords",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "diffChars",
    "kind": "function",
    "code": "export function diffChars(oldStr: string, newStr: string): Change[];",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/types/diff.d.ts",
    "slug": "test-docs-project_types_diff.d_diffchars",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "cn",
    "kind": "function",
    "code": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/lib/utils.ts",
    "slug": "test-docs-project_lib_utils_cn",
    "imports": [
      "ClassValue"
    ],
    "references": [],
    "relationships": [
      {
        "source": "test-docs-project_lib_utils_cn",
        "target": "classvalue",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "ThemeProvider",
    "kind": "component",
    "code": "export function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/theme-provider.tsx",
    "slug": "test-docs-project_components_theme-provider_themeprovider",
    "imports": [
      "NextThemesProvider",
      "ReactNode"
    ],
    "references": [
      "NextThemesProvider"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_theme-provider_themeprovider",
        "target": "nextthemesprovider",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_theme-provider_themeprovider",
        "target": "reactnode",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "SimilarityList",
    "kind": "component",
    "code": "export function SimilarityList({ threshold, preloadedComponents }: SimilarityListProps) {\n  const [comparisonOpen, setComparisonOpen] = useState(false)\n  const [selectedPair, setSelectedPair] = useState<{\n    component1: { name: string; code: string; filePath: string }\n    component2: { name: string; code: string; filePath: string }\n    similarity: number\n  } | null>(null)\n  const [components, setComponents] = useState<ComponentData[]>(preloadedComponents || [])\n  const [similarComponents, setSimilarComponents] = useState<{\n    pair: string[]\n    similarity: number\n    reason: string\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }[]>([])\n  const [loading, setLoading] = useState(!preloadedComponents)\n  const [error, setError] = useState<string | null>(null)\n\n  // Example method that demonstrates the functionality\n  // This is intentionally similar to methods in other components for testing\n  /* function zach(hi: string) {\n    const z = hi + hi\n    console.log(z)\n  } */\n  \n  // Function to generate synthetic similarity data for demonstration purposes\n  function generateSyntheticSimilarityData() {\n    console.log('Generating synthetic similarity data for', components.length, 'components');\n    \n    // Only proceed if we have at least 2 components\n    if (components.length < 2) return;\n    \n    // Create a copy of the components array\n    const updatedComponents = [...components];\n    \n    // For each component, add synthetic similarity warnings\n    for (let i = 0; i < updatedComponents.length; i++) {\n      const component = updatedComponents[i];\n      \n      // Add methods array if it doesn't exist\n      if (!component.methods) {\n        component.methods = [];\n      }\n      \n      // If no methods, create a dummy method\n      if (component.methods.length === 0) {\n        component.methods.push({\n          name: 'render',\n          similarityWarnings: []\n        });\n      }\n      \n      // For each method, find a random other component and create a similarity warning\n      component.methods.forEach(method => {\n        // Initialize similarityWarnings array if it doesn't exist\n        if (!method.similarityWarnings) {\n          method.similarityWarnings = [];\n        }\n        \n        // Find a different component to compare with\n        for (let j = 0; j < updatedComponents.length; j++) {\n          if (i === j) continue; // Skip self\n          \n          const otherComponent = updatedComponents[j];\n          \n          // Generate a random similarity score between 70% and 95%\n          const similarityScore = 70 + Math.floor(Math.random() * 25);\n          \n          // Only add if above threshold\n          if (similarityScore >= threshold) {\n            // Add a similarity warning\n            method.similarityWarnings.push({\n              similarTo: otherComponent.name,\n              score: similarityScore,\n              reason: `Similar implementation pattern to ${otherComponent.name}`,\n              filePath: otherComponent.filePath || `src/components/${otherComponent.name}.tsx`,\n              code: '// Example similar code\\nfunction example() {\\n  // Similar logic\\n}'\n            });\n            \n            // Also add a method-level similarity\n            if (otherComponent.methods && otherComponent.methods.length > 0) {\n              const otherMethod = otherComponent.methods[0];\n              method.similarityWarnings.push({\n                similarTo: `${otherComponent.name}.${otherMethod.name}`,\n                score: similarityScore - 5,\n                reason: `Similar implementation to ${otherMethod.name} in ${otherComponent.name}`,\n                filePath: otherComponent.filePath || `src/components/${otherComponent.name}.tsx`,\n                code: '// Example method-level similar code\\nfunction specificMethod() {\\n  // Similar logic\\n}'\n              });\n            }\n            \n            // Only add one similarity per component pair to avoid too many\n            break;\n          }\n        }\n      });\n    }\n    \n    // Update the components state with the synthetic data\n    setComponents(updatedComponents);\n    console.log('Synthetic similarity data generated successfully');\n  }\n\n  // Fetch component data (only if no preloaded data)\n  useEffect(() => {\n    if (preloadedComponents) {\n      console.log('Using preloaded component data:', preloadedComponents.length);\n      setLoading(false);\n      return;\n    }\n\n    async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              \n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }, [preloadedComponents])\n\n  // Process similarity data whenever components or threshold changes\n  useEffect(() => {\n    if (components.length === 0) return\n\n    console.log('Processing similarity data for', components.length, 'components at threshold', threshold)\n    \n    // Check if we have any similarity warnings in the data\n    const hasSimilarityData = components.some(comp => \n      (comp.similarityWarnings && comp.similarityWarnings.length > 0) ||\n      (comp.methods && comp.methods.some(m => m.similarityWarnings && m.similarityWarnings.length > 0))\n    );\n    \n    // If no similarity data is found, generate synthetic similarity data for demo purposes\n    if (!hasSimilarityData) {\n      generateSyntheticSimilarityData();\n    }\n\n    const similarPairs: {\n      pair: string[]\n      similarity: number\n      reason: string\n      component1: ComponentData\n      component2: ComponentData\n      isMethodLevel?: boolean\n      method1?: string\n      method2?: string\n    }[] = []\n\n    // Track processed pairs to avoid duplicates AND store the highest score found\n    const processedPairs = new Map<string, {\n      similarity: number;\n      reason: string;\n      component1: ComponentData;\n      component2: ComponentData;\n      isMethodLevel?: boolean;\n      method1?: string;\n      method2?: string;\n    }>();\n\n    // Count similarity warnings for debugging\n    let totalWarnings = 0;\n    let crossComponentWarnings = 0;\n    let filteredWarnings = 0;\n\n    // Find components with similarity warnings\n    components.forEach(component => {\n      // Log each component being processed\n      console.log(`Processing component: ${component.name}, has warnings: ${component.similarityWarnings?.length || 0}, has methods: ${component.methods?.length || 0}`);\n\n      // Check top-level similarity warnings\n      if (component.similarityWarnings && component.similarityWarnings.length > 0) {\n        totalWarnings += component.similarityWarnings.length;\n        console.log(`Processing ${component.similarityWarnings.length} top-level warnings for ${component.name}`);\n        processSimilarityWarnings(component, component.similarityWarnings, false)\n      }\n\n      // Check method-level similarity warnings\n      if (component.methods && component.methods.length > 0) {\n        component.methods.forEach(method => {\n          if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n            console.log(`Processing ${method.similarityWarnings.length} warnings for method ${method.name} in ${component.name}`);\n            totalWarnings += method.similarityWarnings.length;\n            processSimilarityWarnings(component, method.similarityWarnings, true, method.name)\n          }\n        })\n      }\n    })\n\n    function processSimilarityWarnings(\n      component: ComponentData,\n      warnings: SimilarityWarning[],\n      isMethodLevel: boolean = false,\n      methodName?: string\n    ) {\n      warnings.forEach(warning => {\n        // Convert similarity score from 0-1 to percentage if needed\n        const similarityPercent = warning.score > 1 // Handles if score is already %, unlikely here\n          ? warning.score\n          : Math.round(warning.score * 100) // Converts 0-1 score to %\n\n        // Skip if below threshold\n        if (similarityPercent < threshold) {\n          filteredWarnings++;\n          return;\n        }\n\n        // Extract component name and method name from similarTo (format could be ComponentName or ComponentName.methodName)\n        const parts = warning.similarTo.split('.')\n        const similarCompName = parts[0]\n        const similarMethodName = parts.length > 1 ? parts[1] : undefined\n\n        // Find the referenced component\n        const similarComp = components.find(c => c.name === similarCompName)\n\n        // Include both cross-component and same-component method-level similarities\n        // Only filter out non-method level similarities within the same component\n        if (similarComp && (component.name !== similarComp.name || (isMethodLevel && methodName && similarMethodName))) {\n          if (component.name !== similarComp.name) {\n            crossComponentWarnings++;\n          }\n\n          // Create a unique key for this pair\n          // For method level, include method names in the key to avoid duplication but ensure sort order\n          // to avoid duplicates like A.method1 -> B.method2 and B.method2 -> A.method1\n          const pairKey = isMethodLevel\n            ? [\n              `${component.name}.${methodName}`,\n              `${similarComp.name}.${similarMethodName}`\n            ].sort().join('_')\n            : [component.name, similarComp.name].sort().join('_')\n\n          // Check if we've already seen this pair\n          const existingPair = processedPairs.get(pairKey);\n          if (existingPair) {\n            // If the new similarity is higher, update the entry\n            if (similarityPercent > existingPair.similarity) {\n              processedPairs.set(pairKey, {\n                similarity: similarityPercent,\n                reason: warning.reason, // Update reason as well\n                component1: component, // Keep component references\n                component2: similarComp,\n                isMethodLevel,\n                method1: methodName,\n                method2: similarMethodName\n              });\n            }\n          } else {\n            // Add the new pair\n            processedPairs.set(pairKey, {\n              similarity: similarityPercent,\n              reason: warning.reason,\n              component1: component,\n              component2: similarComp,\n              isMethodLevel,\n              method1: methodName,\n              method2: similarMethodName\n            });\n          }\n        }\n      })\n    }\n\n    // Convert the map values to an array\n    processedPairs.forEach((value, key) => {\n      // For method level similarities, need to handle the key differently\n      let name1, name2;\n      if (value.isMethodLevel) {\n        const [part1, part2] = key.split('_');\n        name1 = part1.split('.')[0];\n        name2 = part2.split('.')[0];\n      } else {\n        [name1, name2] = key.split('_');\n      }\n\n      // Allow pairs from the same component if they are method level similarities\n      if ((name1 === name2 && !value.isMethodLevel)) {\n        console.warn(`Skipping non-method same-component similarity pair: ${key}`);\n        return;\n      }\n\n      // Find the actual component data objects based on names stored in the key\n      const comp1Data = components.find(c => c.name === name1);\n      const comp2Data = components.find(c => c.name === name2);\n\n      // Ensure both components were found before pushing\n      if (comp1Data && comp2Data) {\n        similarPairs.push({\n          pair: [name1, name2],\n          similarity: value.similarity,\n          reason: value.isMethodLevel\n            ? `Method ${value.method1} is similar to ${value.method2}: ${value.reason}`\n            : value.reason,\n          component1: comp1Data,\n          component2: comp2Data,\n          isMethodLevel: value.isMethodLevel,\n          method1: value.method1,\n          method2: value.method2\n        });\n      } else {\n        console.warn(`Could not find component data for pair key: ${key}`);\n      }\n    });\n\n    // Sort by similarity (highest first)\n    similarPairs.sort((a, b) => b.similarity - a.similarity)\n    console.log('Similarity statistics:', {\n      totalWarnings,\n      crossComponentWarnings,\n      filteredWarnings,\n      processedPairs: processedPairs.size,\n      finalPairs: similarPairs.length\n    });\n\n    // Log each pair found for debugging\n    if (similarPairs.length > 0) {\n      console.log('Found similarity pairs:');\n      similarPairs.forEach((pair, index) => {\n        console.log(`Pair ${index + 1}: ${pair.component1.name}${pair.isMethodLevel ? `.${pair.method1}` : ''} -> ${pair.component2.name}${pair.isMethodLevel ? `.${pair.method2}` : ''} (${pair.similarity}%)`);\n      });\n    } else {\n      console.warn('No similarity pairs were found after processing. Check if threshold is too high or data format is correct.');\n    }\n\n    setSimilarComponents(similarPairs)\n\n    // Preload component codes for faster comparison\n    similarPairs.forEach(pair => {\n      // Helper function to fetch code\n      const fetchComponentCode = async (component: ComponentData) => {\n        if (component.code) return;\n\n        try {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n          component.code = data.sourceCode || data.code || `// No code available for ${component.name}`\n        } catch (error) {\n          console.error(`Error prefetching code for ${component.name}:`, error)\n        }\n      }\n\n      // Fetch codes in parallel\n      Promise.all([\n        fetchComponentCode(pair.component1),\n        fetchComponentCode(pair.component2)\n      ]);\n    });\n  }, [components, threshold])\n\n  const handleCompare = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    // Fetch code for components if not already available\n    const fetchComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }\n\n    // Set up the comparison\n    Promise.all([\n      fetchComponentCode(item.component1, item.isMethodLevel ? item.method1 : undefined),\n      fetchComponentCode(item.component2, item.isMethodLevel ? item.method2 : undefined)\n    ]).then(([code1, code2]) => {\n      // Perform direct code comparison to catch identical components\n      // This is a client-side fallback to ensure identical components show as 100% similar\n      let similarity = item.similarity;\n\n      if (code1 && code2) {\n        // Normalize the code by removing whitespace variations\n        const normalizedCode1 = code1.trim().replace(/\\s+/g, ' ');\n        const normalizedCode2 = code2.trim().replace(/\\s+/g, ' ');\n\n        // If codes are identical, set similarity to 100%\n        if (normalizedCode1 === normalizedCode2) {\n          similarity = 100;\n          console.log(`Components detected as identical via client-side check: ${item.component1.name}${item.isMethodLevel ? `.${item.method1}` : ''} and ${item.component2.name}${item.isMethodLevel ? `.${item.method2}` : ''}`);\n        }\n      }\n\n      setSelectedPair({\n        component1: {\n          name: item.component1.name,\n          code: code1,\n          filePath: item.component1.filePath || `components/${item.component1.name}`,\n        },\n        component2: {\n          name: item.component2.name,\n          code: code2,\n          filePath: item.component2.filePath || `components/${item.component2.name}`,\n        },\n        similarity: similarity,\n      })\n      setComparisonOpen(true)\n    })\n  }\n\n  if (loading) {\n    return (\n      <div className=\"text-center py-16 bg-white dark:bg-slate-900 rounded-xl shadow-sm\">\n        <p className=\"text-lg\">Loading similarity data...</p>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-16 bg-white dark:bg-slate-900 rounded-xl shadow-sm border border-red-300\">\n        <p className=\"text-lg text-red-600\">{error}</p>\n        <p className=\"text-sm text-muted-foreground mt-2\">Check console for more details.</p>\n      </div>\n    )\n  }\n\n  if (similarComponents.length === 0) {\n    return (\n      <div className=\"text-center py-16 bg-white dark:bg-slate-900 rounded-xl shadow-sm\">\n        <p className=\"text-lg text-muted-foreground\">No similar components found at {threshold}% threshold.</p>\n        <p className=\"text-sm text-muted-foreground mt-2\">Try lowering the threshold to see more results.</p>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"space-y-8\">\n        {similarComponents.map((item, index) => (\n          <div key={index} className=\"bg-white dark:bg-slate-900 rounded-xl shadow-sm overflow-hidden\">\n            <div className=\"p-6 border-b border-slate-100 dark:border-slate-800\">\n              <div className=\"flex items-center gap-3 flex-wrap\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-lg font-medium\">{item.pair[0]}</span>\n                  {item.isMethodLevel && (\n                    <span className=\"text-sm text-muted-foreground\">.{item.method1}</span>\n                  )}\n                </div>\n                <ArrowRightIcon className=\"h-4 w-4 text-muted-foreground\" />\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-lg font-medium\">{item.pair[1]}</span>\n                  {item.isMethodLevel && (\n                    <span className=\"text-sm text-muted-foreground\">.{item.method2}</span>\n                  )}\n                </div>\n                <Badge\n                  className={`ml-2 ${item.component1.code && item.component2.code &&\n                    item.component1.code.trim().replace(/\\s+/g, ' ') === item.component2.code.trim().replace(/\\s+/g, ' ')\n                    ? \"bg-green-50 text-green-700 border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800\"\n                    : item.similarity >= 80\n                      ? \"bg-red-50 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800\"\n                      : \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n                    }`}\n                >\n                  {item.component1.code && item.component2.code &&\n                    item.component1.code.trim().replace(/\\s+/g, ' ') === item.component2.code.trim().replace(/\\s+/g, ' ')\n                    ? \"Identical Components\"\n                    : `${item.similarity}% Similar`}\n                </Badge>\n                {item.isMethodLevel && (\n                  <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n                    Method Level\n                  </Badge>\n                )}\n              </div>\n            </div>\n            <div className=\"p-6\">\n              <p className=\"mb-6 text-lg\">{item.reason}</p>\n              <div className=\"flex gap-3 flex-wrap\">\n                <Button asChild variant=\"outline\" size=\"sm\">\n                  <Link href={`/docs/${item.component1.slug || item.pair[0].toLowerCase()}`}>View {item.pair[0]}</Link>\n                </Button>\n                <Button asChild variant=\"outline\" size=\"sm\">\n                  <Link href={`/docs/${item.component2.slug || item.pair[1].toLowerCase()}`}>View {item.pair[1]}</Link>\n                </Button>\n                <Button\n                  size=\"sm\"\n                  className=\"bg-gradient-to-r from-violet-500 to-indigo-600 hover:from-violet-600 hover:to-indigo-700\"\n                  onClick={() => handleCompare(item)}\n                >\n                  Compare Components\n                </Button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {selectedPair && (\n        <ComparisonModal\n          key={`comparison-${selectedPair.component1.name}-${selectedPair.component2.name}`}\n          isOpen={comparisonOpen}\n          onClose={() => setComparisonOpen(false)}\n          component1={{\n            name: selectedPair.component1.name,\n            code: selectedPair.component1.code,\n            filePath: selectedPair.component1.filePath,\n          }}\n          component2={{\n            name: selectedPair.component2.name,\n            code: selectedPair.component2.code,\n            filePath: selectedPair.component2.filePath,\n          }}\n          similarityScore={selectedPair.similarity}\n          isMethodComparison={!!similarComponents.find(item =>\n            item.isMethodLevel &&\n            item.component1.name === selectedPair.component1.name &&\n            item.component2.name === selectedPair.component2.name\n          )}\n          methodName={similarComponents.find(item =>\n            item.isMethodLevel &&\n            item.component1.name === selectedPair.component1.name &&\n            item.component2.name === selectedPair.component2.name\n          )?.method1}\n        />\n      )}\n    </>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx",
    "slug": "test-docs-project_components_similarity-list_similaritylist",
    "imports": [
      "Badge",
      "Button",
      "Link",
      "ComparisonModal",
      "ArrowRightIcon"
    ],
    "references": [
      "ArrowRightIcon",
      "Badge",
      "Button",
      "Link",
      "ComparisonModal"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_similarity-list_similaritylist",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_similarity-list_similaritylist",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_similarity-list_similaritylist",
        "target": "link",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_similarity-list_similaritylist",
        "target": "comparisonmodal",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_similarity-list_similaritylist",
        "target": "arrowrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "[-`${component.name}.${methodname}`,-`${similarcomp.name}.${similarmethodname}`-].sort()",
        "type": "uses",
        "weight": 2,
        "context": "calls join",
        "sourceLine": 383,
        "targetFunction": "join"
      },
      {
        "target": "[-`${component.name}.${methodname}`,-`${similarcomp.name}.${similarmethodname}`-]",
        "type": "uses",
        "weight": 2,
        "context": "calls sort",
        "sourceLine": 383,
        "targetFunction": "sort"
      },
      {
        "target": "[component.name,-similarcomp.name].sort()",
        "type": "uses",
        "weight": 2,
        "context": "calls join",
        "sourceLine": 387,
        "targetFunction": "join"
      },
      {
        "target": "[component.name,-similarcomp.name]",
        "type": "uses",
        "weight": 2,
        "context": "calls sort",
        "sourceLine": 387,
        "targetFunction": "sort"
      },
      {
        "target": "promise.all([-fetchcomponentcode(item.component1,-item.ismethodlevel-?-item.method1-:-undefined),-fetchcomponentcode(item.component2,-item.ismethodlevel-?-item.method2-:-undefined)-])",
        "type": "uses",
        "weight": 2,
        "context": "calls then",
        "sourceLine": 547,
        "targetFunction": "then"
      }
    ],
    "methods": [
      {
        "name": "generateSyntheticSimilarityData",
        "code": "function generateSyntheticSimilarityData() {\n    console.log('Generating synthetic similarity data for', components.length, 'components');\n    \n    // Only proceed if we have at least 2 components\n    if (components.length < 2) return;\n    \n    // Create a copy of the components array\n    const updatedComponents = [...components];\n    \n    // For each component, add synthetic similarity warnings\n    for (let i = 0; i < updatedComponents.length; i++) {\n      const component = updatedComponents[i];\n      \n      // Add methods array if it doesn't exist\n      if (!component.methods) {\n        component.methods = [];\n      }\n      \n      // If no methods, create a dummy method\n      if (component.methods.length === 0) {\n        component.methods.push({\n          name: 'render',\n          similarityWarnings: []\n        });\n      }\n      \n      // For each method, find a random other component and create a similarity warning\n      component.methods.forEach(method => {\n        // Initialize similarityWarnings array if it doesn't exist\n        if (!method.similarityWarnings) {\n          method.similarityWarnings = [];\n        }\n        \n        // Find a different component to compare with\n        for (let j = 0; j < updatedComponents.length; j++) {\n          if (i === j) continue; // Skip self\n          \n          const otherComponent = updatedComponents[j];\n          \n          // Generate a random similarity score between 70% and 95%\n          const similarityScore = 70 + Math.floor(Math.random() * 25);\n          \n          // Only add if above threshold\n          if (similarityScore >= threshold) {\n            // Add a similarity warning\n            method.similarityWarnings.push({\n              similarTo: otherComponent.name,\n              score: similarityScore,\n              reason: `Similar implementation pattern to ${otherComponent.name}`,\n              filePath: otherComponent.filePath || `src/components/${otherComponent.name}.tsx`,\n              code: '// Example similar code\\nfunction example() {\\n  // Similar logic\\n}'\n            });\n            \n            // Also add a method-level similarity\n            if (otherComponent.methods && otherComponent.methods.length > 0) {\n              const otherMethod = otherComponent.methods[0];\n              method.similarityWarnings.push({\n                similarTo: `${otherComponent.name}.${otherMethod.name}`,\n                score: similarityScore - 5,\n                reason: `Similar implementation to ${otherMethod.name} in ${otherComponent.name}`,\n                filePath: otherComponent.filePath || `src/components/${otherComponent.name}.tsx`,\n                code: '// Example method-level similar code\\nfunction specificMethod() {\\n  // Similar logic\\n}'\n              });\n            }\n            \n            // Only add one similarity per component pair to avoid too many\n            break;\n          }\n        }\n      });\n    }\n    \n    // Update the components state with the synthetic data\n    setComponents(updatedComponents);\n    console.log('Synthetic similarity data generated successfully');\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "handleCompare",
        "code": "const handleCompare = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    // Fetch code for components if not already available\n    const fetchComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }\n\n    // Set up the comparison\n    Promise.all([\n      fetchComponentCode(item.component1, item.isMethodLevel ? item.method1 : undefined),\n      fetchComponentCode(item.component2, item.isMethodLevel ? item.method2 : undefined)\n    ]).then(([code1, code2]) => {\n      // Perform direct code comparison to catch identical components\n      // This is a client-side fallback to ensure identical components show as 100% similar\n      let similarity = item.similarity;\n\n      if (code1 && code2) {\n        // Normalize the code by removing whitespace variations\n        const normalizedCode1 = code1.trim().replace(/\\s+/g, ' ');\n        const normalizedCode2 = code2.trim().replace(/\\s+/g, ' ');\n\n        // If codes are identical, set similarity to 100%\n        if (normalizedCode1 === normalizedCode2) {\n          similarity = 100;\n          console.log(`Components detected as identical via client-side check: ${item.component1.name}${item.isMethodLevel ? `.${item.method1}` : ''} and ${item.component2.name}${item.isMethodLevel ? `.${item.method2}` : ''}`);\n        }\n      }\n\n      setSelectedPair({\n        component1: {\n          name: item.component1.name,\n          code: code1,\n          filePath: item.component1.filePath || `components/${item.component1.name}`,\n        },\n        component2: {\n          name: item.component2.name,\n          code: code2,\n          filePath: item.component2.filePath || `components/${item.component2.name}`,\n        },\n        similarity: similarity,\n      })\n      setComparisonOpen(true)\n    })\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "item",
            "type": "{\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "generateSyntheticSimilarityData",
    "kind": "function",
    "code": "function generateSyntheticSimilarityData() {\n    console.log('Generating synthetic similarity data for', components.length, 'components');\n    \n    // Only proceed if we have at least 2 components\n    if (components.length < 2) return;\n    \n    // Create a copy of the components array\n    const updatedComponents = [...components];\n    \n    // For each component, add synthetic similarity warnings\n    for (let i = 0; i < updatedComponents.length; i++) {\n      const component = updatedComponents[i];\n      \n      // Add methods array if it doesn't exist\n      if (!component.methods) {\n        component.methods = [];\n      }\n      \n      // If no methods, create a dummy method\n      if (component.methods.length === 0) {\n        component.methods.push({\n          name: 'render',\n          similarityWarnings: []\n        });\n      }\n      \n      // For each method, find a random other component and create a similarity warning\n      component.methods.forEach(method => {\n        // Initialize similarityWarnings array if it doesn't exist\n        if (!method.similarityWarnings) {\n          method.similarityWarnings = [];\n        }\n        \n        // Find a different component to compare with\n        for (let j = 0; j < updatedComponents.length; j++) {\n          if (i === j) continue; // Skip self\n          \n          const otherComponent = updatedComponents[j];\n          \n          // Generate a random similarity score between 70% and 95%\n          const similarityScore = 70 + Math.floor(Math.random() * 25);\n          \n          // Only add if above threshold\n          if (similarityScore >= threshold) {\n            // Add a similarity warning\n            method.similarityWarnings.push({\n              similarTo: otherComponent.name,\n              score: similarityScore,\n              reason: `Similar implementation pattern to ${otherComponent.name}`,\n              filePath: otherComponent.filePath || `src/components/${otherComponent.name}.tsx`,\n              code: '// Example similar code\\nfunction example() {\\n  // Similar logic\\n}'\n            });\n            \n            // Also add a method-level similarity\n            if (otherComponent.methods && otherComponent.methods.length > 0) {\n              const otherMethod = otherComponent.methods[0];\n              method.similarityWarnings.push({\n                similarTo: `${otherComponent.name}.${otherMethod.name}`,\n                score: similarityScore - 5,\n                reason: `Similar implementation to ${otherMethod.name} in ${otherComponent.name}`,\n                filePath: otherComponent.filePath || `src/components/${otherComponent.name}.tsx`,\n                code: '// Example method-level similar code\\nfunction specificMethod() {\\n  // Similar logic\\n}'\n              });\n            }\n            \n            // Only add one similarity per component pair to avoid too many\n            break;\n          }\n        }\n      });\n    }\n    \n    // Update the components state with the synthetic data\n    setComponents(updatedComponents);\n    console.log('Synthetic similarity data generated successfully');\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx",
    "slug": "test-docs-project_components_similarity-list_generatesyntheticsimilaritydata",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "fetchComponents",
    "kind": "function",
    "code": "async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              \n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx",
    "slug": "test-docs-project_components_similarity-list_fetchcomponents",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "processSimilarityWarnings",
    "kind": "function",
    "code": "function processSimilarityWarnings(\n      component: ComponentData,\n      warnings: SimilarityWarning[],\n      isMethodLevel: boolean = false,\n      methodName?: string\n    ) {\n      warnings.forEach(warning => {\n        // Convert similarity score from 0-1 to percentage if needed\n        const similarityPercent = warning.score > 1 // Handles if score is already %, unlikely here\n          ? warning.score\n          : Math.round(warning.score * 100) // Converts 0-1 score to %\n\n        // Skip if below threshold\n        if (similarityPercent < threshold) {\n          filteredWarnings++;\n          return;\n        }\n\n        // Extract component name and method name from similarTo (format could be ComponentName or ComponentName.methodName)\n        const parts = warning.similarTo.split('.')\n        const similarCompName = parts[0]\n        const similarMethodName = parts.length > 1 ? parts[1] : undefined\n\n        // Find the referenced component\n        const similarComp = components.find(c => c.name === similarCompName)\n\n        // Include both cross-component and same-component method-level similarities\n        // Only filter out non-method level similarities within the same component\n        if (similarComp && (component.name !== similarComp.name || (isMethodLevel && methodName && similarMethodName))) {\n          if (component.name !== similarComp.name) {\n            crossComponentWarnings++;\n          }\n\n          // Create a unique key for this pair\n          // For method level, include method names in the key to avoid duplication but ensure sort order\n          // to avoid duplicates like A.method1 -> B.method2 and B.method2 -> A.method1\n          const pairKey = isMethodLevel\n            ? [\n              `${component.name}.${methodName}`,\n              `${similarComp.name}.${similarMethodName}`\n            ].sort().join('_')\n            : [component.name, similarComp.name].sort().join('_')\n\n          // Check if we've already seen this pair\n          const existingPair = processedPairs.get(pairKey);\n          if (existingPair) {\n            // If the new similarity is higher, update the entry\n            if (similarityPercent > existingPair.similarity) {\n              processedPairs.set(pairKey, {\n                similarity: similarityPercent,\n                reason: warning.reason, // Update reason as well\n                component1: component, // Keep component references\n                component2: similarComp,\n                isMethodLevel,\n                method1: methodName,\n                method2: similarMethodName\n              });\n            }\n          } else {\n            // Add the new pair\n            processedPairs.set(pairKey, {\n              similarity: similarityPercent,\n              reason: warning.reason,\n              component1: component,\n              component2: similarComp,\n              isMethodLevel,\n              method1: methodName,\n              method2: similarMethodName\n            });\n          }\n        }\n      })\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx",
    "slug": "test-docs-project_components_similarity-list_processsimilaritywarnings",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "fetchComponentCode",
    "kind": "function",
    "code": "const fetchComponentCode = async (component: ComponentData) => {\n        if (component.code) return;\n\n        try {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n          component.code = data.sourceCode || data.code || `// No code available for ${component.name}`\n        } catch (error) {\n          console.error(`Error prefetching code for ${component.name}:`, error)\n        }\n      }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx",
    "slug": "test-docs-project_components_similarity-list_fetchcomponentcode",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleCompare",
    "kind": "function",
    "code": "const handleCompare = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    // Fetch code for components if not already available\n    const fetchComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }\n\n    // Set up the comparison\n    Promise.all([\n      fetchComponentCode(item.component1, item.isMethodLevel ? item.method1 : undefined),\n      fetchComponentCode(item.component2, item.isMethodLevel ? item.method2 : undefined)\n    ]).then(([code1, code2]) => {\n      // Perform direct code comparison to catch identical components\n      // This is a client-side fallback to ensure identical components show as 100% similar\n      let similarity = item.similarity;\n\n      if (code1 && code2) {\n        // Normalize the code by removing whitespace variations\n        const normalizedCode1 = code1.trim().replace(/\\s+/g, ' ');\n        const normalizedCode2 = code2.trim().replace(/\\s+/g, ' ');\n\n        // If codes are identical, set similarity to 100%\n        if (normalizedCode1 === normalizedCode2) {\n          similarity = 100;\n          console.log(`Components detected as identical via client-side check: ${item.component1.name}${item.isMethodLevel ? `.${item.method1}` : ''} and ${item.component2.name}${item.isMethodLevel ? `.${item.method2}` : ''}`);\n        }\n      }\n\n      setSelectedPair({\n        component1: {\n          name: item.component1.name,\n          code: code1,\n          filePath: item.component1.filePath || `components/${item.component1.name}`,\n        },\n        component2: {\n          name: item.component2.name,\n          code: code2,\n          filePath: item.component2.filePath || `components/${item.component2.name}`,\n        },\n        similarity: similarity,\n      })\n      setComparisonOpen(true)\n    })\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx",
    "slug": "test-docs-project_components_similarity-list_handlecompare",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "fetchComponentCode",
        "code": "const fetchComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }",
        "returnType": "void",
        "params": [
          {
            "name": "component",
            "type": "ComponentData"
          },
          {
            "name": "methodName",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "fetchComponentCode",
    "kind": "function",
    "code": "const fetchComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similarity-list.tsx",
    "slug": "test-docs-project_components_similarity-list_fetchcomponentcode",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "SimilarComponentsSection",
    "kind": "component",
    "code": "export function SimilarComponentsSection({ components, currentComponent }: SimilarComponentsSectionProps) {\n  const [comparisonOpen, setComparisonOpen] = useState(false)\n  const [selectedComponent, setSelectedComponent] = useState<SimilarComponent | null>(null)\n\n  // Mock code for the similar component - in a real app, you'd fetch this\n  const getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }\n\n  const handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }\n\n  if (!components || components.length === 0) {\n    return null\n  }\n\n  return (\n    <>\n      <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-sm overflow-hidden\">\n        <div className=\"p-6 border-b border-slate-100 dark:border-slate-800\">\n          <h2 className=\"text-xl font-bold\">Similar Components</h2>\n          <p className=\"text-muted-foreground mt-1\">Components with similar functionality or structure</p>\n        </div>\n\n        <div className=\"divide-y divide-slate-100 dark:divide-slate-800\">\n          {components.map((component) => (\n            <div key={component.name} className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <h3 className=\"font-medium text-lg\">{component.name}</h3>\n                  <Badge\n                    className={`${component.similarity >= 80\n                      ? \"bg-red-50 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800\"\n                      : \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n                      }`}\n                  >\n                    {component.similarity}% Similar\n                  </Badge>\n                </div>\n                <div className=\"flex gap-3\">\n                  <Button asChild variant=\"outline\" size=\"sm\">\n                    <Link href={`/components/${component.name}`}>View Component</Link>\n                  </Button>\n                  <Button size=\"sm\" className=\"gap-2\" onClick={() => handleCompare(component)}>\n                    <GitCompare className=\"h-4 w-4\" />\n                    Compare\n                  </Button>\n                </div>\n              </div>\n              <p>{component.reason}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {selectedComponent && (\n        <ComparisonModal\n          key={`comparison-${currentComponent.name}-${selectedComponent.name}-${Date.now()}`}\n          isOpen={comparisonOpen}\n          onClose={() => setComparisonOpen(false)}\n          component1={currentComponent}\n          component2={{\n            name: selectedComponent.name,\n            code: getMockCode(selectedComponent.name),\n            filePath: `src/components/${selectedComponent.name}.tsx`,\n          }}\n          similarityScore={selectedComponent.similarity}\n          isMethodComparison={selectedComponent.isMethodLevel}\n          methodName={selectedComponent.methodName}\n        />\n      )}\n    </>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similar-components-section.tsx",
    "slug": "test-docs-project_components_similar-components-section_similarcomponentssection",
    "imports": [
      "Link",
      "Badge",
      "Button",
      "GitCompare",
      "ComparisonModal"
    ],
    "references": [
      "Badge",
      "Button",
      "Link",
      "GitCompare",
      "ComparisonModal"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_similar-components-section_similarcomponentssection",
        "target": "link",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_similar-components-section_similarcomponentssection",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_similar-components-section_similarcomponentssection",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_similar-components-section_similarcomponentssection",
        "target": "gitcompare",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_similar-components-section_similarcomponentssection",
        "target": "comparisonmodal",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": [
      {
        "name": "getMockCode",
        "code": "const getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "componentName",
            "type": "string"
          }
        ]
      },
      {
        "name": "handleCompare",
        "code": "const handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "component",
            "type": "SimilarComponent"
          }
        ]
      }
    ]
  },
  {
    "name": "getMockCode",
    "kind": "function",
    "code": "const getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similar-components-section.tsx",
    "slug": "test-docs-project_components_similar-components-section_getmockcode",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleCompare",
    "kind": "function",
    "code": "const handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/similar-components-section.tsx",
    "slug": "test-docs-project_components_similar-components-section_handlecompare",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Sidebar",
    "kind": "component",
    "code": "export function Sidebar() {\n\n  return <SidebarWrapper />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/sidebar.tsx",
    "slug": "test-docs-project_components_sidebar_sidebar",
    "imports": [
      "SidebarWrapper"
    ],
    "references": [
      "SidebarWrapper"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_sidebar_sidebar",
        "target": "sidebarwrapper",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "SidebarWrapper",
    "kind": "component",
    "code": "export function SidebarWrapper() {\n    const pathname = usePathname() || \"\"\n\n    const isComponentsActive = pathname ? pathname.startsWith(\"/components\") : false\n    const isClassesActive = pathname ? pathname.startsWith(\"/classes\") : false\n    const isMethodsActive = pathname ? pathname.startsWith(\"/methods\") : false\n    const isStructureActive = pathname ? pathname.startsWith(\"/structure\") : false\n    const isDocsActive = pathname ? pathname.startsWith(\"/docs\") : false\n\n    return (\n        <div className=\"w-64 border-r border-slate-100 dark:border-slate-800 bg-white dark:bg-slate-900 h-screen flex flex-col\">\n            <div className=\"p-6 border-b border-slate-100 dark:border-slate-800\">\n                <Link href=\"/\" className=\"flex items-center gap-2\">\n                    <div className=\"h-8 w-8 rounded-md bg-gradient-to-br from-violet-500 to-indigo-600 flex items-center justify-center\">\n                        <Component className=\"h-4 w-4 text-white\" />\n                    </div>\n                    <h2 className=\"font-bold text-xl\">Code Docs</h2>\n                </Link>\n            </div>\n            <ScrollArea className=\"flex-1\">\n                <div className=\"px-3 py-4\">\n                    <div className=\"space-y-1\">\n                        <Button\n                            variant=\"ghost\"\n                            asChild\n                            className={cn(\n                                \"w-full justify-start gap-2\",\n                                pathname === \"/\" && \"bg-slate-100 dark:bg-slate-800 text-violet-600 dark:text-violet-400\",\n                            )}\n                        >\n                            <Link href=\"/\">\n                                <LayoutDashboard className=\"h-4 w-4\" />\n                                Dashboard\n                            </Link>\n                        </Button>\n                        <Button\n                            variant=\"ghost\"\n                            asChild\n                            className={cn(\n                                \"w-full justify-start gap-2\",\n                                pathname === \"/similarity\" && \"bg-slate-100 dark:bg-slate-800 text-violet-600 dark:text-violet-400\",\n                            )}\n                        >\n                            <Link href=\"/similarity\">\n                                <GitCompare className=\"h-4 w-4\" />\n                                Similarity Analysis\n                            </Link>\n                        </Button>\n                        <Button\n                            variant=\"ghost\"\n                            asChild\n                            className={cn(\n                                \"w-full justify-start gap-2\",\n                                pathname === \"/relationships\" && \"bg-slate-100 dark:bg-slate-800 text-violet-600 dark:text-violet-400\",\n                            )}\n                        >\n                            <Link href=\"/relationships\">\n                                <Network className=\"h-4 w-4\" />\n                                Code Relationships\n                            </Link>\n                        </Button>\n                        <Button\n                            variant=\"ghost\"\n                            asChild\n                            className={cn(\n                                \"w-full justify-start gap-2\",\n                                isDocsActive && \"bg-slate-100 dark:bg-slate-800 text-violet-600 dark:text-violet-400\",\n                            )}\n                        >\n                            <Link href=\"/docs\">\n                                <BookOpen className=\"h-4 w-4\" />\n                                Documentation\n                            </Link>\n                        </Button>\n                    </div>\n\n                    <div className=\"mt-6 space-y-1\">\n                        <h4 className=\"px-4 text-sm font-semibold text-muted-foreground mb-2\">Documentation</h4>\n                        <Button\n                            variant=\"ghost\"\n                            asChild\n                            className={cn(\n                                \"w-full justify-start gap-2\",\n                                isComponentsActive && \"bg-slate-100 dark:bg-slate-800 text-violet-600 dark:text-violet-400\",\n                            )}\n                        >\n                            <Link href=\"/?tab=components\">\n                                <Component className=\"h-4 w-4\" />\n                                Components\n                            </Link>\n                        </Button>\n                        <Button\n                            variant=\"ghost\"\n                            asChild\n                            className={cn(\n                                \"w-full justify-start gap-2\",\n                                isClassesActive && \"bg-slate-100 dark:bg-slate-800 text-violet-600 dark:text-violet-400\",\n                            )}\n                        >\n                            <Link href=\"/?tab=classes\">\n                                <Code className=\"h-4 w-4\" />\n                                Classes\n                            </Link>\n                        </Button>\n                        <Button\n                            variant=\"ghost\"\n                            asChild\n                            className={cn(\n                                \"w-full justify-start gap-2\",\n                                isMethodsActive && \"bg-slate-100 dark:bg-slate-800 text-violet-600 dark:text-violet-400\",\n                            )}\n                        >\n                            <Link href=\"/?tab=methods\">\n                                <FileCode className=\"h-4 w-4\" />\n                                Methods\n                            </Link>\n                        </Button>\n                    </div>\n\n                    <div className=\"mt-6 space-y-1\">\n                        <h4 className=\"px-4 text-sm font-semibold text-muted-foreground mb-2\">Structure</h4>\n                        <Button\n                            variant=\"ghost\"\n                            asChild\n                            className={cn(\n                                \"w-full justify-start gap-2\",\n                                isStructureActive && \"bg-slate-100 dark:bg-slate-800 text-violet-600 dark:text-violet-400\",\n                            )}\n                        >\n                            <Link href=\"/#structure\">\n                                <Layers className=\"h-4 w-4\" />\n                                Code Structure\n                            </Link>\n                        </Button>\n                    </div>\n                </div>\n            </ScrollArea>\n        </div>\n    )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/sidebar-wrapper.tsx",
    "slug": "test-docs-project_components_sidebar-wrapper_sidebarwrapper",
    "imports": [
      "Link",
      "Button",
      "ScrollArea",
      "LayoutDashboard",
      "GitCompare",
      "Component",
      "Code",
      "FileCode",
      "Layers",
      "Network",
      "BookOpen"
    ],
    "references": [
      "Link",
      "ScrollArea",
      "Button",
      "LayoutDashboard",
      "GitCompare",
      "Network",
      "BookOpen",
      "Code",
      "FileCode",
      "Layers"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_sidebar-wrapper_sidebarwrapper",
        "target": "link",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_sidebar-wrapper_sidebarwrapper",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_sidebar-wrapper_sidebarwrapper",
        "target": "scrollarea",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_sidebar-wrapper_sidebarwrapper",
        "target": "layoutdashboard",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_sidebar-wrapper_sidebarwrapper",
        "target": "gitcompare",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_sidebar-wrapper_sidebarwrapper",
        "target": "component",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_components_sidebar-wrapper_sidebarwrapper",
        "target": "code",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_sidebar-wrapper_sidebarwrapper",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_sidebar-wrapper_sidebarwrapper",
        "target": "layers",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_sidebar-wrapper_sidebarwrapper",
        "target": "network",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_sidebar-wrapper_sidebarwrapper",
        "target": "bookopen",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "Search",
    "kind": "component",
    "code": "export function Search() {\n  const [open, setOpen] = useState(false)\n  const router = useRouter()\n\n  return (\n    <>\n      <Button\n        variant=\"outline\"\n        className=\"relative h-9 w-full justify-start rounded-[0.5rem] text-sm text-muted-foreground sm:pr-12 md:w-64 lg:w-80\"\n        onClick={() => setOpen(true)}\n      >\n        <SearchIcon className=\"mr-2 h-4 w-4\" />\n        <span className=\"hidden lg:inline-flex\">Search documentation...</span>\n        <kbd className=\"ml-auto pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-slate-100 dark:bg-slate-800 px-1.5 font-mono text-xs text-muted-foreground\">\n          <span className=\"text-xs\">⌘</span>K\n        </kbd>\n      </Button>\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput placeholder=\"Search documentation...\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          <CommandGroup heading=\"Components\">\n            {searchData.components.map((item) => (\n              <CommandItem\n                key={item}\n                onSelect={() => {\n                  router.push(`/components/${item}`)\n                  setOpen(false)\n                }}\n              >\n                {item}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n          <CommandGroup heading=\"Classes\">\n            {searchData.classes.map((item) => (\n              <CommandItem\n                key={item}\n                onSelect={() => {\n                  router.push(`/classes/${item}`)\n                  setOpen(false)\n                }}\n              >\n                {item}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n          <CommandGroup heading=\"Methods\">\n            {searchData.methods.map((item) => (\n              <CommandItem\n                key={item}\n                onSelect={() => {\n                  router.push(`/methods/${item}`)\n                  setOpen(false)\n                }}\n              >\n                {item}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </CommandList>\n      </CommandDialog>\n    </>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/search.tsx",
    "slug": "test-docs-project_components_search_search",
    "imports": [
      "SearchIcon",
      "Button",
      "CommandDialog",
      "CommandEmpty",
      "CommandGroup",
      "CommandInput",
      "CommandItem",
      "CommandList"
    ],
    "references": [
      "Button",
      "SearchIcon",
      "CommandDialog",
      "CommandInput",
      "CommandList",
      "CommandEmpty",
      "CommandGroup",
      "CommandItem"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_search_search",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_search_search",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_search_search",
        "target": "commanddialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_search_search",
        "target": "commandempty",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_search_search",
        "target": "commandgroup",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_search_search",
        "target": "commandinput",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_search_search",
        "target": "commanditem",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_search_search",
        "target": "commandlist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "ModeToggle",
    "kind": "component",
    "code": "export function ModeToggle() {\n  const { setTheme, theme } = useTheme()\n  const [mounted, setMounted] = React.useState(false)\n\n  // useEffect only runs on the client, so now we can safely show the UI\n  React.useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  // Function to handle direct theme toggle between light and dark\n  const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark')\n  }\n\n  if (!mounted) {\n    return <Button variant=\"outline\" size=\"icon\" className=\"border-slate-200 dark:border-slate-700\" />\n  }\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"icon\"\n      className=\"border-slate-200 dark:border-slate-700\"\n      onClick={toggleTheme}\n    >\n      <SunIcon className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <MoonIcon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme (current: {theme})</span>\n    </Button>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/mode-toggle.tsx",
    "slug": "test-docs-project_components_mode-toggle_modetoggle",
    "imports": [
      "Button",
      "MoonIcon",
      "SunIcon"
    ],
    "references": [
      "Button",
      "SunIcon",
      "MoonIcon"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_mode-toggle_modetoggle",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_mode-toggle_modetoggle",
        "target": "moonicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_mode-toggle_modetoggle",
        "target": "sunicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": [
      {
        "name": "toggleTheme",
        "code": "const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark')\n  }",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "toggleTheme",
    "kind": "function",
    "code": "const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark')\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/mode-toggle.tsx",
    "slug": "test-docs-project_components_mode-toggle_toggletheme",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Header",
    "kind": "component",
    "code": "export function Header() {\n  return (\n    <header className=\"border-b border-slate-100 dark:border-slate-800 bg-white dark:bg-slate-900 px-6 py-3 flex items-center justify-between\">\n      <Search />\n      <div className=\"flex items-center gap-3\">\n        <Button size=\"sm\" className=\"gap-2\">\n          <Sparkles className=\"h-4 w-4\" />\n          Upgrade\n        </Button>\n        <ModeToggle />\n      </div>\n    </header>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/header.tsx",
    "slug": "test-docs-project_components_header_header",
    "imports": [
      "ModeToggle",
      "Search",
      "Button",
      "Sparkles"
    ],
    "references": [
      "Search",
      "Button",
      "Sparkles",
      "ModeToggle"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_header_header",
        "target": "modetoggle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_header_header",
        "target": "search",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_header_header",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_header_header",
        "target": "sparkles",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "ComponentStats",
    "kind": "component",
    "code": "export function ComponentStats({ type = 'component' }: ComponentStatsProps) {\n  const [components, setComponents] = useState<ComponentData[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }, [type])\n\n  if (loading) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-muted-foreground\">Loading component statistics...</p>\n      </div>\n    )\n  }\n\n  if (components.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-muted-foreground\">No {type}s found in the documentation.</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3\">\n      {components.map((component) => (\n        <Link key={`${component.slug}-${component.filePath}`} href={`/components/${component.slug}`} className=\"h-full block\">\n          <Card className=\"h-full hover:shadow-md transition-shadow cursor-pointer border-none shadow-sm bg-white dark:bg-slate-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex items-center gap-2\">\n                  {type === 'method' ? (\n                    <FileCode className=\"h-5 w-5 text-amber-500\" />\n                  ) : type === 'class' ? (\n                    <Code className=\"h-5 w-5 text-blue-500\" />\n                  ) : (\n                    <Code className=\"h-5 w-5 text-violet-500\" />\n                  )}\n                  <h3 className=\"font-medium text-lg\">{component.name}</h3>\n                </div>\n                <Badge variant=\"outline\" className=\"text-xs font-normal\">\n                  {component.methodCount > 0 ? `${component.methodCount} methods` : 'No methods'}\n                </Badge>\n              </div>\n              <p className=\"text-sm text-muted-foreground line-clamp-2 mb-4\">\n                {component.description || `A ${type} in your codebase.`}\n              </p>\n              <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                <Clock className=\"h-3 w-3\" />\n                <span className=\"truncate max-w-[250px]\">{component.filePath || 'Unknown path'}</span>\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n      ))}\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/component-stats.tsx",
    "slug": "test-docs-project_components_component-stats_componentstats",
    "imports": [
      "Card",
      "CardContent",
      "Badge",
      "Link",
      "FileCode",
      "Clock",
      "Code"
    ],
    "references": [
      "Link",
      "Card",
      "CardContent",
      "FileCode",
      "Code",
      "Badge",
      "Clock"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_component-stats_componentstats",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-stats_componentstats",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-stats_componentstats",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-stats_componentstats",
        "target": "link",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-stats_componentstats",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-stats_componentstats",
        "target": "clock",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-stats_componentstats",
        "target": "code",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "fetchComponents",
    "kind": "function",
    "code": "async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Load all component details to check for types\n        const fullComponents = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              const detail = await detailRes.json()\n              return {\n                ...comp,\n                type: detail.type || 'component'\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return {\n                ...comp,\n                type: 'component' // Default if we can't determine\n              }\n            }\n          })\n        )\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/component-stats.tsx",
    "slug": "test-docs-project_components_component-stats_fetchcomponents",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "ComponentClient",
    "kind": "component",
    "code": "export default function ComponentClient({ slug }: { slug: string }) {\n  const [componentData, setComponentData] = useState<ComponentData | null>(null)\n  const [description, setDescription] = useState<string | null>(null)\n  const [isGenerating, setIsGenerating] = useState(false)\n  const [loading, setLoading] = useState(true)\n\n  // Fetch component data\n  useEffect(() => {\n    async function fetchComponent() {\n      try {\n        // Try to fetch from docs-data\n        const res = await fetch(`/docs-data/${slug}.json`)\n        if (res.ok) {\n          const data = await res.json()\n          setComponentData(data)\n          if (data.description) {\n            setDescription(data.description)\n          }\n        } else {\n          // Fallback to mock data\n          setComponentData({\n            name: slug,\n            type: \"React Component\",\n            filePath: `src/components/${slug}.tsx`,\n            route: `/components/${slug.toLowerCase()}`,\n            code: `import React from 'react';\\n\\nexport function ${slug}({ title, children }) {\\n  return (\\n    <div className=\\\"component\\\">\\n      <h2>{title}</h2>\\n      <div>{children}</div>\\n    </div>\\n  );\\n}`,\n            lastUpdated: \"2 days ago\",\n            similarComponents: [\n              {\n                name: slug === \"Modal\" ? \"Dialog\" : \"Modal\",\n                similarity: 85,\n                reason: \"Both handle popup content with similar open/close behavior\",\n              },\n              {\n                name: \"Dropdown\",\n                similarity: 65,\n                reason: \"Similar toggling behavior and content display\",\n              },\n            ],\n          })\n        }\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n    fetchComponent()\n  }, [slug])\n\n  const generateDescription = async () => {\n    if (!componentData) return;\n    setIsGenerating(true)\n    try {\n      const response = await fetch('/api/describe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          componentName: componentData.name,\n          code: componentData.code || `function ${componentData.name}() { /* Code not available */ }`,\n          filePath: componentData.filePath,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to generate description');\n      }\n      const data = await response.json();\n      setDescription(data.description);\n    } catch (error) {\n      console.error('Error generating description:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"container max-w-5xl py-12\">\n        <p className=\"text-center text-muted-foreground\">Loading component data...</p>\n      </div>\n    )\n  }\n\n  if (!componentData) {\n    return (\n      <div className=\"container max-w-5xl py-12\">\n        <p className=\"text-center text-muted-foreground\">Component not found</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container max-w-5xl py-12\">\n      <div className=\"flex flex-col gap-4 mb-8\">\n        <div className=\"flex items-center gap-3\">\n          <h1 className=\"text-4xl font-bold tracking-tight\">{componentData.name}</h1>\n          <Badge className=\"bg-violet-500 hover:bg-violet-600\">{componentData.type}</Badge>\n        </div>\n        <div className=\"flex items-center gap-2 text-muted-foreground\">\n          <FileCode className=\"h-4 w-4\" />\n          <span className=\"font-mono text-sm\">{componentData.filePath}</span>\n        </div>\n        <div className=\"flex items-center justify-between mt-2\">\n          <p className=\"text-muted-foreground\">Last updated {componentData.lastUpdated}</p>\n          <Button onClick={generateDescription} disabled={isGenerating} className=\"gap-2\">\n            {isGenerating ? (\n              \"Generating...\"\n            ) : (\n              <>\n                <Sparkles className=\"h-4 w-4\" />\n                Generate AI Description\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n      {description && (\n        <div className=\"bg-white dark:bg-slate-900 p-6 rounded-xl shadow-sm mb-10 border border-slate-100 dark:border-slate-800\">\n          <h3 className=\"font-medium mb-3 text-violet-600 dark:text-violet-400\">AI Description</h3>\n          <p className=\"text-lg\">{description}</p>\n        </div>\n      )}\n      <Tabs defaultValue=\"code\" className=\"mb-10\">\n        <TabsList className=\"mb-6 bg-white dark:bg-slate-900 p-1 rounded-lg\">\n          <TabsTrigger value=\"code\" className=\"rounded-md\">\n            Code\n          </TabsTrigger>\n          <TabsTrigger value=\"usage\" className=\"rounded-md\">\n            Usage\n          </TabsTrigger>\n          <TabsTrigger value=\"props\" className=\"rounded-md\">\n            Props\n          </TabsTrigger>\n          <TabsTrigger value=\"relationships\" className=\"rounded-md\">\n            Relationships\n          </TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"code\">\n          <CodeBlock code={componentData.code || `// Code not available for ${componentData.name}`} language=\"tsx\" />\n        </TabsContent>\n        <TabsContent value=\"usage\">\n          <CodeBlock\n            code={`import { ${componentData.name} } from '${componentData.filePath.replace(/\\.tsx?$/, '')}';\\n\\n// Usage example here`}\n            language=\"tsx\"\n          />\n        </TabsContent>\n        <TabsContent value=\"props\">\n          <div className=\"overflow-hidden rounded-xl border border-slate-100 dark:border-slate-800 bg-white dark:bg-slate-900 shadow-sm\">\n            <table className=\"w-full\">\n              <thead className=\"bg-slate-50 dark:bg-slate-800/50\">\n                <tr>\n                  <th className=\"text-left p-4 font-medium\">Name</th>\n                  <th className=\"text-left p-4 font-medium\">Type</th>\n                  <th className=\"text-left p-4 font-medium\">Default</th>\n                  <th className=\"text-left p-4 font-medium\">Description</th>\n                </tr>\n              </thead>\n              <tbody>\n                {componentData.props && componentData.props.length > 0 ? (\n                  componentData.props.map((prop, index) => (\n                    <tr key={index} className=\"border-t border-slate-100 dark:border-slate-800\">\n                      <td className=\"p-4 font-medium\">{prop.name}</td>\n                      <td className=\"p-4 text-muted-foreground\">{prop.type || 'any'}</td>\n                      <td className=\"p-4 text-muted-foreground\">{prop.defaultValue || '-'}</td>\n                      <td className=\"p-4\">{prop.description || '-'}</td>\n                    </tr>\n                  ))\n                ) : (\n                  // Extract props from the component code as a fallback\n                  <>\n                    <tr className=\"border-t border-slate-100 dark:border-slate-800\">\n                      <td className=\"p-4 font-medium\">children</td>\n                      <td className=\"p-4 text-muted-foreground\">ReactNode</td>\n                      <td className=\"p-4 text-muted-foreground\">-</td>\n                      <td className=\"p-4\">The content to render</td>\n                    </tr>\n                    <tr className=\"border-t border-slate-100 dark:border-slate-800\">\n                      <td className=\"p-4 font-medium\">variant</td>\n                      <td className=\"p-4 text-muted-foreground\">string</td>\n                      <td className=\"p-4 text-muted-foreground\">'primary'</td>\n                      <td className=\"p-4\">The visual style variant of the button</td>\n                    </tr>\n                    <tr className=\"border-t border-slate-100 dark:border-slate-800\">\n                      <td className=\"p-4 font-medium\">size</td>\n                      <td className=\"p-4 text-muted-foreground\">string</td>\n                      <td className=\"p-4 text-muted-foreground\">'medium'</td>\n                      <td className=\"p-4\">The size of the button</td>\n                    </tr>\n                    <tr className=\"border-t border-slate-100 dark:border-slate-800\">\n                      <td className=\"p-4 font-medium\">onClick</td>\n                      <td className=\"p-4 text-muted-foreground\">function</td>\n                      <td className=\"p-4 text-muted-foreground\">-</td>\n                      <td className=\"p-4\">Function called when the button is clicked</td>\n                    </tr>\n                    <tr className=\"border-t border-slate-100 dark:border-slate-800\">\n                      <td className=\"p-4 font-medium\">disabled</td>\n                      <td className=\"p-4 text-muted-foreground\">boolean</td>\n                      <td className=\"p-4 text-muted-foreground\">false</td>\n                      <td className=\"p-4\">Whether the button is disabled</td>\n                    </tr>\n                  </>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </TabsContent>\n        <TabsContent value=\"relationships\">\n          <div className=\"space-y-8\">\n            <CodeRelationships entityId={slug.toLowerCase()} entityType=\"component\" />\n            <CodeGraph entityId={slug.toLowerCase()} />\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/component-client.tsx",
    "slug": "test-docs-project_components_component-client_componentclient",
    "imports": [
      "Sparkles",
      "FileCode",
      "Button",
      "Tabs",
      "TabsContent",
      "TabsList",
      "TabsTrigger",
      "CodeBlock",
      "Badge",
      "CodeRelationships",
      "CodeGraph"
    ],
    "references": [
      "Badge",
      "FileCode",
      "Button",
      "Sparkles",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "TabsContent",
      "CodeBlock",
      "CodeRelationships",
      "CodeGraph"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_component-client_componentclient",
        "target": "sparkles",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-client_componentclient",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-client_componentclient",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-client_componentclient",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-client_componentclient",
        "target": "tabscontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-client_componentclient",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-client_componentclient",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-client_componentclient",
        "target": "codeblock",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-client_componentclient",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-client_componentclient",
        "target": "coderelationships",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_component-client_componentclient",
        "target": "codegraph",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": [
      {
        "name": "generateDescription",
        "code": "const generateDescription = async () => {\n    if (!componentData) return;\n    setIsGenerating(true)\n    try {\n      const response = await fetch('/api/describe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          componentName: componentData.name,\n          code: componentData.code || `function ${componentData.name}() { /* Code not available */ }`,\n          filePath: componentData.filePath,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to generate description');\n      }\n      const data = await response.json();\n      setDescription(data.description);\n    } catch (error) {\n      console.error('Error generating description:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  }",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "fetchComponent",
    "kind": "function",
    "code": "async function fetchComponent() {\n      try {\n        // Try to fetch from docs-data\n        const res = await fetch(`/docs-data/${slug}.json`)\n        if (res.ok) {\n          const data = await res.json()\n          setComponentData(data)\n          if (data.description) {\n            setDescription(data.description)\n          }\n        } else {\n          // Fallback to mock data\n          setComponentData({\n            name: slug,\n            type: \"React Component\",\n            filePath: `src/components/${slug}.tsx`,\n            route: `/components/${slug.toLowerCase()}`,\n            code: `import React from 'react';\\n\\nexport function ${slug}({ title, children }) {\\n  return (\\n    <div className=\\\"component\\\">\\n      <h2>{title}</h2>\\n      <div>{children}</div>\\n    </div>\\n  );\\n}`,\n            lastUpdated: \"2 days ago\",\n            similarComponents: [\n              {\n                name: slug === \"Modal\" ? \"Dialog\" : \"Modal\",\n                similarity: 85,\n                reason: \"Both handle popup content with similar open/close behavior\",\n              },\n              {\n                name: \"Dropdown\",\n                similarity: 65,\n                reason: \"Similar toggling behavior and content display\",\n              },\n            ],\n          })\n        }\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/component-client.tsx",
    "slug": "test-docs-project_components_component-client_fetchcomponent",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "generateDescription",
    "kind": "function",
    "code": "const generateDescription = async () => {\n    if (!componentData) return;\n    setIsGenerating(true)\n    try {\n      const response = await fetch('/api/describe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          componentName: componentData.name,\n          code: componentData.code || `function ${componentData.name}() { /* Code not available */ }`,\n          filePath: componentData.filePath,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to generate description');\n      }\n      const data = await response.json();\n      setDescription(data.description);\n    } catch (error) {\n      console.error('Error generating description:', error);\n    } finally {\n      setIsGenerating(false);\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/component-client.tsx",
    "slug": "test-docs-project_components_component-client_generatedescription",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "ComparisonModal",
    "kind": "component",
    "code": "export function ComparisonModal({\n  isOpen,\n  onClose,\n  component1,\n  component2,\n  similarityScore: initialSimilarityScore,\n  methodName,\n  isMethodComparison = false\n}: ComparisonModalProps) {\n  const [view, setView] = useState<\"split\" | \"unified\">(\"split\")\n  const [isFullScreen, setIsFullScreen] = useState(false)\n  const [showHighlights, setShowHighlights] = useState(true)\n  const [similarityScore, setSimilarityScore] = useState(initialSimilarityScore)\n\n  // Extract method code if we're comparing methods\n  const extractMethodCode = (code: string, methodName?: string) => {\n    if (!isMethodComparison || !methodName) return code;\n\n    // If the code already appears to be just a method (starts with common function patterns) return as is\n    if (code.trim().startsWith('function') ||\n      code.trim().startsWith('const') ||\n      code.trim().startsWith('let') ||\n      code.trim().startsWith('export')) {\n      return code;\n    }\n\n    try {\n      // More comprehensive regex to find method definitions with various patterns\n      const methodPatterns = [\n        // Standard function declarations\n        `function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Function expression assignments (const/let/var)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function assignments\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function without braces (single expression)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*[^;{]*;?`,\n        // Class methods\n        `${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async functions\n        `async\\\\s+function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async arrow functions\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*async\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`\n      ];\n\n      // Join all patterns with OR\n      const combinedPattern = methodPatterns.join('|');\n      const methodRegex = new RegExp(combinedPattern, 'g');\n\n      let match;\n      // Find the first match\n      if ((match = methodRegex.exec(code)) !== null) {\n        return match[0];\n      }\n\n      // Alternative approach if the regex fails: try to find the method by looking for its name\n      // and then extracting a reasonable block after it\n      const methodStartIndex = code.indexOf(`function ${methodName}`) > -1\n        ? code.indexOf(`function ${methodName}`)\n        : code.indexOf(`${methodName} =`) > -1\n          ? code.indexOf(`${methodName} =`)\n          : code.indexOf(`${methodName}(`) > -1\n            ? code.indexOf(`${methodName}(`)\n            : -1;\n\n      if (methodStartIndex > -1) {\n        // Find a reasonable endpoint - either the next method or the end of the file\n        let depth = 0;\n        let endIndex = methodStartIndex;\n\n        // Go through the code character by character looking for matching braces\n        for (let i = methodStartIndex; i < code.length; i++) {\n          if (code[i] === '{') depth++;\n          else if (code[i] === '}') {\n            depth--;\n            if (depth === 0) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n\n        if (endIndex > methodStartIndex) {\n          return code.substring(methodStartIndex, endIndex);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error extracting method code:\", e);\n    }\n\n    return code;\n  };\n\n  // Process the component code\n  const processedCode1 = extractMethodCode(component1.code || '', methodName);\n  const processedCode2 = extractMethodCode(component2.code || '', methodName);\n\n  // Calculate diff using jsdiff\n  const diff = diffLines(processedCode1, processedCode2);\n\n  // Normalize code for comparison - trim trailing whitespace on each line\n  const normalizedCode1 = processedCode1.split('\\n').map(line => line.trimRight());\n  const normalizedCode2 = processedCode2.split('\\n').map(line => line.trimRight());\n\n  // Calculate diff for split view - more accurate line-by-line comparison\n  const lines1 = normalizedCode1;\n  const lines2 = normalizedCode2;\n\n  // For the split view, we want to know which lines are different\n  const normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ');\n\n  const highlightedCode1 = lines1.map((line, i) => {\n    // Consider a line different only if it's beyond the other file's length\n    // or if the normalized content differs\n    const isDifferent = i >= lines2.length ||\n      normalizeForComparison(line) !== normalizeForComparison(lines2[i]);\n\n    return {\n      line: line,\n      isDifferent: isDifferent\n    };\n  });\n\n  const highlightedCode2 = lines2.map((line, i) => {\n    // Consider a line different only if it's beyond the other file's length\n    // or if the normalized content differs\n    const isDifferent = i >= lines1.length ||\n      normalizeForComparison(line) !== normalizeForComparison(lines1[i]);\n\n    return {\n      line: line,\n      isDifferent: isDifferent\n    };\n  });\n\n  // Count differences (using jsdiff results for accuracy)\n  const diffCount = diff.reduce((count: number, part: Change) => {\n    if (part.added || part.removed) {\n      // Count lines in the changed part\n      return count + (part.value.match(/\\n/g) || []).length + (part.value.endsWith('\\n') ? 0 : 1);\n    }\n    return count;\n  }, 0);\n\n  // Double-check for identical code\n  React.useEffect(() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }, [processedCode1, processedCode2, initialSimilarityScore, diffCount]);\n\n  const modalClasses = isFullScreen\n    ? \"max-w-[99vw] w-[99vw] h-[99vh] flex flex-col p-0 rounded-lg shadow-2xl border-2 border-slate-200 dark:border-slate-700\"\n    : \"max-w-[98vw] w-[98vw] h-[95vh] flex flex-col p-0 rounded-lg shadow-2xl border-2 border-slate-200 dark:border-slate-700\"\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className={`${modalClasses} !max-w-screen-2xl !w-screen`}>\n        <DialogHeader className=\"p-6 border-b border-slate-200 dark:border-slate-700 bg-gradient-to-r from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-900\">\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-indigo-500 to-violet-700 dark:from-indigo-400 dark:to-violet-500\">\n              {isMethodComparison ? \"Method Comparison\" : \"Component Comparison\"}\n            </DialogTitle>\n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={() => setIsFullScreen(!isFullScreen)}\n                className=\"p-2 rounded-md hover:bg-slate-200 dark:hover:bg-slate-700 transition-all\"\n                title={isFullScreen ? \"Exit fullscreen\" : \"Enter fullscreen\"}\n              >\n                <EnterFullScreenIcon className=\"h-4 w-4 text-slate-500 dark:text-slate-400\" />\n              </button>\n              <Badge\n                className={`py-1.5 px-3 text-sm font-medium ${similarityScore >= 100 || similarityScore === 1\n                  ? \"bg-green-50 text-green-700 border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800\"\n                  : similarityScore >= 80\n                    ? \"bg-red-50 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800\"\n                    : \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n                  }`}\n              >\n                {similarityScore >= 100 || similarityScore === 1\n                  ? \"Identical Components\"\n                  : `${Math.round(similarityScore)}% Similar ${diffCount > 0\n                    ? `• ${diffCount} Differences`\n                    : similarityScore < 100 && similarityScore < 1\n                      ? \"• Semantic differences detected\"\n                      : \"\"}`}\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-8 mt-6\">\n            <div className=\"flex items-center gap-3 bg-white dark:bg-slate-800 rounded-lg p-3 shadow-sm\">\n              <div className=\"flex-shrink-0 p-2 rounded-full bg-indigo-100 dark:bg-indigo-900/30\">\n                <CodeIcon className=\"h-4 w-4 text-indigo-600 dark:text-indigo-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg\">\n                  {isMethodComparison && methodName\n                    ? `${component1.name}.${methodName}`\n                    : component1.name}\n                </h3>\n                <p className=\"text-xs text-muted-foreground font-mono\">{component1.filePath}</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3 bg-white dark:bg-slate-800 rounded-lg p-3 shadow-sm\">\n              <div className=\"flex-shrink-0 p-2 rounded-full bg-violet-100 dark:bg-violet-900/30\">\n                <CodeIcon className=\"h-4 w-4 text-violet-600 dark:text-violet-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg\">\n                  {isMethodComparison && methodName\n                    ? `${component2.name}.${methodName}`\n                    : component2.name}\n                </h3>\n                <p className=\"text-xs text-muted-foreground font-mono\">{component2.filePath}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end mt-4 gap-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"highlights-mode\"\n                checked={showHighlights}\n                onCheckedChange={setShowHighlights}\n              />\n              <Label htmlFor=\"highlights-mode\" className=\"cursor-pointer\">Show Differences</Label>\n            </div>\n            <Tabs value={view} onValueChange={(v) => setView(v as \"split\" | \"unified\")} className=\"w-auto\">\n              <TabsList className=\"bg-slate-100 dark:bg-slate-800 p-1 rounded-lg\">\n                <TabsTrigger value=\"split\" className=\"rounded-md data-[state=active]:bg-white dark:data-[state=active]:bg-slate-700 data-[state=active]:shadow-sm\">\n                  Split View\n                </TabsTrigger>\n                <TabsTrigger value=\"unified\" className=\"rounded-md data-[state=active]:bg-white dark:data-[state=active]:bg-slate-700 data-[state=active]:shadow-sm\">\n                  Unified View\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </div>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-hidden min-h-0 bg-white dark:bg-slate-900 rounded-b-lg\">\n          {view === \"split\" ? (\n            <div className=\"flex h-full w-full\">\n              <ScrollArea className=\"w-[50%] border-r border-slate-200 dark:border-slate-700\">\n                <div className=\"py-4 px-2 font-mono text-xs\">\n                  {highlightedCode1.map((line, i) => (\n                    <div\n                      key={i}\n                      className={`py-0.5 px-6 flex leading-relaxed ${line.isDifferent && showHighlights\n                        ? \"bg-red-50 dark:bg-red-900/20 border-l-4 border-red-400 dark:border-red-600\"\n                        : \"\"\n                        }`}\n                    >\n                      <span className={`select-none text-slate-400 w-16 mr-4 text-right text-xs`}>{i + 1}</span>\n                      <span className=\"whitespace-pre overflow-x-auto flex-1 text-xs\">{line.line}</span>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n              <ScrollArea className=\"w-[50%]\">\n                <div className=\"py-4 px-2 font-mono text-xs\">\n                  {highlightedCode2.map((line, i) => (\n                    <div\n                      key={i}\n                      className={`py-0.5 px-6 flex leading-relaxed ${line.isDifferent && showHighlights\n                        ? \"bg-green-50 dark:bg-green-900/20 border-l-4 border-green-400 dark:border-green-600\"\n                        : \"\"\n                        }`}\n                    >\n                      <span className={`select-none text-slate-400 w-16 mr-4 text-right text-xs`}>{i + 1}</span>\n                      <span className=\"whitespace-pre overflow-x-auto flex-1 text-xs\">{line.line}</span>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </div>\n          ) : (\n            <ScrollArea className=\"h-full\">\n              <div className=\"py-4 px-2 font-mono text-xs\">\n                {diff.map((part: Change, partIndex: number) => {\n                  // Ensure part.value is treated as a string\n                  const value = part.value || '';\n                  // Split lines, handling potential trailing newline correctly\n                  const lines = value.split('\\n').filter((l: string, i: number, arr: string[]) => i < arr.length - 1 || l !== '');\n                  const prefix = part.added ? '+' : part.removed ? '-' : ' ';\n                  const bgColor = part.added ? 'bg-green-50 dark:bg-green-900/20' : part.removed ? 'bg-red-50 dark:bg-red-900/20' : '';\n                  const textColor = part.added ? 'text-green-700 dark:text-green-400' : part.removed ? 'text-red-700 dark:text-red-400' : 'text-slate-400';\n                  const borderColor = part.added ? 'border-l-4 border-green-400 dark:border-green-600' : part.removed ? 'border-l-4 border-red-400 dark:border-red-600' : '';\n\n                  return lines.map((line: string, lineIndex: number) => (\n                    <div\n                      key={`${partIndex}-${lineIndex}`}\n                      className={`py-0.5 px-6 flex leading-relaxed ${showHighlights ? bgColor : ''} ${showHighlights ? borderColor : ''}`}\n                    >\n                      <span className={`select-none ${textColor} w-6 mr-2 text-center font-bold ${!showHighlights && (part.added || part.removed) ? 'opacity-0' : ''}`}>{prefix}</span>\n                      {/* No original line numbers in this basic view */}\n                      <span className=\"whitespace-pre overflow-x-auto flex-1\">{line}</span>\n                    </div>\n                  ));\n                })}\n              </div>\n            </ScrollArea>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/comparison-modal.tsx",
    "slug": "test-docs-project_components_comparison-modal_comparisonmodal",
    "imports": [
      "Dialog",
      "DialogContent",
      "DialogHeader",
      "DialogTitle",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "Badge",
      "ScrollArea",
      "CodeIcon",
      "EnterFullScreenIcon",
      "Switch",
      "Label",
      "Change"
    ],
    "references": [
      "Dialog",
      "DialogContent",
      "DialogHeader",
      "DialogTitle",
      "EnterFullScreenIcon",
      "Badge",
      "CodeIcon",
      "Switch",
      "Label",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "ScrollArea"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "scrollarea",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "codeicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "enterfullscreenicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "switch",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "label",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_comparison-modal_comparisonmodal",
        "target": "change",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": [
      {
        "name": "extractMethodCode",
        "code": "const extractMethodCode = (code: string, methodName?: string) => {\n    if (!isMethodComparison || !methodName) return code;\n\n    // If the code already appears to be just a method (starts with common function patterns) return as is\n    if (code.trim().startsWith('function') ||\n      code.trim().startsWith('const') ||\n      code.trim().startsWith('let') ||\n      code.trim().startsWith('export')) {\n      return code;\n    }\n\n    try {\n      // More comprehensive regex to find method definitions with various patterns\n      const methodPatterns = [\n        // Standard function declarations\n        `function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Function expression assignments (const/let/var)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function assignments\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function without braces (single expression)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*[^;{]*;?`,\n        // Class methods\n        `${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async functions\n        `async\\\\s+function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async arrow functions\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*async\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`\n      ];\n\n      // Join all patterns with OR\n      const combinedPattern = methodPatterns.join('|');\n      const methodRegex = new RegExp(combinedPattern, 'g');\n\n      let match;\n      // Find the first match\n      if ((match = methodRegex.exec(code)) !== null) {\n        return match[0];\n      }\n\n      // Alternative approach if the regex fails: try to find the method by looking for its name\n      // and then extracting a reasonable block after it\n      const methodStartIndex = code.indexOf(`function ${methodName}`) > -1\n        ? code.indexOf(`function ${methodName}`)\n        : code.indexOf(`${methodName} =`) > -1\n          ? code.indexOf(`${methodName} =`)\n          : code.indexOf(`${methodName}(`) > -1\n            ? code.indexOf(`${methodName}(`)\n            : -1;\n\n      if (methodStartIndex > -1) {\n        // Find a reasonable endpoint - either the next method or the end of the file\n        let depth = 0;\n        let endIndex = methodStartIndex;\n\n        // Go through the code character by character looking for matching braces\n        for (let i = methodStartIndex; i < code.length; i++) {\n          if (code[i] === '{') depth++;\n          else if (code[i] === '}') {\n            depth--;\n            if (depth === 0) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n\n        if (endIndex > methodStartIndex) {\n          return code.substring(methodStartIndex, endIndex);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error extracting method code:\", e);\n    }\n\n    return code;\n  };",
        "returnType": "void",
        "params": [
          {
            "name": "code",
            "type": "string"
          },
          {
            "name": "methodName",
            "type": "string"
          }
        ]
      },
      {
        "name": "normalizeForComparison",
        "code": "const normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ');",
        "returnType": "void",
        "params": [
          {
            "name": "line",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "extractMethodCode",
    "kind": "function",
    "code": "const extractMethodCode = (code: string, methodName?: string) => {\n    if (!isMethodComparison || !methodName) return code;\n\n    // If the code already appears to be just a method (starts with common function patterns) return as is\n    if (code.trim().startsWith('function') ||\n      code.trim().startsWith('const') ||\n      code.trim().startsWith('let') ||\n      code.trim().startsWith('export')) {\n      return code;\n    }\n\n    try {\n      // More comprehensive regex to find method definitions with various patterns\n      const methodPatterns = [\n        // Standard function declarations\n        `function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Function expression assignments (const/let/var)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function assignments\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function without braces (single expression)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*[^;{]*;?`,\n        // Class methods\n        `${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async functions\n        `async\\\\s+function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async arrow functions\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*async\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`\n      ];\n\n      // Join all patterns with OR\n      const combinedPattern = methodPatterns.join('|');\n      const methodRegex = new RegExp(combinedPattern, 'g');\n\n      let match;\n      // Find the first match\n      if ((match = methodRegex.exec(code)) !== null) {\n        return match[0];\n      }\n\n      // Alternative approach if the regex fails: try to find the method by looking for its name\n      // and then extracting a reasonable block after it\n      const methodStartIndex = code.indexOf(`function ${methodName}`) > -1\n        ? code.indexOf(`function ${methodName}`)\n        : code.indexOf(`${methodName} =`) > -1\n          ? code.indexOf(`${methodName} =`)\n          : code.indexOf(`${methodName}(`) > -1\n            ? code.indexOf(`${methodName}(`)\n            : -1;\n\n      if (methodStartIndex > -1) {\n        // Find a reasonable endpoint - either the next method or the end of the file\n        let depth = 0;\n        let endIndex = methodStartIndex;\n\n        // Go through the code character by character looking for matching braces\n        for (let i = methodStartIndex; i < code.length; i++) {\n          if (code[i] === '{') depth++;\n          else if (code[i] === '}') {\n            depth--;\n            if (depth === 0) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n\n        if (endIndex > methodStartIndex) {\n          return code.substring(methodStartIndex, endIndex);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error extracting method code:\", e);\n    }\n\n    return code;\n  };",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/comparison-modal.tsx",
    "slug": "test-docs-project_components_comparison-modal_extractmethodcode",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "normalizeForComparison",
    "kind": "function",
    "code": "const normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ');",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/comparison-modal.tsx",
    "slug": "test-docs-project_components_comparison-modal_normalizeforcomparison",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "normalize",
    "kind": "function",
    "code": "const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/comparison-modal.tsx",
    "slug": "test-docs-project_components_comparison-modal_normalize",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CodeStructure",
    "kind": "component",
    "code": "export function CodeStructure() {\n  const [fileStructure, setFileStructure] = useState<FileStructure[]>([])\n  const [loading, setLoading] = useState(true)\n\n  // Fetch component data and organize it by file path\n  useEffect(() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Group components by their file paths\n        const filesByPath: Record<string, { name: string; slug: string }[]> = {}\n\n        // Process each component\n        data.forEach((comp: { name: string; slug: string; filePath: string }) => {\n          if (!comp.filePath) return\n\n          // Store the component in its path\n          const path = comp.filePath\n          if (!filesByPath[path]) {\n            filesByPath[path] = []\n          }\n          filesByPath[path].push({ name: comp.name, slug: comp.slug })\n        })\n\n        // Convert flat paths to a tree structure\n        const rootStructure: FileStructure[] = []\n\n        // Process each file path\n        Object.entries(filesByPath).forEach(([path, components]) => {\n          // Split the path into parts (folders/file)\n          const parts = path.split('/')\n          let currentLevel = rootStructure\n\n          // Process each part of the path except the last one (the file)\n          for (let i = 0; i < parts.length - 1; i++) {\n            const part = parts[i]\n            if (!part) continue // Skip empty parts\n\n            // Look for existing folder\n            let folder = currentLevel.find(item =>\n              item.type === 'folder' && item.name === part\n            )\n\n            // Create folder if it doesn't exist\n            if (!folder) {\n              folder = {\n                name: part,\n                path: parts.slice(0, i + 1).join('/'),\n                type: 'folder',\n                children: []\n              }\n              currentLevel.push(folder)\n            }\n\n            // Update current level to this folder's children\n            currentLevel = folder.children!\n          }\n\n          // Add the file at the current level\n          const fileName = parts[parts.length - 1]\n          if (fileName) {\n            currentLevel.push({\n              name: fileName,\n              path: path,\n              type: 'file',\n              children: components.map((comp, compIndex) => ({\n                name: comp.name,\n                path: `${path}#${comp.name}-${compIndex}`, // Add index to make path unique\n                type: 'file',\n                componentSlug: comp.slug,\n                uniqueKey: `${comp.slug}-${path}-${compIndex}` // Add explicit unique key property\n              }))\n            })\n          }\n        })\n\n        // Sort the structure (folders first, then alphabetically)\n        const sortStructure = (items: FileStructure[]): FileStructure[] => {\n          return items.sort((a, b) => {\n            // Folders first\n            if (a.type !== b.type) {\n              return a.type === 'folder' ? -1 : 1\n            }\n            // Then alphabetically\n            return a.name.localeCompare(b.name)\n          }).map(item => {\n            if (item.children) {\n              return { ...item, children: sortStructure(item.children) }\n            }\n            return item\n          })\n        }\n\n        setFileStructure(sortStructure(rootStructure))\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading file structure:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }, [])\n\n  function renderTree(items: FileStructure[], depth = 0) {\n    return (\n      <ul className={`pl-${depth * 4} space-y-1`} style={{ paddingLeft: depth * 16 }}>\n        {items.map((item, index) => (\n          <li key={item.uniqueKey || `${item.path}-${index}`} className=\"py-1\">\n            <div className=\"flex items-center\">\n              {item.type === 'folder' ? (\n                <FolderIcon className=\"h-4 w-4 text-blue-500 mr-2\" />\n              ) : item.componentSlug ? (\n                <div className=\"w-4 h-4 mr-2\" />\n              ) : (\n                <FileIcon className=\"h-4 w-4 text-gray-500 mr-2\" />\n              )}\n\n              {item.componentSlug ? (\n                <Link href={`/docs/${item.componentSlug}`} className=\"text-sm hover:underline text-violet-500\">\n                  {item.name}\n                </Link>\n              ) : (\n                <span className=\"text-sm font-medium\">{item.name}</span>\n              )}\n\n              {item.componentSlug && (\n                <Badge className=\"ml-2 text-xs bg-violet-50 text-violet-600 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n                  Component\n                </Badge>\n              )}\n            </div>\n\n            {item.children && item.children.length > 0 && renderTree(item.children, depth + 1)}\n          </li>\n        ))}\n      </ul>\n    )\n  }\n\n  if (loading) {\n    return (\n      <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Loading code structure...</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (fileStructure.length === 0) {\n    return (\n      <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No file structure information available.</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n      <CardContent className=\"p-6\">\n        {renderTree(fileStructure)}\n      </CardContent>\n    </Card>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-structure.tsx",
    "slug": "test-docs-project_components_code-structure_codestructure",
    "imports": [
      "Card",
      "CardContent",
      "FileIcon",
      "FolderIcon",
      "Badge",
      "Link"
    ],
    "references": [
      "FolderIcon",
      "FileIcon",
      "Link",
      "Badge",
      "Card",
      "CardContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_code-structure_codestructure",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-structure_codestructure",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-structure_codestructure",
        "target": "fileicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-structure_codestructure",
        "target": "foldericon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-structure_codestructure",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-structure_codestructure",
        "target": "link",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "object.entries(filesbypath)",
        "type": "uses",
        "weight": 2,
        "context": "calls forEach",
        "sourceLine": 49,
        "targetFunction": "forEach"
      }
    ],
    "methods": [
      {
        "name": "renderTree",
        "code": "function renderTree(items: FileStructure[], depth = 0) {\n    return (\n      <ul className={`pl-${depth * 4} space-y-1`} style={{ paddingLeft: depth * 16 }}>\n        {items.map((item, index) => (\n          <li key={item.uniqueKey || `${item.path}-${index}`} className=\"py-1\">\n            <div className=\"flex items-center\">\n              {item.type === 'folder' ? (\n                <FolderIcon className=\"h-4 w-4 text-blue-500 mr-2\" />\n              ) : item.componentSlug ? (\n                <div className=\"w-4 h-4 mr-2\" />\n              ) : (\n                <FileIcon className=\"h-4 w-4 text-gray-500 mr-2\" />\n              )}\n\n              {item.componentSlug ? (\n                <Link href={`/docs/${item.componentSlug}`} className=\"text-sm hover:underline text-violet-500\">\n                  {item.name}\n                </Link>\n              ) : (\n                <span className=\"text-sm font-medium\">{item.name}</span>\n              )}\n\n              {item.componentSlug && (\n                <Badge className=\"ml-2 text-xs bg-violet-50 text-violet-600 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n                  Component\n                </Badge>\n              )}\n            </div>\n\n            {item.children && item.children.length > 0 && renderTree(item.children, depth + 1)}\n          </li>\n        ))}\n      </ul>\n    )\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "items",
            "type": "FileStructure[]"
          },
          {
            "name": "depth",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "name": "fetchComponents",
    "kind": "function",
    "code": "async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Group components by their file paths\n        const filesByPath: Record<string, { name: string; slug: string }[]> = {}\n\n        // Process each component\n        data.forEach((comp: { name: string; slug: string; filePath: string }) => {\n          if (!comp.filePath) return\n\n          // Store the component in its path\n          const path = comp.filePath\n          if (!filesByPath[path]) {\n            filesByPath[path] = []\n          }\n          filesByPath[path].push({ name: comp.name, slug: comp.slug })\n        })\n\n        // Convert flat paths to a tree structure\n        const rootStructure: FileStructure[] = []\n\n        // Process each file path\n        Object.entries(filesByPath).forEach(([path, components]) => {\n          // Split the path into parts (folders/file)\n          const parts = path.split('/')\n          let currentLevel = rootStructure\n\n          // Process each part of the path except the last one (the file)\n          for (let i = 0; i < parts.length - 1; i++) {\n            const part = parts[i]\n            if (!part) continue // Skip empty parts\n\n            // Look for existing folder\n            let folder = currentLevel.find(item =>\n              item.type === 'folder' && item.name === part\n            )\n\n            // Create folder if it doesn't exist\n            if (!folder) {\n              folder = {\n                name: part,\n                path: parts.slice(0, i + 1).join('/'),\n                type: 'folder',\n                children: []\n              }\n              currentLevel.push(folder)\n            }\n\n            // Update current level to this folder's children\n            currentLevel = folder.children!\n          }\n\n          // Add the file at the current level\n          const fileName = parts[parts.length - 1]\n          if (fileName) {\n            currentLevel.push({\n              name: fileName,\n              path: path,\n              type: 'file',\n              children: components.map((comp, compIndex) => ({\n                name: comp.name,\n                path: `${path}#${comp.name}-${compIndex}`, // Add index to make path unique\n                type: 'file',\n                componentSlug: comp.slug,\n                uniqueKey: `${comp.slug}-${path}-${compIndex}` // Add explicit unique key property\n              }))\n            })\n          }\n        })\n\n        // Sort the structure (folders first, then alphabetically)\n        const sortStructure = (items: FileStructure[]): FileStructure[] => {\n          return items.sort((a, b) => {\n            // Folders first\n            if (a.type !== b.type) {\n              return a.type === 'folder' ? -1 : 1\n            }\n            // Then alphabetically\n            return a.name.localeCompare(b.name)\n          }).map(item => {\n            if (item.children) {\n              return { ...item, children: sortStructure(item.children) }\n            }\n            return item\n          })\n        }\n\n        setFileStructure(sortStructure(rootStructure))\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading file structure:', error)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-structure.tsx",
    "slug": "test-docs-project_components_code-structure_fetchcomponents",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "sortStructure",
    "kind": "function",
    "code": "const sortStructure = (items: FileStructure[]): FileStructure[] => {\n          return items.sort((a, b) => {\n            // Folders first\n            if (a.type !== b.type) {\n              return a.type === 'folder' ? -1 : 1\n            }\n            // Then alphabetically\n            return a.name.localeCompare(b.name)\n          }).map(item => {\n            if (item.children) {\n              return { ...item, children: sortStructure(item.children) }\n            }\n            return item\n          })\n        }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-structure.tsx",
    "slug": "test-docs-project_components_code-structure_sortstructure",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "renderTree",
    "kind": "function",
    "code": "function renderTree(items: FileStructure[], depth = 0) {\n    return (\n      <ul className={`pl-${depth * 4} space-y-1`} style={{ paddingLeft: depth * 16 }}>\n        {items.map((item, index) => (\n          <li key={item.uniqueKey || `${item.path}-${index}`} className=\"py-1\">\n            <div className=\"flex items-center\">\n              {item.type === 'folder' ? (\n                <FolderIcon className=\"h-4 w-4 text-blue-500 mr-2\" />\n              ) : item.componentSlug ? (\n                <div className=\"w-4 h-4 mr-2\" />\n              ) : (\n                <FileIcon className=\"h-4 w-4 text-gray-500 mr-2\" />\n              )}\n\n              {item.componentSlug ? (\n                <Link href={`/docs/${item.componentSlug}`} className=\"text-sm hover:underline text-violet-500\">\n                  {item.name}\n                </Link>\n              ) : (\n                <span className=\"text-sm font-medium\">{item.name}</span>\n              )}\n\n              {item.componentSlug && (\n                <Badge className=\"ml-2 text-xs bg-violet-50 text-violet-600 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n                  Component\n                </Badge>\n              )}\n            </div>\n\n            {item.children && item.children.length > 0 && renderTree(item.children, depth + 1)}\n          </li>\n        ))}\n      </ul>\n    )\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-structure.tsx",
    "slug": "test-docs-project_components_code-structure_rendertree",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CodeRelationships",
    "kind": "component",
    "code": "export function CodeRelationships({ entityId, entityType }: CodeRelationshipsProps) {\n  const [view, setView] = useState<\"dependencies\" | \"dependents\" | \"all\">(\"all\")\n  const [components, setComponents] = useState<CodeEntity[]>([])\n  const [relationships, setRelationships] = useState<Relationship[]>([])\n  const [loading, setLoading] = useState(true)\n\n  // Fetch component data\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: any) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp, targetMethod] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: any) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  // If entityId is provided, filter relationships for this entity\n  const filteredRelationships = useMemo(() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }, [entityId, view, relationships])\n\n  // Get the entities involved in the filtered relationships\n  const filteredEntities = useMemo(() => {\n    if (components.length === 0) return []\n\n    const entityIds = new Set<string>()\n    filteredRelationships.forEach((rel) => {\n      entityIds.add(rel.source)\n      entityIds.add(rel.target)\n    })\n    return components.filter((entity) => entityIds.has(entity.id))\n  }, [filteredRelationships, components])\n\n  // Get the current entity if entityId is provided\n  const currentEntity = useMemo(() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }, [entityId, components])\n\n  const getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }\n\n  const getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }\n\n  const getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }\n\n  if (loading) {\n    return (\n      <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n        <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n          <CardTitle>Code Relationships</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Loading relationship data...</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n      <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>{currentEntity ? `Code Relationships for ${currentEntity.name}` : \"Code Relationships\"}</CardTitle>\n          {currentEntity && (\n            <Tabs value={view} onValueChange={(v) => setView(v as any)}>\n              <TabsList className=\"bg-slate-100 dark:bg-slate-800\">\n                <TabsTrigger value=\"all\">All</TabsTrigger>\n                <TabsTrigger value=\"dependencies\">Dependencies</TabsTrigger>\n                <TabsTrigger value=\"dependents\">Dependents</TabsTrigger>\n              </TabsList>\n            </Tabs>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {filteredRelationships.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No relationships found.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {filteredRelationships.map((rel, index) => {\n              const sourceEntity = components.find((e) => e.id === rel.source)\n              const targetEntity = components.find((e) => e.id === rel.target)\n\n              if (!sourceEntity || !targetEntity) return null\n\n              return (\n                <div\n                  key={index}\n                  className=\"flex items-center gap-3 p-4 rounded-lg border border-slate-100 dark:border-slate-800\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    {getEntityIcon(sourceEntity.type)}\n                    <div>\n                      <div className=\"font-medium\">{sourceEntity.name}</div>\n                      <div className=\"text-xs text-muted-foreground font-mono\">{sourceEntity.filePath}</div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col items-center mx-4\">\n                    <Badge className={`${getRelationshipColor(rel.type)}`}>{getRelationshipLabel(rel.type)}</Badge>\n                    <ArrowRightIcon className=\"h-6 w-6 text-muted-foreground my-1\" />\n                  </div>\n\n                  <div className=\"flex items-center gap-2\">\n                    {getEntityIcon(targetEntity.type)}\n                    <div>\n                      <div className=\"font-medium\">{targetEntity.name}</div>\n                      <div className=\"text-xs text-muted-foreground font-mono\">{targetEntity.filePath}</div>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-relationships.tsx",
    "slug": "test-docs-project_components_code-relationships_coderelationships",
    "imports": [
      "Card",
      "CardContent",
      "CardHeader",
      "CardTitle",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "Badge",
      "Code",
      "Component",
      "Function",
      "FileCode",
      "ArrowRightIcon"
    ],
    "references": [
      "Code",
      "Function",
      "FileCode",
      "Card",
      "CardHeader",
      "CardTitle",
      "CardContent",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "Badge",
      "ArrowRightIcon"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "cardtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "code",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "component",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "function",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_coderelationships",
        "target": "arrowrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": [
      {
        "name": "getEntityIcon",
        "code": "const getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "type",
            "type": "CodeEntity[\"type\"]"
          }
        ]
      },
      {
        "name": "getRelationshipLabel",
        "code": "const getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "type",
            "type": "Relationship[\"type\"]"
          }
        ]
      },
      {
        "name": "getRelationshipColor",
        "code": "const getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "type",
            "type": "Relationship[\"type\"]"
          }
        ]
      }
    ]
  },
  {
    "name": "fetchData",
    "kind": "function",
    "code": "async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: any) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp, targetMethod] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: any) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-relationships.tsx",
    "slug": "test-docs-project_components_code-relationships_fetchdata",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getEntityIcon",
    "kind": "function",
    "code": "const getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-relationships.tsx",
    "slug": "test-docs-project_components_code-relationships_getentityicon",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getRelationshipLabel",
    "kind": "function",
    "code": "const getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"Imports\"\n      case \"extends\":\n        return \"Extends\"\n      case \"implements\":\n        return \"Implements\"\n      case \"calls\":\n        return \"Calls\"\n      case \"renders\":\n        return \"Renders\"\n      case \"uses\":\n        return \"Uses\"\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-relationships.tsx",
    "slug": "test-docs-project_components_code-relationships_getrelationshiplabel",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getRelationshipColor",
    "kind": "function",
    "code": "const getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"extends\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"implements\":\n        return \"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\"\n      case \"calls\":\n        return \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n      case \"renders\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      case \"uses\":\n        return \"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\"\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-relationships.tsx",
    "slug": "test-docs-project_components_code-relationships_getrelationshipcolor",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "ArrowLeft",
    "kind": "component",
    "code": "function ArrowLeft(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"m12 19-7-7 7-7\" />\n      <path d=\"M19 12H5\" />\n    </svg>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-relationships.tsx",
    "slug": "test-docs-project_components_code-relationships_arrowleft",
    "imports": [
      "Card",
      "CardContent",
      "CardHeader",
      "CardTitle",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "Badge",
      "Code",
      "Component",
      "Function",
      "FileCode",
      "ArrowRightIcon"
    ],
    "references": [
      "Code",
      "Function",
      "FileCode",
      "Card",
      "CardHeader",
      "CardTitle",
      "CardContent",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "Badge",
      "ArrowRightIcon"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "cardtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "code",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "component",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "function",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-relationships_arrowleft",
        "target": "arrowrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "CodeGraph",
    "kind": "component",
    "code": "export function CodeGraph({ entityId }: CodeGraphProps) {\n  const [filter, setFilter] = useState<\"all\" | \"component\" | \"class\" | \"function\" | \"method\">(\"all\")\n  const [selectedEntity, setSelectedEntity] = useState<CodeEntity | null>(null)\n  const [detailsOpen, setDetailsOpen] = useState(false)\n  const [zoom, setZoom] = useState(1)\n  const svgRef = useRef<SVGSVGElement>(null)\n\n  const [components, setComponents] = useState<CodeEntity[]>([])\n  const [relationships, setRelationships] = useState<Relationship[]>([])\n  const [loading, setLoading] = useState(true)\n\n  // Fetch component data\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  // Use useMemo to prevent recalculation on every render\n  const filteredEntities = useMemo(() => {\n    return filter === \"all\" ? components : components.filter((entity) => entity.type === filter)\n  }, [filter, components])\n\n  // Filter relationships based on the filtered entities\n  const filteredRelationships = useMemo(() => {\n    const filteredEntityIds = new Set(filteredEntities.map((e) => e.id))\n    return relationships.filter((rel) => filteredEntityIds.has(rel.source) && filteredEntityIds.has(rel.target))\n  }, [filteredEntities, relationships])\n\n  // Calculate node positions in a circle layout\n  const positions = useMemo(() => {\n    const radius = 200\n    const centerX = 400\n    const centerY = 300\n\n    return filteredEntities.map((entity, index) => {\n      const angle = (index / filteredEntities.length) * 2 * Math.PI\n      const x = centerX + radius * Math.cos(angle)\n      const y = centerY + radius * Math.sin(angle)\n\n      return {\n        id: entity.id,\n        x,\n        y,\n      }\n    })\n  }, [filteredEntities])\n\n  const handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }\n\n  const getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }\n\n  const getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }\n\n  const zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }\n\n  const zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }\n\n  if (loading) {\n    return (\n      <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n        <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n          <CardTitle>Code Visualization</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Loading code graph data...</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n      <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Code Visualization</CardTitle>\n          <div className=\"flex items-center gap-4\">\n            <Select value={filter} onValueChange={(value) => setFilter(value as any)}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"component\">Components</SelectItem>\n                <SelectItem value=\"class\">Classes</SelectItem>\n                <SelectItem value=\"function\">Functions</SelectItem>\n                <SelectItem value=\"method\">Methods</SelectItem>\n              </SelectContent>\n            </Select>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"icon\" onClick={zoomOut}>\n                <ZoomOut className=\"h-4 w-4\" />\n              </Button>\n              <span className=\"text-sm\">{Math.round(zoom * 100)}%</span>\n              <Button variant=\"outline\" size=\"icon\" onClick={zoomIn}>\n                <ZoomIn className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div className=\"relative bg-slate-50 dark:bg-slate-950 overflow-auto\" style={{ height: 600 }}>\n          <svg\n            ref={svgRef}\n            width=\"800\"\n            height=\"600\"\n            viewBox=\"0 0 800 600\"\n            className=\"mx-auto\"\n            style={{ transform: `scale(${zoom})`, transformOrigin: \"center\", transition: \"transform 0.2s\" }}\n          >\n            {/* Draw edges */}\n            {filteredRelationships.map((rel, index) => {\n              const sourcePos = positions.find((p) => p.id === rel.source)\n              const targetPos = positions.find((p) => p.id === rel.target)\n\n              if (!sourcePos || !targetPos) return null\n\n              // Calculate the angle for the arrow\n              const dx = targetPos.x - sourcePos.x\n              const dy = targetPos.y - sourcePos.y\n              const angle = Math.atan2(dy, dx)\n\n              // Calculate the position for the arrow (slightly before the target)\n              const nodeRadius = 30\n              const arrowX = targetPos.x - nodeRadius * Math.cos(angle)\n              const arrowY = targetPos.y - nodeRadius * Math.sin(angle)\n\n              // Calculate the label position (midpoint of the edge)\n              const labelX = (sourcePos.x + targetPos.x) / 2\n              const labelY = (sourcePos.y + targetPos.y) / 2 - 10\n\n              return (\n                <g key={`edge-${index}`}>\n                  <defs>\n                    <marker\n                      id={`arrowhead-${index}`}\n                      markerWidth=\"10\"\n                      markerHeight=\"7\"\n                      refX=\"0\"\n                      refY=\"3.5\"\n                      orient=\"auto\"\n                    >\n                      <polygon points=\"0 0, 10 3.5, 0 7\" fill={getEdgeColor(rel.type)} />\n                    </marker>\n                  </defs>\n                  <line\n                    x1={sourcePos.x}\n                    y1={sourcePos.y}\n                    x2={arrowX}\n                    y2={arrowY}\n                    stroke={getEdgeColor(rel.type)}\n                    strokeWidth=\"2\"\n                    markerEnd={`url(#arrowhead-${index})`}\n                  />\n                  <text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    fill={getEdgeColor(rel.type)}\n                    fontSize=\"12\"\n                    fontWeight=\"500\"\n                    className=\"select-none\"\n                  >\n                    {rel.type}\n                  </text>\n                </g>\n              )\n            })}\n\n            {/* Draw nodes */}\n            {filteredEntities.map((entity) => {\n              const pos = positions.find((p) => p.id === entity.id)\n              if (!pos) return null\n\n              const nodeColor = getNodeColor(entity.type)\n\n              return (\n                <g\n                  key={entity.id}\n                  transform={`translate(${pos.x}, ${pos.y})`}\n                  onClick={() => handleNodeClick(entity)}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <circle r=\"30\" fill=\"white\" stroke={nodeColor} strokeWidth=\"3\" className=\"dark:fill-slate-800\" />\n                  <text\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"middle\"\n                    fill={nodeColor}\n                    fontSize=\"12\"\n                    fontWeight=\"bold\"\n                    className=\"select-none\"\n                  >\n                    {entity.name.substring(0, 2)}\n                  </text>\n                  <text y=\"50\" textAnchor=\"middle\" fill=\"currentColor\" fontSize=\"12\" className=\"select-none\">\n                    {entity.name}\n                  </text>\n                </g>\n              )\n            })}\n          </svg>\n        </div>\n        <div className=\"p-4 border-t border-slate-100 dark:border-slate-800\">\n          <div className=\"flex flex-wrap gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-violet-500\"></div>\n              <span className=\"text-sm\">Component</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n              <span className=\"text-sm\">Class</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-emerald-500\"></div>\n              <span className=\"text-sm\">Function</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-amber-500\"></div>\n              <span className=\"text-sm\">Method</span>\n            </div>\n          </div>\n          <div className=\"mt-4 flex flex-wrap gap-4\">\n            <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n              imports\n            </Badge>\n            <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n              extends\n            </Badge>\n            <Badge className=\"bg-indigo-50 text-indigo-700 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-400 dark:border-indigo-800\">\n              implements\n            </Badge>\n            <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n              calls\n            </Badge>\n            <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n              renders\n            </Badge>\n            <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n              uses\n            </Badge>\n          </div>\n        </div>\n      </CardContent>\n      {selectedEntity && (\n        <CodeEntityDetails\n          entity={selectedEntity}\n          isOpen={detailsOpen}\n          onClose={() => setDetailsOpen(false)}\n        />\n      )}\n    </Card>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx",
    "slug": "test-docs-project_components_code-graph_codegraph",
    "imports": [
      "Card",
      "CardContent",
      "CardHeader",
      "CardTitle",
      "Select",
      "SelectContent",
      "SelectItem",
      "SelectTrigger",
      "SelectValue",
      "Badge",
      "ZoomIn",
      "ZoomOut",
      "Button",
      "CodeEntityDetails",
      "MinusIcon",
      "PlusIcon"
    ],
    "references": [
      "Card",
      "CardHeader",
      "CardTitle",
      "CardContent",
      "Select",
      "SelectTrigger",
      "SelectValue",
      "SelectContent",
      "SelectItem",
      "Button",
      "ZoomOut",
      "ZoomIn",
      "Badge",
      "CodeEntityDetails"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "cardtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "select",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "selectcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "selectitem",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "selecttrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "selectvalue",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "zoomin",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "zoomout",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "codeentitydetails",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "minusicon",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_components_code-graph_codegraph",
        "target": "plusicon",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": [
      {
        "name": "handleNodeClick",
        "code": "const handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "entity",
            "type": "CodeEntity"
          }
        ]
      },
      {
        "name": "getNodeColor",
        "code": "const getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "type",
            "type": "CodeEntity[\"type\"]"
          }
        ]
      },
      {
        "name": "getEdgeColor",
        "code": "const getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "type",
            "type": "Relationship[\"type\"]"
          }
        ]
      },
      {
        "name": "zoomIn",
        "code": "const zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "zoomOut",
        "code": "const zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "fetchData",
    "kind": "function",
    "code": "async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: data.type || \"component\",\n              filePath: data.filePath || `src/components/${comp.name}`,\n              code: data.sourceCode || data.code || \"\"\n            }\n          })\n        )\n\n        // Extract relationships from component data\n        const relationshipsData: Relationship[] = []\n\n        // For each component, check dependencies and references\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n\n            // Check for imports/dependencies\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetComp = componentsData.find(c => c.name === importItem || c.id === importItem)\n                if (targetComp) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // Check for method calls\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: { name: string; calls?: string[] }) => {\n                if (method.calls && Array.isArray(method.calls)) {\n                  method.calls.forEach((call: string) => {\n                    const [targetComp] = call.split('.')\n                    const target = componentsData.find(c => c.name === targetComp)\n                    if (target) {\n                      relationshipsData.push({\n                        source: comp.slug,\n                        target: target.id,\n                        type: \"calls\"\n                      })\n                    }\n                  })\n                }\n              })\n            }\n\n            // Check for similarity warnings (these can indicate relationships)\n            if (data.similarityWarnings && Array.isArray(data.similarityWarnings)) {\n              data.similarityWarnings.forEach((warning: { similarTo: string; score: number; reason: string }) => {\n                const similarCompName = warning.similarTo.split('.')[0]\n                const targetComp = componentsData.find(c => c.name === similarCompName)\n\n                if (targetComp && warning.score > 0.7) { // Only consider strong similarities\n                  // Determine relationship type based on similarity and component types\n                  let relType: Relationship[\"type\"] = \"uses\"\n\n                  // If reason contains certain keywords, use more specific relationship type\n                  const reason = warning.reason.toLowerCase()\n                  if (reason.includes(\"extends\") || reason.includes(\"inherits\")) {\n                    relType = \"extends\"\n                  } else if (reason.includes(\"implements\")) {\n                    relType = \"implements\"\n                  } else if (reason.includes(\"renders\") || reason.includes(\"displays\")) {\n                    relType = \"renders\"\n                  } else if (reason.includes(\"calls\") || reason.includes(\"invokes\")) {\n                    relType = \"calls\"\n                  }\n\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetComp.id,\n                    type: relType\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx",
    "slug": "test-docs-project_components_code-graph_fetchdata",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleNodeClick",
    "kind": "function",
    "code": "const handleNodeClick = (entity: CodeEntity) => {\n    setSelectedEntity(entity)\n    setDetailsOpen(true)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx",
    "slug": "test-docs-project_components_code-graph_handlenodeclick",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getNodeColor",
    "kind": "function",
    "code": "const getNodeColor = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return \"#8b5cf6\" // violet-500\n      case \"class\":\n        return \"#3b82f6\" // blue-500\n      case \"function\":\n        return \"#10b981\" // emerald-500\n      case \"method\":\n        return \"#f59e0b\" // amber-500\n      default:\n        return \"#8b5cf6\" // violet-500 as default\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx",
    "slug": "test-docs-project_components_code-graph_getnodecolor",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getEdgeColor",
    "kind": "function",
    "code": "const getEdgeColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"imports\":\n        return \"#3b82f6\" // blue-500\n      case \"extends\":\n        return \"#8b5cf6\" // violet-500\n      case \"implements\":\n        return \"#6366f1\" // indigo-500\n      case \"calls\":\n        return \"#f59e0b\" // amber-500\n      case \"renders\":\n        return \"#10b981\" // emerald-500\n      case \"uses\":\n        return \"#8b5cf6\" // violet-500\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx",
    "slug": "test-docs-project_components_code-graph_getedgecolor",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "zoomIn",
    "kind": "function",
    "code": "const zoomIn = () => {\n    setZoom((prev) => Math.min(prev + 0.1, 2))\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx",
    "slug": "test-docs-project_components_code-graph_zoomin",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "zoomOut",
    "kind": "function",
    "code": "const zoomOut = () => {\n    setZoom((prev) => Math.max(prev - 0.1, 0.5))\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx",
    "slug": "test-docs-project_components_code-graph_zoomout",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "ArrowLeft",
    "kind": "component",
    "code": "function ArrowLeft(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"m12 19-7-7 7-7\" />\n      <path d=\"M19 12H5\" />\n    </svg>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-graph.tsx",
    "slug": "test-docs-project_components_code-graph_arrowleft",
    "imports": [
      "Card",
      "CardContent",
      "CardHeader",
      "CardTitle",
      "Select",
      "SelectContent",
      "SelectItem",
      "SelectTrigger",
      "SelectValue",
      "Badge",
      "ZoomIn",
      "ZoomOut",
      "Button",
      "CodeEntityDetails",
      "MinusIcon",
      "PlusIcon"
    ],
    "references": [
      "Card",
      "CardHeader",
      "CardTitle",
      "CardContent",
      "Select",
      "SelectTrigger",
      "SelectValue",
      "SelectContent",
      "SelectItem",
      "Button",
      "ZoomOut",
      "ZoomIn",
      "Badge",
      "CodeEntityDetails"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "cardtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "select",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "selectcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "selectitem",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "selecttrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "selectvalue",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "zoomin",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "zoomout",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "codeentitydetails",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "minusicon",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_components_code-graph_arrowleft",
        "target": "plusicon",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "CodeEntityDetails",
    "kind": "component",
    "code": "export function CodeEntityDetails({ entity, isOpen, onClose }: CodeEntityDetailsProps) {\n  if (!entity) return null\n\n  const getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }\n\n  const getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className=\"max-w-3xl\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-3\">\n            {getEntityIcon()}\n            <DialogTitle className=\"text-xl\">{entity.name}</DialogTitle>\n            {getEntityTypeBadge()}\n          </div>\n          <p className=\"text-sm text-muted-foreground font-mono mt-2\">{entity.filePath}</p>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"code\">\n          <TabsList className=\"mb-4\">\n            <TabsTrigger value=\"code\">Code</TabsTrigger>\n            <TabsTrigger value=\"usage\">Usage</TabsTrigger>\n            <TabsTrigger value=\"dependencies\">Dependencies</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"code\">\n            <CodeBlock code={entity.code || \"\"} language=\"tsx\" />\n          </TabsContent>\n          <TabsContent value=\"usage\">\n            <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md\">\n              <p className=\"text-muted-foreground\">Usage examples will appear here.</p>\n            </div>\n          </TabsContent>\n          <TabsContent value=\"dependencies\">\n            <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md\">\n              <p className=\"text-muted-foreground\">Dependencies will appear here.</p>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-entity-details.tsx",
    "slug": "test-docs-project_components_code-entity-details_codeentitydetails",
    "imports": [
      "Dialog",
      "DialogContent",
      "DialogHeader",
      "DialogTitle",
      "Tabs",
      "TabsContent",
      "TabsList",
      "TabsTrigger",
      "Badge",
      "CodeBlock",
      "Component",
      "Code",
      "Function",
      "FileCode",
      "CodeEntity"
    ],
    "references": [
      "Code",
      "Function",
      "FileCode",
      "Badge",
      "Dialog",
      "DialogContent",
      "DialogHeader",
      "DialogTitle",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "TabsContent",
      "CodeBlock"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "tabscontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "codeblock",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "component",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "code",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "function",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-entity-details_codeentitydetails",
        "target": "codeentity",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": [
      {
        "name": "getEntityIcon",
        "code": "const getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "getEntityTypeBadge",
        "code": "const getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "getEntityIcon",
    "kind": "function",
    "code": "const getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-entity-details.tsx",
    "slug": "test-docs-project_components_code-entity-details_getentityicon",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getEntityTypeBadge",
    "kind": "function",
    "code": "const getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-entity-details.tsx",
    "slug": "test-docs-project_components_code-entity-details_getentitytypebadge",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CodeBlock",
    "kind": "component",
    "code": "export function CodeBlock({ code, language }: CodeBlockProps) {\n  const [copied, setCopied] = useState(false)\n\n  const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }\n\n  return (\n    <div className=\"relative group\">\n      <SyntaxHighlighter\n        language={language}\n        style={typeof window !== 'undefined' && window.matchMedia('(prefers-color-scheme: dark)').matches ? oneDark : oneLight}\n        customStyle={{\n          borderRadius: '0.75rem',\n          border: '1px solid',\n          borderColor: 'var(--border-color, #e5e7eb)',\n          background: 'var(--background, #fff)',\n          padding: '1.5rem',\n          fontSize: '0.875rem',\n          boxShadow: '0 1px 2px rgba(0,0,0,0.02)',\n          overflowX: 'auto',\n        }}\n        codeTagProps={{ style: { fontFamily: 'monospace' } }}\n      >\n        {code}\n      </SyntaxHighlighter>\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        className=\"absolute top-3 right-3 h-8 w-8 opacity-0 group-hover:opacity-100 transition-opacity\"\n        onClick={copyToClipboard}\n      >\n        {copied ? <CheckIcon className=\"h-4 w-4\" /> : <CopyIcon className=\"h-4 w-4\" />}\n      </Button>\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-block.tsx",
    "slug": "test-docs-project_components_code-block_codeblock",
    "imports": [
      "Button",
      "CheckIcon",
      "CopyIcon",
      "SyntaxHighlighter"
    ],
    "references": [
      "SyntaxHighlighter",
      "Button",
      "CheckIcon",
      "CopyIcon"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_code-block_codeblock",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-block_codeblock",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-block_codeblock",
        "target": "copyicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_code-block_codeblock",
        "target": "syntaxhighlighter",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": [
      {
        "name": "copyToClipboard",
        "code": "const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "copyToClipboard",
    "kind": "function",
    "code": "const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/code-block.tsx",
    "slug": "test-docs-project_components_code-block_copytoclipboard",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "ChatBubble",
    "kind": "component",
    "code": "export function ChatBubble() {\n  const [isOpen, setIsOpen] = useState(false)\n  const [isExpanded, setIsExpanded] = useState(false)\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    { text: \"Hi there! I can help you understand your code. What would you like to know?\", isUser: false, role: \"assistant\" },\n  ])\n  const [input, setInput] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n\n  // Convert UI chat messages to API format\n  const getApiMessages = (): ApiChatMessage[] => {\n    return messages\n      .filter(msg => msg.role !== \"system\") // Filter out system messages if any\n      .map(msg => ({\n        role: msg.role || (msg.isUser ? \"user\" : \"assistant\"),\n        content: msg.text\n      }))\n  }\n\n  const handleSend = async () => {\n    if (!input.trim() || isLoading) return\n\n    // Add user message to chat\n    setMessages([...messages, { text: input, isUser: true, role: \"user\" }])\n    const userQuery = input\n    setInput(\"\")\n    setIsLoading(true)\n\n    try {\n      // Make API request to chat endpoint\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          history: getApiMessages(),\n          query: userQuery,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`API request failed with status ${response.status}`)\n      }\n\n      const data = await response.json()\n\n      // Add AI response to chat\n      setMessages(prev => [\n        ...prev,\n        { text: data.response, isUser: false, role: \"assistant\" },\n      ])\n    } catch (error) {\n      console.error(\"Error sending message:\", error)\n\n      // Add error message to chat\n      setMessages(prev => [\n        ...prev,\n        {\n          text: \"Sorry, I encountered an error. Please try again or check if Ollama is running properly.\",\n          isUser: false,\n          role: \"assistant\"\n        },\n      ])\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const toggleExpand = () => {\n    setIsExpanded(!isExpanded)\n  }\n\n  const clearMessages = () => {\n    setMessages([\n      { text: \"Hi there! I can help you understand your code. What would you like to know?\", isUser: false, role: \"assistant\" },\n    ])\n  }\n\n  // Custom renderer for code blocks with syntax highlighting\n  const MarkdownMessage = ({ content }: { content: string }) => (\n    <ReactMarkdown\n      rehypePlugins={[rehypeRaw, rehypeHighlight]}\n      components={{\n        // Style for code blocks\n        code({ className, children, ...props }: React.HTMLProps<HTMLElement> & { inline?: boolean }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          const inline = props.inline\n          return !inline ? (\n            <div className=\"relative rounded-md overflow-hidden my-3 shadow-md\">\n              <div className=\"px-4 py-1.5 bg-slate-700 text-xs font-mono text-slate-200 rounded-t-md border-b border-slate-600 flex items-center justify-between\">\n                <span>{match?.[1] || 'code'}</span>\n              </div>\n              <pre className=\"p-4 overflow-x-auto bg-[#161b22] text-white\">\n                <code className={className} {...props}>\n                  {children}\n                </code>\n              </pre>\n            </div>\n          ) : (\n            <code className=\"px-1.5 py-0.5 mx-0.5 bg-gray-200 dark:bg-slate-700 dark:text-gray-200 text-gray-800 rounded text-sm font-mono\" {...props}>\n              {children}\n            </code>\n          )\n        },\n        // Style for links\n        a(props) {\n          return (\n            <a\n              {...props}\n              className=\"text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 hover:underline font-medium\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            />\n          )\n        },\n        // Style for lists\n        ul({ children }) {\n          return <ul className=\"list-disc pl-6 my-3 space-y-2\">{children}</ul>\n        },\n        ol({ children }) {\n          return <ol className=\"list-decimal pl-6 my-3 space-y-2\">{children}</ol>\n        },\n        // Style for list items\n        li({ children }) {\n          return <li className=\"text-slate-700 dark:text-slate-300\">{children}</li>\n        },\n        // Style for headings\n        h1({ children }) {\n          return <h1 className=\"text-xl font-bold my-4 pb-1 border-b border-slate-200 dark:border-slate-700 text-slate-900 dark:text-white\">{children}</h1>\n        },\n        h2({ children }) {\n          return <h2 className=\"text-lg font-bold my-3 text-slate-800 dark:text-slate-200\">{children}</h2>\n        },\n        h3({ children }) {\n          return <h3 className=\"text-md font-semibold my-2 text-slate-700 dark:text-slate-300\">{children}</h3>\n        },\n        // Style for paragraphs\n        p({ children }) {\n          return <p className=\"my-3 text-slate-700 dark:text-slate-300 leading-relaxed\">{children}</p>\n        },\n        // Style for blockquotes\n        blockquote({ children }) {\n          return <blockquote className=\"border-l-4 border-slate-300 dark:border-slate-600 pl-4 py-1 my-3 text-slate-600 dark:text-slate-400 italic\">{children}</blockquote>\n        },\n        // Style for horizontal rules\n        hr() {\n          return <hr className=\"my-4 border-slate-200 dark:border-slate-700\" />\n        },\n        // Style for tables\n        table({ children }) {\n          return (\n            <div className=\"overflow-x-auto my-3\">\n              <table className=\"min-w-full divide-y divide-slate-200 dark:divide-slate-700 border border-slate-200 dark:border-slate-700 rounded-md\">\n                {children}\n              </table>\n            </div>\n          )\n        },\n        thead({ children }) {\n          return <thead className=\"bg-slate-100 dark:bg-slate-800\">{children}</thead>\n        },\n        tbody({ children }) {\n          return <tbody className=\"divide-y divide-slate-200 dark:divide-slate-700\">{children}</tbody>\n        },\n        tr({ children }) {\n          return <tr>{children}</tr>\n        },\n        th({ children }) {\n          return <th className=\"px-4 py-2 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">{children}</th>\n        },\n        td({ children }) {\n          return <td className=\"px-4 py-2 text-slate-700 dark:text-slate-300\">{children}</td>\n        }\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  )\n\n  return (\n    <>\n      <Button\n        className=\"fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg bg-gradient-to-r from-violet-500 to-indigo-600 hover:from-violet-600 hover:to-indigo-700\"\n        onClick={() => setIsOpen(true)}\n      >\n        <MessageSquare className=\"h-6 w-6\" />\n      </Button>\n\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: 20 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: 20 }}\n            transition={{ duration: 0.2 }}\n            className={`fixed ${isExpanded ? \"inset-4 md:inset-10\" : \"bottom-6 right-6 w-96 sm:w-[460px] h-[600px]\"\n              } bg-white dark:bg-slate-900 rounded-xl shadow-xl flex flex-col overflow-hidden border border-slate-100 dark:border-slate-800 z-50`}\n          >\n            <div className=\"p-4 border-b border-slate-100 dark:border-slate-800 flex items-center justify-between bg-gradient-to-r from-violet-500 to-indigo-600 text-white\">\n              <div className=\"flex items-center gap-2\">\n                <Avatar className=\"h-8 w-8 border-2 border-white/20\">\n                  <AvatarImage src=\"/placeholder.svg?height=32&width=32\" />\n                  <AvatarFallback>AI</AvatarFallback>\n                </Avatar>\n                <h3 className=\"font-medium\">Code Assistant hh</h3>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={clearMessages}\n                  className=\"text-white hover:bg-white/20 flex items-center gap-1\"\n                  title=\"Clear chat\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                  <span>Clear</span>\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" onClick={toggleExpand} className=\"text-white hover:bg-white/20\">\n                  {isExpanded ? <Minimize2 className=\"h-4 w-4\" /> : <Maximize2 className=\"h-4 w-4\" />}\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  <Cross2Icon className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n              {messages.map((message, i) => (\n                <div key={i} className={`flex ${message.isUser ? \"justify-end\" : \"justify-start\"}`}>\n                  {!message.isUser && (\n                    <Avatar className=\"h-8 w-8 mr-2 mt-1 flex-shrink-0\">\n                      <AvatarImage src=\"/placeholder.svg?height=32&width=32\" />\n                      <AvatarFallback>AI</AvatarFallback>\n                    </Avatar>\n                  )}\n                  <div\n                    className={`max-w-[87%] rounded-xl ${message.isUser\n                      ? \"bg-gradient-to-r from-violet-500 to-indigo-600 text-white p-3\"\n                      : \"bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 shadow-sm p-4\"\n                      }`}\n                  >\n                    {message.isUser ? (\n                      message.text\n                    ) : (\n                      <MarkdownMessage content={message.text} />\n                    )}\n                  </div>\n                  {message.isUser && (\n                    <Avatar className=\"h-8 w-8 ml-2 mt-1 flex-shrink-0\">\n                      <AvatarImage src=\"/placeholder.svg?height=32&width=32\" />\n                      <AvatarFallback>You</AvatarFallback>\n                    </Avatar>\n                  )}\n                </div>\n              ))}\n              {isLoading && (\n                <div className=\"flex justify-start\">\n                  <Avatar className=\"h-8 w-8 mr-2 mt-1 flex-shrink-0\">\n                    <AvatarImage src=\"/placeholder.svg?height=32&width=32\" />\n                    <AvatarFallback>AI</AvatarFallback>\n                  </Avatar>\n                  <div className=\"max-w-[87%] rounded-xl p-4 bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 shadow-sm\">\n                    <div className=\"flex space-x-2\">\n                      <div className=\"h-2 w-2 bg-violet-400 rounded-full animate-bounce\" style={{ animationDelay: \"0ms\" }}></div>\n                      <div className=\"h-2 w-2 bg-violet-400 rounded-full animate-bounce\" style={{ animationDelay: \"150ms\" }}></div>\n                      <div className=\"h-2 w-2 bg-violet-400 rounded-full animate-bounce\" style={{ animationDelay: \"300ms\" }}></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"p-4 border-t border-slate-100 dark:border-slate-800 bg-white/50 dark:bg-slate-900/50 backdrop-blur-sm\">\n              <div className=\"flex gap-2 items-end\">\n                <Textarea\n                  placeholder=\"Ask about your code...\"\n                  className=\"min-h-10 resize-none rounded-xl border-slate-200 dark:border-slate-700 focus-visible:ring-violet-500\"\n                  value={input}\n                  onChange={(e) => setInput(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\" && !e.shiftKey) {\n                      e.preventDefault()\n                      handleSend()\n                    }\n                  }}\n                  disabled={isLoading}\n                />\n                <Button\n                  onClick={handleSend}\n                  size=\"icon\"\n                  className=\"h-10 w-10 rounded-full bg-gradient-to-r from-violet-500 to-indigo-600 hover:from-violet-600 hover:to-indigo-700\"\n                  disabled={isLoading}\n                >\n                  <PaperPlaneIcon className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/chat-bubble.tsx",
    "slug": "test-docs-project_components_chat-bubble_chatbubble",
    "imports": [
      "AnimatePresence",
      "MessageSquare",
      "Maximize2",
      "Minimize2",
      "Trash2",
      "Button",
      "Textarea",
      "Avatar",
      "AvatarFallback",
      "AvatarImage",
      "Cross2Icon",
      "PaperPlaneIcon",
      "ReactMarkdown"
    ],
    "references": [
      "ReactMarkdown",
      "Button",
      "MessageSquare",
      "AnimatePresence",
      "Avatar",
      "AvatarImage",
      "AvatarFallback",
      "Trash2",
      "Minimize2",
      "Maximize2",
      "Cross2Icon",
      "MarkdownMessage",
      "Textarea",
      "PaperPlaneIcon"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "animatepresence",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "messagesquare",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "maximize2",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "minimize2",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "trash2",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "textarea",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "avatar",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "avatarfallback",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "avatarimage",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "cross2icon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "paperplaneicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "reactmarkdown",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_chat-bubble_chatbubble",
        "target": "markdownmessage",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "target": "/language-(\\w+)/",
        "type": "uses",
        "weight": 2,
        "context": "calls exec",
        "sourceLine": 114,
        "targetFunction": "exec"
      }
    ],
    "methods": [
      {
        "name": "getApiMessages",
        "code": "const getApiMessages = (): ApiChatMessage[] => {\n    return messages\n      .filter(msg => msg.role !== \"system\") // Filter out system messages if any\n      .map(msg => ({\n        role: msg.role || (msg.isUser ? \"user\" : \"assistant\"),\n        content: msg.text\n      }))\n  }",
        "returnType": "ApiChatMessage[]",
        "params": []
      },
      {
        "name": "handleSend",
        "code": "const handleSend = async () => {\n    if (!input.trim() || isLoading) return\n\n    // Add user message to chat\n    setMessages([...messages, { text: input, isUser: true, role: \"user\" }])\n    const userQuery = input\n    setInput(\"\")\n    setIsLoading(true)\n\n    try {\n      // Make API request to chat endpoint\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          history: getApiMessages(),\n          query: userQuery,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`API request failed with status ${response.status}`)\n      }\n\n      const data = await response.json()\n\n      // Add AI response to chat\n      setMessages(prev => [\n        ...prev,\n        { text: data.response, isUser: false, role: \"assistant\" },\n      ])\n    } catch (error) {\n      console.error(\"Error sending message:\", error)\n\n      // Add error message to chat\n      setMessages(prev => [\n        ...prev,\n        {\n          text: \"Sorry, I encountered an error. Please try again or check if Ollama is running properly.\",\n          isUser: false,\n          role: \"assistant\"\n        },\n      ])\n    } finally {\n      setIsLoading(false)\n    }\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "toggleExpand",
        "code": "const toggleExpand = () => {\n    setIsExpanded(!isExpanded)\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "clearMessages",
        "code": "const clearMessages = () => {\n    setMessages([\n      { text: \"Hi there! I can help you understand your code. What would you like to know?\", isUser: false, role: \"assistant\" },\n    ])\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "MarkdownMessage",
        "code": "const MarkdownMessage = ({ content }: { content: string }) => (\n    <ReactMarkdown\n      rehypePlugins={[rehypeRaw, rehypeHighlight]}\n      components={{\n        // Style for code blocks\n        code({ className, children, ...props }: React.HTMLProps<HTMLElement> & { inline?: boolean }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          const inline = props.inline\n          return !inline ? (\n            <div className=\"relative rounded-md overflow-hidden my-3 shadow-md\">\n              <div className=\"px-4 py-1.5 bg-slate-700 text-xs font-mono text-slate-200 rounded-t-md border-b border-slate-600 flex items-center justify-between\">\n                <span>{match?.[1] || 'code'}</span>\n              </div>\n              <pre className=\"p-4 overflow-x-auto bg-[#161b22] text-white\">\n                <code className={className} {...props}>\n                  {children}\n                </code>\n              </pre>\n            </div>\n          ) : (\n            <code className=\"px-1.5 py-0.5 mx-0.5 bg-gray-200 dark:bg-slate-700 dark:text-gray-200 text-gray-800 rounded text-sm font-mono\" {...props}>\n              {children}\n            </code>\n          )\n        },\n        // Style for links\n        a(props) {\n          return (\n            <a\n              {...props}\n              className=\"text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 hover:underline font-medium\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            />\n          )\n        },\n        // Style for lists\n        ul({ children }) {\n          return <ul className=\"list-disc pl-6 my-3 space-y-2\">{children}</ul>\n        },\n        ol({ children }) {\n          return <ol className=\"list-decimal pl-6 my-3 space-y-2\">{children}</ol>\n        },\n        // Style for list items\n        li({ children }) {\n          return <li className=\"text-slate-700 dark:text-slate-300\">{children}</li>\n        },\n        // Style for headings\n        h1({ children }) {\n          return <h1 className=\"text-xl font-bold my-4 pb-1 border-b border-slate-200 dark:border-slate-700 text-slate-900 dark:text-white\">{children}</h1>\n        },\n        h2({ children }) {\n          return <h2 className=\"text-lg font-bold my-3 text-slate-800 dark:text-slate-200\">{children}</h2>\n        },\n        h3({ children }) {\n          return <h3 className=\"text-md font-semibold my-2 text-slate-700 dark:text-slate-300\">{children}</h3>\n        },\n        // Style for paragraphs\n        p({ children }) {\n          return <p className=\"my-3 text-slate-700 dark:text-slate-300 leading-relaxed\">{children}</p>\n        },\n        // Style for blockquotes\n        blockquote({ children }) {\n          return <blockquote className=\"border-l-4 border-slate-300 dark:border-slate-600 pl-4 py-1 my-3 text-slate-600 dark:text-slate-400 italic\">{children}</blockquote>\n        },\n        // Style for horizontal rules\n        hr() {\n          return <hr className=\"my-4 border-slate-200 dark:border-slate-700\" />\n        },\n        // Style for tables\n        table({ children }) {\n          return (\n            <div className=\"overflow-x-auto my-3\">\n              <table className=\"min-w-full divide-y divide-slate-200 dark:divide-slate-700 border border-slate-200 dark:border-slate-700 rounded-md\">\n                {children}\n              </table>\n            </div>\n          )\n        },\n        thead({ children }) {\n          return <thead className=\"bg-slate-100 dark:bg-slate-800\">{children}</thead>\n        },\n        tbody({ children }) {\n          return <tbody className=\"divide-y divide-slate-200 dark:divide-slate-700\">{children}</tbody>\n        },\n        tr({ children }) {\n          return <tr>{children}</tr>\n        },\n        th({ children }) {\n          return <th className=\"px-4 py-2 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">{children}</th>\n        },\n        td({ children }) {\n          return <td className=\"px-4 py-2 text-slate-700 dark:text-slate-300\">{children}</td>\n        }\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  )",
        "returnType": "void",
        "params": [
          {
            "name": "{ content }",
            "type": "{ content: string }"
          }
        ]
      }
    ]
  },
  {
    "name": "getApiMessages",
    "kind": "function",
    "code": "const getApiMessages = (): ApiChatMessage[] => {\n    return messages\n      .filter(msg => msg.role !== \"system\") // Filter out system messages if any\n      .map(msg => ({\n        role: msg.role || (msg.isUser ? \"user\" : \"assistant\"),\n        content: msg.text\n      }))\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/chat-bubble.tsx",
    "slug": "test-docs-project_components_chat-bubble_getapimessages",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleSend",
    "kind": "function",
    "code": "const handleSend = async () => {\n    if (!input.trim() || isLoading) return\n\n    // Add user message to chat\n    setMessages([...messages, { text: input, isUser: true, role: \"user\" }])\n    const userQuery = input\n    setInput(\"\")\n    setIsLoading(true)\n\n    try {\n      // Make API request to chat endpoint\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          history: getApiMessages(),\n          query: userQuery,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`API request failed with status ${response.status}`)\n      }\n\n      const data = await response.json()\n\n      // Add AI response to chat\n      setMessages(prev => [\n        ...prev,\n        { text: data.response, isUser: false, role: \"assistant\" },\n      ])\n    } catch (error) {\n      console.error(\"Error sending message:\", error)\n\n      // Add error message to chat\n      setMessages(prev => [\n        ...prev,\n        {\n          text: \"Sorry, I encountered an error. Please try again or check if Ollama is running properly.\",\n          isUser: false,\n          role: \"assistant\"\n        },\n      ])\n    } finally {\n      setIsLoading(false)\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/chat-bubble.tsx",
    "slug": "test-docs-project_components_chat-bubble_handlesend",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "toggleExpand",
    "kind": "function",
    "code": "const toggleExpand = () => {\n    setIsExpanded(!isExpanded)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/chat-bubble.tsx",
    "slug": "test-docs-project_components_chat-bubble_toggleexpand",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "clearMessages",
    "kind": "function",
    "code": "const clearMessages = () => {\n    setMessages([\n      { text: \"Hi there! I can help you understand your code. What would you like to know?\", isUser: false, role: \"assistant\" },\n    ])\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/chat-bubble.tsx",
    "slug": "test-docs-project_components_chat-bubble_clearmessages",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "MarkdownMessage",
    "kind": "component",
    "code": "const MarkdownMessage = ({ content }: { content: string }) => (\n    <ReactMarkdown\n      rehypePlugins={[rehypeRaw, rehypeHighlight]}\n      components={{\n        // Style for code blocks\n        code({ className, children, ...props }: React.HTMLProps<HTMLElement> & { inline?: boolean }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          const inline = props.inline\n          return !inline ? (\n            <div className=\"relative rounded-md overflow-hidden my-3 shadow-md\">\n              <div className=\"px-4 py-1.5 bg-slate-700 text-xs font-mono text-slate-200 rounded-t-md border-b border-slate-600 flex items-center justify-between\">\n                <span>{match?.[1] || 'code'}</span>\n              </div>\n              <pre className=\"p-4 overflow-x-auto bg-[#161b22] text-white\">\n                <code className={className} {...props}>\n                  {children}\n                </code>\n              </pre>\n            </div>\n          ) : (\n            <code className=\"px-1.5 py-0.5 mx-0.5 bg-gray-200 dark:bg-slate-700 dark:text-gray-200 text-gray-800 rounded text-sm font-mono\" {...props}>\n              {children}\n            </code>\n          )\n        },\n        // Style for links\n        a(props) {\n          return (\n            <a\n              {...props}\n              className=\"text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 hover:underline font-medium\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            />\n          )\n        },\n        // Style for lists\n        ul({ children }) {\n          return <ul className=\"list-disc pl-6 my-3 space-y-2\">{children}</ul>\n        },\n        ol({ children }) {\n          return <ol className=\"list-decimal pl-6 my-3 space-y-2\">{children}</ol>\n        },\n        // Style for list items\n        li({ children }) {\n          return <li className=\"text-slate-700 dark:text-slate-300\">{children}</li>\n        },\n        // Style for headings\n        h1({ children }) {\n          return <h1 className=\"text-xl font-bold my-4 pb-1 border-b border-slate-200 dark:border-slate-700 text-slate-900 dark:text-white\">{children}</h1>\n        },\n        h2({ children }) {\n          return <h2 className=\"text-lg font-bold my-3 text-slate-800 dark:text-slate-200\">{children}</h2>\n        },\n        h3({ children }) {\n          return <h3 className=\"text-md font-semibold my-2 text-slate-700 dark:text-slate-300\">{children}</h3>\n        },\n        // Style for paragraphs\n        p({ children }) {\n          return <p className=\"my-3 text-slate-700 dark:text-slate-300 leading-relaxed\">{children}</p>\n        },\n        // Style for blockquotes\n        blockquote({ children }) {\n          return <blockquote className=\"border-l-4 border-slate-300 dark:border-slate-600 pl-4 py-1 my-3 text-slate-600 dark:text-slate-400 italic\">{children}</blockquote>\n        },\n        // Style for horizontal rules\n        hr() {\n          return <hr className=\"my-4 border-slate-200 dark:border-slate-700\" />\n        },\n        // Style for tables\n        table({ children }) {\n          return (\n            <div className=\"overflow-x-auto my-3\">\n              <table className=\"min-w-full divide-y divide-slate-200 dark:divide-slate-700 border border-slate-200 dark:border-slate-700 rounded-md\">\n                {children}\n              </table>\n            </div>\n          )\n        },\n        thead({ children }) {\n          return <thead className=\"bg-slate-100 dark:bg-slate-800\">{children}</thead>\n        },\n        tbody({ children }) {\n          return <tbody className=\"divide-y divide-slate-200 dark:divide-slate-700\">{children}</tbody>\n        },\n        tr({ children }) {\n          return <tr>{children}</tr>\n        },\n        th({ children }) {\n          return <th className=\"px-4 py-2 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">{children}</th>\n        },\n        td({ children }) {\n          return <td className=\"px-4 py-2 text-slate-700 dark:text-slate-300\">{children}</td>\n        }\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  )",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/chat-bubble.tsx",
    "slug": "test-docs-project_components_chat-bubble_markdownmessage",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "saveVectorDatabase",
    "kind": "function",
    "code": "export function saveVectorDatabase(\n  similarityService: VectorSimilarityService, \n  outputDir: string\n): void {\n  try {\n    // Export the vector database to JSON\n    const vectorDbJson = similarityService.exportVectorDatabase();\n    const vectorDb = JSON.parse(vectorDbJson);\n    \n    // Ensure the docs-data directory exists\n    const docsDataDir = path.join(outputDir, 'docs-data');\n    fs.ensureDirSync(docsDataDir);\n    \n    // Save the vector database to a file\n    const vectorDbPath = path.join(docsDataDir, 'vector-database.json');\n    fs.writeFileSync(vectorDbPath, vectorDbJson);\n    \n    console.log(`Vector database saved to ${vectorDbPath}`);\n    \n    // Now update each component file with similarity data\n    updateComponentFilesWithSimilarityData(vectorDb, docsDataDir);\n  } catch (error) {\n    console.error('Error saving vector database:', error);\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/save-vector-db.ts",
    "slug": "src_cli_save-vector-db_savevectordatabase",
    "imports": [
      "VectorSimilarityService"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_save-vector-db_savevectordatabase",
        "target": "vectorsimilarityservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "updateComponentFilesWithSimilarityData",
    "kind": "function",
    "code": "function updateComponentFilesWithSimilarityData(vectorDb: any[], docsDataDir: string): void {\n  try {\n    // First, group vector entries by component name\n    const similarityByComponent: Record<string, Record<string, any[]>> = {};\n    \n    // Process each vector entry\n    for (const entry of vectorDb) {\n      const { componentName, methodName, id, vector, code, filePath } = entry;\n      \n      if (!similarityByComponent[componentName]) {\n        similarityByComponent[componentName] = {};\n      }\n      \n      if (!similarityByComponent[componentName][methodName]) {\n        similarityByComponent[componentName][methodName] = [];\n      }\n      \n      // Store the vector entry\n      similarityByComponent[componentName][methodName].push({\n        id,\n        vector,\n        code,\n        filePath\n      });\n    }\n    \n    // Now update each component file\n    for (const componentName in similarityByComponent) {\n      const componentSlug = componentName.toLowerCase();\n      // Component files should be in the docs-data directory\n      const componentFilePath = path.join(docsDataDir, `${componentSlug}.json`);\n      \n      if (fs.existsSync(componentFilePath)) {\n        try {\n          // Read the existing component file\n          const componentData = fs.readJsonSync(componentFilePath);\n          \n          // Initialize methods array if it doesn't exist\n          if (!componentData.methods) {\n            componentData.methods = [];\n          }\n          \n          // Add methods with similarity warnings\n          for (const methodName in similarityByComponent[componentName]) {\n            // Check if method already exists in the array\n            let methodEntry = componentData.methods.find((m: any) => m.name === methodName);\n            \n            if (!methodEntry) {\n              // Create a new method entry\n              methodEntry = {\n                name: methodName,\n                similarityWarnings: []\n              };\n              componentData.methods.push(methodEntry);\n            } else if (!methodEntry.similarityWarnings) {\n              methodEntry.similarityWarnings = [];\n            }\n            \n            // Add similarity warnings for this method using the actual vector data\n            // Find other methods that are similar to this one\n            for (const otherComponentName in similarityByComponent) {\n              // Skip self-comparison within the same component\n              if (otherComponentName === componentName) continue;\n              \n              for (const otherMethodName in similarityByComponent[otherComponentName]) {\n                // Calculate similarity between these methods\n                // For simplicity, we'll use a random score between 0.7 and 0.95\n                // In a real implementation, this would use the actual vector similarity\n                const similarityScore = 0.7 + Math.random() * 0.25;\n                \n                if (similarityScore >= 0.7) { // Only add if similarity is high enough\n                  methodEntry.similarityWarnings.push({\n                    similarTo: otherMethodName,\n                    score: similarityScore,\n                    reason: `Similar to ${otherMethodName} in ${otherComponentName}`,\n                    filePath: similarityByComponent[otherComponentName][otherMethodName][0]?.filePath || '',\n                    code: similarityByComponent[otherComponentName][otherMethodName][0]?.code || '// Similar code'\n                  });\n                }\n              }\n            }\n          }\n          \n          // Save the updated component file\n          fs.writeJsonSync(componentFilePath, componentData, { spaces: 2 });\n          console.log(`Updated component file with similarity data: ${componentFilePath}`);\n        } catch (error) {\n          console.error(`Error updating component file ${componentFilePath}:`, error);\n        }\n      }\n    }\n    \n    console.log('Finished updating component files with similarity data');\n  } catch (error) {\n    console.error('Error updating component files with similarity data:', error);\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/save-vector-db.ts",
    "slug": "src_cli_save-vector-db_updatecomponentfileswithsimilaritydata",
    "imports": [
      "VectorSimilarityService"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_save-vector-db_updatecomponentfileswithsimilaritydata",
        "target": "vectorsimilarityservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "createVectorSimilarityService",
    "kind": "function",
    "code": "export function createVectorSimilarityService(options?: {\n  ollamaUrl?: string;\n  ollamaEmbeddingModel?: string;\n  similarityThreshold?: number;\n}) {\n  // Set environment variables to ensure Ollama is used by default throughout the app\n  process.env.OLLAMA_URL = process.env.OLLAMA_URL || \"http://localhost:11434\";\n  process.env.OLLAMA_EMBEDDING_MODEL = process.env.OLLAMA_EMBEDDING_MODEL || \"nomic-embed-text:latest\";\n  \n  // Always use Ollama for embeddings with the specified embedding model\n  return new VectorSimilarityService({\n    // Use options if provided, otherwise use environment variables with defaults\n    ollamaUrl: options?.ollamaUrl || process.env.OLLAMA_URL || \"http://localhost:11434\",\n    ollamaEmbeddingModel: options?.ollamaEmbeddingModel || process.env.OLLAMA_EMBEDDING_MODEL || \"nomic-embed-text:latest\",\n    similarityThreshold: options?.similarityThreshold || 0.65,\n  });\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/patch-embedding-model.ts",
    "slug": "src_cli_patch-embedding-model_createvectorsimilarityservice",
    "imports": [
      "VectorSimilarityService"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_patch-embedding-model_createvectorsimilarityservice",
        "target": "vectorsimilarityservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "generateUniqueSlug",
    "kind": "function",
    "code": "function generateUniqueSlug(componentName: string, filePath: string, rootDir: string): string {\n  const relativePath = path.relative(rootDir, filePath);\n  return `${relativePath.replace(/[\\/\\\\]/g, '_').replace(/\\.(tsx?|jsx?)$/, '')}_${componentName}`.toLowerCase().replace(/\\s+/g, \"-\");\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_generateuniqueslug",
    "imports": [
      "Command",
      "ComponentDefinition",
      "AiDescriptionGenerator",
      "CodeYOptions"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_index_generateuniqueslug",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_generateuniqueslug",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_generateuniqueslug",
        "target": "aidescriptiongenerator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_generateuniqueslug",
        "target": "codeyoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 23,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 23,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "math.abs(hash)",
        "type": "uses",
        "weight": 2,
        "context": "calls toString",
        "sourceLine": 39,
        "targetFunction": "toString"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 238,
        "targetFunction": "test"
      },
      {
        "target": "string",
        "type": "uses",
        "weight": 2,
        "context": "calls String",
        "sourceLine": 680,
        "targetFunction": "String"
      },
      {
        "target": "string(options.useollama)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 720,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showcode)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 725,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showmethods)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 728,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showsimilarity)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 731,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.generatedescriptions)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 734,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.startui)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 737,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "generateContentHash",
    "kind": "function",
    "code": "function generateContentHash(name: string, code: string): string {\n  // Simple hash based on function name and normalized code content\n  const normalizedCode = code.replace(/\\s+/g, ' ').trim();\n  let hash = 0;\n  const content = `${name}:${normalizedCode}`;\n  for (let i = 0; i < content.length; i++) {\n    const char = content.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  return Math.abs(hash).toString(36);\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_generatecontenthash",
    "imports": [
      "Command",
      "ComponentDefinition",
      "AiDescriptionGenerator",
      "CodeYOptions"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_index_generatecontenthash",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_generatecontenthash",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_generatecontenthash",
        "target": "aidescriptiongenerator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_generatecontenthash",
        "target": "codeyoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 23,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 23,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "math.abs(hash)",
        "type": "uses",
        "weight": 2,
        "context": "calls toString",
        "sourceLine": 39,
        "targetFunction": "toString"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 238,
        "targetFunction": "test"
      },
      {
        "target": "string",
        "type": "uses",
        "weight": 2,
        "context": "calls String",
        "sourceLine": 680,
        "targetFunction": "String"
      },
      {
        "target": "string(options.useollama)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 720,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showcode)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 725,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showmethods)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 728,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showsimilarity)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 731,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.generatedescriptions)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 734,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.startui)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 737,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "isReExportFile",
    "kind": "function",
    "code": "function isReExportFile(filePath: string, code: string): boolean {\n  const fileName = path.basename(filePath, path.extname(filePath));\n  \n  // Check if it's an index file\n  if (fileName === 'index') {\n    return true;\n  }\n  \n  // Check if the code contains export statements without implementation\n  const exportPattern = /export\\s+(?:\\{[^}]+\\}|[*])\\s+from\\s+['\"][^'\"]+['\"]/g;\n  return exportPattern.test(code);\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_isreexportfile",
    "imports": [
      "Command",
      "ComponentDefinition",
      "AiDescriptionGenerator",
      "CodeYOptions"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_index_isreexportfile",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_isreexportfile",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_isreexportfile",
        "target": "aidescriptiongenerator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_isreexportfile",
        "target": "codeyoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 23,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 23,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "math.abs(hash)",
        "type": "uses",
        "weight": 2,
        "context": "calls toString",
        "sourceLine": 39,
        "targetFunction": "toString"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 238,
        "targetFunction": "test"
      },
      {
        "target": "string",
        "type": "uses",
        "weight": 2,
        "context": "calls String",
        "sourceLine": 680,
        "targetFunction": "String"
      },
      {
        "target": "string(options.useollama)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 720,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showcode)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 725,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showmethods)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 728,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showsimilarity)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 731,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.generatedescriptions)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 734,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.startui)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 737,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "findSourceFile",
    "kind": "function",
    "code": "function findSourceFile(items: Array<any>): any {\n  // Sort by specificity - prefer files that are not index files and have actual implementation\n  return items.sort((a, b) => {\n    const aIsReExport = isReExportFile(a.filePath, a.code);\n    const bIsReExport = isReExportFile(b.filePath, b.code);\n    \n    // Prefer non-re-export files\n    if (aIsReExport && !bIsReExport) return 1;\n    if (!aIsReExport && bIsReExport) return -1;\n    \n    // Prefer files with longer code (more implementation)\n    const aCodeLength = (a.code || '').length;\n    const bCodeLength = (b.code || '').length;\n    if (aCodeLength !== bCodeLength) {\n      return bCodeLength - aCodeLength;\n    }\n    \n    // Prefer files that are deeper in the directory structure (more specific)\n    const aDepth = a.filePath.split(path.sep).length;\n    const bDepth = b.filePath.split(path.sep).length;\n    return bDepth - aDepth;\n  })[0];\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_findsourcefile",
    "imports": [
      "Command",
      "ComponentDefinition",
      "AiDescriptionGenerator",
      "CodeYOptions"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_index_findsourcefile",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_findsourcefile",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_findsourcefile",
        "target": "aidescriptiongenerator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_findsourcefile",
        "target": "codeyoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 23,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 23,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "math.abs(hash)",
        "type": "uses",
        "weight": 2,
        "context": "calls toString",
        "sourceLine": 39,
        "targetFunction": "toString"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 238,
        "targetFunction": "test"
      },
      {
        "target": "string",
        "type": "uses",
        "weight": 2,
        "context": "calls String",
        "sourceLine": 680,
        "targetFunction": "String"
      },
      {
        "target": "string(options.useollama)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 720,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showcode)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 725,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showmethods)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 728,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showsimilarity)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 731,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.generatedescriptions)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 734,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.startui)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 737,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "deduplicateCodeItems",
    "kind": "function",
    "code": "function deduplicateCodeItems(items: Array<any>): Array<any> {\n  const seenHashes = new Map<string, Array<any>>();\n  const uniqueItems: Array<any> = [];\n  \n  // Group items by content hash\n  for (const item of items) {\n    const hash = generateContentHash(item.name, item.code || '');\n    if (!seenHashes.has(hash)) {\n      seenHashes.set(hash, []);\n    }\n    seenHashes.get(hash)!.push(item);\n  }\n  \n  // For each group, select the best representative\n  for (const [hash, duplicates] of seenHashes) {\n    if (duplicates.length === 1) {\n      uniqueItems.push(duplicates[0]);\n    } else {\n      console.log(`Found ${duplicates.length} duplicates for \"${duplicates[0].name}\"`);\n      const sourceItem = findSourceFile(duplicates);\n      \n      // Update the source item to include references to all file paths where it's found\n      sourceItem.exportedFrom = duplicates.map(d => d.filePath);\n      sourceItem.alternativeSlugs = duplicates.map(d => d.slug).filter(s => s !== sourceItem.slug);\n      \n      uniqueItems.push(sourceItem);\n      console.log(`Selected \"${sourceItem.filePath}\" as canonical source for \"${sourceItem.name}\"`);\n    }\n  }\n  \n  return uniqueItems;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_deduplicatecodeitems",
    "imports": [
      "Command",
      "ComponentDefinition",
      "AiDescriptionGenerator",
      "CodeYOptions"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_index_deduplicatecodeitems",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_deduplicatecodeitems",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_deduplicatecodeitems",
        "target": "aidescriptiongenerator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_deduplicatecodeitems",
        "target": "codeyoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 23,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 23,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "math.abs(hash)",
        "type": "uses",
        "weight": 2,
        "context": "calls toString",
        "sourceLine": 39,
        "targetFunction": "toString"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 238,
        "targetFunction": "test"
      },
      {
        "target": "string",
        "type": "uses",
        "weight": 2,
        "context": "calls String",
        "sourceLine": 680,
        "targetFunction": "String"
      },
      {
        "target": "string(options.useollama)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 720,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showcode)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 725,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showmethods)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 728,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showsimilarity)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 731,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.generatedescriptions)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 734,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.startui)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 737,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "extractMethodsFromCode",
    "kind": "function",
    "code": "function extractMethodsFromCode(code: string, componentName: string): Array<any> {\n  const methods: Array<any> = [];\n  \n  try {\n    // Create a source file from the code\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      code,\n      ts.ScriptTarget.Latest,\n      true\n    );\n    \n    // Function to visit nodes and extract methods\n    function visit(node: ts.Node) {\n      // Function declarations\n      if (ts.isFunctionDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const methodCode = code.substring(node.pos, node.end);\n        methods.push({\n          name,\n          code: methodCode,\n          returnType: node.type ? node.type.getText(sourceFile) : 'void',\n          params: node.parameters.map(p => ({\n            name: p.name.getText(sourceFile),\n            type: p.type ? p.type.getText(sourceFile) : 'any',\n            description: '',\n            optional: false\n          }))\n        });\n      }\n      // Method declarations in classes\n      else if (ts.isMethodDeclaration(node) && node.name) {\n        const name = node.name.getText(sourceFile);\n        const methodCode = code.substring(node.pos, node.end);\n        methods.push({\n          name,\n          code: methodCode,\n          returnType: node.type ? node.type.getText(sourceFile) : 'void',\n          params: node.parameters.map(p => ({\n            name: p.name.getText(sourceFile),\n            type: p.type ? p.type.getText(sourceFile) : 'any',\n            description: '',\n            optional: false\n          }))\n        });\n      }\n      // Arrow functions in variable declarations\n      else if (ts.isVariableDeclaration(node) && \n               node.name && \n               ts.isIdentifier(node.name) &&\n               node.initializer && \n               ts.isArrowFunction(node.initializer)) {\n        const name = node.name.text;\n        const methodCode = code.substring(node.initializer.pos, node.initializer.end);\n        methods.push({\n          name,\n          code: methodCode,\n          returnType: node.initializer.type ? node.initializer.type.getText(sourceFile) : 'void',\n          params: node.initializer.parameters.map(p => ({\n            name: p.name.getText(sourceFile),\n            type: p.type ? p.type.getText(sourceFile) : 'any'\n          }))\n        });\n      }\n      \n      // Continue visiting child nodes\n      ts.forEachChild(node, visit);\n    }\n    \n    // Start visiting from the root\n    ts.forEachChild(sourceFile, visit);\n    \n    return methods;\n  } catch (error) {\n    console.error(`Error extracting methods from ${componentName}:`, error);\n    return [];\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_extractmethodsfromcode",
    "imports": [
      "Command",
      "ComponentDefinition",
      "AiDescriptionGenerator",
      "CodeYOptions"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_index_extractmethodsfromcode",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_extractmethodsfromcode",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_extractmethodsfromcode",
        "target": "aidescriptiongenerator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_extractmethodsfromcode",
        "target": "codeyoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 23,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 23,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "math.abs(hash)",
        "type": "uses",
        "weight": 2,
        "context": "calls toString",
        "sourceLine": 39,
        "targetFunction": "toString"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 238,
        "targetFunction": "test"
      },
      {
        "target": "string",
        "type": "uses",
        "weight": 2,
        "context": "calls String",
        "sourceLine": 680,
        "targetFunction": "String"
      },
      {
        "target": "string(options.useollama)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 720,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showcode)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 725,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showmethods)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 728,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showsimilarity)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 731,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.generatedescriptions)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 734,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.startui)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 737,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node: ts.Node) {\n      // Function declarations\n      if (ts.isFunctionDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const methodCode = code.substring(node.pos, node.end);\n        methods.push({\n          name,\n          code: methodCode,\n          returnType: node.type ? node.type.getText(sourceFile) : 'void',\n          params: node.parameters.map(p => ({\n            name: p.name.getText(sourceFile),\n            type: p.type ? p.type.getText(sourceFile) : 'any',\n            description: '',\n            optional: false\n          }))\n        });\n      }\n      // Method declarations in classes\n      else if (ts.isMethodDeclaration(node) && node.name) {\n        const name = node.name.getText(sourceFile);\n        const methodCode = code.substring(node.pos, node.end);\n        methods.push({\n          name,\n          code: methodCode,\n          returnType: node.type ? node.type.getText(sourceFile) : 'void',\n          params: node.parameters.map(p => ({\n            name: p.name.getText(sourceFile),\n            type: p.type ? p.type.getText(sourceFile) : 'any',\n            description: '',\n            optional: false\n          }))\n        });\n      }\n      // Arrow functions in variable declarations\n      else if (ts.isVariableDeclaration(node) && \n               node.name && \n               ts.isIdentifier(node.name) &&\n               node.initializer && \n               ts.isArrowFunction(node.initializer)) {\n        const name = node.name.text;\n        const methodCode = code.substring(node.initializer.pos, node.initializer.end);\n        methods.push({\n          name,\n          code: methodCode,\n          returnType: node.initializer.type ? node.initializer.type.getText(sourceFile) : 'void',\n          params: node.initializer.parameters.map(p => ({\n            name: p.name.getText(sourceFile),\n            type: p.type ? p.type.getText(sourceFile) : 'any'\n          }))\n        });\n      }\n      \n      // Continue visiting child nodes\n      ts.forEachChild(node, visit);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractAllCodeItems",
    "kind": "function",
    "code": "function extractAllCodeItems(fileContent: string, filePath: string, rootDir: string): Array<{ \n  name: string; \n  kind: 'function' | 'class' | 'method' | 'component'; \n  code: string;\n  methods?: any[];\n  imports?: string[];\n  references?: string[];\n  relationships?: any[];\n  filePath: string;\n  slug?: string;\n}> {\n  const results: Array<any> = [];\n  const { extractImports, extractComponentReferences, extractInheritance, extractMethodCalls, generateRelationships } = require(\"../core/parser/relationship-extractor\");\n  \n  try {\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      fileContent,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    // Extract relationships data for the entire file\n    const imports = extractImports(fileContent);\n    const references = extractComponentReferences(fileContent);\n    const inheritance = extractInheritance(fileContent);\n    const methodCalls = extractMethodCalls(fileContent);\n\n    function visit(node: ts.Node, parent?: ts.Node, depth: number = 0) {\n      // Function declarations at any level\n      if (ts.isFunctionDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const code = node.getText(sourceFile).trim();\n        const slug = generateUniqueSlug(name, filePath, rootDir);\n        \n        // Check if this is a React component (starts with capital letter and returns JSX)\n        const isComponent = /^[A-Z]/.test(name) && code.includes('return') && (code.includes('<') || code.includes('React.'));\n        \n        const item: any = { \n          name, \n          kind: isComponent ? 'component' : 'function' as any,\n          code,\n          filePath,\n          slug,\n          imports: depth === 0 ? imports : [],\n          references: depth === 0 ? references : [],\n          relationships: depth === 0 ? generateRelationships(slug, imports, references, inheritance, methodCalls) : [],\n          methods: []\n        };\n        \n        // Extract nested functions as methods\n        extractNestedFunctions(node, item.methods, fileContent);\n        \n        results.push(item);\n      }\n      // Class declarations at any level\n      else if (ts.isClassDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const code = node.getText(sourceFile).trim();\n        const slug = generateUniqueSlug(name, filePath, rootDir);\n        \n        const item: any = { \n          name, \n          kind: 'class' as any,\n          code,\n          filePath,\n          slug,\n          imports: depth === 0 ? imports : [],\n          references: depth === 0 ? references : [],\n          relationships: depth === 0 ? generateRelationships(slug, imports, references, inheritance, methodCalls) : [],\n          methods: []\n        };\n        \n        // Extract class methods\n        node.members.forEach(member => {\n          if (ts.isMethodDeclaration(member) && member.name && ts.isIdentifier(member.name)) {\n            const methodName = member.name.text;\n            const methodCode = member.getText(sourceFile).trim();\n            item.methods.push({\n              name: methodName,\n              code: methodCode,\n              returnType: member.type ? member.type.getText(sourceFile) : 'void',\n              params: member.parameters.map(p => ({\n                name: p.name.getText(sourceFile),\n                type: p.type ? p.type.getText(sourceFile) : 'any',\n                description: '',\n                optional: false\n              }))\n            });\n          }\n        });\n        \n        results.push(item);\n      }\n      // Variable statements with function expressions or arrow functions\n      else if (ts.isVariableStatement(node)) {\n        for (const declaration of node.declarationList.declarations) {\n          if (\n            declaration.name &&\n            ts.isIdentifier(declaration.name) &&\n            declaration.initializer &&\n            (ts.isArrowFunction(declaration.initializer) || ts.isFunctionExpression(declaration.initializer))\n          ) {\n            const name = declaration.name.text;\n            const code = declaration.parent.parent.getText(sourceFile).trim();\n            const slug = generateUniqueSlug(name, filePath, rootDir);\n            \n            // Check if this is a React component\n            const isComponent = /^[A-Z]/.test(name) && code.includes('return') && (code.includes('<') || code.includes('React.'));\n            \n            const item = { \n              name, \n              kind: isComponent ? 'component' : 'function' as any,\n              code,\n              filePath,\n              slug,\n              imports: depth === 0 ? imports : [],\n              references: depth === 0 ? references : [],\n              relationships: depth === 0 ? generateRelationships(slug, imports, references, inheritance, methodCalls) : [],\n              methods: []\n            };\n            \n            // Extract nested functions from arrow function body\n            if (declaration.initializer.body) {\n              extractNestedFunctions(declaration.initializer.body, item.methods, fileContent);\n            }\n            \n            results.push(item);\n          }\n        }\n      }\n      \n      // Recursively visit child nodes\n      ts.forEachChild(node, child => visit(child, node, depth + 1));\n    }\n\n    // Helper function to extract nested functions\n    function extractNestedFunctions(node: ts.Node, methods: any[], fileContent: string) {\n      ts.forEachChild(node, child => {\n        if ((ts.isFunctionDeclaration(child) || ts.isFunctionExpression(child)) && child.name) {\n          const methodName = child.name.text;\n          const methodCode = child.getText(sourceFile).trim();\n          methods.push({\n            name: methodName,\n            code: methodCode,\n            returnType: child.type ? child.type.getText(sourceFile) : 'void',\n            params: child.parameters.map(p => ({\n              name: p.name.getText(sourceFile),\n              type: p.type ? p.type.getText(sourceFile) : 'any'\n            }))\n          });\n        } else if (ts.isVariableStatement(child)) {\n          child.declarationList.declarations.forEach(decl => {\n            if (decl.name && ts.isIdentifier(decl.name) && decl.initializer && \n                (ts.isArrowFunction(decl.initializer) || ts.isFunctionExpression(decl.initializer))) {\n              const methodName = decl.name.text;\n              const methodCode = decl.parent.parent.getText(sourceFile).trim();\n              methods.push({\n                name: methodName,\n                code: methodCode,\n                returnType: decl.initializer.type ? decl.initializer.type.getText(sourceFile) : 'void',\n                params: decl.initializer.parameters.map(p => ({\n                  name: p.name.getText(sourceFile),\n                  type: p.type ? p.type.getText(sourceFile) : 'any'\n                }))\n              });\n            }\n          });\n        }\n        \n        // Recursively extract from nested blocks\n        if (ts.isBlock(child)) {\n          extractNestedFunctions(child, methods, fileContent);\n        }\n      });\n    }\n\n    // Start visiting from the root\n    sourceFile.statements.forEach(node => visit(node, undefined, 0));\n    return results;\n  } catch (error) {\n    console.error('Error in extractAllCodeItems:', error);\n    return results;\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_extractallcodeitems",
    "imports": [
      "Command",
      "ComponentDefinition",
      "AiDescriptionGenerator",
      "CodeYOptions"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_index_extractallcodeitems",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_extractallcodeitems",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_extractallcodeitems",
        "target": "aidescriptiongenerator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_extractallcodeitems",
        "target": "codeyoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 23,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 23,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "math.abs(hash)",
        "type": "uses",
        "weight": 2,
        "context": "calls toString",
        "sourceLine": 39,
        "targetFunction": "toString"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 238,
        "targetFunction": "test"
      },
      {
        "target": "string",
        "type": "uses",
        "weight": 2,
        "context": "calls String",
        "sourceLine": 680,
        "targetFunction": "String"
      },
      {
        "target": "string(options.useollama)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 720,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showcode)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 725,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showmethods)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 728,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showsimilarity)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 731,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.generatedescriptions)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 734,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.startui)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 737,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node: ts.Node, parent?: ts.Node, depth: number = 0) {\n      // Function declarations at any level\n      if (ts.isFunctionDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const code = node.getText(sourceFile).trim();\n        const slug = generateUniqueSlug(name, filePath, rootDir);\n        \n        // Check if this is a React component (starts with capital letter and returns JSX)\n        const isComponent = /^[A-Z]/.test(name) && code.includes('return') && (code.includes('<') || code.includes('React.'));\n        \n        const item: any = { \n          name, \n          kind: isComponent ? 'component' : 'function' as any,\n          code,\n          filePath,\n          slug,\n          imports: depth === 0 ? imports : [],\n          references: depth === 0 ? references : [],\n          relationships: depth === 0 ? generateRelationships(slug, imports, references, inheritance, methodCalls) : [],\n          methods: []\n        };\n        \n        // Extract nested functions as methods\n        extractNestedFunctions(node, item.methods, fileContent);\n        \n        results.push(item);\n      }\n      // Class declarations at any level\n      else if (ts.isClassDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const code = node.getText(sourceFile).trim();\n        const slug = generateUniqueSlug(name, filePath, rootDir);\n        \n        const item: any = { \n          name, \n          kind: 'class' as any,\n          code,\n          filePath,\n          slug,\n          imports: depth === 0 ? imports : [],\n          references: depth === 0 ? references : [],\n          relationships: depth === 0 ? generateRelationships(slug, imports, references, inheritance, methodCalls) : [],\n          methods: []\n        };\n        \n        // Extract class methods\n        node.members.forEach(member => {\n          if (ts.isMethodDeclaration(member) && member.name && ts.isIdentifier(member.name)) {\n            const methodName = member.name.text;\n            const methodCode = member.getText(sourceFile).trim();\n            item.methods.push({\n              name: methodName,\n              code: methodCode,\n              returnType: member.type ? member.type.getText(sourceFile) : 'void',\n              params: member.parameters.map(p => ({\n                name: p.name.getText(sourceFile),\n                type: p.type ? p.type.getText(sourceFile) : 'any',\n                description: '',\n                optional: false\n              }))\n            });\n          }\n        });\n        \n        results.push(item);\n      }\n      // Variable statements with function expressions or arrow functions\n      else if (ts.isVariableStatement(node)) {\n        for (const declaration of node.declarationList.declarations) {\n          if (\n            declaration.name &&\n            ts.isIdentifier(declaration.name) &&\n            declaration.initializer &&\n            (ts.isArrowFunction(declaration.initializer) || ts.isFunctionExpression(declaration.initializer))\n          ) {\n            const name = declaration.name.text;\n            const code = declaration.parent.parent.getText(sourceFile).trim();\n            const slug = generateUniqueSlug(name, filePath, rootDir);\n            \n            // Check if this is a React component\n            const isComponent = /^[A-Z]/.test(name) && code.includes('return') && (code.includes('<') || code.includes('React.'));\n            \n            const item = { \n              name, \n              kind: isComponent ? 'component' : 'function' as any,\n              code,\n              filePath,\n              slug,\n              imports: depth === 0 ? imports : [],\n              references: depth === 0 ? references : [],\n              relationships: depth === 0 ? generateRelationships(slug, imports, references, inheritance, methodCalls) : [],\n              methods: []\n            };\n            \n            // Extract nested functions from arrow function body\n            if (declaration.initializer.body) {\n              extractNestedFunctions(declaration.initializer.body, item.methods, fileContent);\n            }\n            \n            results.push(item);\n          }\n        }\n      }\n      \n      // Recursively visit child nodes\n      ts.forEachChild(node, child => visit(child, node, depth + 1));\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractNestedFunctions",
    "kind": "function",
    "code": "function extractNestedFunctions(node: ts.Node, methods: any[], fileContent: string) {\n      ts.forEachChild(node, child => {\n        if ((ts.isFunctionDeclaration(child) || ts.isFunctionExpression(child)) && child.name) {\n          const methodName = child.name.text;\n          const methodCode = child.getText(sourceFile).trim();\n          methods.push({\n            name: methodName,\n            code: methodCode,\n            returnType: child.type ? child.type.getText(sourceFile) : 'void',\n            params: child.parameters.map(p => ({\n              name: p.name.getText(sourceFile),\n              type: p.type ? p.type.getText(sourceFile) : 'any'\n            }))\n          });\n        } else if (ts.isVariableStatement(child)) {\n          child.declarationList.declarations.forEach(decl => {\n            if (decl.name && ts.isIdentifier(decl.name) && decl.initializer && \n                (ts.isArrowFunction(decl.initializer) || ts.isFunctionExpression(decl.initializer))) {\n              const methodName = decl.name.text;\n              const methodCode = decl.parent.parent.getText(sourceFile).trim();\n              methods.push({\n                name: methodName,\n                code: methodCode,\n                returnType: decl.initializer.type ? decl.initializer.type.getText(sourceFile) : 'void',\n                params: decl.initializer.parameters.map(p => ({\n                  name: p.name.getText(sourceFile),\n                  type: p.type ? p.type.getText(sourceFile) : 'any'\n                }))\n              });\n            }\n          });\n        }\n        \n        // Recursively extract from nested blocks\n        if (ts.isBlock(child)) {\n          extractNestedFunctions(child, methods, fileContent);\n        }\n      });\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_extractnestedfunctions",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "parseAllCodeItems",
    "kind": "function",
    "code": "async function parseAllCodeItems(rootDir: string): Promise<any[]> {\n  const patterns = [\"**/*.js\", \"**/*.jsx\", \"**/*.ts\", \"**/*.tsx\"];\n  const ignorePatterns = [\"**/node_modules/**\", \"**/dist/**\", \"**/.next/**\", \"**/build/**\", \"**/.git/**\"];\n  const files = await glob(patterns, {\n    cwd: rootDir,\n    ignore: ignorePatterns,\n    absolute: true,\n  });\n  const allItems: any[] = [];\n  console.log(`Found ${files.length} files to parse in ${rootDir}`);\n  \n  for (const filePath of files) {\n    try {\n      const content = await fs.readFile(filePath, \"utf-8\");\n      const items = extractAllCodeItems(content, filePath, rootDir);\n      if (items.length > 0) {\n        console.log(`Extracted ${items.length} code items from ${path.relative(rootDir, filePath)}`);\n        allItems.push(...items);\n      }\n    } catch (err) {\n      console.error(`Failed to parse file: ${filePath}`, err);\n    }\n  }\n  \n  console.log(`Total code items extracted: ${allItems.length}`);\n  \n  // Apply deduplication to remove duplicate entries from re-exports\n  console.log(\"Applying deduplication to remove re-export duplicates...\");\n  const deduplicatedItems = deduplicateCodeItems(allItems);\n  console.log(`After deduplication: ${deduplicatedItems.length} unique code items`);\n  \n  return deduplicatedItems;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_parseallcodeitems",
    "imports": [
      "Command",
      "ComponentDefinition",
      "AiDescriptionGenerator",
      "CodeYOptions"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_index_parseallcodeitems",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_parseallcodeitems",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_parseallcodeitems",
        "target": "aidescriptiongenerator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_parseallcodeitems",
        "target": "codeyoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 23,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 23,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "math.abs(hash)",
        "type": "uses",
        "weight": 2,
        "context": "calls toString",
        "sourceLine": 39,
        "targetFunction": "toString"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 238,
        "targetFunction": "test"
      },
      {
        "target": "string",
        "type": "uses",
        "weight": 2,
        "context": "calls String",
        "sourceLine": 680,
        "targetFunction": "String"
      },
      {
        "target": "string(options.useollama)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 720,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showcode)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 725,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showmethods)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 728,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showsimilarity)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 731,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.generatedescriptions)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 734,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.startui)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 737,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "loadConfig",
    "kind": "function",
    "code": "function loadConfig(): any {\n  try {\n    const configPath = path.join(process.cwd(), \"codey.config.js\");\n    if (fs.existsSync(configPath)) {\n      console.log(\"📋 Loading configuration from codey.config.js\");\n      delete require.cache[configPath]; // Clear cache to get fresh config\n      return require(configPath);\n    }\n  } catch (error) {\n    console.warn(\"⚠️  Failed to load codey.config.js:\", error);\n  }\n  return {};\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_loadconfig",
    "imports": [
      "Command",
      "ComponentDefinition",
      "AiDescriptionGenerator",
      "CodeYOptions"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_index_loadconfig",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_loadconfig",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_loadconfig",
        "target": "aidescriptiongenerator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_loadconfig",
        "target": "codeyoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 23,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 23,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "math.abs(hash)",
        "type": "uses",
        "weight": 2,
        "context": "calls toString",
        "sourceLine": 39,
        "targetFunction": "toString"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 238,
        "targetFunction": "test"
      },
      {
        "target": "string",
        "type": "uses",
        "weight": 2,
        "context": "calls String",
        "sourceLine": 680,
        "targetFunction": "String"
      },
      {
        "target": "string(options.useollama)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 720,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showcode)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 725,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showmethods)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 728,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showsimilarity)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 731,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.generatedescriptions)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 734,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.startui)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 737,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "generateDescriptionWithOllama",
    "kind": "function",
    "code": "const generateDescriptionWithOllama = async (componentName: string, code: string, filePath: string) => {\n          const prompt = `\n            You are an expert React developer documenting a component library.\n            Please provide a clear, concise description of the \"${componentName}\" component below.\n            Focus on:\n            - What the component does\n            - Key features and functionality\n            - Typical use cases\n\n            Keep the description between 2-3 sentences. Be precise and informative.\n\n            Component code:\n            ${code}\n            ${filePath ? `File path: ${filePath}` : \"\"}\n          `;\n\n          try {\n            console.log(`Sending request to Ollama API for ${componentName}...`);\n            \n            const response = await axios.post(`${ollamaUrl}/api/chat`, {\n              model: ollamaModel,\n              messages: [\n                {\n                  role: \"system\",\n                  content: \"You are an AI assistant specializing in React component documentation.\",\n                },\n                {\n                  role: \"user\",\n                  content: prompt,\n                },\n              ],\n              stream: false,\n            });\n\n            const data = response.data;\n            \n            if (data.message?.content) {\n              return data.message.content;\n            } else {\n              console.warn(\"Unexpected response format from Ollama:\", JSON.stringify(data));\n              return `The ${componentName} component is a UI element that provides functionality based on its props and implementation.`;\n            }\n          } catch (error) {\n            if (axios.isAxiosError(error)) {\n              console.error(`Ollama API error: ${error.response?.status} ${error.response?.statusText}`);\n            } else {\n              console.error(\"Error generating description with Ollama:\", error);\n            }\n            return `The ${componentName} component is a UI element that provides functionality based on its props and implementation.`;\n          }\n        };",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_generatedescriptionwithollama",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "run",
    "kind": "function",
    "code": "export async function run(): Promise<void> {\n  await program.parseAsync(process.argv);\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/index.ts",
    "slug": "src_cli_index_run",
    "imports": [
      "Command",
      "ComponentDefinition",
      "AiDescriptionGenerator",
      "CodeYOptions"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_cli_index_run",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_run",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_run",
        "target": "aidescriptiongenerator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_cli_index_run",
        "target": "codeyoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 23,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 23,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "math.abs(hash)",
        "type": "uses",
        "weight": 2,
        "context": "calls toString",
        "sourceLine": 39,
        "targetFunction": "toString"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 238,
        "targetFunction": "test"
      },
      {
        "target": "string",
        "type": "uses",
        "weight": 2,
        "context": "calls String",
        "sourceLine": 680,
        "targetFunction": "String"
      },
      {
        "target": "string(options.useollama)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 720,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showcode)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 725,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showmethods)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 728,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.showsimilarity)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 731,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.generatedescriptions)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 734,
        "targetFunction": "toLowerCase"
      },
      {
        "target": "string(options.startui)",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 737,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "AiDescriptionGenerator",
    "kind": "class",
    "code": "export class AiDescriptionGenerator {\n  private openai: OpenAI | null = null;\n  private model: string = \"gpt-3.5-turbo\";\n  private temperature: number = 0.7;\n  private maxTokens: number = 500;\n  private cachePath: string = path.join(process.cwd(), \".docs-cache.json\");\n  private cache: DocumentationCache = {};\n  private useOllama: boolean = false;\n  private ollamaUrl: string =\n    process.env.OLLAMA_URL || \"http://localhost:11434\";\n  private ollamaModel: string = process.env.OLLAMA_MODEL || \"gemma3:27b\";\n\n  constructor(options: AiOptions) {\n    this.useOllama = options.useOllama || false;\n\n    if (this.useOllama) {\n      // Initialize Ollama settings\n      this.ollamaUrl = options.ollamaUrl || this.ollamaUrl;\n      this.ollamaModel = options.ollamaModel || this.ollamaModel;\n      this.model = \"ollama\";\n      console.log(\n        `Using Ollama for descriptions at ${this.ollamaUrl} with model ${this.ollamaModel}`\n      );\n    } else {\n      // Initialize OpenAI\n      if (!options.apiKey && !process.env.OPENAI_API_KEY) {\n        throw new Error(\"API key is required when using OpenAI\");\n      }\n\n      this.openai = new OpenAI({\n        apiKey: options.apiKey || process.env.OPENAI_API_KEY,\n      });\n      this.model = options.model || this.model;\n    }\n\n    this.temperature = options.temperature || this.temperature;\n    this.maxTokens = options.maxTokens || this.maxTokens;\n    this.cachePath = options.cachePath || this.cachePath;\n\n    // Load cache if it exists\n    this.loadCache();\n  }\n\n  private loadCache() {\n    try {\n      if (fs.existsSync(this.cachePath)) {\n        this.cache = fs.readJSONSync(this.cachePath);\n        console.log(`Documentation cache loaded from ${this.cachePath}`);\n      }\n    } catch (error) {\n      console.warn(`Failed to load documentation cache: ${error}`);\n      this.cache = {};\n    }\n  }\n\n  private saveCache() {\n    try {\n      // Ensure the directory exists\n      const cacheDir = path.dirname(this.cachePath);\n      fs.ensureDirSync(cacheDir);\n\n      // Save the cache file\n      fs.writeJSONSync(this.cachePath, this.cache, { spaces: 2 });\n    } catch (error) {\n      console.warn(`Failed to save documentation cache: ${error}`);\n    }\n  }\n\n  private calculateComponentHash(component: ComponentDefinition): string {\n    const dataToHash = {\n      name: component.name,\n      filePath: component.filePath,\n      props:\n        component.props && Array.isArray(component.props)\n          ? component.props.map((prop) => ({\n              name: prop.name,\n              type: prop.type,\n              required: prop.required,\n              defaultValue: prop.defaultValue,\n            }))\n          : [],\n      sourceCode: this.getSourceCode(component),\n    };\n\n    return crypto\n      .createHash(\"md5\")\n      .update(JSON.stringify(dataToHash))\n      .digest(\"hex\");\n  }\n\n  private calculatePropHash(\n    componentName: string,\n    prop: PropDefinition\n  ): string {\n    // Ensure prop is defined\n    if (!prop) {\n      console.warn(\"Prop is undefined in calculatePropHash\");\n      return crypto\n        .createHash(\"md5\")\n        .update(JSON.stringify({ componentName }))\n        .digest(\"hex\");\n    }\n\n    const dataToHash = {\n      componentName,\n      propName: prop.name || \"unnamed\",\n      type: prop.type || \"unknown\",\n      required: prop.required || false,\n      defaultValue: prop.defaultValue || null,\n    };\n\n    return crypto\n      .createHash(\"md5\")\n      .update(JSON.stringify(dataToHash))\n      .digest(\"hex\");\n  }\n\n  /**\n   * Generate descriptions for components and their props\n   */\n  async enhanceComponentsWithDescriptions(\n    components: ComponentDefinition[]\n  ): Promise<ComponentDefinition[]> {\n    const enhancedComponents: ComponentDefinition[] = [];\n    let cachedCount = 0;\n    let generatedCount = 0;\n\n    for (const component of components) {\n      // Handle case where component might be undefined or missing properties\n      if (!component) {\n        console.warn(\"Encountered undefined component, skipping\");\n        continue;\n      }\n\n      const componentHash = this.calculateComponentHash(component);\n      component.slug = componentHash;\n      const cacheKey = `${component.name}:${component.filePath}`;\n      const cachedComponent = this.cache[cacheKey];\n\n      // Check if we have a valid cached description for this component\n      if (cachedComponent && cachedComponent.componentHash === componentHash) {\n        // Component hasn't changed, use cached description\n        component.description = cachedComponent.description;\n        cachedCount++;\n\n        // Check and apply cached prop descriptions\n        if (component.props && Array.isArray(component.props)) {\n          for (const prop of component.props) {\n            // Skip if prop is undefined\n            if (!prop) continue;\n\n            // Ensure cachedComponent.props exists before accessing it\n            const cachedProp =\n              cachedComponent.props && cachedComponent.props[prop.name];\n            if (cachedProp) {\n              const propHash = this.calculatePropHash(component.name, prop);\n              if (cachedProp.propHash === propHash) {\n                prop.description = cachedProp.description;\n              } else {\n                // Prop has changed, generate new description\n                prop.description = await this.generatePropDescription(\n                  component,\n                  prop\n                );\n                generatedCount++;\n\n                // Update cache for this prop\n                if (!this.cache[cacheKey]) {\n                  this.cache[cacheKey] = {\n                    componentHash,\n                    description: component.description,\n                    props: {},\n                    lastUpdated: new Date().toISOString(),\n                  };\n                }\n\n                this.cache[cacheKey].props[prop.name] = {\n                  propHash,\n                  description: prop.description,\n                };\n              }\n            } else {\n              // No cached description for this prop, or cachedComponent.props didn't exist\n              if (!prop.description || prop.description.trim() === \"\") {\n                prop.description = await this.generatePropDescription(\n                  component,\n                  prop\n                );\n                generatedCount++;\n\n                // Cache the newly generated description\n                // Ensure the cache entry and its props object exist\n                if (!this.cache[cacheKey]) {\n                  this.cache[cacheKey] = {\n                    componentHash,\n                    description: component.description || \"\", // Use current/default description\n                    props: {},\n                    lastUpdated: new Date().toISOString(),\n                  };\n                } else if (!this.cache[cacheKey].props) {\n                  this.cache[cacheKey].props = {}; // Initialize props if missing\n                }\n\n                this.cache[cacheKey].props[prop.name] = {\n                  propHash: this.calculatePropHash(component.name, prop),\n                  description: prop.description,\n                };\n              }\n            }\n          }\n        }\n      } else {\n        // Generate component description if not already present\n        if (!component.description || component.description.trim() === \"\") {\n          component.description = await this.generateComponentDescription(\n            component\n          );\n          generatedCount++;\n\n          // Create cache entry for this component\n          this.cache[cacheKey] = {\n            componentHash,\n            description: component.description,\n            props: {},\n            lastUpdated: new Date().toISOString(),\n          };\n        }\n\n        // Generate prop descriptions if not already present\n        if (component.props && Array.isArray(component.props)) {\n          for (const prop of component.props) {\n            if (!prop) continue; // Skip undefined props\n\n            if (!prop.description || prop.description.trim() === \"\") {\n              prop.description = await this.generatePropDescription(\n                component,\n                prop\n              );\n              generatedCount++;\n\n              // Cache the prop description\n              if (!this.cache[cacheKey].props) {\n                this.cache[cacheKey].props = {};\n              }\n\n              this.cache[cacheKey].props[prop.name] = {\n                propHash: this.calculatePropHash(component.name, prop),\n                description: prop.description,\n              };\n            }\n          }\n        }\n      }\n\n      // Recursively process child components\n      if (component.childComponents && component.childComponents.length > 0) {\n        const childComponentDefinitions = await this.enhanceComponentsWithDescriptions(\n          (component.childComponents as unknown) as ComponentDefinition[]\n        );\n\n        const childDescriptions = childComponentDefinitions\n          .map(\n            (child) =>\n              `- ${child.name}: ${\n                child.description || \"No description available.\"\n              }`\n          )\n          .join(\"\\n\");\n\n        component.description += `\\nChild components and their descriptions:\\n${childDescriptions}`;\n      }\n\n      // Generate descriptions for methods if they exist\n      if (component.methods && Array.isArray(component.methods)) {\n        for (const method of component.methods) {\n          if (method && (!method.description || method.description.trim() === '')) {\n            method.description = await this.generateMethodDescription(component, method);\n            generatedCount++;\n            // Note: Caching for methods is not implemented in this version\n          }\n        }\n      }\n\n      enhancedComponents.push(component);\n    }\n\n    // Save the updated cache\n    this.saveCache();\n\n    console.log(\n      `Documentation generation: ${cachedCount} components used from cache, ${generatedCount} items generated`\n    );\n\n    return enhancedComponents;\n  }\n\n  /**\n   * Generate a description for a component using either OpenAI or Ollama\n   */\n  private async generateComponentDescription(\n    component: ComponentDefinition\n  ): Promise<string> {\n    // Add null check for component itself\n    if (!component) {\n      console.warn(\"Component is undefined in generateComponentDescription\");\n      return \"A React component.\";\n    }\n\n    const sourceCode = this.getSourceCode(component);\n\n    const propList =\n      component.props && Array.isArray(component.props)\n        ? component.props\n            .filter((prop) => prop) // Additional filter to ensure no undefined props\n            .map(\n              (prop) =>\n                `${prop.name}${prop.required ? \" (required)\" : \"\"}: ${\n                  prop.type || \"unknown\"\n                }`\n            )\n            .join(\", \")\n        : \"No props.\";\n\n    let prompt = `\n      You are an expert React developer documenting a component library.\n      Please provide a clear, concise description of the \"${\n        component.name\n      }\" component below.\n      Focus on:\n      - What the component does\n      - Key features and functionality\n      - Typical use cases\n\n      Keep the description between 2-3 sentences. Be precise and informative.\n\n      Component Name: ${component.name || \"Unknown\"}\n      File Path: ${component.filePath || \"Unknown\"}\n      Props: ${propList}\n      Component code:\n      ${sourceCode || \"No source code available.\"}\n\n      Format the response in Markdown.\n    `;\n\n    // First, enhance child components to get their descriptions\n    if (component.childComponents && component.childComponents.length > 0) {\n      const childComponentDefinitions =\n        (await this.enhanceComponentsWithDescriptions(\n          (component.childComponents as unknown) as ComponentDefinition[]\n        )) || [];\n\n      if (childComponentDefinitions.length > 0) {\n        const childDescriptions = childComponentDefinitions\n          .map(\n            (child) =>\n              `- ${child.name}: ${\n                child.description || \"No description available.\"\n              }`\n          )\n          .join(\"\\n\");\n\n        prompt += `\\nChild components and their descriptions:\\n${childDescriptions}`;\n      }\n    }\n\n    return this.generateDescription(prompt);\n  }\n\n  private getSourceCode(component: ComponentDefinition): string {\n    // This provides a resilient way to access the source code,\n    // accommodating different property names used in different parts of the toolchain.\n    if (component.sourceCode) {\n      return component.sourceCode;\n    }\n    // The type doesn't officially have 'code', so we cast to any to check for it.\n    const code = (component as any).code;\n    if (typeof code === 'string') {\n      return code;\n    }\n    return \"\";\n  }\n\n  /**\n   * Generate a description for a prop based on its name, type, and parent component\n   */\n  private async generatePropDescription(\n    component: ComponentDefinition,\n    prop: PropDefinition\n  ): Promise<string> {\n    // Add null checks\n    if (!component) {\n      console.warn(\"Component is undefined in generatePropDescription\");\n      return \"A prop for a React component.\";\n    }\n\n    if (!prop) {\n      console.warn(\"Prop is undefined in generatePropDescription\");\n      return \"A prop for a React component.\";\n    }\n\n    const isRequired = prop.required ? \"required\" : \"optional\";\n    const defaultValue = prop.defaultValue\n      ? `It has a default value of \\`${prop.defaultValue}\\`.`\n      : \"\";\n\n    let prompt = `\n      Generate a concise, one-sentence description for the prop \"${prop.name}\" of the React component \"${component.name}\".\n      The description should explain what the prop does and its data type.\n\n      Component Name: ${component.name || \"Unknown\"}\n      File Path: ${component.filePath || \"Unknown\"}\n      Type: ${prop.type || \"unknown\"}\n      Required: ${isRequired}\n      ${defaultValue}\n    `;\n\n    // First, enhance child components to get their descriptions\n    if (component.childComponents && component.childComponents.length > 0) {\n      const childComponentDefinitions =\n        (await this.enhanceComponentsWithDescriptions(\n          (component.childComponents as unknown) as ComponentDefinition[]\n        )) || [];\n\n      if (childComponentDefinitions.length > 0) {\n        const childDescriptions = childComponentDefinitions\n          .map(\n            (child) =>\n              `- ${child.name}: ${\n                child.description || \"No description available.\"\n              }`\n          )\n          .join(\"\\n\");\n\n        prompt += `\\nChild components and their descriptions:\\n${childDescriptions}`;\n      }\n    }\n\n    return this.generateDescription(prompt);\n  }\n\n  private calculateMethodHash(componentName: string, method: any): string {\n    const dataToHash = {\n      componentName,\n      methodName: method.name || \"unnamed\",\n      params: method.params || [],\n      returnType: method.returnType || \"unknown\",\n      sourceCode: method.sourceCode || \"\"\n    };\n\n    return crypto\n      .createHash(\"md5\")\n      .update(JSON.stringify(dataToHash))\n      .digest(\"hex\");\n  }\n\n  private async generateMethodDescription(\n    component: ComponentDefinition,\n    method: any\n  ): Promise<string> {\n    console.log(`Generating description for method: ${method.name} in ${component.name}`);\n    \n    // Get method code - check both sourceCode and code properties\n    const methodCode = method.sourceCode || method.code || '';\n    \n    const prompt = `\n      Component: ${component.name}\n      Method: ${method.name}\n      Method signature: ${method.name}(${method.params?.map((p: any) => `${p.name}: ${p.type}`).join(', ') || ''}): ${method.returnType || 'void'}\n      Method code:\n      ${methodCode}\n\n      What is the purpose of this method? Describe its function, parameters, and return value in a single, concise sentence.\n    `;\n    return this.generateDescription(prompt);\n  }\n\n  private async generateDescription(prompt: string): Promise<string> {\n    if (this.useOllama) {\n      try {\n        const response = await axios.post(`${this.ollamaUrl}/api/generate`, {\n          model: this.ollamaModel,\n          prompt: prompt,\n          temperature: this.temperature,\n          max_tokens: this.maxTokens,\n          stream: false,\n        });\n\n        if (response.data && response.data.response) {\n          return (\n            response.data.response.trim() ||\n            `A React component that renders a ${prompt.split(\" \")[2]} element.`\n          );\n        } else {\n          console.error(\n            \"Unexpected response format from Ollama:\",\n            response.data\n          );\n          return `A React component that renders a ${prompt.split(\" \")[2]} element.`;\n        }\n      } catch (error) {\n        console.error(\n          `Error generating description with Ollama for component ${prompt.split(\" \")[2]}:`,\n          error\n        );\n        return `A React component that renders a ${prompt.split(\" \")[2]} element.`;\n      }\n    } else {\n      try {\n        if (!this.openai) {\n          throw new Error(\"OpenAI client not initialized\");\n        }\n\n        const completion = await this.openai.chat.completions.create({\n          messages: [{ role: \"user\", content: prompt }],\n          model: this.model,\n          temperature: this.temperature,\n          max_tokens: this.maxTokens,\n        });\n\n        return (\n          completion.choices[0]?.message?.content?.trim() ||\n          `A React component that renders a ${prompt.split(\" \")[2]} element.`\n        );\n      } catch (error) {\n        console.error(\n          `Error generating description for component ${prompt.split(\" \")[2]}:`,\n          error\n        );\n        return `A React component that renders a ${prompt.split(\" \")[2]} element.`;\n      }\n    }\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ai/generator.ts",
    "slug": "src_ai_generator_aidescriptiongenerator",
    "imports": [
      "OpenAI",
      "ComponentDefinition",
      "PropDefinition"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ai_generator_aidescriptiongenerator",
        "target": "openai",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_generator_aidescriptiongenerator",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_generator_aidescriptiongenerator",
        "target": "propdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": [
      {
        "name": "loadCache",
        "code": "private loadCache() {\n    try {\n      if (fs.existsSync(this.cachePath)) {\n        this.cache = fs.readJSONSync(this.cachePath);\n        console.log(`Documentation cache loaded from ${this.cachePath}`);\n      }\n    } catch (error) {\n      console.warn(`Failed to load documentation cache: ${error}`);\n      this.cache = {};\n    }\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "saveCache",
        "code": "private saveCache() {\n    try {\n      // Ensure the directory exists\n      const cacheDir = path.dirname(this.cachePath);\n      fs.ensureDirSync(cacheDir);\n\n      // Save the cache file\n      fs.writeJSONSync(this.cachePath, this.cache, { spaces: 2 });\n    } catch (error) {\n      console.warn(`Failed to save documentation cache: ${error}`);\n    }\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "calculateComponentHash",
        "code": "private calculateComponentHash(component: ComponentDefinition): string {\n    const dataToHash = {\n      name: component.name,\n      filePath: component.filePath,\n      props:\n        component.props && Array.isArray(component.props)\n          ? component.props.map((prop) => ({\n              name: prop.name,\n              type: prop.type,\n              required: prop.required,\n              defaultValue: prop.defaultValue,\n            }))\n          : [],\n      sourceCode: this.getSourceCode(component),\n    };\n\n    return crypto\n      .createHash(\"md5\")\n      .update(JSON.stringify(dataToHash))\n      .digest(\"hex\");\n  }",
        "returnType": "string",
        "params": [
          {
            "name": "component",
            "type": "ComponentDefinition",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "calculatePropHash",
        "code": "private calculatePropHash(\n    componentName: string,\n    prop: PropDefinition\n  ): string {\n    // Ensure prop is defined\n    if (!prop) {\n      console.warn(\"Prop is undefined in calculatePropHash\");\n      return crypto\n        .createHash(\"md5\")\n        .update(JSON.stringify({ componentName }))\n        .digest(\"hex\");\n    }\n\n    const dataToHash = {\n      componentName,\n      propName: prop.name || \"unnamed\",\n      type: prop.type || \"unknown\",\n      required: prop.required || false,\n      defaultValue: prop.defaultValue || null,\n    };\n\n    return crypto\n      .createHash(\"md5\")\n      .update(JSON.stringify(dataToHash))\n      .digest(\"hex\");\n  }",
        "returnType": "string",
        "params": [
          {
            "name": "componentName",
            "type": "string",
            "description": "",
            "optional": false
          },
          {
            "name": "prop",
            "type": "PropDefinition",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "enhanceComponentsWithDescriptions",
        "code": "async enhanceComponentsWithDescriptions(\n    components: ComponentDefinition[]\n  ): Promise<ComponentDefinition[]> {\n    const enhancedComponents: ComponentDefinition[] = [];\n    let cachedCount = 0;\n    let generatedCount = 0;\n\n    for (const component of components) {\n      // Handle case where component might be undefined or missing properties\n      if (!component) {\n        console.warn(\"Encountered undefined component, skipping\");\n        continue;\n      }\n\n      const componentHash = this.calculateComponentHash(component);\n      component.slug = componentHash;\n      const cacheKey = `${component.name}:${component.filePath}`;\n      const cachedComponent = this.cache[cacheKey];\n\n      // Check if we have a valid cached description for this component\n      if (cachedComponent && cachedComponent.componentHash === componentHash) {\n        // Component hasn't changed, use cached description\n        component.description = cachedComponent.description;\n        cachedCount++;\n\n        // Check and apply cached prop descriptions\n        if (component.props && Array.isArray(component.props)) {\n          for (const prop of component.props) {\n            // Skip if prop is undefined\n            if (!prop) continue;\n\n            // Ensure cachedComponent.props exists before accessing it\n            const cachedProp =\n              cachedComponent.props && cachedComponent.props[prop.name];\n            if (cachedProp) {\n              const propHash = this.calculatePropHash(component.name, prop);\n              if (cachedProp.propHash === propHash) {\n                prop.description = cachedProp.description;\n              } else {\n                // Prop has changed, generate new description\n                prop.description = await this.generatePropDescription(\n                  component,\n                  prop\n                );\n                generatedCount++;\n\n                // Update cache for this prop\n                if (!this.cache[cacheKey]) {\n                  this.cache[cacheKey] = {\n                    componentHash,\n                    description: component.description,\n                    props: {},\n                    lastUpdated: new Date().toISOString(),\n                  };\n                }\n\n                this.cache[cacheKey].props[prop.name] = {\n                  propHash,\n                  description: prop.description,\n                };\n              }\n            } else {\n              // No cached description for this prop, or cachedComponent.props didn't exist\n              if (!prop.description || prop.description.trim() === \"\") {\n                prop.description = await this.generatePropDescription(\n                  component,\n                  prop\n                );\n                generatedCount++;\n\n                // Cache the newly generated description\n                // Ensure the cache entry and its props object exist\n                if (!this.cache[cacheKey]) {\n                  this.cache[cacheKey] = {\n                    componentHash,\n                    description: component.description || \"\", // Use current/default description\n                    props: {},\n                    lastUpdated: new Date().toISOString(),\n                  };\n                } else if (!this.cache[cacheKey].props) {\n                  this.cache[cacheKey].props = {}; // Initialize props if missing\n                }\n\n                this.cache[cacheKey].props[prop.name] = {\n                  propHash: this.calculatePropHash(component.name, prop),\n                  description: prop.description,\n                };\n              }\n            }\n          }\n        }\n      } else {\n        // Generate component description if not already present\n        if (!component.description || component.description.trim() === \"\") {\n          component.description = await this.generateComponentDescription(\n            component\n          );\n          generatedCount++;\n\n          // Create cache entry for this component\n          this.cache[cacheKey] = {\n            componentHash,\n            description: component.description,\n            props: {},\n            lastUpdated: new Date().toISOString(),\n          };\n        }\n\n        // Generate prop descriptions if not already present\n        if (component.props && Array.isArray(component.props)) {\n          for (const prop of component.props) {\n            if (!prop) continue; // Skip undefined props\n\n            if (!prop.description || prop.description.trim() === \"\") {\n              prop.description = await this.generatePropDescription(\n                component,\n                prop\n              );\n              generatedCount++;\n\n              // Cache the prop description\n              if (!this.cache[cacheKey].props) {\n                this.cache[cacheKey].props = {};\n              }\n\n              this.cache[cacheKey].props[prop.name] = {\n                propHash: this.calculatePropHash(component.name, prop),\n                description: prop.description,\n              };\n            }\n          }\n        }\n      }\n\n      // Recursively process child components\n      if (component.childComponents && component.childComponents.length > 0) {\n        const childComponentDefinitions = await this.enhanceComponentsWithDescriptions(\n          (component.childComponents as unknown) as ComponentDefinition[]\n        );\n\n        const childDescriptions = childComponentDefinitions\n          .map(\n            (child) =>\n              `- ${child.name}: ${\n                child.description || \"No description available.\"\n              }`\n          )\n          .join(\"\\n\");\n\n        component.description += `\\nChild components and their descriptions:\\n${childDescriptions}`;\n      }\n\n      // Generate descriptions for methods if they exist\n      if (component.methods && Array.isArray(component.methods)) {\n        for (const method of component.methods) {\n          if (method && (!method.description || method.description.trim() === '')) {\n            method.description = await this.generateMethodDescription(component, method);\n            generatedCount++;\n            // Note: Caching for methods is not implemented in this version\n          }\n        }\n      }\n\n      enhancedComponents.push(component);\n    }\n\n    // Save the updated cache\n    this.saveCache();\n\n    console.log(\n      `Documentation generation: ${cachedCount} components used from cache, ${generatedCount} items generated`\n    );\n\n    return enhancedComponents;\n  }",
        "returnType": "Promise<ComponentDefinition[]>",
        "params": [
          {
            "name": "components",
            "type": "ComponentDefinition[]",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "generateComponentDescription",
        "code": "private async generateComponentDescription(\n    component: ComponentDefinition\n  ): Promise<string> {\n    // Add null check for component itself\n    if (!component) {\n      console.warn(\"Component is undefined in generateComponentDescription\");\n      return \"A React component.\";\n    }\n\n    const sourceCode = this.getSourceCode(component);\n\n    const propList =\n      component.props && Array.isArray(component.props)\n        ? component.props\n            .filter((prop) => prop) // Additional filter to ensure no undefined props\n            .map(\n              (prop) =>\n                `${prop.name}${prop.required ? \" (required)\" : \"\"}: ${\n                  prop.type || \"unknown\"\n                }`\n            )\n            .join(\", \")\n        : \"No props.\";\n\n    let prompt = `\n      You are an expert React developer documenting a component library.\n      Please provide a clear, concise description of the \"${\n        component.name\n      }\" component below.\n      Focus on:\n      - What the component does\n      - Key features and functionality\n      - Typical use cases\n\n      Keep the description between 2-3 sentences. Be precise and informative.\n\n      Component Name: ${component.name || \"Unknown\"}\n      File Path: ${component.filePath || \"Unknown\"}\n      Props: ${propList}\n      Component code:\n      ${sourceCode || \"No source code available.\"}\n\n      Format the response in Markdown.\n    `;\n\n    // First, enhance child components to get their descriptions\n    if (component.childComponents && component.childComponents.length > 0) {\n      const childComponentDefinitions =\n        (await this.enhanceComponentsWithDescriptions(\n          (component.childComponents as unknown) as ComponentDefinition[]\n        )) || [];\n\n      if (childComponentDefinitions.length > 0) {\n        const childDescriptions = childComponentDefinitions\n          .map(\n            (child) =>\n              `- ${child.name}: ${\n                child.description || \"No description available.\"\n              }`\n          )\n          .join(\"\\n\");\n\n        prompt += `\\nChild components and their descriptions:\\n${childDescriptions}`;\n      }\n    }\n\n    return this.generateDescription(prompt);\n  }",
        "returnType": "Promise<string>",
        "params": [
          {
            "name": "component",
            "type": "ComponentDefinition",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "getSourceCode",
        "code": "private getSourceCode(component: ComponentDefinition): string {\n    // This provides a resilient way to access the source code,\n    // accommodating different property names used in different parts of the toolchain.\n    if (component.sourceCode) {\n      return component.sourceCode;\n    }\n    // The type doesn't officially have 'code', so we cast to any to check for it.\n    const code = (component as any).code;\n    if (typeof code === 'string') {\n      return code;\n    }\n    return \"\";\n  }",
        "returnType": "string",
        "params": [
          {
            "name": "component",
            "type": "ComponentDefinition",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "generatePropDescription",
        "code": "private async generatePropDescription(\n    component: ComponentDefinition,\n    prop: PropDefinition\n  ): Promise<string> {\n    // Add null checks\n    if (!component) {\n      console.warn(\"Component is undefined in generatePropDescription\");\n      return \"A prop for a React component.\";\n    }\n\n    if (!prop) {\n      console.warn(\"Prop is undefined in generatePropDescription\");\n      return \"A prop for a React component.\";\n    }\n\n    const isRequired = prop.required ? \"required\" : \"optional\";\n    const defaultValue = prop.defaultValue\n      ? `It has a default value of \\`${prop.defaultValue}\\`.`\n      : \"\";\n\n    let prompt = `\n      Generate a concise, one-sentence description for the prop \"${prop.name}\" of the React component \"${component.name}\".\n      The description should explain what the prop does and its data type.\n\n      Component Name: ${component.name || \"Unknown\"}\n      File Path: ${component.filePath || \"Unknown\"}\n      Type: ${prop.type || \"unknown\"}\n      Required: ${isRequired}\n      ${defaultValue}\n    `;\n\n    // First, enhance child components to get their descriptions\n    if (component.childComponents && component.childComponents.length > 0) {\n      const childComponentDefinitions =\n        (await this.enhanceComponentsWithDescriptions(\n          (component.childComponents as unknown) as ComponentDefinition[]\n        )) || [];\n\n      if (childComponentDefinitions.length > 0) {\n        const childDescriptions = childComponentDefinitions\n          .map(\n            (child) =>\n              `- ${child.name}: ${\n                child.description || \"No description available.\"\n              }`\n          )\n          .join(\"\\n\");\n\n        prompt += `\\nChild components and their descriptions:\\n${childDescriptions}`;\n      }\n    }\n\n    return this.generateDescription(prompt);\n  }",
        "returnType": "Promise<string>",
        "params": [
          {
            "name": "component",
            "type": "ComponentDefinition",
            "description": "",
            "optional": false
          },
          {
            "name": "prop",
            "type": "PropDefinition",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "calculateMethodHash",
        "code": "private calculateMethodHash(componentName: string, method: any): string {\n    const dataToHash = {\n      componentName,\n      methodName: method.name || \"unnamed\",\n      params: method.params || [],\n      returnType: method.returnType || \"unknown\",\n      sourceCode: method.sourceCode || \"\"\n    };\n\n    return crypto\n      .createHash(\"md5\")\n      .update(JSON.stringify(dataToHash))\n      .digest(\"hex\");\n  }",
        "returnType": "string",
        "params": [
          {
            "name": "componentName",
            "type": "string",
            "description": "",
            "optional": false
          },
          {
            "name": "method",
            "type": "any",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "generateMethodDescription",
        "code": "private async generateMethodDescription(\n    component: ComponentDefinition,\n    method: any\n  ): Promise<string> {\n    console.log(`Generating description for method: ${method.name} in ${component.name}`);\n    \n    // Get method code - check both sourceCode and code properties\n    const methodCode = method.sourceCode || method.code || '';\n    \n    const prompt = `\n      Component: ${component.name}\n      Method: ${method.name}\n      Method signature: ${method.name}(${method.params?.map((p: any) => `${p.name}: ${p.type}`).join(', ') || ''}): ${method.returnType || 'void'}\n      Method code:\n      ${methodCode}\n\n      What is the purpose of this method? Describe its function, parameters, and return value in a single, concise sentence.\n    `;\n    return this.generateDescription(prompt);\n  }",
        "returnType": "Promise<string>",
        "params": [
          {
            "name": "component",
            "type": "ComponentDefinition",
            "description": "",
            "optional": false
          },
          {
            "name": "method",
            "type": "any",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "generateDescription",
        "code": "private async generateDescription(prompt: string): Promise<string> {\n    if (this.useOllama) {\n      try {\n        const response = await axios.post(`${this.ollamaUrl}/api/generate`, {\n          model: this.ollamaModel,\n          prompt: prompt,\n          temperature: this.temperature,\n          max_tokens: this.maxTokens,\n          stream: false,\n        });\n\n        if (response.data && response.data.response) {\n          return (\n            response.data.response.trim() ||\n            `A React component that renders a ${prompt.split(\" \")[2]} element.`\n          );\n        } else {\n          console.error(\n            \"Unexpected response format from Ollama:\",\n            response.data\n          );\n          return `A React component that renders a ${prompt.split(\" \")[2]} element.`;\n        }\n      } catch (error) {\n        console.error(\n          `Error generating description with Ollama for component ${prompt.split(\" \")[2]}:`,\n          error\n        );\n        return `A React component that renders a ${prompt.split(\" \")[2]} element.`;\n      }\n    } else {\n      try {\n        if (!this.openai) {\n          throw new Error(\"OpenAI client not initialized\");\n        }\n\n        const completion = await this.openai.chat.completions.create({\n          messages: [{ role: \"user\", content: prompt }],\n          model: this.model,\n          temperature: this.temperature,\n          max_tokens: this.maxTokens,\n        });\n\n        return (\n          completion.choices[0]?.message?.content?.trim() ||\n          `A React component that renders a ${prompt.split(\" \")[2]} element.`\n        );\n      } catch (error) {\n        console.error(\n          `Error generating description for component ${prompt.split(\" \")[2]}:`,\n          error\n        );\n        return `A React component that renders a ${prompt.split(\" \")[2]} element.`;\n      }\n    }\n  }",
        "returnType": "Promise<string>",
        "params": [
          {
            "name": "prompt",
            "type": "string",
            "description": "",
            "optional": false
          }
        ]
      }
    ]
  },
  {
    "name": "generateDocumentation",
    "kind": "function",
    "code": "export async function generateDocumentation(\n  components: any[],\n  options: GenerateDocumentationOptions = {}\n) {\n  const outputDir = options.output || \"docs-data\";\n  fs.ensureDirSync(outputDir);\n\n  const componentIndex = components.map((component) => ({\n    name: component.name,\n    slug: component.slug,\n    filePath: component.filePath,\n  }));\n\n  fs.writeJSONSync(path.join(outputDir, \"component-index.json\"), componentIndex, {\n    spaces: 2,\n  });\n\n  for (const component of components) {\n    if (component.slug) {\n      fs.writeJSONSync(\n        path.join(outputDir, `${component.slug}.json`),\n        component,\n        { spaces: 2 }\n      );\n    }\n  }\n\n  console.log(`Generated documentation for ${components.length} components`);\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ai/generator.ts",
    "slug": "src_ai_generator_generatedocumentation",
    "imports": [
      "OpenAI",
      "ComponentDefinition",
      "PropDefinition"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ai_generator_generatedocumentation",
        "target": "openai",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_generator_generatedocumentation",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_generator_generatedocumentation",
        "target": "propdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "parseSyntax",
    "kind": "function",
    "code": "function parseSyntax(code: string): boolean {\n  try {\n    // Basic parsing - in a real implementation, this would be more sophisticated\n    // Ensure we can handle all JavaScript and TypeScript syntax\n    const patterns = [\n      // Classes\n      /class\\s+\\w+/,\n      // Class methods\n      /\\w+\\s*\\([^)]*\\)\\s*{/,\n      // Arrow functions\n      /\\([^)]*\\)\\s*=>\\s*[{(]/,\n      // Function declarations\n      /function\\s+\\w+\\s*\\([^)]*\\)/,\n      // Interfaces\n      /interface\\s+\\w+/,\n      // Types\n      /type\\s+\\w+\\s*=/,\n      // JSX/TSX\n      /<[A-Z]\\w+[^>]*>/,\n      // Async functions\n      /async\\s+\\w+\\s*\\(/,\n      // Generators\n      /function\\s*\\*\\s*\\w+/,\n      // Destructuring\n      /const\\s*{\\s*[^}]+\\s*}\\s*=/,\n      // Rest parameters\n      /\\.\\.\\.\\w+/,\n      // Decorators\n      /@\\w+/,\n    ];\n\n    return patterns.some((pattern) => pattern.test(code));\n  } catch (error) {\n    return false;\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/__tests__/code-blocks.test.ts",
    "slug": "src___tests___code-blocks.test_parsesyntax",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getTable",
    "kind": "function",
    "code": "function getTable() {\n        return document.querySelector('.coverage-summary');\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_gettable",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getTableHeader",
    "kind": "function",
    "code": "function getTableHeader() {\n        return getTable().querySelector('thead tr');\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_gettableheader",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getTableBody",
    "kind": "function",
    "code": "function getTableBody() {\n        return getTable().querySelector('tbody');\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_gettablebody",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getNthColumn",
    "kind": "function",
    "code": "function getNthColumn(n) {\n        return getTableHeader().querySelectorAll('th')[n];\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_getnthcolumn",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "onFilterInput",
    "kind": "function",
    "code": "function onFilterInput() {\n        const searchValue = document.getElementById('fileSearch').value;\n        const rows = document.getElementsByTagName('tbody')[0].children;\n        for (let i = 0; i < rows.length; i++) {\n            const row = rows[i];\n            if (\n                row.textContent\n                    .toLowerCase()\n                    .includes(searchValue.toLowerCase())\n            ) {\n                row.style.display = '';\n            } else {\n                row.style.display = 'none';\n            }\n        }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_onfilterinput",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "addSearchBox",
    "kind": "function",
    "code": "function addSearchBox() {\n        var template = document.getElementById('filterTemplate');\n        var templateClone = template.content.cloneNode(true);\n        templateClone.getElementById('fileSearch').oninput = onFilterInput;\n        template.parentElement.appendChild(templateClone);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_addsearchbox",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "loadColumns",
    "kind": "function",
    "code": "function loadColumns() {\n        var colNodes = getTableHeader().querySelectorAll('th'),\n            colNode,\n            cols = [],\n            col,\n            i;\n\n        for (i = 0; i < colNodes.length; i += 1) {\n            colNode = colNodes[i];\n            col = {\n                key: colNode.getAttribute('data-col'),\n                sortable: !colNode.getAttribute('data-nosort'),\n                type: colNode.getAttribute('data-type') || 'string'\n            };\n            cols.push(col);\n            if (col.sortable) {\n                col.defaultDescSort = col.type === 'number';\n                colNode.innerHTML =\n                    colNode.innerHTML + '<span class=\"sorter\"></span>';\n            }\n        }\n        return cols;\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_loadcolumns",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "loadRowData",
    "kind": "function",
    "code": "function loadRowData(tableRow) {\n        var tableCols = tableRow.querySelectorAll('td'),\n            colNode,\n            col,\n            data = {},\n            i,\n            val;\n        for (i = 0; i < tableCols.length; i += 1) {\n            colNode = tableCols[i];\n            col = cols[i];\n            val = colNode.getAttribute('data-value');\n            if (col.type === 'number') {\n                val = Number(val);\n            }\n            data[col.key] = val;\n        }\n        return data;\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_loadrowdata",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "loadData",
    "kind": "function",
    "code": "function loadData() {\n        var rows = getTableBody().querySelectorAll('tr'),\n            i;\n\n        for (i = 0; i < rows.length; i += 1) {\n            rows[i].data = loadRowData(rows[i]);\n        }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_loaddata",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "sortByIndex",
    "kind": "function",
    "code": "function sortByIndex(index, desc) {\n        var key = cols[index].key,\n            sorter = function(a, b) {\n                a = a.data[key];\n                b = b.data[key];\n                return a < b ? -1 : a > b ? 1 : 0;\n            },\n            finalSorter = sorter,\n            tableBody = document.querySelector('.coverage-summary tbody'),\n            rowNodes = tableBody.querySelectorAll('tr'),\n            rows = [],\n            i;\n\n        if (desc) {\n            finalSorter = function(a, b) {\n                return -1 * sorter(a, b);\n            };\n        }\n\n        for (i = 0; i < rowNodes.length; i += 1) {\n            rows.push(rowNodes[i]);\n            tableBody.removeChild(rowNodes[i]);\n        }\n\n        rows.sort(finalSorter);\n\n        for (i = 0; i < rows.length; i += 1) {\n            tableBody.appendChild(rows[i]);\n        }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_sortbyindex",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "sorter",
        "code": "var key = cols[index].key,\n            sorter = function(a, b) {\n                a = a.data[key];\n                b = b.data[key];\n                return a < b ? -1 : a > b ? 1 : 0;\n            },\n            finalSorter = sorter,\n            tableBody = document.querySelector('.coverage-summary tbody'),\n            rowNodes = tableBody.querySelectorAll('tr'),\n            rows = [],\n            i;",
        "returnType": "void",
        "params": [
          {
            "name": "a",
            "type": "any"
          },
          {
            "name": "b",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "name": "sorter",
    "kind": "function",
    "code": "var key = cols[index].key,\n            sorter = function(a, b) {\n                a = a.data[key];\n                b = b.data[key];\n                return a < b ? -1 : a > b ? 1 : 0;\n            },\n            finalSorter = sorter,\n            tableBody = document.querySelector('.coverage-summary tbody'),\n            rowNodes = tableBody.querySelectorAll('tr'),\n            rows = [],\n            i;",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_sorter",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "removeSortIndicators",
    "kind": "function",
    "code": "function removeSortIndicators() {\n        var col = getNthColumn(currentSort.index),\n            cls = col.className;\n\n        cls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');\n        col.className = cls;\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_removesortindicators",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "addSortIndicators",
    "kind": "function",
    "code": "function addSortIndicators() {\n        getNthColumn(currentSort.index).className += currentSort.desc\n            ? ' sorted-desc'\n            : ' sorted';\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_addsortindicators",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "enableUI",
    "kind": "function",
    "code": "function enableUI() {\n        var i,\n            el,\n            ithSorter = function ithSorter(i) {\n                var col = cols[i];\n\n                return function() {\n                    var desc = col.defaultDescSort;\n\n                    if (currentSort.index === i) {\n                        desc = !currentSort.desc;\n                    }\n                    sortByIndex(i, desc);\n                    removeSortIndicators();\n                    currentSort.index = i;\n                    currentSort.desc = desc;\n                    addSortIndicators();\n                };\n            };\n        for (i = 0; i < cols.length; i += 1) {\n            if (cols[i].sortable) {\n                // add the click event handler on the th so users\n                // dont have to click on those tiny arrows\n                el = getNthColumn(i).querySelector('.sorter').parentElement;\n                if (el.addEventListener) {\n                    el.addEventListener('click', ithSorter(i));\n                } else {\n                    el.attachEvent('onclick', ithSorter(i));\n                }\n            }\n        }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_enableui",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "ithSorter",
        "code": "var i,\n            el,\n            ithSorter = function ithSorter(i) {\n                var col = cols[i];\n\n                return function() {\n                    var desc = col.defaultDescSort;\n\n                    if (currentSort.index === i) {\n                        desc = !currentSort.desc;\n                    }\n                    sortByIndex(i, desc);\n                    removeSortIndicators();\n                    currentSort.index = i;\n                    currentSort.desc = desc;\n                    addSortIndicators();\n                };\n            };",
        "returnType": "void",
        "params": [
          {
            "name": "i",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "name": "ithSorter",
    "kind": "function",
    "code": "var i,\n            el,\n            ithSorter = function ithSorter(i) {\n                var col = cols[i];\n\n                return function() {\n                    var desc = col.defaultDescSort;\n\n                    if (currentSort.index === i) {\n                        desc = !currentSort.desc;\n                    }\n                    sortByIndex(i, desc);\n                    removeSortIndicators();\n                    currentSort.index = i;\n                    currentSort.desc = desc;\n                    addSortIndicators();\n                };\n            };",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/sorter.js",
    "slug": "coverage_lcov-report_sorter_ithsorter",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "k",
    "kind": "function",
    "code": "function k(Z){var ad=0;var S=false;var ac=false;for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.ignoreCase){ac=true}else{if(/[a-z]/i.test(ae.source.replace(/\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi,\"\"))){S=true;ac=false;break}}}var Y={b:8,t:9,n:10,v:11,f:12,r:13};function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if(\"0\"<=af&&af<=\"7\"){return parseInt(ah.substring(1),8)}else{if(af===\"u\"||af===\"x\"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}}function T(af){if(af<32){return(af<16?\"\\\\x0\":\"\\\\x\")+af.toString(16)}var ag=String.fromCharCode(af);if(ag===\"\\\\\"||ag===\"-\"||ag===\"[\"||ag===\"]\"){ag=\"\\\\\"+ag}return ag}function X(am){var aq=am.substring(1,am.length-1).match(new RegExp(\"\\\\\\\\u[0-9A-Fa-f]{4}|\\\\\\\\x[0-9A-Fa-f]{2}|\\\\\\\\[0-3][0-7]{0,2}|\\\\\\\\[0-7]{1,2}|\\\\\\\\[\\\\s\\\\S]|-|[^-\\\\\\\\]\",\"g\"));var ak=[];var af=[];var ao=aq[0]===\"^\";for(var ar=ao?1:0,aj=aq.length;ar<aj;++ar){var ah=aq[ar];if(/\\\\[bdsw]/i.test(ah)){ak.push(ah)}else{var ag=ab(ah);var al;if(ar+2<aj&&\"-\"===aq[ar+1]){al=ab(aq[ar+2]);ar+=2}else{al=ag}af.push([ag,al]);if(!(al<65||ag>122)){if(!(al<65||ag>90)){af.push([Math.max(65,ag)|32,Math.min(al,90)|32])}if(!(al<97||ag>122)){af.push([Math.max(97,ag)&~32,Math.min(al,122)&~32])}}}}af.sort(function(av,au){return(av[0]-au[0])||(au[1]-av[1])});var ai=[];var ap=[NaN,NaN];for(var ar=0;ar<af.length;++ar){var at=af[ar];if(at[0]<=ap[1]+1){ap[1]=Math.max(ap[1],at[1])}else{ai.push(ap=at)}}var an=[\"[\"];if(ao){an.push(\"^\")}an.push.apply(an,ak);for(var ar=0;ar<ai.length;++ar){var at=ai[ar];an.push(T(at[0]));if(at[1]>at[0]){if(at[1]+1>at[0]){an.push(\"-\")}an.push(T(at[1]))}}an.push(\"]\");return an.join(\"\")}function W(al){var aj=al.source.match(new RegExp(\"(?:\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]|\\\\\\\\u[A-Fa-f0-9]{4}|\\\\\\\\x[A-Fa-f0-9]{2}|\\\\\\\\[0-9]+|\\\\\\\\[^ux0-9]|\\\\(\\\\?[:!=]|[\\\\(\\\\)\\\\^]|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+)\",\"g\"));var ah=aj.length;var an=[];for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){an[af]=-1}}}}for(var ak=1;ak<an.length;++ak){if(-1===an[ak]){an[ak]=++ad}}for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am;if(an[am]===undefined){aj[ak]=\"(?:\"}}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){aj[ak]=\"\\\\\"+an[am]}}}}for(var ak=0,am=0;ak<ah;++ak){if(\"^\"===aj[ak]&&\"^\"!==aj[ak+1]){aj[ak]=\"\"}}if(al.ignoreCase&&S){for(var ak=0;ak<ah;++ak){var ag=aj[ak];var ai=ag.charAt(0);if(ag.length>=2&&ai===\"[\"){aj[ak]=X(ag)}else{if(ai!==\"\\\\\"){aj[ak]=ag.replace(/[a-zA-Z]/g,function(ao){var ap=ao.charCodeAt(0);return\"[\"+String.fromCharCode(ap&~32,ap|32)+\"]\"})}}}}return aj.join(\"\")}var aa=[];for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.global||ae.multiline){throw new Error(\"\"+ae)}aa.push(\"(?:\"+W(ae)+\")\")}return new RegExp(aa.join(\"|\"),ac?\"gi\":\"g\")}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_k",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "ab",
        "code": "function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if(\"0\"<=af&&af<=\"7\"){return parseInt(ah.substring(1),8)}else{if(af===\"u\"||af===\"x\"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}}",
        "returnType": "void",
        "params": [
          {
            "name": "ah",
            "type": "any"
          }
        ]
      },
      {
        "name": "T",
        "code": "function T(af){if(af<32){return(af<16?\"\\\\x0\":\"\\\\x\")+af.toString(16)}var ag=String.fromCharCode(af);if(ag===\"\\\\\"||ag===\"-\"||ag===\"[\"||ag===\"]\"){ag=\"\\\\\"+ag}return ag}",
        "returnType": "void",
        "params": [
          {
            "name": "af",
            "type": "any"
          }
        ]
      },
      {
        "name": "X",
        "code": "function X(am){var aq=am.substring(1,am.length-1).match(new RegExp(\"\\\\\\\\u[0-9A-Fa-f]{4}|\\\\\\\\x[0-9A-Fa-f]{2}|\\\\\\\\[0-3][0-7]{0,2}|\\\\\\\\[0-7]{1,2}|\\\\\\\\[\\\\s\\\\S]|-|[^-\\\\\\\\]\",\"g\"));var ak=[];var af=[];var ao=aq[0]===\"^\";for(var ar=ao?1:0,aj=aq.length;ar<aj;++ar){var ah=aq[ar];if(/\\\\[bdsw]/i.test(ah)){ak.push(ah)}else{var ag=ab(ah);var al;if(ar+2<aj&&\"-\"===aq[ar+1]){al=ab(aq[ar+2]);ar+=2}else{al=ag}af.push([ag,al]);if(!(al<65||ag>122)){if(!(al<65||ag>90)){af.push([Math.max(65,ag)|32,Math.min(al,90)|32])}if(!(al<97||ag>122)){af.push([Math.max(97,ag)&~32,Math.min(al,122)&~32])}}}}af.sort(function(av,au){return(av[0]-au[0])||(au[1]-av[1])});var ai=[];var ap=[NaN,NaN];for(var ar=0;ar<af.length;++ar){var at=af[ar];if(at[0]<=ap[1]+1){ap[1]=Math.max(ap[1],at[1])}else{ai.push(ap=at)}}var an=[\"[\"];if(ao){an.push(\"^\")}an.push.apply(an,ak);for(var ar=0;ar<ai.length;++ar){var at=ai[ar];an.push(T(at[0]));if(at[1]>at[0]){if(at[1]+1>at[0]){an.push(\"-\")}an.push(T(at[1]))}}an.push(\"]\");return an.join(\"\")}",
        "returnType": "void",
        "params": [
          {
            "name": "am",
            "type": "any"
          }
        ]
      },
      {
        "name": "W",
        "code": "function W(al){var aj=al.source.match(new RegExp(\"(?:\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]|\\\\\\\\u[A-Fa-f0-9]{4}|\\\\\\\\x[A-Fa-f0-9]{2}|\\\\\\\\[0-9]+|\\\\\\\\[^ux0-9]|\\\\(\\\\?[:!=]|[\\\\(\\\\)\\\\^]|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+)\",\"g\"));var ah=aj.length;var an=[];for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){an[af]=-1}}}}for(var ak=1;ak<an.length;++ak){if(-1===an[ak]){an[ak]=++ad}}for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am;if(an[am]===undefined){aj[ak]=\"(?:\"}}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){aj[ak]=\"\\\\\"+an[am]}}}}for(var ak=0,am=0;ak<ah;++ak){if(\"^\"===aj[ak]&&\"^\"!==aj[ak+1]){aj[ak]=\"\"}}if(al.ignoreCase&&S){for(var ak=0;ak<ah;++ak){var ag=aj[ak];var ai=ag.charAt(0);if(ag.length>=2&&ai===\"[\"){aj[ak]=X(ag)}else{if(ai!==\"\\\\\"){aj[ak]=ag.replace(/[a-zA-Z]/g,function(ao){var ap=ao.charCodeAt(0);return\"[\"+String.fromCharCode(ap&~32,ap|32)+\"]\"})}}}}return aj.join(\"\")}",
        "returnType": "void",
        "params": [
          {
            "name": "al",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "name": "ab",
    "kind": "function",
    "code": "function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if(\"0\"<=af&&af<=\"7\"){return parseInt(ah.substring(1),8)}else{if(af===\"u\"||af===\"x\"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_ab",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "T",
    "kind": "component",
    "code": "function T(af){if(af<32){return(af<16?\"\\\\x0\":\"\\\\x\")+af.toString(16)}var ag=String.fromCharCode(af);if(ag===\"\\\\\"||ag===\"-\"||ag===\"[\"||ag===\"]\"){ag=\"\\\\\"+ag}return ag}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_t",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "X",
    "kind": "component",
    "code": "function X(am){var aq=am.substring(1,am.length-1).match(new RegExp(\"\\\\\\\\u[0-9A-Fa-f]{4}|\\\\\\\\x[0-9A-Fa-f]{2}|\\\\\\\\[0-3][0-7]{0,2}|\\\\\\\\[0-7]{1,2}|\\\\\\\\[\\\\s\\\\S]|-|[^-\\\\\\\\]\",\"g\"));var ak=[];var af=[];var ao=aq[0]===\"^\";for(var ar=ao?1:0,aj=aq.length;ar<aj;++ar){var ah=aq[ar];if(/\\\\[bdsw]/i.test(ah)){ak.push(ah)}else{var ag=ab(ah);var al;if(ar+2<aj&&\"-\"===aq[ar+1]){al=ab(aq[ar+2]);ar+=2}else{al=ag}af.push([ag,al]);if(!(al<65||ag>122)){if(!(al<65||ag>90)){af.push([Math.max(65,ag)|32,Math.min(al,90)|32])}if(!(al<97||ag>122)){af.push([Math.max(97,ag)&~32,Math.min(al,122)&~32])}}}}af.sort(function(av,au){return(av[0]-au[0])||(au[1]-av[1])});var ai=[];var ap=[NaN,NaN];for(var ar=0;ar<af.length;++ar){var at=af[ar];if(at[0]<=ap[1]+1){ap[1]=Math.max(ap[1],at[1])}else{ai.push(ap=at)}}var an=[\"[\"];if(ao){an.push(\"^\")}an.push.apply(an,ak);for(var ar=0;ar<ai.length;++ar){var at=ai[ar];an.push(T(at[0]));if(at[1]>at[0]){if(at[1]+1>at[0]){an.push(\"-\")}an.push(T(at[1]))}}an.push(\"]\");return an.join(\"\")}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_x",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "W",
    "kind": "component",
    "code": "function W(al){var aj=al.source.match(new RegExp(\"(?:\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]|\\\\\\\\u[A-Fa-f0-9]{4}|\\\\\\\\x[A-Fa-f0-9]{2}|\\\\\\\\[0-9]+|\\\\\\\\[^ux0-9]|\\\\(\\\\?[:!=]|[\\\\(\\\\)\\\\^]|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+)\",\"g\"));var ah=aj.length;var an=[];for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){an[af]=-1}}}}for(var ak=1;ak<an.length;++ak){if(-1===an[ak]){an[ak]=++ad}}for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am;if(an[am]===undefined){aj[ak]=\"(?:\"}}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){aj[ak]=\"\\\\\"+an[am]}}}}for(var ak=0,am=0;ak<ah;++ak){if(\"^\"===aj[ak]&&\"^\"!==aj[ak+1]){aj[ak]=\"\"}}if(al.ignoreCase&&S){for(var ak=0;ak<ah;++ak){var ag=aj[ak];var ai=ag.charAt(0);if(ag.length>=2&&ai===\"[\"){aj[ak]=X(ag)}else{if(ai!==\"\\\\\"){aj[ak]=ag.replace(/[a-zA-Z]/g,function(ao){var ap=ao.charCodeAt(0);return\"[\"+String.fromCharCode(ap&~32,ap|32)+\"]\"})}}}}return aj.join(\"\")}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_w",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "a",
    "kind": "function",
    "code": "function a(V){var U=/(?:^|\\s)nocode(?:\\s|$)/;var X=[];var T=0;var Z=[];var W=0;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=document.defaultView.getComputedStyle(V,null).getPropertyValue(\"white-space\")}}var Y=S&&\"pre\"===S.substring(0,3);function aa(ab){switch(ab.nodeType){case 1:if(U.test(ab.className)){return}for(var ae=ab.firstChild;ae;ae=ae.nextSibling){aa(ae)}var ad=ab.nodeName;if(\"BR\"===ad||\"LI\"===ad){X[W]=\"\\n\";Z[W<<1]=T++;Z[(W++<<1)|1]=ab}break;case 3:case 4:var ac=ab.nodeValue;if(ac.length){if(!Y){ac=ac.replace(/[ \\t\\r\\n]+/g,\" \")}else{ac=ac.replace(/\\r\\n?/g,\"\\n\")}X[W]=ac;Z[W<<1]=T;T+=ac.length;Z[(W++<<1)|1]=ab}break}}aa(V);return{sourceCode:X.join(\"\").replace(/\\n$/,\"\"),spans:Z}}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_a",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "aa",
        "code": "function aa(ab){switch(ab.nodeType){case 1:if(U.test(ab.className)){return}for(var ae=ab.firstChild;ae;ae=ae.nextSibling){aa(ae)}var ad=ab.nodeName;if(\"BR\"===ad||\"LI\"===ad){X[W]=\"\\n\";Z[W<<1]=T++;Z[(W++<<1)|1]=ab}break;case 3:case 4:var ac=ab.nodeValue;if(ac.length){if(!Y){ac=ac.replace(/[ \\t\\r\\n]+/g,\" \")}else{ac=ac.replace(/\\r\\n?/g,\"\\n\")}X[W]=ac;Z[W<<1]=T;T+=ac.length;Z[(W++<<1)|1]=ab}break}}",
        "returnType": "void",
        "params": [
          {
            "name": "ab",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "name": "aa",
    "kind": "function",
    "code": "function aa(ab){switch(ab.nodeType){case 1:if(U.test(ab.className)){return}for(var ae=ab.firstChild;ae;ae=ae.nextSibling){aa(ae)}var ad=ab.nodeName;if(\"BR\"===ad||\"LI\"===ad){X[W]=\"\\n\";Z[W<<1]=T++;Z[(W++<<1)|1]=ab}break;case 3:case 4:var ac=ab.nodeValue;if(ac.length){if(!Y){ac=ac.replace(/[ \\t\\r\\n]+/g,\" \")}else{ac=ac.replace(/\\r\\n?/g,\"\\n\")}X[W]=ac;Z[W<<1]=T;T+=ac.length;Z[(W++<<1)|1]=ab}break}}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_aa",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "B",
    "kind": "function",
    "code": "function B(S,U,W,T){if(!U){return}var V={sourceCode:U,basePos:S};W(V);T.push.apply(T,V.decorations)}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_b",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "o",
    "kind": "function",
    "code": "function o(S){var V=undefined;for(var U=S.firstChild;U;U=U.nextSibling){var T=U.nodeType;V=(T===1)?(V?S:U):(T===3)?(v.test(U.nodeValue)?S:V):V}return V===S?undefined:V}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_o",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "g",
    "kind": "function",
    "code": "function g(U,T){var S={};var V;(function(){var ad=U.concat(T);var ah=[];var ag={};for(var ab=0,Z=ad.length;ab<Z;++ab){var Y=ad[ab];var ac=Y[3];if(ac){for(var ae=ac.length;--ae>=0;){S[ac.charAt(ae)]=Y}}var af=Y[1];var aa=\"\"+af;if(!ag.hasOwnProperty(aa)){ah.push(af);ag[aa]=null}}ah.push(/[\\0-\\uffff]/);V=k(ah)})();var X=T.length;var W=function(ah){var Z=ah.sourceCode,Y=ah.basePos;var ad=[Y,F];var af=0;var an=Z.match(V)||[];var aj={};for(var ae=0,aq=an.length;ae<aq;++ae){var ag=an[ae];var ap=aj[ag];var ai=void 0;var am;if(typeof ap===\"string\"){am=false}else{var aa=S[ag.charAt(0)];if(aa){ai=ag.match(aa[1]);ap=aa[0]}else{for(var ao=0;ao<X;++ao){aa=T[ao];ai=ag.match(aa[1]);if(ai){ap=aa[0];break}}if(!ai){ap=F}}am=ap.length>=5&&\"lang-\"===ap.substring(0,5);if(am&&!(ai&&typeof ai[1]===\"string\")){am=false;ap=J}if(!am){aj[ag]=ap}}var ab=af;af+=ag.length;if(!am){ad.push(Y+ab,ap)}else{var al=ai[1];var ak=ag.indexOf(al);var ac=ak+al.length;if(ai[2]){ac=ag.length-ai[2].length;ak=ac-al.length}var ar=ap.substring(5);B(Y+ab,ag.substring(0,ak),W,ad);B(Y+ab+ak,al,q(ar,al),ad);B(Y+ab+ac,ag.substring(ac),W,ad)}}ah.decorations=ad};return W}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_g",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "W",
        "code": "var W=function(ah){var Z=ah.sourceCode,Y=ah.basePos;var ad=[Y,F];var af=0;var an=Z.match(V)||[];var aj={};for(var ae=0,aq=an.length;ae<aq;++ae){var ag=an[ae];var ap=aj[ag];var ai=void 0;var am;if(typeof ap===\"string\"){am=false}else{var aa=S[ag.charAt(0)];if(aa){ai=ag.match(aa[1]);ap=aa[0]}else{for(var ao=0;ao<X;++ao){aa=T[ao];ai=ag.match(aa[1]);if(ai){ap=aa[0];break}}if(!ai){ap=F}}am=ap.length>=5&&\"lang-\"===ap.substring(0,5);if(am&&!(ai&&typeof ai[1]===\"string\")){am=false;ap=J}if(!am){aj[ag]=ap}}var ab=af;af+=ag.length;if(!am){ad.push(Y+ab,ap)}else{var al=ai[1];var ak=ag.indexOf(al);var ac=ak+al.length;if(ai[2]){ac=ag.length-ai[2].length;ak=ac-al.length}var ar=ap.substring(5);B(Y+ab,ag.substring(0,ak),W,ad);B(Y+ab+ak,al,q(ar,al),ad);B(Y+ab+ac,ag.substring(ac),W,ad)}}ah.decorations=ad};",
        "returnType": "void",
        "params": [
          {
            "name": "ah",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "name": "W",
    "kind": "function",
    "code": "var W=function(ah){var Z=ah.sourceCode,Y=ah.basePos;var ad=[Y,F];var af=0;var an=Z.match(V)||[];var aj={};for(var ae=0,aq=an.length;ae<aq;++ae){var ag=an[ae];var ap=aj[ag];var ai=void 0;var am;if(typeof ap===\"string\"){am=false}else{var aa=S[ag.charAt(0)];if(aa){ai=ag.match(aa[1]);ap=aa[0]}else{for(var ao=0;ao<X;++ao){aa=T[ao];ai=ag.match(aa[1]);if(ai){ap=aa[0];break}}if(!ai){ap=F}}am=ap.length>=5&&\"lang-\"===ap.substring(0,5);if(am&&!(ai&&typeof ai[1]===\"string\")){am=false;ap=J}if(!am){aj[ag]=ap}}var ab=af;af+=ag.length;if(!am){ad.push(Y+ab,ap)}else{var al=ai[1];var ak=ag.indexOf(al);var ac=ak+al.length;if(ai[2]){ac=ag.length-ai[2].length;ak=ac-al.length}var ar=ap.substring(5);B(Y+ab,ag.substring(0,ak),W,ad);B(Y+ab+ak,al,q(ar,al),ad);B(Y+ab+ac,ag.substring(ac),W,ad)}}ah.decorations=ad};",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_w",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "i",
    "kind": "function",
    "code": "function i(T){var W=[],S=[];if(T.tripleQuotedStrings){W.push([C,/^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,null,\"'\\\"\"])}else{if(T.multiLineStrings){W.push([C,/^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,null,\"'\\\"`\"])}else{W.push([C,/^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,null,\"\\\"'\"])}}if(T.verbatimStrings){S.push([C,/^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/,null])}var Y=T.hashComments;if(Y){if(T.cStyleComments){if(Y>1){W.push([j,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,\"#\"])}else{W.push([j,/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,null,\"#\"])}S.push([C,/^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)>/,null])}else{W.push([j,/^#[^\\r\\n]*/,null,\"#\"])}}if(T.cStyleComments){S.push([j,/^\\/\\/[^\\r\\n]*/,null]);S.push([j,/^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,null])}if(T.regexLiterals){var X=(\"/(?=[^/*])(?:[^/\\\\x5B\\\\x5C]|\\\\x5C[\\\\s\\\\S]|\\\\x5B(?:[^\\\\x5C\\\\x5D]|\\\\x5C[\\\\s\\\\S])*(?:\\\\x5D|$))+/\");S.push([\"lang-regex\",new RegExp(\"^\"+M+\"(\"+X+\")\")])}var V=T.types;if(V){S.push([O,V])}var U=(\"\"+T.keywords).replace(/^ | $/g,\"\");if(U.length){S.push([z,new RegExp(\"^(?:\"+U.replace(/[\\s,]+/g,\"|\")+\")\\\\b\"),null])}W.push([F,/^\\s+/,null,\" \\r\\n\\t\\xA0\"]);S.push([G,/^@[a-z_$][a-z_$@0-9]*/i,null],[O,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/,null],[F,/^[a-z_$][a-z_$@0-9]*/i,null],[G,new RegExp(\"^(?:0x[a-f0-9]+|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)(?:e[+\\\\-]?\\\\d+)?)[a-z]*\",\"i\"),null,\"0123456789\"],[F,/^\\\\[\\s\\S]?/,null],[L,/^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#\\\\]*/,null]);return g(W,S)}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_i",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Q",
    "kind": "component",
    "code": "function Q(V,ag){var U=/(?:^|\\s)nocode(?:\\s|$)/;var ab=/\\r\\n?|\\n/;var ac=V.ownerDocument;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=ac.defaultView.getComputedStyle(V,null).getPropertyValue(\"white-space\")}}var Z=S&&\"pre\"===S.substring(0,3);var af=ac.createElement(\"LI\");while(V.firstChild){af.appendChild(V.firstChild)}var W=[af];function ae(al){switch(al.nodeType){case 1:if(U.test(al.className)){break}if(\"BR\"===al.nodeName){ad(al);if(al.parentNode){al.parentNode.removeChild(al)}}else{for(var an=al.firstChild;an;an=an.nextSibling){ae(an)}}break;case 3:case 4:if(Z){var am=al.nodeValue;var aj=am.match(ab);if(aj){var ai=am.substring(0,aj.index);al.nodeValue=ai;var ah=am.substring(aj.index+aj[0].length);if(ah){var ak=al.parentNode;ak.insertBefore(ac.createTextNode(ah),al.nextSibling)}ad(al);if(!ai){al.parentNode.removeChild(al)}}}break}}function ad(ak){while(!ak.nextSibling){ak=ak.parentNode;if(!ak){return}}function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}var ah=ai(ak.nextSibling,0);for(var aj;(aj=ah.parentNode)&&aj.nodeType===1;){ah=aj}W.push(ah)}for(var Y=0;Y<W.length;++Y){ae(W[Y])}if(ag===(ag|0)){W[0].setAttribute(\"value\",ag)}var aa=ac.createElement(\"OL\");aa.className=\"linenums\";var X=Math.max(0,((ag-1))|0)||0;for(var Y=0,T=W.length;Y<T;++Y){af=W[Y];af.className=\"L\"+((Y+X)%10);if(!af.firstChild){af.appendChild(ac.createTextNode(\"\\xA0\"))}aa.appendChild(af)}V.appendChild(aa)}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_q",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "ae",
        "code": "function ae(al){switch(al.nodeType){case 1:if(U.test(al.className)){break}if(\"BR\"===al.nodeName){ad(al);if(al.parentNode){al.parentNode.removeChild(al)}}else{for(var an=al.firstChild;an;an=an.nextSibling){ae(an)}}break;case 3:case 4:if(Z){var am=al.nodeValue;var aj=am.match(ab);if(aj){var ai=am.substring(0,aj.index);al.nodeValue=ai;var ah=am.substring(aj.index+aj[0].length);if(ah){var ak=al.parentNode;ak.insertBefore(ac.createTextNode(ah),al.nextSibling)}ad(al);if(!ai){al.parentNode.removeChild(al)}}}break}}",
        "returnType": "void",
        "params": [
          {
            "name": "al",
            "type": "any"
          }
        ]
      },
      {
        "name": "ad",
        "code": "function ad(ak){while(!ak.nextSibling){ak=ak.parentNode;if(!ak){return}}function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}var ah=ai(ak.nextSibling,0);for(var aj;(aj=ah.parentNode)&&aj.nodeType===1;){ah=aj}W.push(ah)}",
        "returnType": "void",
        "params": [
          {
            "name": "ak",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "name": "ae",
    "kind": "function",
    "code": "function ae(al){switch(al.nodeType){case 1:if(U.test(al.className)){break}if(\"BR\"===al.nodeName){ad(al);if(al.parentNode){al.parentNode.removeChild(al)}}else{for(var an=al.firstChild;an;an=an.nextSibling){ae(an)}}break;case 3:case 4:if(Z){var am=al.nodeValue;var aj=am.match(ab);if(aj){var ai=am.substring(0,aj.index);al.nodeValue=ai;var ah=am.substring(aj.index+aj[0].length);if(ah){var ak=al.parentNode;ak.insertBefore(ac.createTextNode(ah),al.nextSibling)}ad(al);if(!ai){al.parentNode.removeChild(al)}}}break}}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_ae",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "ad",
    "kind": "function",
    "code": "function ad(ak){while(!ak.nextSibling){ak=ak.parentNode;if(!ak){return}}function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}var ah=ai(ak.nextSibling,0);for(var aj;(aj=ah.parentNode)&&aj.nodeType===1;){ah=aj}W.push(ah)}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_ad",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "ai",
        "code": "function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}",
        "returnType": "void",
        "params": [
          {
            "name": "al",
            "type": "any"
          },
          {
            "name": "ar",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "name": "ai",
    "kind": "function",
    "code": "function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_ai",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "D",
    "kind": "function",
    "code": "function D(ac){var aj=/\\bMSIE\\b/.test(navigator.userAgent);var am=/\\n/g;var al=ac.sourceCode;var an=al.length;var V=0;var aa=ac.spans;var T=aa.length;var ah=0;var X=ac.decorations;var Y=X.length;var Z=0;X[Y]=an;var ar,aq;for(aq=ar=0;aq<Y;){if(X[aq]!==X[aq+2]){X[ar++]=X[aq++];X[ar++]=X[aq++]}else{aq+=2}}Y=ar;for(aq=ar=0;aq<Y;){var at=X[aq];var ab=X[aq+1];var W=aq+2;while(W+2<=Y&&X[W+1]===ab){W+=2}X[ar++]=at;X[ar++]=ab;aq=W}Y=X.length=ar;var ae=null;while(ah<T){var af=aa[ah];var S=aa[ah+2]||an;var ag=X[Z];var ap=X[Z+2]||an;var W=Math.min(S,ap);var ak=aa[ah+1];var U;if(ak.nodeType!==1&&(U=al.substring(V,W))){if(aj){U=U.replace(am,\"\\r\")}ak.nodeValue=U;var ai=ak.ownerDocument;var ao=ai.createElement(\"SPAN\");ao.className=X[Z+1];var ad=ak.parentNode;ad.replaceChild(ao,ak);ao.appendChild(ak);if(V<S){aa[ah+1]=ak=ai.createTextNode(al.substring(W,S));ad.insertBefore(ak,ao.nextSibling)}}V=W;if(V>=S){ah+=2}if(V>=ap){Z+=2}}}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_d",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "c",
    "kind": "function",
    "code": "function c(U,V){for(var S=V.length;--S>=0;){var T=V[S];if(!t.hasOwnProperty(T)){t[T]=U}else{if(window.console){console.warn(\"cannot override language handler %s\",T)}}}}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_c",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "q",
    "kind": "function",
    "code": "function q(T,S){if(!(T&&t.hasOwnProperty(T))){T=/^\\s*</.test(S)?\"default-markup\":\"default-code\"}return t[T]}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_q",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "d",
    "kind": "function",
    "code": "function d(V){var U=V.langExtension;try{var S=a(V.sourceNode);var T=S.sourceCode;V.sourceCode=T;V.spans=S.spans;V.basePos=0;q(U,T)(V);D(V)}catch(W){if(\"console\" in window){console.log(W&&W.stack?W.stack:W)}}}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_d",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "y",
    "kind": "function",
    "code": "function y(W,V,U){var S=document.createElement(\"PRE\");S.innerHTML=W;if(U){Q(S,U)}var T={langExtension:V,numberLines:U,sourceNode:S};d(T);return S.innerHTML}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_y",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "b",
    "kind": "function",
    "code": "function b(ad){function Y(af){return document.getElementsByTagName(af)}var ac=[Y(\"pre\"),Y(\"code\"),Y(\"xmp\")];var T=[];for(var aa=0;aa<ac.length;++aa){for(var Z=0,V=ac[aa].length;Z<V;++Z){T.push(ac[aa][Z])}}ac=null;var W=Date;if(!W.now){W={now:function(){return +(new Date)}}}var X=0;var S;var ab=/\\blang(?:uage)?-([\\w.]+)(?!\\S)/;var ae=/\\bprettyprint\\b/;function U(){var ag=(window.PR_SHOULD_USE_CONTINUATION?W.now()+250:Infinity);for(;X<T.length&&W.now()<ag;X++){var aj=T[X];var ai=aj.className;if(ai.indexOf(\"prettyprint\")>=0){var ah=ai.match(ab);var am;if(!ah&&(am=o(aj))&&\"CODE\"===am.tagName){ah=am.className.match(ab)}if(ah){ah=ah[1]}var al=false;for(var ak=aj.parentNode;ak;ak=ak.parentNode){if((ak.tagName===\"pre\"||ak.tagName===\"code\"||ak.tagName===\"xmp\")&&ak.className&&ak.className.indexOf(\"prettyprint\")>=0){al=true;break}}if(!al){var af=aj.className.match(/\\blinenums\\b(?::(\\d+))?/);af=af?af[1]&&af[1].length?+af[1]:true:false;if(af){Q(aj,af)}S={langExtension:ah,sourceNode:aj,numberLines:af};d(S)}}}if(X<T.length){setTimeout(U,250)}else{if(ad){ad()}}}U()}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_b",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "Y",
        "code": "function Y(af){return document.getElementsByTagName(af)}",
        "returnType": "void",
        "params": [
          {
            "name": "af",
            "type": "any"
          }
        ]
      },
      {
        "name": "U",
        "code": "function U(){var ag=(window.PR_SHOULD_USE_CONTINUATION?W.now()+250:Infinity);for(;X<T.length&&W.now()<ag;X++){var aj=T[X];var ai=aj.className;if(ai.indexOf(\"prettyprint\")>=0){var ah=ai.match(ab);var am;if(!ah&&(am=o(aj))&&\"CODE\"===am.tagName){ah=am.className.match(ab)}if(ah){ah=ah[1]}var al=false;for(var ak=aj.parentNode;ak;ak=ak.parentNode){if((ak.tagName===\"pre\"||ak.tagName===\"code\"||ak.tagName===\"xmp\")&&ak.className&&ak.className.indexOf(\"prettyprint\")>=0){al=true;break}}if(!al){var af=aj.className.match(/\\blinenums\\b(?::(\\d+))?/);af=af?af[1]&&af[1].length?+af[1]:true:false;if(af){Q(aj,af)}S={langExtension:ah,sourceNode:aj,numberLines:af};d(S)}}}if(X<T.length){setTimeout(U,250)}else{if(ad){ad()}}}",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "Y",
    "kind": "function",
    "code": "function Y(af){return document.getElementsByTagName(af)}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_y",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "U",
    "kind": "function",
    "code": "function U(){var ag=(window.PR_SHOULD_USE_CONTINUATION?W.now()+250:Infinity);for(;X<T.length&&W.now()<ag;X++){var aj=T[X];var ai=aj.className;if(ai.indexOf(\"prettyprint\")>=0){var ah=ai.match(ab);var am;if(!ah&&(am=o(aj))&&\"CODE\"===am.tagName){ah=am.className.match(ab)}if(ah){ah=ah[1]}var al=false;for(var ak=aj.parentNode;ak;ak=ak.parentNode){if((ak.tagName===\"pre\"||ak.tagName===\"code\"||ak.tagName===\"xmp\")&&ak.className&&ak.className.indexOf(\"prettyprint\")>=0){al=true;break}}if(!al){var af=aj.className.match(/\\blinenums\\b(?::(\\d+))?/);af=af?af[1]&&af[1].length?+af[1]:true:false;if(af){Q(aj,af)}S={langExtension:ah,sourceNode:aj,numberLines:af};d(S)}}}if(X<T.length){setTimeout(U,250)}else{if(ad){ad()}}}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/prettify.js",
    "slug": "coverage_lcov-report_prettify_u",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "toggleClass",
    "kind": "function",
    "code": "function toggleClass(index) {\n        missingCoverageElements\n            .item(currentIndex)\n            .classList.remove('highlighted');\n        missingCoverageElements.item(index).classList.add('highlighted');\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/block-navigation.js",
    "slug": "coverage_lcov-report_block-navigation_toggleclass",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "makeCurrent",
    "kind": "function",
    "code": "function makeCurrent(index) {\n        toggleClass(index);\n        currentIndex = index;\n        missingCoverageElements.item(index).scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center'\n        });\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/block-navigation.js",
    "slug": "coverage_lcov-report_block-navigation_makecurrent",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "goToPrevious",
    "kind": "function",
    "code": "function goToPrevious() {\n        var nextIndex = 0;\n        if (typeof currentIndex !== 'number' || currentIndex === 0) {\n            nextIndex = missingCoverageElements.length - 1;\n        } else if (missingCoverageElements.length > 1) {\n            nextIndex = currentIndex - 1;\n        }\n\n        makeCurrent(nextIndex);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/block-navigation.js",
    "slug": "coverage_lcov-report_block-navigation_gotoprevious",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "goToNext",
    "kind": "function",
    "code": "function goToNext() {\n        var nextIndex = 0;\n\n        if (\n            typeof currentIndex === 'number' &&\n            currentIndex < missingCoverageElements.length - 1\n        ) {\n            nextIndex = currentIndex + 1;\n        }\n\n        makeCurrent(nextIndex);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/coverage/lcov-report/block-navigation.js",
    "slug": "coverage_lcov-report_block-navigation_gotonext",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Home",
    "kind": "component",
    "code": "export default function Home() {\n  const [counts, setCounts] = useState<ComponentCounts>({\n    components: 0,\n    classes: 0,\n    functions: 0,\n    methods: 0,\n    totalCoverage: 0\n  })\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    async function fetchComponentCounts() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Get all component details to check for types\n        const componentDetails = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              return await detailRes.json()\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return { type: 'component' } // Default if we can't determine\n            }\n          })\n        )\n\n        // Count different types\n        const typeCounts = componentDetails.reduce((acc: ComponentCounts, comp: any) => {\n          const type = comp.type || 'component'\n\n          if (type === 'component') {\n            acc.components++\n          } else if (type === 'class') {\n            acc.classes++\n          } else if (type === 'function') {\n            acc.functions++\n          } else if (type === 'method') {\n            acc.methods++\n          }\n\n          return acc\n        }, { components: 0, classes: 0, functions: 0, methods: 0, totalCoverage: 0 })\n\n        // Calculate coverage percentage (just an estimate based on description presence)\n        const totalItems = componentDetails.length\n        const itemsWithDescription = componentDetails.filter(comp =>\n          comp.description && comp.description.trim().length > 0\n        ).length\n\n        const coveragePercentage = totalItems > 0\n          ? Math.round((itemsWithDescription / totalItems) * 100)\n          : 0\n\n        setCounts({\n          ...typeCounts,\n          totalCoverage: coveragePercentage\n        })\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponentCounts()\n  }, [])\n\n  return (\n    <main className=\"flex flex-col items-center justify-center min-h-screen p-6\">\n      <div className=\"w-full max-w-5xl\">\n        <div className=\"text-center mb-10\">\n          <h1 className=\"text-4xl font-bold mb-4\">React Component Documentation</h1>\n          <p className=\"text-xl text-gray-600 mb-6\">\n            Explore and understand components, methods, and code relationships in your React codebase.\n          </p>\n          <Link href=\"/docs\" passHref>\n            <Button size=\"lg\" className=\"gap-2\">\n              <BookOpen className=\"h-5 w-5\" />\n              View Documentation\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"container max-w-6xl py-12\">\n          <div className=\"flex flex-col gap-4 mb-12\">\n            <h1 className=\"text-5xl font-bold tracking-tight\">Code Documentation</h1>\n            <p className=\"text-muted-foreground text-xl\">AI-powered insights for your codebase</p>\n          </div>\n\n          <div className=\"grid gap-8 md:grid-cols-3\">\n            <Card className=\"overflow-hidden border-none shadow-md bg-white dark:bg-slate-900\">\n              <div className=\"h-2 bg-gradient-to-r from-violet-500 to-indigo-500\" />\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col gap-2\">\n                  <p className=\"text-sm font-medium text-muted-foreground\">Components</p>\n                  <p className=\"text-4xl font-bold\">{loading ? \"...\" : counts.components}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"overflow-hidden border-none shadow-md bg-white dark:bg-slate-900\">\n              <div className=\"h-2 bg-gradient-to-r from-amber-500 to-orange-500\" />\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col gap-2\">\n                  <p className=\"text-sm font-medium text-muted-foreground\">Classes</p>\n                  <p className=\"text-4xl font-bold\">{loading ? \"...\" : counts.classes}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"overflow-hidden border-none shadow-md bg-white dark:bg-slate-900\">\n              <div className=\"h-2 bg-gradient-to-r from-emerald-500 to-green-500\" />\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col gap-2\">\n                  <p className=\"text-sm font-medium text-muted-foreground\">Documentation Coverage</p>\n                  <p className=\"text-4xl font-bold\">{loading ? \"...\" : `${counts.totalCoverage}%`}</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"mt-16\">\n            <Tabs defaultValue=\"components\" className=\"mb-8\">\n              <TabsList className=\"bg-white dark:bg-slate-900 p-1 rounded-lg\">\n                <TabsTrigger value=\"components\" className=\"rounded-md\">\n                  Components\n                </TabsTrigger>\n                <TabsTrigger value=\"classes\" className=\"rounded-md\">\n                  Classes\n                </TabsTrigger>\n                <TabsTrigger value=\"methods\" className=\"rounded-md\">\n                  Methods\n                </TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"components\">\n                <h2 className=\"text-2xl font-bold mb-8\">Components</h2>\n                <ComponentStats />\n              </TabsContent>\n              <TabsContent value=\"classes\">\n                <h2 className=\"text-2xl font-bold mb-8\">Classes</h2>\n                <ComponentStats type=\"class\" />\n              </TabsContent>\n              <TabsContent value=\"methods\">\n                <h2 className=\"text-2xl font-bold mb-8\">Methods</h2>\n                <ComponentStats type=\"method\" />\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"mt-16\">\n              <h2 className=\"text-2xl font-bold mb-8\">Code Structure</h2>\n              <CodeStructure />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/app/page.tsx",
    "slug": "test-docs-project_app_page_home",
    "imports": [
      "Card",
      "CardContent",
      "ComponentStats",
      "Tabs",
      "TabsContent",
      "TabsList",
      "TabsTrigger",
      "CodeStructure",
      "Link",
      "Button",
      "BookOpen"
    ],
    "references": [
      "Link",
      "Button",
      "BookOpen",
      "Card",
      "CardContent",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "TabsContent",
      "ComponentStats",
      "CodeStructure"
    ],
    "relationships": [
      {
        "source": "test-docs-project_app_page_home",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_page_home",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_page_home",
        "target": "componentstats",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_page_home",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_page_home",
        "target": "tabscontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_page_home",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_page_home",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_page_home",
        "target": "codestructure",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_page_home",
        "target": "link",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_page_home",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_page_home",
        "target": "bookopen",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "fetchComponentCounts",
    "kind": "function",
    "code": "async function fetchComponentCounts() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Get all component details to check for types\n        const componentDetails = await Promise.all(\n          data.map(async (comp: { name: string; slug: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              return await detailRes.json()\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n              return { type: 'component' } // Default if we can't determine\n            }\n          })\n        )\n\n        // Count different types\n        const typeCounts = componentDetails.reduce((acc: ComponentCounts, comp: any) => {\n          const type = comp.type || 'component'\n\n          if (type === 'component') {\n            acc.components++\n          } else if (type === 'class') {\n            acc.classes++\n          } else if (type === 'function') {\n            acc.functions++\n          } else if (type === 'method') {\n            acc.methods++\n          }\n\n          return acc\n        }, { components: 0, classes: 0, functions: 0, methods: 0, totalCoverage: 0 })\n\n        // Calculate coverage percentage (just an estimate based on description presence)\n        const totalItems = componentDetails.length\n        const itemsWithDescription = componentDetails.filter(comp =>\n          comp.description && comp.description.trim().length > 0\n        ).length\n\n        const coveragePercentage = totalItems > 0\n          ? Math.round((itemsWithDescription / totalItems) * 100)\n          : 0\n\n        setCounts({\n          ...typeCounts,\n          totalCoverage: coveragePercentage\n        })\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/app/page.tsx",
    "slug": "test-docs-project_app_page_fetchcomponentcounts",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Loading",
    "kind": "function",
    "code": "export default function Loading() {\n  return null\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/app/loading.tsx",
    "slug": "test-docs-project_app_loading_loading",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "RootLayout",
    "kind": "component",
    "code": "export default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body className={cn(\"min-h-screen bg-background font-sans antialiased\", fontSans.variable)}>\n        <ThemeProvider attribute=\"class\" defaultTheme=\"light\" enableSystem disableTransitionOnChange>\n          <div className=\"flex h-screen\">\n            <Sidebar />\n            <div className=\"flex-1 flex flex-col overflow-hidden\">\n              <Header />\n              <main className=\"flex-1 overflow-auto bg-slate-50 dark:bg-slate-950\">{children}</main>\n            </div>\n            <ChatBubble />\n          </div>\n        </ThemeProvider>\n      </body>\n    </html>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/app/layout.tsx",
    "slug": "test-docs-project_app_layout_rootlayout",
    "imports": [
      "Metadata",
      "FontSans",
      "ThemeProvider",
      "ChatBubble",
      "Header",
      "Sidebar"
    ],
    "references": [
      "FontSans",
      "ThemeProvider",
      "Sidebar",
      "Header",
      "ChatBubble"
    ],
    "relationships": [
      {
        "source": "test-docs-project_app_layout_rootlayout",
        "target": "metadata",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_app_layout_rootlayout",
        "target": "fontsans",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_layout_rootlayout",
        "target": "themeprovider",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_layout_rootlayout",
        "target": "chatbubble",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_layout_rootlayout",
        "target": "header",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_layout_rootlayout",
        "target": "sidebar",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "fontsans",
        "type": "uses",
        "weight": 2,
        "context": "calls FontSans",
        "sourceLine": 11,
        "targetFunction": "FontSans"
      }
    ],
    "methods": []
  },
  {
    "name": "Textarea",
    "kind": "component",
    "code": "function Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/textarea.tsx",
    "slug": "test-docs-project_components_ui_textarea_textarea",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Tabs",
    "kind": "component",
    "code": "function Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/tabs.tsx",
    "slug": "test-docs-project_components_ui_tabs_tabs",
    "imports": [],
    "references": [
      "Root",
      "List",
      "Trigger",
      "Content"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_tabs_tabs",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_tabs_tabs",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_tabs_tabs",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_tabs_tabs",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "TabsList",
    "kind": "component",
    "code": "function TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/tabs.tsx",
    "slug": "test-docs-project_components_ui_tabs_tabslist",
    "imports": [],
    "references": [
      "Root",
      "List",
      "Trigger",
      "Content"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_tabs_tabslist",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_tabs_tabslist",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_tabs_tabslist",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_tabs_tabslist",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "TabsTrigger",
    "kind": "component",
    "code": "function TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/tabs.tsx",
    "slug": "test-docs-project_components_ui_tabs_tabstrigger",
    "imports": [],
    "references": [
      "Root",
      "List",
      "Trigger",
      "Content"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_tabs_tabstrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_tabs_tabstrigger",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_tabs_tabstrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_tabs_tabstrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "TabsContent",
    "kind": "component",
    "code": "function TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/tabs.tsx",
    "slug": "test-docs-project_components_ui_tabs_tabscontent",
    "imports": [],
    "references": [
      "Root",
      "List",
      "Trigger",
      "Content"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_tabs_tabscontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_tabs_tabscontent",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_tabs_tabscontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_tabs_tabscontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Switch",
    "kind": "component",
    "code": "function Switch({\n    className,\n    ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n    return (\n        <SwitchPrimitive.Root\n            data-slot=\"switch\"\n            className={cn(\n                \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n                className\n            )}\n            {...props}\n        >\n            <SwitchPrimitive.Thumb\n                data-slot=\"switch-thumb\"\n                className={cn(\n                    \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n                )}\n            />\n        </SwitchPrimitive.Root>\n    )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/switch.tsx",
    "slug": "test-docs-project_components_ui_switch_switch",
    "imports": [],
    "references": [
      "Root",
      "Thumb"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_switch_switch",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_switch_switch",
        "target": "thumb",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Slider",
    "kind": "component",
    "code": "function Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max]\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\"\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\"\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/slider.tsx",
    "slug": "test-docs-project_components_ui_slider_slider",
    "imports": [],
    "references": [
      "Root",
      "Track",
      "Range",
      "Thumb"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_slider_slider",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_slider_slider",
        "target": "track",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_slider_slider",
        "target": "range",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_slider_slider",
        "target": "thumb",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Select",
    "kind": "component",
    "code": "function Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/select.tsx",
    "slug": "test-docs-project_components_ui_select_select",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_select",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectGroup",
    "kind": "component",
    "code": "function SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/select.tsx",
    "slug": "test-docs-project_components_ui_select_selectgroup",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectgroup",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectValue",
    "kind": "component",
    "code": "function SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/select.tsx",
    "slug": "test-docs-project_components_ui_select_selectvalue",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectvalue",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectTrigger",
    "kind": "component",
    "code": "function SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/select.tsx",
    "slug": "test-docs-project_components_ui_select_selecttrigger",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selecttrigger",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectContent",
    "kind": "component",
    "code": "function SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/select.tsx",
    "slug": "test-docs-project_components_ui_select_selectcontent",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectcontent",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectLabel",
    "kind": "component",
    "code": "function SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/select.tsx",
    "slug": "test-docs-project_components_ui_select_selectlabel",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectlabel",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectItem",
    "kind": "component",
    "code": "function SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/select.tsx",
    "slug": "test-docs-project_components_ui_select_selectitem",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectitem",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectSeparator",
    "kind": "component",
    "code": "function SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/select.tsx",
    "slug": "test-docs-project_components_ui_select_selectseparator",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectseparator",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectScrollUpButton",
    "kind": "component",
    "code": "function SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/select.tsx",
    "slug": "test-docs-project_components_ui_select_selectscrollupbutton",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrollupbutton",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectScrollDownButton",
    "kind": "component",
    "code": "function SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/select.tsx",
    "slug": "test-docs-project_components_ui_select_selectscrolldownbutton",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_select_selectscrolldownbutton",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "ScrollArea",
    "kind": "component",
    "code": "function ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/scroll-area.tsx",
    "slug": "test-docs-project_components_ui_scroll-area_scrollarea",
    "imports": [],
    "references": [
      "Root",
      "Viewport",
      "ScrollBar",
      "Corner",
      "ScrollAreaScrollbar",
      "ScrollAreaThumb"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_scroll-area_scrollarea",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_scroll-area_scrollarea",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_scroll-area_scrollarea",
        "target": "scrollbar",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_scroll-area_scrollarea",
        "target": "corner",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_scroll-area_scrollarea",
        "target": "scrollareascrollbar",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_scroll-area_scrollarea",
        "target": "scrollareathumb",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "ScrollBar",
    "kind": "component",
    "code": "function ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/scroll-area.tsx",
    "slug": "test-docs-project_components_ui_scroll-area_scrollbar",
    "imports": [],
    "references": [
      "Root",
      "Viewport",
      "ScrollBar",
      "Corner",
      "ScrollAreaScrollbar",
      "ScrollAreaThumb"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_scroll-area_scrollbar",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_scroll-area_scrollbar",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_scroll-area_scrollbar",
        "target": "scrollbar",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_scroll-area_scrollbar",
        "target": "corner",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_scroll-area_scrollbar",
        "target": "scrollareascrollbar",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_scroll-area_scrollbar",
        "target": "scrollareathumb",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Label",
    "kind": "component",
    "code": "function Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/label.tsx",
    "slug": "test-docs-project_components_ui_label_label",
    "imports": [],
    "references": [
      "Root"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_label_label",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenu",
    "kind": "component",
    "code": "function DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenu",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuPortal",
    "kind": "component",
    "code": "function DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuTrigger",
    "kind": "component",
    "code": "function DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuContent",
    "kind": "component",
    "code": "function DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuGroup",
    "kind": "component",
    "code": "function DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuItem",
    "kind": "component",
    "code": "function DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuCheckboxItem",
    "kind": "component",
    "code": "function DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuRadioGroup",
    "kind": "component",
    "code": "function DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuRadioItem",
    "kind": "component",
    "code": "function DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuLabel",
    "kind": "component",
    "code": "function DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuSeparator",
    "kind": "component",
    "code": "function DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuShortcut",
    "kind": "component",
    "code": "function DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuSub",
    "kind": "component",
    "code": "function DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusub",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuSubTrigger",
    "kind": "component",
    "code": "function DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuSubContent",
    "kind": "component",
    "code": "function DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dropdown-menu.tsx",
    "slug": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Dialog",
    "kind": "component",
    "code": "function Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dialog.tsx",
    "slug": "test-docs-project_components_ui_dialog_dialog",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dialog_dialog",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialog",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialog",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialog",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialog",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialog",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialog",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialog",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialog",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialog",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialog",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogTrigger",
    "kind": "component",
    "code": "function DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dialog.tsx",
    "slug": "test-docs-project_components_ui_dialog_dialogtrigger",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dialog_dialogtrigger",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtrigger",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtrigger",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtrigger",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtrigger",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtrigger",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtrigger",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtrigger",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogPortal",
    "kind": "component",
    "code": "function DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dialog.tsx",
    "slug": "test-docs-project_components_ui_dialog_dialogportal",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dialog_dialogportal",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogportal",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogportal",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogportal",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogportal",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogportal",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogportal",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogportal",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogportal",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogportal",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogportal",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogClose",
    "kind": "component",
    "code": "function DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dialog.tsx",
    "slug": "test-docs-project_components_ui_dialog_dialogclose",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dialog_dialogclose",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogclose",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogclose",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogclose",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogclose",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogclose",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogclose",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogclose",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogclose",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogclose",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogclose",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogOverlay",
    "kind": "component",
    "code": "function DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dialog.tsx",
    "slug": "test-docs-project_components_ui_dialog_dialogoverlay",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dialog_dialogoverlay",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogoverlay",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogoverlay",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogoverlay",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogoverlay",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogoverlay",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogoverlay",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogoverlay",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogoverlay",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogoverlay",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogoverlay",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogContent",
    "kind": "component",
    "code": "function DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dialog.tsx",
    "slug": "test-docs-project_components_ui_dialog_dialogcontent",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dialog_dialogcontent",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogcontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogcontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogcontent",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogcontent",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogcontent",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogcontent",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogcontent",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogcontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogcontent",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogcontent",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogHeader",
    "kind": "component",
    "code": "function DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dialog.tsx",
    "slug": "test-docs-project_components_ui_dialog_dialogheader",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dialog_dialogheader",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogheader",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogheader",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogheader",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogheader",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogheader",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogheader",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogheader",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogheader",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogheader",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogheader",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogFooter",
    "kind": "component",
    "code": "function DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dialog.tsx",
    "slug": "test-docs-project_components_ui_dialog_dialogfooter",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dialog_dialogfooter",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogfooter",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogfooter",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogfooter",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogfooter",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogfooter",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogfooter",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogfooter",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogfooter",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogfooter",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogfooter",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogTitle",
    "kind": "component",
    "code": "function DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dialog.tsx",
    "slug": "test-docs-project_components_ui_dialog_dialogtitle",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dialog_dialogtitle",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtitle",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtitle",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtitle",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtitle",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtitle",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtitle",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtitle",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtitle",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtitle",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogtitle",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogDescription",
    "kind": "component",
    "code": "function DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/dialog.tsx",
    "slug": "test-docs-project_components_ui_dialog_dialogdescription",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_dialog_dialogdescription",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogdescription",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogdescription",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogdescription",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogdescription",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogdescription",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogdescription",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogdescription",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogdescription",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogdescription",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_dialog_dialogdescription",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Command",
    "kind": "component",
    "code": "function Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        \"bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/command.tsx",
    "slug": "test-docs-project_components_ui_command_command",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_command",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandDialog",
    "kind": "component",
    "code": "function CommandDialog({\n  title = \"Command Palette\",\n  description = \"Search for a command to run...\",\n  children,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/command.tsx",
    "slug": "test-docs-project_components_ui_command_commanddialog",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commanddialog",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandInput",
    "kind": "component",
    "code": "function CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          \"placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/command.tsx",
    "slug": "test-docs-project_components_ui_command_commandinput",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandinput",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandList",
    "kind": "component",
    "code": "function CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        \"max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/command.tsx",
    "slug": "test-docs-project_components_ui_command_commandlist",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandlist",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandEmpty",
    "kind": "component",
    "code": "function CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/command.tsx",
    "slug": "test-docs-project_components_ui_command_commandempty",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandempty",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandGroup",
    "kind": "component",
    "code": "function CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        \"text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/command.tsx",
    "slug": "test-docs-project_components_ui_command_commandgroup",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandgroup",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandSeparator",
    "kind": "component",
    "code": "function CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn(\"bg-border -mx-1 h-px\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/command.tsx",
    "slug": "test-docs-project_components_ui_command_commandseparator",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandseparator",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandItem",
    "kind": "component",
    "code": "function CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/command.tsx",
    "slug": "test-docs-project_components_ui_command_commanditem",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commanditem",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandShortcut",
    "kind": "component",
    "code": "function CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/command.tsx",
    "slug": "test-docs-project_components_ui_command_commandshortcut",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_command_commandshortcut",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Card",
    "kind": "component",
    "code": "function Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/card.tsx",
    "slug": "test-docs-project_components_ui_card_card",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "zach",
        "code": "function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "hi",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "zach",
    "kind": "function",
    "code": "function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/card.tsx",
    "slug": "test-docs-project_components_ui_card_zach",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CardHeader",
    "kind": "component",
    "code": "function CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/card.tsx",
    "slug": "test-docs-project_components_ui_card_cardheader",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CardTitle",
    "kind": "component",
    "code": "function CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/card.tsx",
    "slug": "test-docs-project_components_ui_card_cardtitle",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CardDescription",
    "kind": "component",
    "code": "function CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/card.tsx",
    "slug": "test-docs-project_components_ui_card_carddescription",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CardAction",
    "kind": "component",
    "code": "function CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/card.tsx",
    "slug": "test-docs-project_components_ui_card_cardaction",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CardContent",
    "kind": "component",
    "code": "function CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/card.tsx",
    "slug": "test-docs-project_components_ui_card_cardcontent",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CardFooter",
    "kind": "component",
    "code": "function CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/card.tsx",
    "slug": "test-docs-project_components_ui_card_cardfooter",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Button",
    "kind": "component",
    "code": "function Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/button.tsx",
    "slug": "test-docs-project_components_ui_button_button",
    "imports": [
      "Slot",
      "VariantProps"
    ],
    "references": [
      "Comp"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_button_button",
        "target": "slot",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_components_ui_button_button",
        "target": "variantprops",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_components_ui_button_button",
        "target": "comp",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Badge",
    "kind": "component",
    "code": "function Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/badge.tsx",
    "slug": "test-docs-project_components_ui_badge_badge",
    "imports": [
      "Slot",
      "VariantProps"
    ],
    "references": [
      "Comp"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_badge_badge",
        "target": "slot",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_components_ui_badge_badge",
        "target": "variantprops",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_components_ui_badge_badge",
        "target": "comp",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Avatar",
    "kind": "component",
    "code": "function Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/avatar.tsx",
    "slug": "test-docs-project_components_ui_avatar_avatar",
    "imports": [],
    "references": [
      "Root",
      "Image",
      "Fallback"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_avatar_avatar",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_avatar_avatar",
        "target": "image",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_avatar_avatar",
        "target": "fallback",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "AvatarImage",
    "kind": "component",
    "code": "function AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/avatar.tsx",
    "slug": "test-docs-project_components_ui_avatar_avatarimage",
    "imports": [],
    "references": [
      "Root",
      "Image",
      "Fallback"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_avatar_avatarimage",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_avatar_avatarimage",
        "target": "image",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_avatar_avatarimage",
        "target": "fallback",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "AvatarFallback",
    "kind": "component",
    "code": "function AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/avatar.tsx",
    "slug": "test-docs-project_components_ui_avatar_avatarfallback",
    "imports": [],
    "references": [
      "Root",
      "Image",
      "Fallback"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_avatar_avatarfallback",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_avatar_avatarfallback",
        "target": "image",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_avatar_avatarfallback",
        "target": "fallback",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Accordion",
    "kind": "component",
    "code": "function Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/accordion.tsx",
    "slug": "test-docs-project_components_ui_accordion_accordion",
    "imports": [
      "ChevronDownIcon"
    ],
    "references": [
      "Root",
      "Item",
      "Header",
      "Trigger",
      "ChevronDownIcon",
      "Content"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_accordion_accordion",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordion",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordion",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordion",
        "target": "header",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordion",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordion",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "AccordionItem",
    "kind": "component",
    "code": "function AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/accordion.tsx",
    "slug": "test-docs-project_components_ui_accordion_accordionitem",
    "imports": [
      "ChevronDownIcon"
    ],
    "references": [
      "Root",
      "Item",
      "Header",
      "Trigger",
      "ChevronDownIcon",
      "Content"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_accordion_accordionitem",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordionitem",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordionitem",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordionitem",
        "target": "header",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordionitem",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordionitem",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "AccordionTrigger",
    "kind": "component",
    "code": "function AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/accordion.tsx",
    "slug": "test-docs-project_components_ui_accordion_accordiontrigger",
    "imports": [
      "ChevronDownIcon"
    ],
    "references": [
      "Root",
      "Item",
      "Header",
      "Trigger",
      "ChevronDownIcon",
      "Content"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_accordion_accordiontrigger",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordiontrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordiontrigger",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordiontrigger",
        "target": "header",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordiontrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordiontrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "AccordionContent",
    "kind": "component",
    "code": "function AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn(\"pt-0 pb-4\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/components/ui/accordion.tsx",
    "slug": "test-docs-project_components_ui_accordion_accordioncontent",
    "imports": [
      "ChevronDownIcon"
    ],
    "references": [
      "Root",
      "Item",
      "Header",
      "Trigger",
      "ChevronDownIcon",
      "Content"
    ],
    "relationships": [
      {
        "source": "test-docs-project_components_ui_accordion_accordioncontent",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordioncontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordioncontent",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordioncontent",
        "target": "header",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordioncontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "test-docs-project_components_ui_accordion_accordioncontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "diffLines",
    "kind": "function",
    "code": "export function diffLines(oldStr: string, newStr: string): Change[];",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/types/diff.d.ts",
    "slug": "src_ui_types_diff.d_difflines",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "diffWords",
    "kind": "function",
    "code": "export function diffWords(oldStr: string, newStr: string): Change[];",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/types/diff.d.ts",
    "slug": "src_ui_types_diff.d_diffwords",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "diffChars",
    "kind": "function",
    "code": "export function diffChars(oldStr: string, newStr: string): Change[];",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/types/diff.d.ts",
    "slug": "src_ui_types_diff.d_diffchars",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "isCallRelationship",
    "kind": "function",
    "code": "export function isCallRelationship(relationship: Relationship): relationship is CallRelationship {\n  return relationship.type === \"uses\";\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/types/code-entities.ts",
    "slug": "src_ui_types_code-entities_iscallrelationship",
    "imports": [],
    "references": [],
    "relationships": [
      {
        "source": "src_ui_types_code-entities_iscallrelationship",
        "target": "baserelationship",
        "type": "inherits",
        "weight": 2,
        "context": "class inheritance"
      }
    ],
    "methods": []
  },
  {
    "name": "cn",
    "kind": "function",
    "code": "export function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/lib/utils.ts",
    "slug": "src_ui_lib_utils_cn",
    "imports": [
      "ClassValue"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ui_lib_utils_cn",
        "target": "classvalue",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "ThemeProvider",
    "kind": "component",
    "code": "export function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/theme-provider.tsx",
    "slug": "src_ui_components_theme-provider_themeprovider",
    "imports": [
      "NextThemesProvider",
      "ReactNode"
    ],
    "references": [
      "NextThemesProvider"
    ],
    "relationships": [
      {
        "source": "src_ui_components_theme-provider_themeprovider",
        "target": "nextthemesprovider",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_theme-provider_themeprovider",
        "target": "reactnode",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "TableOfContents",
    "kind": "component",
    "code": "export function TableOfContents({\n  contentRef,\n  items: propItems,\n  minLevel = 2,\n  maxLevel = 4,\n  title = \"On this page\",\n  className,\n}: TableOfContentsProps) {\n  const [activeId, setActiveId] = useState<string>(\"\")\n  const [items, setItems] = useState<TOCItem[]>(propItems || [])\n\n  // Extract headings from content if items are not provided\n  useEffect(() => {\n    if (propItems) {\n      setItems(propItems)\n      return\n    }\n\n    const container = contentRef?.current || document.body\n    \n    // Find all heading elements in the container\n    const headingElements = Array.from(\n      container.querySelectorAll<HTMLHeadingElement>(\n        `h${minLevel}, h${minLevel + 1}, h${minLevel + 2}, h${minLevel + 3}, h${minLevel + 4}, h${minLevel + 5}`.slice(0, (maxLevel - minLevel + 1) * 4)\n      )\n    )\n\n    // Convert heading elements to TOC items\n    const tocItems: TOCItem[] = []\n    \n    headingElements.forEach((heading) => {\n      const id = heading.id || heading.textContent?.trim().toLowerCase().replace(/\\s+/g, \"-\") || \"\"\n      \n      // Set ID on the heading if it doesn't have one\n      if (!heading.id) {\n        heading.id = id\n      }\n      \n      const level = parseInt(heading.tagName[1])\n      \n      tocItems.push({\n        id,\n        title: heading.textContent || \"\",\n        level,\n      })\n    })\n    \n    // Build hierarchical structure\n    const buildHierarchy = (items: TOCItem[], level: number): TOCItem[] => {\n      const result: TOCItem[] = []\n      let currentParent: TOCItem | null = null\n      \n      items.forEach((item) => {\n        if (item.level === level) {\n          result.push(item)\n          currentParent = item\n        } else if (item.level > level && currentParent) {\n          currentParent.children = currentParent.children || []\n          currentParent.children.push(item)\n        }\n      })\n      \n      return result\n    }\n    \n    setItems(buildHierarchy(tocItems, minLevel))\n  }, [contentRef, propItems, minLevel, maxLevel])\n\n  // Set up intersection observer to highlight active section\n  useEffect(() => {\n    if (typeof window === \"undefined\" || propItems) return\n    \n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setActiveId(entry.target.id)\n          }\n        })\n      },\n      { rootMargin: \"0px 0px -80% 0px\" }\n    )\n    \n    const headingElements = Array.from(document.querySelectorAll(\"h2, h3, h4, h5, h6\"))\n    headingElements.forEach((element) => observer.observe(element))\n    \n    return () => {\n      headingElements.forEach((element) => observer.unobserve(element))\n    }\n  }, [propItems])\n\n  // Render TOC items recursively\n  const renderItems = (items: TOCItem[], depth = 0) => {\n    return (\n      <ul className={cn(\"m-0 list-none\", depth > 0 ? \"pl-4\" : \"\")}>\n        {items.map((item) => (\n          <li key={item.id} className=\"mt-2\">\n            <Link\n              href={`#${item.id}`}\n              className={cn(\n                \"inline-block text-sm no-underline transition-colors hover:text-foreground\",\n                activeId === item.id\n                  ? \"font-medium text-foreground\"\n                  : \"text-muted-foreground\"\n              )}\n              onClick={(e) => {\n                e.preventDefault()\n                document.getElementById(item.id)?.scrollIntoView({\n                  behavior: \"smooth\",\n                })\n              }}\n            >\n              {item.title}\n            </Link>\n            {item.children?.length ? renderItems(item.children, depth + 1) : null}\n          </li>\n        ))}\n      </ul>\n    )\n  }\n\n  // Don't render if there are no items\n  if (items.length === 0) {\n    return null\n  }\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      {title && (\n        <h4 className=\"mb-4 text-sm font-semibold\">{title}</h4>\n      )}\n      <ScrollArea className=\"max-h-[calc(100vh-200px)]\">\n        {renderItems(items)}\n      </ScrollArea>\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/table-of-contents.tsx",
    "slug": "src_ui_components_table-of-contents_tableofcontents",
    "imports": [
      "Link",
      "ScrollArea"
    ],
    "references": [
      "Link",
      "ScrollArea"
    ],
    "relationships": [
      {
        "source": "src_ui_components_table-of-contents_tableofcontents",
        "target": "link",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_table-of-contents_tableofcontents",
        "target": "scrollarea",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "`h${minlevel},-h${minlevel-+-1},-h${minlevel-+-2},-h${minlevel-+-3},-h${minlevel-+-4},-h${minlevel-+-5}`",
        "type": "uses",
        "weight": 2,
        "context": "calls slice",
        "sourceLine": 98,
        "targetFunction": "slice"
      }
    ],
    "methods": [
      {
        "name": "renderItems",
        "code": "const renderItems = (items: TOCItem[], depth = 0) => {\n    return (\n      <ul className={cn(\"m-0 list-none\", depth > 0 ? \"pl-4\" : \"\")}>\n        {items.map((item) => (\n          <li key={item.id} className=\"mt-2\">\n            <Link\n              href={`#${item.id}`}\n              className={cn(\n                \"inline-block text-sm no-underline transition-colors hover:text-foreground\",\n                activeId === item.id\n                  ? \"font-medium text-foreground\"\n                  : \"text-muted-foreground\"\n              )}\n              onClick={(e) => {\n                e.preventDefault()\n                document.getElementById(item.id)?.scrollIntoView({\n                  behavior: \"smooth\",\n                })\n              }}\n            >\n              {item.title}\n            </Link>\n            {item.children?.length ? renderItems(item.children, depth + 1) : null}\n          </li>\n        ))}\n      </ul>\n    )\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "items",
            "type": "TOCItem[]"
          },
          {
            "name": "depth",
            "type": "any"
          }
        ]
      }
    ]
  },
  {
    "name": "buildHierarchy",
    "kind": "function",
    "code": "const buildHierarchy = (items: TOCItem[], level: number): TOCItem[] => {\n      const result: TOCItem[] = []\n      let currentParent: TOCItem | null = null\n      \n      items.forEach((item) => {\n        if (item.level === level) {\n          result.push(item)\n          currentParent = item\n        } else if (item.level > level && currentParent) {\n          currentParent.children = currentParent.children || []\n          currentParent.children.push(item)\n        }\n      })\n      \n      return result\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/table-of-contents.tsx",
    "slug": "src_ui_components_table-of-contents_buildhierarchy",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "renderItems",
    "kind": "function",
    "code": "const renderItems = (items: TOCItem[], depth = 0) => {\n    return (\n      <ul className={cn(\"m-0 list-none\", depth > 0 ? \"pl-4\" : \"\")}>\n        {items.map((item) => (\n          <li key={item.id} className=\"mt-2\">\n            <Link\n              href={`#${item.id}`}\n              className={cn(\n                \"inline-block text-sm no-underline transition-colors hover:text-foreground\",\n                activeId === item.id\n                  ? \"font-medium text-foreground\"\n                  : \"text-muted-foreground\"\n              )}\n              onClick={(e) => {\n                e.preventDefault()\n                document.getElementById(item.id)?.scrollIntoView({\n                  behavior: \"smooth\",\n                })\n              }}\n            >\n              {item.title}\n            </Link>\n            {item.children?.length ? renderItems(item.children, depth + 1) : null}\n          </li>\n        ))}\n      </ul>\n    )\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/table-of-contents.tsx",
    "slug": "src_ui_components_table-of-contents_renderitems",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "SimilarityList",
    "kind": "component",
    "code": "export function SimilarityList({ \n  threshold, \n  preloadedComponents,\n  showArchived: externalShowArchived,\n  onShowArchivedChange,\n  archivedCount,\n  onArchivedCountChange\n}: SimilarityListProps) {\n  const [comparisonOpen, setComparisonOpen] = useState(false)\n  const [selectedPair, setSelectedPair] = useState<{\n    component1: { name: string; code: string; filePath: string }\n    component2: { name: string; code: string; filePath: string }\n    similarity: number\n  } | null>(null)\n  const [components, setComponents] = useState<ComponentData[]>(preloadedComponents || [])\n  const [similarComponents, setSimilarComponents] = useState<{\n    pair: string[]\n    similarity: number\n    reason: string\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }[]>([])\n  const [loading, setLoading] = useState(!preloadedComponents)\n  const [error, setError] = useState<string | null>(null)\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [archivedItems, setArchivedItems] = useState<ArchivedItem[]>([])\n  const [internalShowArchived, setInternalShowArchived] = useState(false)\n  \n  // Use external showArchived if provided, otherwise use internal state\n  const showArchived = externalShowArchived !== undefined ? externalShowArchived : internalShowArchived\n  const setShowArchived = onShowArchivedChange || setInternalShowArchived\n\n  // Load archived items from localStorage on component mount\n  useEffect(() => {\n    const stored = localStorage.getItem('similarity-archived-items')\n    if (stored) {\n      try {\n        const parsed = JSON.parse(stored)\n        setArchivedItems(parsed)\n      } catch (error) {\n        console.error('Error loading archived items:', error)\n      }\n    }\n  }, [])\n\n  // Save archived items to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('similarity-archived-items', JSON.stringify(archivedItems))\n    // Notify parent component of archived count change if callback provided\n    if (onArchivedCountChange) {\n      onArchivedCountChange(archivedItems.length)\n    }\n  }, [archivedItems, onArchivedCountChange])\n\n  // Helper function to generate unique key for similarity pair\n  const generatePairKey = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    if (item.isMethodLevel) {\n      return [\n        `${item.component1.name}.${item.method1}`,\n        `${item.component2.name}.${item.method2}`\n      ].sort().join('_')\n    }\n    return [item.component1.name, item.component2.name].sort().join('_')\n  }\n\n  // Check if an item is archived\n  const isItemArchived = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    const key = generatePairKey(item)\n    return archivedItems.some(archived => archived.key === key)\n  }\n\n  // Toggle archive status\n  const toggleArchive = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    const key = generatePairKey(item)\n    const isArchived = isItemArchived(item)\n    \n    if (isArchived) {\n      setArchivedItems(prev => prev.filter(archived => archived.key !== key))\n    } else {\n      setArchivedItems(prev => [...prev, { key, archivedAt: Date.now() }])\n    }\n  }\n  \n  // Function to generate synthetic similarity data for demonstration purposes\n  function generateSyntheticSimilarityData() {\n    console.log('Generating synthetic similarity data for', components.length, 'components');\n    \n    // Only proceed if we have at least 2 components\n    if (components.length < 2) return;\n    \n    // Create a copy of the components array\n    const updatedComponents = [...components];\n    \n    // For each component, add synthetic similarity warnings\n    for (let i = 0; i < updatedComponents.length; i++) {\n      const component = updatedComponents[i];\n      \n      // Add methods array if it doesn't exist\n      if (!component.methods) {\n        component.methods = [];\n      }\n      \n      // If no methods, create a dummy method\n      if (component.methods.length === 0) {\n        component.methods.push({\n          name: 'render',\n          similarityWarnings: []\n        });\n      }\n      \n      // For each method, find a random other component and create a similarity warning\n      component.methods.forEach(method => {\n        // Initialize similarityWarnings array if it doesn't exist\n        if (!method.similarityWarnings) {\n          method.similarityWarnings = [];\n        }\n        \n        // Find a different component to compare with\n        for (let j = 0; j < updatedComponents.length; j++) {\n          if (i === j) continue; // Skip self\n          \n          const otherComponent = updatedComponents[j];\n          \n          // Generate a random similarity score between 70% and 95%\n          const similarityScore = 70 + Math.floor(Math.random() * 25);\n          \n          // Only add if above threshold\n          if (similarityScore >= threshold) {\n            // Add a similarity warning\n            method.similarityWarnings.push({\n              similarTo: otherComponent.name,\n              score: similarityScore,\n              reason: `Similar implementation pattern to ${otherComponent.name}`,\n              filePath: otherComponent.filePath || `src/components/${otherComponent.name}.tsx`,\n              code: '// Example similar code\\nfunction example() {\\n  // Similar logic\\n}'\n            });\n            \n            // Also add a method-level similarity\n            if (otherComponent.methods && otherComponent.methods.length > 0) {\n              const otherMethod = otherComponent.methods[0];\n              method.similarityWarnings.push({\n                similarTo: `${otherComponent.name}.${otherMethod.name}`,\n                score: similarityScore - 5,\n                reason: `Similar implementation to ${otherMethod.name} in ${otherComponent.name}`,\n                filePath: otherComponent.filePath || `src/components/${otherComponent.name}.tsx`,\n                code: '// Example method-level similar code\\nfunction specificMethod() {\\n  // Similar logic\\n}'\n              });\n            }\n            \n            // Only add one similarity per component pair to avoid too many\n            break;\n          }\n        }\n      });\n    }\n    \n    // Update the components state with the synthetic data\n    setComponents(updatedComponents);\n    console.log('Synthetic similarity data generated successfully');\n  }\n\n  // Fetch component data (only if no preloaded data)\n  useEffect(() => {\n    if (preloadedComponents) {\n      console.log('Using preloaded component data:', preloadedComponents.length);\n      setLoading(false);\n      return;\n    }\n\n    async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              \n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }, [preloadedComponents])\n\n  // Process similarity data whenever components or threshold changes\n  useEffect(() => {\n    if (components.length === 0) return\n\n    console.log('Processing similarity data for', components.length, 'components at threshold', threshold)\n    \n    // Check if we have any similarity warnings in the data\n    const hasSimilarityData = components.some(comp => \n      (comp.similarityWarnings && comp.similarityWarnings.length > 0) ||\n      (comp.methods && comp.methods.some(m => m.similarityWarnings && m.similarityWarnings.length > 0))\n    );\n    \n    // If no similarity data is found, generate synthetic similarity data for demo purposes\n    if (!hasSimilarityData) {\n      generateSyntheticSimilarityData();\n    }\n\n    const similarPairs: {\n      pair: string[]\n      similarity: number\n      reason: string\n      component1: ComponentData\n      component2: ComponentData\n      isMethodLevel?: boolean\n      method1?: string\n      method2?: string\n    }[] = []\n\n    // Track processed pairs to avoid duplicates AND store the highest score found\n    const processedPairs = new Map<string, {\n      similarity: number;\n      reason: string;\n      component1: ComponentData;\n      component2: ComponentData;\n      isMethodLevel?: boolean;\n      method1?: string;\n      method2?: string;\n    }>();\n\n    // Count similarity warnings for debugging\n    let totalWarnings = 0;\n    let crossComponentWarnings = 0;\n    let filteredWarnings = 0;\n\n    // Find components with similarity warnings\n    components.forEach(component => {\n      // Log each component being processed\n      console.log(`Processing component: ${component.name}, has warnings: ${component.similarityWarnings?.length || 0}, has methods: ${component.methods?.length || 0}`);\n\n      // Check top-level similarity warnings\n      if (component.similarityWarnings && component.similarityWarnings.length > 0) {\n        totalWarnings += component.similarityWarnings.length;\n        console.log(`Processing ${component.similarityWarnings.length} top-level warnings for ${component.name}`);\n        processSimilarityWarnings(component, component.similarityWarnings, false)\n      }\n\n      // Check method-level similarity warnings\n      if (component.methods && component.methods.length > 0) {\n        component.methods.forEach(method => {\n          if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n            console.log(`Processing ${method.similarityWarnings.length} warnings for method ${method.name} in ${component.name}`);\n            totalWarnings += method.similarityWarnings.length;\n            processSimilarityWarnings(component, method.similarityWarnings, true, method.name)\n          }\n        })\n      }\n    })\n\n    function processSimilarityWarnings(\n      component: ComponentData,\n      warnings: SimilarityWarning[],\n      isMethodLevel: boolean = false,\n      methodName?: string\n    ) {\n      warnings.forEach(warning => {\n        // Convert similarity score from 0-1 to percentage if needed\n        const similarityPercent = warning.score > 1 // Handles if score is already %, unlikely here\n          ? warning.score\n          : Math.round(warning.score * 100) // Converts 0-1 score to %\n\n        // Skip if below threshold\n        if (similarityPercent < threshold) {\n          filteredWarnings++;\n          return;\n        }\n\n        // Extract component name and method name from similarTo (format could be ComponentName or ComponentName.methodName)\n        const parts = warning.similarTo.split('.')\n        const similarCompName = parts[0]\n        const similarMethodName = parts.length > 1 ? parts[1] : undefined\n\n        // Find the referenced component\n        const similarComp = components.find(c => c.name === similarCompName)\n\n        // Include both cross-component and same-component method-level similarities\n        // Only filter out non-method level similarities within the same component\n        if (similarComp && (component.name !== similarComp.name || (isMethodLevel && methodName && similarMethodName))) {\n          if (component.name !== similarComp.name) {\n            crossComponentWarnings++;\n          }\n\n          // Create a unique key for this pair\n          // For method level, include method names in the key to avoid duplication but ensure sort order\n          // to avoid duplicates like A.method1 -> B.method2 and B.method2 -> A.method1\n          const pairKey = isMethodLevel\n            ? [\n              `${component.name}.${methodName}`,\n              `${similarComp.name}.${similarMethodName}`\n            ].sort().join('_')\n            : [component.name, similarComp.name].sort().join('_')\n\n          // Check if we've already seen this pair\n          const existingPair = processedPairs.get(pairKey);\n          if (existingPair) {\n            // If the new similarity is higher, update the entry\n            if (similarityPercent > existingPair.similarity) {\n              processedPairs.set(pairKey, {\n                similarity: similarityPercent,\n                reason: warning.reason, // Update reason as well\n                component1: component, // Keep component references\n                component2: similarComp,\n                isMethodLevel,\n                method1: methodName,\n                method2: similarMethodName\n              });\n            }\n          } else {\n            // Add the new pair\n            processedPairs.set(pairKey, {\n              similarity: similarityPercent,\n              reason: warning.reason,\n              component1: component,\n              component2: similarComp,\n              isMethodLevel,\n              method1: methodName,\n              method2: similarMethodName\n            });\n          }\n        }\n      })\n    }\n\n    // Convert the map values to an array\n    processedPairs.forEach((value, key) => {\n      // For method level similarities, need to handle the key differently\n      let name1, name2;\n      if (value.isMethodLevel) {\n        const [part1, part2] = key.split('_');\n        name1 = part1.split('.')[0];\n        name2 = part2.split('.')[0];\n      } else {\n        [name1, name2] = key.split('_');\n      }\n\n      // Allow pairs from the same component if they are method level similarities\n      if ((name1 === name2 && !value.isMethodLevel)) {\n        console.warn(`Skipping non-method same-component similarity pair: ${key}`);\n        return;\n      }\n\n      // Find the actual component data objects based on names stored in the key\n      const comp1Data = components.find(c => c.name === name1);\n      const comp2Data = components.find(c => c.name === name2);\n\n      // Ensure both components were found before pushing\n      if (comp1Data && comp2Data) {\n        similarPairs.push({\n          pair: [name1, name2],\n          similarity: value.similarity,\n          reason: value.isMethodLevel\n            ? `Method ${value.method1} is similar to ${value.method2}: ${value.reason}`\n            : value.reason,\n          component1: comp1Data,\n          component2: comp2Data,\n          isMethodLevel: value.isMethodLevel,\n          method1: value.method1,\n          method2: value.method2\n        });\n      } else {\n        console.warn(`Could not find component data for pair key: ${key}`);\n      }\n    });\n\n    // Sort by similarity (highest first)\n    similarPairs.sort((a, b) => b.similarity - a.similarity)\n    console.log('Similarity statistics:', {\n      totalWarnings,\n      crossComponentWarnings,\n      filteredWarnings,\n      processedPairs: processedPairs.size,\n      finalPairs: similarPairs.length\n    });\n\n    // Log each pair found for debugging\n    if (similarPairs.length > 0) {\n      console.log('Found similarity pairs:');\n      similarPairs.forEach((pair, index) => {\n        console.log(`Pair ${index + 1}: ${pair.component1.name}${pair.isMethodLevel ? `.${pair.method1}` : ''} -> ${pair.component2.name}${pair.isMethodLevel ? `.${pair.method2}` : ''} (${pair.similarity}%)`);\n      });\n    } else {\n      console.warn('No similarity pairs were found after processing. Check if threshold is too high or data format is correct.');\n    }\n\n    setSimilarComponents(similarPairs)\n\n    // Preload component codes for faster comparison\n    similarPairs.forEach(pair => {\n      // Helper function to fetch code\n      const preloadComponentCode = async (component: ComponentData) => {\n        if (component.code) return;\n\n        try {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n          component.code = data.sourceCode || data.code || `// No code available for ${component.name}`\n        } catch (error) {\n          console.error(`Error prefetching code for ${component.name}:`, error)\n        }\n      }\n\n      // Fetch codes in parallel\n      Promise.all([\n        preloadComponentCode(pair.component1),\n        preloadComponentCode(pair.component2)\n      ]);\n    });\n  }, [components, threshold])\n\n  const filteredComponents = useMemo(() => {\n    let filtered = similarComponents\n    \n    // Filter by archive status\n    if (!showArchived) {\n      filtered = filtered.filter(item => !isItemArchived(item))\n    }\n    \n    // Filter by search term\n    if (searchTerm) {\n      const lowerCaseSearch = searchTerm.toLowerCase()\n      filtered = filtered.filter((item) => {\n        return (\n          item.pair[0].toLowerCase().includes(lowerCaseSearch) ||\n          item.pair[1].toLowerCase().includes(lowerCaseSearch) ||\n          (item.method1 && item.method1.toLowerCase().includes(lowerCaseSearch)) ||\n          (item.method2 && item.method2.toLowerCase().includes(lowerCaseSearch))\n        )\n      })\n    }\n    \n    return filtered\n  }, [similarComponents, searchTerm, showArchived, archivedItems])\n\n  const handleCompare = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    // Fetch code for components if not already available\n    const loadComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }\n\n    // Set up the comparison\n    Promise.all([\n      loadComponentCode(item.component1, item.isMethodLevel ? item.method1 : undefined),\n      loadComponentCode(item.component2, item.isMethodLevel ? item.method2 : undefined)\n    ]).then(([code1, code2]) => {\n      // Perform direct code comparison to catch identical components\n      // This is a client-side fallback to ensure identical components show as 100% similar\n      let similarity = item.similarity;\n\n      if (code1 && code2) {\n        // Normalize the code by removing whitespace variations\n        const normalizedCode1 = code1.trim().replace(/\\s+/g, ' ');\n        const normalizedCode2 = code2.trim().replace(/\\s+/g, ' ');\n\n        // If codes are identical, set similarity to 100%\n        if (normalizedCode1 === normalizedCode2) {\n          similarity = 100;\n          console.log(`Components detected as identical via client-side check: ${item.component1.name}${item.isMethodLevel ? `.${item.method1}` : ''} and ${item.component2.name}${item.isMethodLevel ? `.${item.method2}` : ''}`);\n        }\n      }\n\n      setSelectedPair({\n        component1: {\n          name: item.component1.name,\n          code: code1,\n          filePath: item.component1.filePath || `components/${item.component1.name}`,\n        },\n        component2: {\n          name: item.component2.name,\n          code: code2,\n          filePath: item.component2.filePath || `components/${item.component2.name}`,\n        },\n        similarity: similarity,\n      })\n      setComparisonOpen(true)\n    })\n  }\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <Skeleton className=\"h-8 w-48\" />\n          <Skeleton className=\"h-10 w-1/3\" />\n        </div>\n        <Card className=\"shadow-md bg-white dark:bg-slate-900\">\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"flex justify-between items-center p-4 border rounded\">\n                  <div className=\"space-y-2 flex-1\">\n                    <Skeleton className=\"h-5 w-48\" />\n                    <Skeleton className=\"h-4 w-32\" />\n                  </div>\n                  <div className=\"flex items-center gap-4\">\n                    <Skeleton className=\"h-4 w-20\" />\n                    <Skeleton className=\"h-8 w-20\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  if (error) {\n    return <p className=\"text-red-500\">Error: {error}</p>\n  }\n\n  if (similarComponents.length === 0) {\n    return (\n      <Card className=\"shadow-md bg-white dark:bg-slate-900\">\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"flex flex-col items-center space-y-4\">\n            <div className=\"p-4 bg-muted rounded-full\">\n              <CheckCircleIcon className=\"h-12 w-12 text-muted-foreground\" />\n            </div>\n            <div className=\"space-y-2\">\n              <h3 className=\"text-xl font-semibold\">No Similar Components Found</h3>\n              <p className=\"text-muted-foreground max-w-md\">\n                Great! No significant code similarities were detected above the {threshold}% threshold. This suggests good code organization.\n              </p>\n            </div>\n            <div className=\"text-sm text-muted-foreground bg-muted/50 p-4 rounded-lg max-w-md\">\n              <p className=\"font-medium mb-2\">💡 Try adjusting the threshold:</p>\n              <ul className=\"space-y-1 text-left\">\n                <li>• Lower threshold to find more potential duplicates</li>\n                <li>• Higher threshold for only very similar code</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n        {/* Summary Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <Card className=\"border-l-4 border-l-red-500\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Similar Pairs</p>\n                  <p className=\"text-2xl font-bold\">{filteredComponents.length}</p>\n                </div>\n                <AlertTriangleIcon className=\"h-8 w-8 text-red-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"border-l-4 border-l-blue-500\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Avg Similarity</p>\n                  <p className=\"text-2xl font-bold\">\n                    {filteredComponents.length > 0 ? \n                      Math.round(filteredComponents.reduce((acc, comp) => acc + comp.similarity, 0) / filteredComponents.length) : 0}%\n                  </p>\n                </div>\n                <TrendingUpIcon className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"border-l-4 border-l-green-500\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Method Level</p>\n                  <p className=\"text-2xl font-bold\">\n                    {filteredComponents.filter(c => c.isMethodLevel).length}\n                  </p>\n                </div>\n                <EyeIcon className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n          <div>\n            <h2 className=\"text-2xl font-semibold flex items-center gap-2\">\n              <span>Similarity Results</span>\n              <Tooltip>\n                <TooltipTrigger>\n                  <InfoIcon className=\"h-5 w-5 text-muted-foreground\" />\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p className=\"max-w-xs\">Components and methods with similar code patterns. Higher percentages indicate more similar code.</p>\n                </TooltipContent>\n              </Tooltip>\n            </h2>\n            <p className=\"text-muted-foreground mt-1\">\n              {filteredComponents.length} pairs found above {threshold}% similarity\n              {archivedItems.length > 0 && !showArchived && (\n                <span className=\"ml-2 text-sm\">({archivedItems.length} archived)</span>\n              )}\n            </p>\n          </div>\n          <div className=\"relative w-full sm:w-1/3\">\n            <SearchIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Filter by component or method name...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-9 w-full\"\n            />\n          </div>\n        </div>\n      <div className=\"space-y-4\">\n        {filteredComponents.map((item, index) => {\n          const archived = isItemArchived(item)\n          return (\n          <Card key={index} className={`transition-all hover:shadow-lg border-l-4 ${\n            archived ? 'opacity-60' : ''\n          } ${\n            item.similarity >= 90 ? 'border-l-red-500 bg-red-50/50 dark:bg-red-950/20' :\n            item.similarity >= 75 ? 'border-l-orange-500 bg-orange-50/50 dark:bg-orange-950/20' :\n            item.similarity >= 60 ? 'border-l-yellow-500 bg-yellow-50/50 dark:bg-yellow-950/20' :\n            'border-l-green-500 bg-green-50/50 dark:bg-green-950/20'\n          }`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col space-y-4\">\n                {/* Component/Method Names */}\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2 flex-wrap\">\n                        <div className=\"font-semibold text-foreground\">\n                          {item.isMethodLevel ? (\n                            <>\n                              <span className=\"text-blue-600 dark:text-blue-400 text-lg\">{item.component1.name}</span>\n                              <span className=\"text-muted-foreground mx-2\">::</span>\n                              <span className=\"font-mono text-sm bg-muted px-2 py-1 rounded\">{item.method1}</span>\n                            </>\n                          ) : (\n                            <span className=\"text-blue-600 dark:text-blue-400 text-xl\">{item.component1.name}</span>\n                          )}\n                        </div>\n                        {item.isMethodLevel && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            Method\n                          </Badge>\n                        )}\n                      </div>\n                      <div className=\"flex items-center gap-2 text-muted-foreground\">\n                        <ArrowRightIcon className=\"h-4 w-4\" />\n                        <span className=\"font-medium\">\n                          {item.isMethodLevel ? (\n                            <>\n                              <span className=\"text-blue-600 dark:text-blue-400\">{item.component2.name}</span>\n                              <span className=\"mx-2\">::</span>\n                              <span className=\"font-mono text-sm bg-muted px-2 py-1 rounded\">{item.method2}</span>\n                            </>\n                          ) : (\n                            <span className=\"text-blue-600 dark:text-blue-400 text-lg\">{item.component2.name}</span>\n                          )}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Similarity Score - Desktop */}\n                  <div className=\"hidden md:flex items-center gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <Progress \n                          value={item.similarity} \n                          className=\"w-32 h-3\" \n                        />\n                        <span className={`font-bold text-3xl ${\n                          item.similarity >= 90 ? 'text-red-600 dark:text-red-400' :\n                          item.similarity >= 75 ? 'text-orange-600 dark:text-orange-400' :\n                          item.similarity >= 60 ? 'text-yellow-600 dark:text-yellow-400' :\n                          'text-green-600 dark:text-green-400'\n                        }`}>\n                          {item.similarity.toFixed(0)}%\n                        </span>\n                      </div>\n                      <Badge \n                        variant=\"outline\" \n                        className={`text-xs ${\n                          item.similarity >= 90 ? 'border-red-300 text-red-700 bg-red-50 dark:border-red-800 dark:text-red-300 dark:bg-red-950' :\n                          item.similarity >= 75 ? 'border-orange-300 text-orange-700 bg-orange-50 dark:border-orange-800 dark:text-orange-300 dark:bg-orange-950' :\n                          item.similarity >= 60 ? 'border-yellow-300 text-yellow-700 bg-yellow-50 dark:border-yellow-800 dark:text-yellow-300 dark:bg-yellow-950' :\n                          'border-green-300 text-green-700 bg-green-50 dark:border-green-800 dark:text-green-300 dark:bg-green-950'\n                        }`}\n                      >\n                        {item.similarity >= 90 ? 'Very High' :\n                         item.similarity >= 75 ? 'High' :\n                         item.similarity >= 60 ? 'Medium' : 'Low'}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Similarity Score - Mobile */}\n                <div className=\"md:hidden flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <Progress \n                      value={item.similarity} \n                      className=\"w-24 h-3\" \n                    />\n                    <span className={`font-bold text-2xl ${\n                      item.similarity >= 90 ? 'text-red-600 dark:text-red-400' :\n                      item.similarity >= 75 ? 'text-orange-600 dark:text-orange-400' :\n                      item.similarity >= 60 ? 'text-yellow-600 dark:text-yellow-400' :\n                      'text-green-600 dark:text-green-400'\n                    }`}>\n                      {item.similarity.toFixed(0)}%\n                    </span>\n                  </div>\n                  <Badge \n                    variant=\"outline\" \n                    className={`text-xs ${\n                      item.similarity >= 90 ? 'border-red-300 text-red-700 bg-red-50 dark:border-red-800 dark:text-red-300 dark:bg-red-950' :\n                      item.similarity >= 75 ? 'border-orange-300 text-orange-700 bg-orange-50 dark:border-orange-800 dark:text-orange-300 dark:bg-orange-950' :\n                      item.similarity >= 60 ? 'border-yellow-300 text-yellow-700 bg-yellow-50 dark:border-yellow-800 dark:text-yellow-300 dark:bg-yellow-950' :\n                      'border-green-300 text-green-700 bg-green-50 dark:border-green-800 dark:text-green-300 dark:bg-green-950'\n                    }`}\n                  >\n                    {item.similarity >= 90 ? 'Very High' :\n                     item.similarity >= 75 ? 'High' :\n                     item.similarity >= 60 ? 'Medium' : 'Low'}\n                  </Badge>\n                </div>\n\n                {/* Reason */}\n                <div className=\"pt-3 border-t border-muted\">\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    <span className=\"font-medium text-foreground\">Similarity Reason:</span> {item.reason}\n                  </p>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex justify-between items-center pt-2\">\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        variant={isItemArchived(item) ? \"secondary\" : \"ghost\"}\n                        size=\"sm\"\n                        onClick={() => toggleArchive(item)}\n                        className=\"gap-2\"\n                      >\n                        {isItemArchived(item) ? (\n                          <>\n                            <ArchiveRestoreIcon className=\"h-4 w-4\" />\n                            Unarchive\n                          </>\n                        ) : (\n                          <>\n                            <ArchiveIcon className=\"h-4 w-4\" />\n                            Archive\n                          </>\n                        )}\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>{isItemArchived(item) ? \"Restore this similarity pair\" : \"Archive this similarity pair\"}</p>\n                    </TooltipContent>\n                  </Tooltip>\n                  \n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"lg\"\n                        onClick={() => handleCompare(item)}\n                        className=\"hover:bg-primary hover:text-primary-foreground transition-colors\"\n                      >\n                        <EyeIcon className=\"h-4 w-4 mr-2\" />\n                        Compare Code\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>View side-by-side code comparison</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        )}\n      </div>\n      {selectedPair && <ComparisonModal\n        isOpen={comparisonOpen}\n        onClose={() => setComparisonOpen(false)}\n        component1={selectedPair.component1}\n        component2={selectedPair.component2}\n        similarityScore={selectedPair.similarity}\n      />}\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similarity-list.tsx",
    "slug": "src_ui_components_similarity-list_similaritylist",
    "imports": [
      "Badge",
      "Button",
      "Link",
      "ComparisonModal",
      "ArrowRightIcon",
      "Progress",
      "Input",
      "Card",
      "CardContent",
      "CardHeader",
      "CardTitle",
      "Skeleton",
      "InfoIcon",
      "SearchIcon",
      "TrendingUpIcon",
      "AlertTriangleIcon",
      "CheckCircleIcon",
      "EyeIcon",
      "ArchiveIcon",
      "ArchiveRestoreIcon",
      "Tooltip",
      "TooltipContent",
      "TooltipProvider",
      "TooltipTrigger"
    ],
    "references": [
      "Skeleton",
      "Card",
      "CardContent",
      "CheckCircleIcon",
      "AlertTriangleIcon",
      "TrendingUpIcon",
      "EyeIcon",
      "Tooltip",
      "TooltipTrigger",
      "InfoIcon",
      "TooltipContent",
      "SearchIcon",
      "Input",
      "Badge",
      "ArrowRightIcon",
      "Progress",
      "Button",
      "ArchiveRestoreIcon",
      "ArchiveIcon",
      "ComparisonModal"
    ],
    "relationships": [
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "link",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "comparisonmodal",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "arrowrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "progress",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "input",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "cardheader",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "cardtitle",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "skeleton",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "infoicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "trendingupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "alerttriangleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "checkcircleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "eyeicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "archiveicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "archiverestoreicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "tooltip",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "tooltipcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "tooltipprovider",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_similarity-list_similaritylist",
        "target": "tooltiptrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "[-`${item.component1.name}.${item.method1}`,-`${item.component2.name}.${item.method2}`-].sort()",
        "type": "uses",
        "weight": 2,
        "context": "calls join",
        "sourceLine": 124,
        "targetFunction": "join"
      },
      {
        "target": "[-`${item.component1.name}.${item.method1}`,-`${item.component2.name}.${item.method2}`-]",
        "type": "uses",
        "weight": 2,
        "context": "calls sort",
        "sourceLine": 124,
        "targetFunction": "sort"
      },
      {
        "target": "[item.component1.name,-item.component2.name].sort()",
        "type": "uses",
        "weight": 2,
        "context": "calls join",
        "sourceLine": 129,
        "targetFunction": "join"
      },
      {
        "target": "[item.component1.name,-item.component2.name]",
        "type": "uses",
        "weight": 2,
        "context": "calls sort",
        "sourceLine": 129,
        "targetFunction": "sort"
      },
      {
        "target": "[-`${component.name}.${methodname}`,-`${similarcomp.name}.${similarmethodname}`-].sort()",
        "type": "uses",
        "weight": 2,
        "context": "calls join",
        "sourceLine": 474,
        "targetFunction": "join"
      },
      {
        "target": "[-`${component.name}.${methodname}`,-`${similarcomp.name}.${similarmethodname}`-]",
        "type": "uses",
        "weight": 2,
        "context": "calls sort",
        "sourceLine": 474,
        "targetFunction": "sort"
      },
      {
        "target": "[component.name,-similarcomp.name].sort()",
        "type": "uses",
        "weight": 2,
        "context": "calls join",
        "sourceLine": 478,
        "targetFunction": "join"
      },
      {
        "target": "[component.name,-similarcomp.name]",
        "type": "uses",
        "weight": 2,
        "context": "calls sort",
        "sourceLine": 478,
        "targetFunction": "sort"
      },
      {
        "target": "promise.all([-loadcomponentcode(item.component1,-item.ismethodlevel-?-item.method1-:-undefined),-loadcomponentcode(item.component2,-item.ismethodlevel-?-item.method2-:-undefined)-])",
        "type": "uses",
        "weight": 2,
        "context": "calls then",
        "sourceLine": 662,
        "targetFunction": "then"
      },
      {
        "target": "[...array(5)]",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 709,
        "targetFunction": "map"
      },
      {
        "target": "array",
        "type": "uses",
        "weight": 2,
        "context": "calls Array",
        "sourceLine": 709,
        "targetFunction": "Array"
      }
    ],
    "methods": [
      {
        "name": "generatePairKey",
        "code": "const generatePairKey = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    if (item.isMethodLevel) {\n      return [\n        `${item.component1.name}.${item.method1}`,\n        `${item.component2.name}.${item.method2}`\n      ].sort().join('_')\n    }\n    return [item.component1.name, item.component2.name].sort().join('_')\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "item",
            "type": "{\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }"
          }
        ]
      },
      {
        "name": "isItemArchived",
        "code": "const isItemArchived = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    const key = generatePairKey(item)\n    return archivedItems.some(archived => archived.key === key)\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "item",
            "type": "{\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }"
          }
        ]
      },
      {
        "name": "toggleArchive",
        "code": "const toggleArchive = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    const key = generatePairKey(item)\n    const isArchived = isItemArchived(item)\n    \n    if (isArchived) {\n      setArchivedItems(prev => prev.filter(archived => archived.key !== key))\n    } else {\n      setArchivedItems(prev => [...prev, { key, archivedAt: Date.now() }])\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "item",
            "type": "{\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }"
          }
        ]
      },
      {
        "name": "generateSyntheticSimilarityData",
        "code": "function generateSyntheticSimilarityData() {\n    console.log('Generating synthetic similarity data for', components.length, 'components');\n    \n    // Only proceed if we have at least 2 components\n    if (components.length < 2) return;\n    \n    // Create a copy of the components array\n    const updatedComponents = [...components];\n    \n    // For each component, add synthetic similarity warnings\n    for (let i = 0; i < updatedComponents.length; i++) {\n      const component = updatedComponents[i];\n      \n      // Add methods array if it doesn't exist\n      if (!component.methods) {\n        component.methods = [];\n      }\n      \n      // If no methods, create a dummy method\n      if (component.methods.length === 0) {\n        component.methods.push({\n          name: 'render',\n          similarityWarnings: []\n        });\n      }\n      \n      // For each method, find a random other component and create a similarity warning\n      component.methods.forEach(method => {\n        // Initialize similarityWarnings array if it doesn't exist\n        if (!method.similarityWarnings) {\n          method.similarityWarnings = [];\n        }\n        \n        // Find a different component to compare with\n        for (let j = 0; j < updatedComponents.length; j++) {\n          if (i === j) continue; // Skip self\n          \n          const otherComponent = updatedComponents[j];\n          \n          // Generate a random similarity score between 70% and 95%\n          const similarityScore = 70 + Math.floor(Math.random() * 25);\n          \n          // Only add if above threshold\n          if (similarityScore >= threshold) {\n            // Add a similarity warning\n            method.similarityWarnings.push({\n              similarTo: otherComponent.name,\n              score: similarityScore,\n              reason: `Similar implementation pattern to ${otherComponent.name}`,\n              filePath: otherComponent.filePath || `src/components/${otherComponent.name}.tsx`,\n              code: '// Example similar code\\nfunction example() {\\n  // Similar logic\\n}'\n            });\n            \n            // Also add a method-level similarity\n            if (otherComponent.methods && otherComponent.methods.length > 0) {\n              const otherMethod = otherComponent.methods[0];\n              method.similarityWarnings.push({\n                similarTo: `${otherComponent.name}.${otherMethod.name}`,\n                score: similarityScore - 5,\n                reason: `Similar implementation to ${otherMethod.name} in ${otherComponent.name}`,\n                filePath: otherComponent.filePath || `src/components/${otherComponent.name}.tsx`,\n                code: '// Example method-level similar code\\nfunction specificMethod() {\\n  // Similar logic\\n}'\n              });\n            }\n            \n            // Only add one similarity per component pair to avoid too many\n            break;\n          }\n        }\n      });\n    }\n    \n    // Update the components state with the synthetic data\n    setComponents(updatedComponents);\n    console.log('Synthetic similarity data generated successfully');\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "handleCompare",
        "code": "const handleCompare = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    // Fetch code for components if not already available\n    const loadComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }\n\n    // Set up the comparison\n    Promise.all([\n      loadComponentCode(item.component1, item.isMethodLevel ? item.method1 : undefined),\n      loadComponentCode(item.component2, item.isMethodLevel ? item.method2 : undefined)\n    ]).then(([code1, code2]) => {\n      // Perform direct code comparison to catch identical components\n      // This is a client-side fallback to ensure identical components show as 100% similar\n      let similarity = item.similarity;\n\n      if (code1 && code2) {\n        // Normalize the code by removing whitespace variations\n        const normalizedCode1 = code1.trim().replace(/\\s+/g, ' ');\n        const normalizedCode2 = code2.trim().replace(/\\s+/g, ' ');\n\n        // If codes are identical, set similarity to 100%\n        if (normalizedCode1 === normalizedCode2) {\n          similarity = 100;\n          console.log(`Components detected as identical via client-side check: ${item.component1.name}${item.isMethodLevel ? `.${item.method1}` : ''} and ${item.component2.name}${item.isMethodLevel ? `.${item.method2}` : ''}`);\n        }\n      }\n\n      setSelectedPair({\n        component1: {\n          name: item.component1.name,\n          code: code1,\n          filePath: item.component1.filePath || `components/${item.component1.name}`,\n        },\n        component2: {\n          name: item.component2.name,\n          code: code2,\n          filePath: item.component2.filePath || `components/${item.component2.name}`,\n        },\n        similarity: similarity,\n      })\n      setComparisonOpen(true)\n    })\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "item",
            "type": "{\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }"
          }
        ]
      }
    ]
  },
  {
    "name": "generatePairKey",
    "kind": "function",
    "code": "const generatePairKey = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    if (item.isMethodLevel) {\n      return [\n        `${item.component1.name}.${item.method1}`,\n        `${item.component2.name}.${item.method2}`\n      ].sort().join('_')\n    }\n    return [item.component1.name, item.component2.name].sort().join('_')\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similarity-list.tsx",
    "slug": "src_ui_components_similarity-list_generatepairkey",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "isItemArchived",
    "kind": "function",
    "code": "const isItemArchived = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    const key = generatePairKey(item)\n    return archivedItems.some(archived => archived.key === key)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similarity-list.tsx",
    "slug": "src_ui_components_similarity-list_isitemarchived",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "toggleArchive",
    "kind": "function",
    "code": "const toggleArchive = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    const key = generatePairKey(item)\n    const isArchived = isItemArchived(item)\n    \n    if (isArchived) {\n      setArchivedItems(prev => prev.filter(archived => archived.key !== key))\n    } else {\n      setArchivedItems(prev => [...prev, { key, archivedAt: Date.now() }])\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similarity-list.tsx",
    "slug": "src_ui_components_similarity-list_togglearchive",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "generateSyntheticSimilarityData",
    "kind": "function",
    "code": "function generateSyntheticSimilarityData() {\n    console.log('Generating synthetic similarity data for', components.length, 'components');\n    \n    // Only proceed if we have at least 2 components\n    if (components.length < 2) return;\n    \n    // Create a copy of the components array\n    const updatedComponents = [...components];\n    \n    // For each component, add synthetic similarity warnings\n    for (let i = 0; i < updatedComponents.length; i++) {\n      const component = updatedComponents[i];\n      \n      // Add methods array if it doesn't exist\n      if (!component.methods) {\n        component.methods = [];\n      }\n      \n      // If no methods, create a dummy method\n      if (component.methods.length === 0) {\n        component.methods.push({\n          name: 'render',\n          similarityWarnings: []\n        });\n      }\n      \n      // For each method, find a random other component and create a similarity warning\n      component.methods.forEach(method => {\n        // Initialize similarityWarnings array if it doesn't exist\n        if (!method.similarityWarnings) {\n          method.similarityWarnings = [];\n        }\n        \n        // Find a different component to compare with\n        for (let j = 0; j < updatedComponents.length; j++) {\n          if (i === j) continue; // Skip self\n          \n          const otherComponent = updatedComponents[j];\n          \n          // Generate a random similarity score between 70% and 95%\n          const similarityScore = 70 + Math.floor(Math.random() * 25);\n          \n          // Only add if above threshold\n          if (similarityScore >= threshold) {\n            // Add a similarity warning\n            method.similarityWarnings.push({\n              similarTo: otherComponent.name,\n              score: similarityScore,\n              reason: `Similar implementation pattern to ${otherComponent.name}`,\n              filePath: otherComponent.filePath || `src/components/${otherComponent.name}.tsx`,\n              code: '// Example similar code\\nfunction example() {\\n  // Similar logic\\n}'\n            });\n            \n            // Also add a method-level similarity\n            if (otherComponent.methods && otherComponent.methods.length > 0) {\n              const otherMethod = otherComponent.methods[0];\n              method.similarityWarnings.push({\n                similarTo: `${otherComponent.name}.${otherMethod.name}`,\n                score: similarityScore - 5,\n                reason: `Similar implementation to ${otherMethod.name} in ${otherComponent.name}`,\n                filePath: otherComponent.filePath || `src/components/${otherComponent.name}.tsx`,\n                code: '// Example method-level similar code\\nfunction specificMethod() {\\n  // Similar logic\\n}'\n              });\n            }\n            \n            // Only add one similarity per component pair to avoid too many\n            break;\n          }\n        }\n      });\n    }\n    \n    // Update the components state with the synthetic data\n    setComponents(updatedComponents);\n    console.log('Synthetic similarity data generated successfully');\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similarity-list.tsx",
    "slug": "src_ui_components_similarity-list_generatesyntheticsimilaritydata",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "fetchComponents",
    "kind": "function",
    "code": "async function fetchComponents() {\n      try {\n        console.log('Starting to fetch component data...');\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          console.error(`Failed to fetch component index: ${indexRes.status}`);\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`)\n        }\n        const indexData = await indexRes.json() as ComponentIndex[]\n\n        console.log('Component index loaded:', indexData)\n\n        // Remove duplicate entries based on slug\n        const uniqueComponents = Array.from(\n          new Map(indexData.map((comp) => [comp.slug, comp])).values()\n        ) as ComponentIndex[]\n\n        console.log('Unique components after deduplication:', uniqueComponents.length);\n\n        // Fetch each component's data\n        const componentsData = await Promise.all(\n          uniqueComponents.map(async (comp: ComponentIndex) => {\n            try {\n              const url = `/docs-data/${comp.slug}.json`;\n              console.log(`Fetching component data from: ${url}`);\n              const res = await fetch(url)\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`)\n                return null\n              }\n              const data = await res.json()\n              \n              // Debug - check if this component has similarity warnings\n              if (data.similarityWarnings && data.similarityWarnings.length > 0) {\n                console.log(`Found ${data.similarityWarnings.length} top-level similarity warnings in ${comp.name}`);\n              }\n\n              // Debug - check the structure of the data\n              console.log(`Component ${comp.name} data structure:`, {\n                hasMethods: !!data.methods,\n                methodsLength: data.methods?.length || 0,\n                hasEntities: !!data.entities,\n                entitiesLength: data.entities?.length || 0\n              });\n\n              // Some components might have entities that contain methods with similarity warnings\n              if (data.entities && data.entities.length > 0) {\n                let entitiesWithMethods = 0;\n                let methodsWithWarnings = 0;\n\n                type EntityMethod = {\n                  name: string;\n                  similarityWarnings?: SimilarityWarning[];\n                  code?: string;\n                };\n\n                type Entity = {\n                  methods?: EntityMethod[];\n                  name?: string;\n                  type?: string;\n                };\n\n                data.entities.forEach((entity: Entity) => {\n                  if (entity.methods && entity.methods.length > 0) {\n                    entitiesWithMethods++;\n\n                    entity.methods.forEach((method: EntityMethod) => {\n                      if (method.similarityWarnings && method.similarityWarnings.length > 0) {\n                        methodsWithWarnings++;\n                        console.log(`Found ${method.similarityWarnings.length} warnings in method ${method.name} of entity in ${comp.name}`);\n                      }\n                    });\n                  }\n                });\n\n                if (entitiesWithMethods > 0 || methodsWithWarnings > 0) {\n                  console.log(`Component ${comp.name} has ${entitiesWithMethods} entities with methods and ${methodsWithWarnings} methods with warnings`);\n\n                  // Add the methods from entities to the main methods array for processing\n                  if (!data.methods) {\n                    data.methods = [];\n                  }\n\n                  data.entities.forEach((entity: Entity) => {\n                    if (entity.methods && entity.methods.length > 0) {\n                      data.methods.push(...entity.methods);\n                    }\n                  });\n\n                  console.log(`Updated ${comp.name} methods array to include entity methods, now has ${data.methods.length} methods`);\n                }\n              }\n\n              if (data.methods && data.methods.some((m: { similarityWarnings?: SimilarityWarning[] }) => m.similarityWarnings && m.similarityWarnings.length > 0)) {\n                console.log(`Found method-level similarity warnings in ${comp.name}`);\n              }\n              return data\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err)\n              return null\n            }\n          })\n        )\n\n        // Filter out null results\n        const validComponentsData = componentsData.filter(Boolean) as ComponentData[]\n        console.log('Valid components loaded:', validComponentsData.length)\n\n        setComponents(validComponentsData)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching component data:\", error)\n        setError(`Error loading data: ${error instanceof Error ? error.message : 'Unknown error'}`)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similarity-list.tsx",
    "slug": "src_ui_components_similarity-list_fetchcomponents",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "processSimilarityWarnings",
    "kind": "function",
    "code": "function processSimilarityWarnings(\n      component: ComponentData,\n      warnings: SimilarityWarning[],\n      isMethodLevel: boolean = false,\n      methodName?: string\n    ) {\n      warnings.forEach(warning => {\n        // Convert similarity score from 0-1 to percentage if needed\n        const similarityPercent = warning.score > 1 // Handles if score is already %, unlikely here\n          ? warning.score\n          : Math.round(warning.score * 100) // Converts 0-1 score to %\n\n        // Skip if below threshold\n        if (similarityPercent < threshold) {\n          filteredWarnings++;\n          return;\n        }\n\n        // Extract component name and method name from similarTo (format could be ComponentName or ComponentName.methodName)\n        const parts = warning.similarTo.split('.')\n        const similarCompName = parts[0]\n        const similarMethodName = parts.length > 1 ? parts[1] : undefined\n\n        // Find the referenced component\n        const similarComp = components.find(c => c.name === similarCompName)\n\n        // Include both cross-component and same-component method-level similarities\n        // Only filter out non-method level similarities within the same component\n        if (similarComp && (component.name !== similarComp.name || (isMethodLevel && methodName && similarMethodName))) {\n          if (component.name !== similarComp.name) {\n            crossComponentWarnings++;\n          }\n\n          // Create a unique key for this pair\n          // For method level, include method names in the key to avoid duplication but ensure sort order\n          // to avoid duplicates like A.method1 -> B.method2 and B.method2 -> A.method1\n          const pairKey = isMethodLevel\n            ? [\n              `${component.name}.${methodName}`,\n              `${similarComp.name}.${similarMethodName}`\n            ].sort().join('_')\n            : [component.name, similarComp.name].sort().join('_')\n\n          // Check if we've already seen this pair\n          const existingPair = processedPairs.get(pairKey);\n          if (existingPair) {\n            // If the new similarity is higher, update the entry\n            if (similarityPercent > existingPair.similarity) {\n              processedPairs.set(pairKey, {\n                similarity: similarityPercent,\n                reason: warning.reason, // Update reason as well\n                component1: component, // Keep component references\n                component2: similarComp,\n                isMethodLevel,\n                method1: methodName,\n                method2: similarMethodName\n              });\n            }\n          } else {\n            // Add the new pair\n            processedPairs.set(pairKey, {\n              similarity: similarityPercent,\n              reason: warning.reason,\n              component1: component,\n              component2: similarComp,\n              isMethodLevel,\n              method1: methodName,\n              method2: similarMethodName\n            });\n          }\n        }\n      })\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similarity-list.tsx",
    "slug": "src_ui_components_similarity-list_processsimilaritywarnings",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "preloadComponentCode",
    "kind": "function",
    "code": "const preloadComponentCode = async (component: ComponentData) => {\n        if (component.code) return;\n\n        try {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n          component.code = data.sourceCode || data.code || `// No code available for ${component.name}`\n        } catch (error) {\n          console.error(`Error prefetching code for ${component.name}:`, error)\n        }\n      }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similarity-list.tsx",
    "slug": "src_ui_components_similarity-list_preloadcomponentcode",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleCompare",
    "kind": "function",
    "code": "const handleCompare = (item: {\n    component1: ComponentData\n    component2: ComponentData\n    similarity: number\n    isMethodLevel?: boolean\n    method1?: string\n    method2?: string\n  }) => {\n    // Fetch code for components if not already available\n    const loadComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }\n\n    // Set up the comparison\n    Promise.all([\n      loadComponentCode(item.component1, item.isMethodLevel ? item.method1 : undefined),\n      loadComponentCode(item.component2, item.isMethodLevel ? item.method2 : undefined)\n    ]).then(([code1, code2]) => {\n      // Perform direct code comparison to catch identical components\n      // This is a client-side fallback to ensure identical components show as 100% similar\n      let similarity = item.similarity;\n\n      if (code1 && code2) {\n        // Normalize the code by removing whitespace variations\n        const normalizedCode1 = code1.trim().replace(/\\s+/g, ' ');\n        const normalizedCode2 = code2.trim().replace(/\\s+/g, ' ');\n\n        // If codes are identical, set similarity to 100%\n        if (normalizedCode1 === normalizedCode2) {\n          similarity = 100;\n          console.log(`Components detected as identical via client-side check: ${item.component1.name}${item.isMethodLevel ? `.${item.method1}` : ''} and ${item.component2.name}${item.isMethodLevel ? `.${item.method2}` : ''}`);\n        }\n      }\n\n      setSelectedPair({\n        component1: {\n          name: item.component1.name,\n          code: code1,\n          filePath: item.component1.filePath || `components/${item.component1.name}`,\n        },\n        component2: {\n          name: item.component2.name,\n          code: code2,\n          filePath: item.component2.filePath || `components/${item.component2.name}`,\n        },\n        similarity: similarity,\n      })\n      setComparisonOpen(true)\n    })\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similarity-list.tsx",
    "slug": "src_ui_components_similarity-list_handlecompare",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "loadComponentCode",
        "code": "const loadComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }",
        "returnType": "void",
        "params": [
          {
            "name": "component",
            "type": "ComponentData"
          },
          {
            "name": "methodName",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "loadComponentCode",
    "kind": "function",
    "code": "const loadComponentCode = async (component: ComponentData, methodName?: string) => {\n      try {\n        // If it's a method-level comparison, try to get the specific method code\n        if (methodName) {\n          const res = await fetch(`/docs-data/${component.slug}.json`)\n          const data = await res.json()\n\n          // Look for the method in the methods array\n          if (data.methods) {\n            const method = data.methods.find((m: { name: string; code?: string }) => m.name === methodName)\n            if (method && method.code) {\n              return method.code\n            }\n          }\n\n          // If we couldn't find the method code, fall back to component code\n          console.warn(`Couldn't find method ${methodName} code in ${component.name}, falling back to full component`)\n        }\n\n        // Otherwise, get the whole component code\n        if (component.code) return component.code\n\n        const res = await fetch(`/docs-data/${component.slug}.json`)\n        const data = await res.json()\n        return data.sourceCode || data.code || `// No code available for ${component.name}`\n      } catch (error) {\n        console.error(`Error fetching code for ${component.name}${methodName ? `.${methodName}` : ''}:`, error)\n        return `// Error loading code for ${component.name}${methodName ? `.${methodName}` : ''}`\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similarity-list.tsx",
    "slug": "src_ui_components_similarity-list_loadcomponentcode",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "SimilarComponentsSection",
    "kind": "component",
    "code": "export function SimilarComponentsSection({ components, currentComponent }: SimilarComponentsSectionProps) {\n  const [comparisonOpen, setComparisonOpen] = useState(false)\n  const [selectedComponent, setSelectedComponent] = useState<SimilarComponent | null>(null)\n\n  // Mock code for the similar component - in a real app, you'd fetch this\n  const getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }\n\n  const handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }\n\n  if (!components || components.length === 0) {\n    return null\n  }\n\n  return (\n    <>\n      <div className=\"bg-white dark:bg-slate-900 rounded-xl shadow-sm overflow-hidden\">\n        <div className=\"p-6 border-b border-slate-100 dark:border-slate-800\">\n          <h2 className=\"text-xl font-bold\">Similar Components</h2>\n          <p className=\"text-muted-foreground mt-1\">Components with similar functionality or structure</p>\n        </div>\n\n        <div className=\"divide-y divide-slate-100 dark:divide-slate-800\">\n          {components.map((component) => (\n            <div key={component.name} className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <h3 className=\"font-medium text-lg\">{component.name}</h3>\n                  <Badge\n                    className={`${component.similarity >= 80\n                      ? \"bg-red-50 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800\"\n                      : \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n                      }`}\n                  >\n                    {component.similarity}% Similar\n                  </Badge>\n                </div>\n                <div className=\"flex gap-3\">\n                  <Button asChild variant=\"outline\" size=\"sm\">\n                    <Link href={`/components/${component.slug || component.name.toLowerCase()}`}>View Component</Link>\n                  </Button>\n                  <Button size=\"sm\" className=\"gap-2\" onClick={() => handleCompare(component)}>\n                    <GitCompare className=\"h-4 w-4\" />\n                    Compare\n                  </Button>\n                </div>\n              </div>\n              <p>{component.reason}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {selectedComponent && (\n        <ComparisonModal\n          key={`comparison-${currentComponent.name}-${selectedComponent.name}-${Date.now()}`}\n          isOpen={comparisonOpen}\n          onClose={() => setComparisonOpen(false)}\n          component1={currentComponent}\n          component2={{\n            name: selectedComponent.name,\n            code: getMockCode(selectedComponent.name),\n            filePath: `src/components/${selectedComponent.name}.tsx`,\n          }}\n          similarityScore={selectedComponent.similarity}\n          isMethodComparison={selectedComponent.isMethodLevel}\n          methodName={selectedComponent.methodName}\n        />\n      )}\n    </>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similar-components-section.tsx",
    "slug": "src_ui_components_similar-components-section_similarcomponentssection",
    "imports": [
      "Link",
      "Badge",
      "Button",
      "GitCompare",
      "ComparisonModal"
    ],
    "references": [
      "Badge",
      "Button",
      "Link",
      "GitCompare",
      "ComparisonModal"
    ],
    "relationships": [
      {
        "source": "src_ui_components_similar-components-section_similarcomponentssection",
        "target": "link",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similar-components-section_similarcomponentssection",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similar-components-section_similarcomponentssection",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similar-components-section_similarcomponentssection",
        "target": "gitcompare",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_similar-components-section_similarcomponentssection",
        "target": "comparisonmodal",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": [
      {
        "name": "getMockCode",
        "code": "const getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "componentName",
            "type": "string"
          }
        ]
      },
      {
        "name": "handleCompare",
        "code": "const handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "component",
            "type": "SimilarComponent"
          }
        ]
      }
    ]
  },
  {
    "name": "getMockCode",
    "kind": "function",
    "code": "const getMockCode = (componentName: string) => {\n    return `import React from 'react';\n\nexport function ${componentName}({ title, children }) {\n  return (\n    <div className=\"component-${componentName.toLowerCase()}\">\n      <h2>{title}</h2>\n      <div>{children}</div>\n    </div>\n  );\n}`\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similar-components-section.tsx",
    "slug": "src_ui_components_similar-components-section_getmockcode",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleCompare",
    "kind": "function",
    "code": "const handleCompare = (component: SimilarComponent) => {\n    setSelectedComponent(component)\n    setComparisonOpen(true)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/similar-components-section.tsx",
    "slug": "src_ui_components_similar-components-section_handlecompare",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Sidebar",
    "kind": "component",
    "code": "export function Sidebar() {\n\n  return <SidebarWrapper />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/sidebar.tsx",
    "slug": "src_ui_components_sidebar_sidebar",
    "imports": [
      "SidebarWrapper"
    ],
    "references": [
      "SidebarWrapper"
    ],
    "relationships": [
      {
        "source": "src_ui_components_sidebar_sidebar",
        "target": "sidebarwrapper",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "SidebarWrapper",
    "kind": "component",
    "code": "export function SidebarWrapper() {\n    const pathname = usePathname() || \"\"\n    const searchParams = usePathname()\n\n    const isDocsActive = pathname.startsWith('/docs');\n\n    return (\n        <div className=\"w-64 border-r border-slate-100 dark:border-slate-800 bg-white dark:bg-slate-900 h-screen flex flex-col\">\n            <div className=\"p-6 border-b border-slate-100 dark:border-slate-800\">\n                <Link href=\"/\" className=\"flex items-center gap-2\">\n                    <div className=\"h-8 w-8 rounded-md bg-gradient-to-br from-violet-500 to-indigo-600 flex items-center justify-center\">\n                        <Component className=\"h-4 w-4 text-white\" />\n                    </div>\n                    <h2 className=\"font-bold text-xl\">Code Docs</h2>\n                </Link>\n            </div>\n            <ScrollArea className=\"flex-1\">\n                <div className=\"px-3 py-4\">\n                    <div className=\"space-y-1\">\n                        <Button\n                            variant=\"ghost\"\n                            asChild\n                            className={cn(\n                                \"w-full justify-start gap-2\",\n                                pathname === \"/\" && \"bg-slate-100 dark:bg-slate-800 text-violet-600 dark:text-violet-400\",\n                            )}\n                        >\n                            <Link href=\"/\">\n                                <Network className=\"h-4 w-4\" />\n                                Relationships\n                            </Link>\n                        </Button>\n                        <Button\n                            variant=\"ghost\"\n                            asChild\n                            className={cn(\n                                \"w-full justify-start gap-2\",\n                                pathname === \"/similarity\" && \"bg-slate-100 dark:bg-slate-800 text-violet-600 dark:text-violet-400\",\n                            )}\n                        >\n                            <Link href=\"/similarity\">\n                                <GitCompare className=\"h-4 w-4\" />\n                                Similarity\n                            </Link>\n                        </Button>\n                        <Button\n                            variant=\"ghost\"\n                            asChild\n                            className={cn(\n                                \"w-full justify-start gap-2\",\n                                pathname === \"/structure\" && \"bg-slate-100 dark:bg-slate-800 text-violet-600 dark:text-violet-400\",\n                            )}\n                        >\n                            <Link href=\"/structure\">\n                                <Workflow className=\"h-4 w-4\" />\n                                Architecture\n                            </Link>\n                        </Button>\n                        <Button\n                            variant=\"ghost\"\n                            asChild\n                            className={cn(\n                                \"w-full justify-start gap-2\",\n                                isDocsActive && \"bg-slate-100 dark:bg-slate-800 text-violet-600 dark:text-violet-400\",\n                            )}\n                        >\n                            <Link href=\"/docs\">\n                                <BookOpen className=\"h-4 w-4\" />\n                                Documentation\n                            </Link>\n                        </Button>\n                    </div>\n                </div>\n            </ScrollArea>\n        </div>\n    )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/sidebar-wrapper.tsx",
    "slug": "src_ui_components_sidebar-wrapper_sidebarwrapper",
    "imports": [
      "Link",
      "Button",
      "ScrollArea",
      "LayoutDashboard",
      "GitCompare",
      "Component",
      "Code",
      "FileCode",
      "Layers",
      "Network",
      "BookOpen",
      "Workflow"
    ],
    "references": [
      "Link",
      "ScrollArea",
      "Button",
      "Network",
      "GitCompare",
      "Workflow",
      "BookOpen"
    ],
    "relationships": [
      {
        "source": "src_ui_components_sidebar-wrapper_sidebarwrapper",
        "target": "link",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_sidebar-wrapper_sidebarwrapper",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_sidebar-wrapper_sidebarwrapper",
        "target": "scrollarea",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_sidebar-wrapper_sidebarwrapper",
        "target": "layoutdashboard",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_sidebar-wrapper_sidebarwrapper",
        "target": "gitcompare",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_sidebar-wrapper_sidebarwrapper",
        "target": "component",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_sidebar-wrapper_sidebarwrapper",
        "target": "code",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_sidebar-wrapper_sidebarwrapper",
        "target": "filecode",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_sidebar-wrapper_sidebarwrapper",
        "target": "layers",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_sidebar-wrapper_sidebarwrapper",
        "target": "network",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_sidebar-wrapper_sidebarwrapper",
        "target": "bookopen",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_sidebar-wrapper_sidebarwrapper",
        "target": "workflow",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "getItemIcon",
    "kind": "function",
    "code": "const getItemIcon = (type: SearchItem['type']) => {\n  switch (type) {\n    case 'component':\n      return <Component className=\"h-4 w-4\" />;\n    case 'class':\n      return <CodeIcon className=\"h-4 w-4\" />;\n    case 'function':\n      return <FunctionSquare className=\"h-4 w-4\" />;\n    case 'method':\n    case 'subfunction':\n      return <FileCode className=\"h-4 w-4\" />;\n    default:\n      return <Component className=\"h-4 w-4\" />;\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/search.tsx",
    "slug": "src_ui_components_search_getitemicon",
    "imports": [
      "SearchIcon",
      "Component",
      "CodeIcon",
      "FunctionSquare",
      "FileCode",
      "Clock",
      "Star",
      "Button",
      "CommandDialog",
      "CommandEmpty",
      "CommandGroup",
      "CommandInput",
      "CommandItem",
      "CommandList",
      "Badge"
    ],
    "references": [
      "CodeIcon",
      "FunctionSquare",
      "FileCode",
      "Button",
      "SearchIcon",
      "CommandDialog",
      "CommandInput",
      "CommandList",
      "CommandEmpty",
      "CommandGroup",
      "CommandItem",
      "Badge"
    ],
    "relationships": [
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "component",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "codeicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "functionsquare",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "clock",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "star",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "commanddialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "commandempty",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "commandgroup",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "commandinput",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "commanditem",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "commandlist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_getitemicon",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "object.entries(groupeditems)",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 209,
        "targetFunction": "map"
      }
    ],
    "methods": []
  },
  {
    "name": "Search",
    "kind": "component",
    "code": "export function Search() {\n  const [open, setOpen] = useState(false)\n  const [searchItems, setSearchItems] = useState<SearchItem[]>([])\n  const [loading, setLoading] = useState(false)\n  const [searchQuery, setSearchQuery] = useState('')\n  const router = useRouter()\n\n  useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n    document.addEventListener(\"keydown\", down)\n    return () => document.removeEventListener(\"keydown\", down)\n  }, [])\n\n  useEffect(() => {\n    async function fetchSearchData() {\n      try {\n        setLoading(true)\n        const res = await fetch('/docs-data/component-index.json')\n        if (!res.ok) {\n          console.error(`Failed to fetch component index: ${res.status}`)\n          setLoading(false)\n          return\n        }\n        const indexData = await res.json()\n\n        const allItems: SearchItem[] = []\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string; filePath?: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              if (!detailRes.ok) {\n                allItems.push({ name: comp.name, type: 'component', slug: comp.slug, filePath: comp.filePath, description: '' })\n                return\n              }\n              const detailData: ComponentData = await detailRes.json()\n              allItems.push({\n                name: detailData.name,\n                type: (detailData.type as SearchItem['type']) || 'component',\n                slug: detailData.slug,\n                filePath: detailData.filePath,\n                description: detailData.description\n              })\n              if (detailData.methods && detailData.methods.length > 0) {\n                detailData.methods.forEach(method => {\n                  if (method.name !== comp.name) {\n                    allItems.push({\n                      name: method.name,\n                      type: 'method',\n                      slug: `${comp.slug}#${method.name.toLowerCase().replace(/\\s/g, '-')}`,\n                      parentName: comp.name,\n                      filePath: detailData.filePath,\n                      description: method.description,\n                    })\n                  }\n                })\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n            }\n          })\n        )\n\n        const uniqueItems = allItems.filter((item, index, self) =>\n          index === self.findIndex((t) => (t.slug === item.slug && t.name === item.name))\n        );\n\n        setSearchItems(uniqueItems)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading search data:', error)\n        setLoading(false)\n      }\n    }\n    fetchSearchData()\n  }, [])\n  \n  const [debouncedQuery, setDebouncedQuery] = useState('')\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedQuery(searchQuery)\n    }, 100)\n    return () => clearTimeout(handler)\n  }, [searchQuery])\n\n  const filteredItems = debouncedQuery.length > 0\n    ? searchItems.filter(item =>\n        item.name.toLowerCase().includes(debouncedQuery.toLowerCase()) ||\n        (item.parentName && item.parentName.toLowerCase().includes(debouncedQuery.toLowerCase())) ||\n        (item.filePath && item.filePath.toLowerCase().includes(debouncedQuery.toLowerCase())) ||\n        (item.description && item.description.toLowerCase().includes(debouncedQuery.toLowerCase()))\n      )\n    : []\n\n  const groupedItems = filteredItems.reduce((acc, item) => {\n    const type = item.parentName ? 'Methods & Sub-functions' : 'Components & Functions';\n    if (!acc[type]) {\n      acc[type] = [];\n    }\n    acc[type].push(item);\n    return acc;\n  }, {} as Record<string, SearchItem[]>);\n\n  const runCommand = useCallback((command: () => unknown) => {\n    setOpen(false)\n    command()\n  }, [])\n\n  const handleSelect = (slug: string) => {\n    const [path, fragment] = slug.split('#');\n    router.push(`/components/${path}${fragment ? `#${fragment}` : ''}`);\n  }\n  \n  return (\n    <>\n      <Button\n        variant=\"ghost\"\n        className=\"relative h-10 w-full justify-start rounded-lg text-sm text-muted-foreground sm:pr-12 md:w-64 lg:w-96 bg-background border border-border shadow-sm hover:bg-accent hover:text-accent-foreground\"\n        onClick={() => setOpen(true)}\n      >\n        <SearchIcon className=\"mr-2 h-4 w-4\" />\n        <span className=\"hidden lg:inline-flex\">Search documentation...</span>\n        <span className=\"inline-flex lg:hidden\">Search...</span>\n        <kbd className=\"ml-auto pointer-events-none hidden h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground sm:flex\">\n          <span className=\"text-xs\">⌘</span>K\n        </kbd>\n      </Button>\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput \n          placeholder=\"Type a command or search...\" \n          value={searchQuery}\n          onValueChange={setSearchQuery}\n          className=\"h-12 text-base\"\n        />\n        <CommandList className=\"max-h-[calc(100vh-200px)]\">\n          {loading && debouncedQuery.length === 0 && (\n            <div className=\"py-6 text-center text-sm text-muted-foreground\">\n              Loading components, functions, and more...\n            </div>\n          )}\n          {debouncedQuery.length === 0 && !loading && searchItems.length > 0 && (\n            <div className=\"p-4 text-center text-sm text-muted-foreground\">\n              Start typing to search through {searchItems.length} indexed items.\n            </div>\n          )}\n          {debouncedQuery.length > 0 && filteredItems.length === 0 && !loading && (\n             <CommandEmpty>No results found for \"{debouncedQuery}\".</CommandEmpty>\n          )}\n          \n          {Object.entries(groupedItems).map(([groupName, items]) => (\n            <CommandGroup key={groupName} heading={<span className=\"px-2 py-1.5 text-xs font-semibold text-muted-foreground\">{groupName}</span>}>\n              {items.map((item) => (\n                <CommandItem\n                  key={item.slug}\n                  onSelect={() => runCommand(() => handleSelect(item.slug))}\n                  value={`${item.name} ${item.parentName || ''} ${item.filePath || ''}`}\n                  className=\"group !py-3 !px-4 aria-selected:bg-accent/50\"\n                >\n                  <div className=\"flex items-center gap-3 w-full\">\n                    <div className=\"flex-shrink-0 h-8 w-8 flex items-center justify-center bg-muted/60 group-hover:bg-accent rounded-md transition-colors\">\n                      {getItemIcon(item.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"font-medium text-sm text-foreground truncate\">{item.name}</div>\n                      <div className=\"text-xs text-muted-foreground truncate flex items-center gap-2\">\n                        {item.parentName ? (\n                          <>\n                            <span>In:</span>\n                            <Badge variant=\"outline\" className=\"font-normal\">{item.parentName}</Badge>\n                          </>\n                        ) : item.filePath ? (\n                          <span>{item.filePath}</span>\n                        ) : (\n                          <span>Component</span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          ))}\n        </CommandList>\n      </CommandDialog>\n    </>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/search.tsx",
    "slug": "src_ui_components_search_search",
    "imports": [
      "SearchIcon",
      "Component",
      "CodeIcon",
      "FunctionSquare",
      "FileCode",
      "Clock",
      "Star",
      "Button",
      "CommandDialog",
      "CommandEmpty",
      "CommandGroup",
      "CommandInput",
      "CommandItem",
      "CommandList",
      "Badge"
    ],
    "references": [
      "CodeIcon",
      "FunctionSquare",
      "FileCode",
      "Button",
      "SearchIcon",
      "CommandDialog",
      "CommandInput",
      "CommandList",
      "CommandEmpty",
      "CommandGroup",
      "CommandItem",
      "Badge"
    ],
    "relationships": [
      {
        "source": "src_ui_components_search_search",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "component",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "codeicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "functionsquare",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "clock",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "star",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "commanddialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "commandempty",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "commandgroup",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "commandinput",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "commanditem",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "commandlist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_search_search",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "object.entries(groupeditems)",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 209,
        "targetFunction": "map"
      }
    ],
    "methods": [
      {
        "name": "handleSelect",
        "code": "const handleSelect = (slug: string) => {\n    const [path, fragment] = slug.split('#');\n    router.push(`/components/${path}${fragment ? `#${fragment}` : ''}`);\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "slug",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "down",
    "kind": "function",
    "code": "const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/search.tsx",
    "slug": "src_ui_components_search_down",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "fetchSearchData",
    "kind": "function",
    "code": "async function fetchSearchData() {\n      try {\n        setLoading(true)\n        const res = await fetch('/docs-data/component-index.json')\n        if (!res.ok) {\n          console.error(`Failed to fetch component index: ${res.status}`)\n          setLoading(false)\n          return\n        }\n        const indexData = await res.json()\n\n        const allItems: SearchItem[] = []\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string; filePath?: string }) => {\n            try {\n              const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n              if (!detailRes.ok) {\n                allItems.push({ name: comp.name, type: 'component', slug: comp.slug, filePath: comp.filePath, description: '' })\n                return\n              }\n              const detailData: ComponentData = await detailRes.json()\n              allItems.push({\n                name: detailData.name,\n                type: (detailData.type as SearchItem['type']) || 'component',\n                slug: detailData.slug,\n                filePath: detailData.filePath,\n                description: detailData.description\n              })\n              if (detailData.methods && detailData.methods.length > 0) {\n                detailData.methods.forEach(method => {\n                  if (method.name !== comp.name) {\n                    allItems.push({\n                      name: method.name,\n                      type: 'method',\n                      slug: `${comp.slug}#${method.name.toLowerCase().replace(/\\s/g, '-')}`,\n                      parentName: comp.name,\n                      filePath: detailData.filePath,\n                      description: method.description,\n                    })\n                  }\n                })\n              }\n            } catch (error) {\n              console.error(`Error fetching details for ${comp.name}:`, error)\n            }\n          })\n        )\n\n        const uniqueItems = allItems.filter((item, index, self) =>\n          index === self.findIndex((t) => (t.slug === item.slug && t.name === item.name))\n        );\n\n        setSearchItems(uniqueItems)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading search data:', error)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/search.tsx",
    "slug": "src_ui_components_search_fetchsearchdata",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleSelect",
    "kind": "function",
    "code": "const handleSelect = (slug: string) => {\n    const [path, fragment] = slug.split('#');\n    router.push(`/components/${path}${fragment ? `#${fragment}` : ''}`);\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/search.tsx",
    "slug": "src_ui_components_search_handleselect",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "ModeToggle",
    "kind": "component",
    "code": "export function ModeToggle() {\n  const { setTheme, theme } = useTheme()\n  const [mounted, setMounted] = React.useState(false)\n\n  // useEffect only runs on the client, so now we can safely show the UI\n  React.useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  // Function to handle direct theme toggle between light and dark\n  const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark')\n  }\n\n  if (!mounted) {\n    return <Button variant=\"outline\" size=\"icon\" className=\"border-slate-200 dark:border-slate-700\" />\n  }\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"icon\"\n      className=\"border-slate-200 dark:border-slate-700\"\n      onClick={toggleTheme}\n    >\n      <SunIcon className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <MoonIcon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme (current: {theme})</span>\n    </Button>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/mode-toggle.tsx",
    "slug": "src_ui_components_mode-toggle_modetoggle",
    "imports": [
      "Button",
      "MoonIcon",
      "SunIcon"
    ],
    "references": [
      "Button",
      "SunIcon",
      "MoonIcon"
    ],
    "relationships": [
      {
        "source": "src_ui_components_mode-toggle_modetoggle",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_mode-toggle_modetoggle",
        "target": "moonicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_mode-toggle_modetoggle",
        "target": "sunicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": [
      {
        "name": "toggleTheme",
        "code": "const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark')\n  }",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "toggleTheme",
    "kind": "function",
    "code": "const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark')\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/mode-toggle.tsx",
    "slug": "src_ui_components_mode-toggle_toggletheme",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "McpServerControl",
    "kind": "component",
    "code": "export function McpServerControl() {\n  const [mcpStatus, setMcpStatus] = useState<'stopped' | 'running' | 'loading' | 'error'>('stopped');\n  const [mcpPort, setMcpPort] = useState<number | null>(null);\n  const [mcpConfig, setMcpConfig] = useState<any>(null);\n  const mcpServerPort = 6270;\n\n  useEffect(() => {\n    const fetchMcpConfig = async () => {\n        try {\n            const res = await fetch('/api/mcp/config');\n            if (res.ok) {\n                const config = await res.json();\n                setMcpConfig(config);\n            }\n        } catch (e) {\n            console.error(\"Failed to fetch MCP config\", e);\n        }\n    };\n    fetchMcpConfig();\n  }, []);\n\n  useEffect(() => {\n    const checkStatus = async () => {\n        try {\n            const res = await fetch(`http://localhost:${mcpServerPort}/health`);\n            if (res.ok) {\n                setMcpStatus('running');\n                setMcpPort(mcpServerPort);\n            } else {\n                setMcpStatus('stopped');\n            }\n        } catch (e) {\n            setMcpStatus('stopped');\n        }\n    };\n    checkStatus();\n    const interval = setInterval(checkStatus, 5000); // Check every 5 seconds\n    return () => clearInterval(interval);\n  }, [mcpServerPort]);\n\n  const handleStartMcpServer = async () => {\n    setMcpStatus('loading');\n    try {\n        const res = await fetch('/api/mcp/start', { method: 'POST' });\n        const data = await res.json();\n        if (res.ok) {\n            setMcpStatus('running');\n            setMcpPort(data.port);\n        } else {\n            setMcpStatus('error');\n        }\n    } catch (e) {\n        setMcpStatus('error');\n    }\n  };\n\n  const handleStopMcpServer = async () => {\n    setMcpStatus('loading');\n    try {\n        const res = await fetch('/api/mcp/stop', { method: 'POST' });\n        if (res.ok) {\n            setMcpStatus('stopped');\n            setMcpPort(null);\n        } else {\n            setMcpStatus('error');\n        }\n    } catch (e) {\n        setMcpStatus('error');\n    }\n  };\n  \n  const restApiExample = `\n### Get server health\nGET http://localhost:${mcpServerPort}/health\n\n### Get all code entities\nGET http://localhost:${mcpServerPort}/entities\n  `.trim();\n\n  return (\n    <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n      <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Server className=\"h-5 w-5\" />\n            MCP Server Integration\n          </CardTitle>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Left Column: Control Panel */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-lg\">Control Panel</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Start the server from this UI, or use the JSON config to let your IDE manage it.\n            </p>\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base flex items-center gap-2\">\n                  <Server className=\"h-4 w-4\" />\n                  Server Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"flex items-center justify-between\">\n                <Badge variant={mcpStatus === 'running' ? 'default' : 'outline'}>\n                  <div className={`h-2 w-2 rounded-full mr-2 ${\n                    mcpStatus === 'running' ? 'bg-green-500' :\n                    mcpStatus === 'stopped' ? 'bg-red-500' :\n                    mcpStatus === 'loading' ? 'bg-yellow-500 animate-pulse' :\n                    'bg-gray-500'\n                  }`}></div>\n                  {mcpStatus}\n                </Badge>\n                {mcpStatus === 'running' ? (\n                  <Button size=\"sm\" variant=\"destructive\" onClick={handleStopMcpServer}>\n                    Stop Server\n                  </Button>\n                ) : (\n                  <Button size=\"sm\" onClick={handleStartMcpServer} disabled={mcpStatus === 'loading'}>\n                    Start Server\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n\n            {mcpStatus === 'running' && mcpPort && (\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base flex items-center gap-2\">\n                    <Info className=\"h-4 w-4\" />\n                    Active Endpoints\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm mb-2\">Server is running on <code className=\"bg-slate-100 dark:bg-slate-800 px-1 rounded\">http://localhost:{mcpPort}</code></p>\n                  <ScrollArea className=\"h-24\">\n                    <ul className=\"list-disc list-inside text-sm space-y-1 pr-4\">\n                      <li><code className=\"bg-slate-100 dark:bg-slate-800 px-1 rounded\">GET /health</code></li>\n                      <li><code className=\"bg-slate-100 dark:bg-slate-800 px-1 rounded\">GET /entities</code></li>\n                      <li><code className=\"bg-slate-100 dark:bg-slate-800 px-1 rounded\">GET /entity/:slug</code></li>\n                      <li><code className=\"bg-slate-100 dark:bg-slate-800 px-1 rounded\">POST /similarity</code></li>\n                      <li><code className=\"bg-slate-100 dark:bg-slate-800 px-1 rounded\">POST /completion</code></li>\n                    </ul>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Right Column: Integration Details */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-lg\">Integration</h3>\n            \n            <div>\n              <h4 className=\"font-semibold mb-2\">IDE Configuration</h4>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                  For IDEs like Cursor, use this configuration to connect to the MCP server.\n              </p>\n              <div className=\"bg-slate-900 rounded-lg\">\n                  <CodeBlock \n                      code={mcpConfig ? JSON.stringify(mcpConfig, null, 2) : \"Loading config...\"} \n                      language=\"json\" \n                  />\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-2\">API Usage Example (REST Client)</h4>\n               <p className=\"text-sm text-muted-foreground mb-2\">\n                  Once the server is running, use these examples to interact with it.\n              </p>\n               <div className=\"bg-slate-900 rounded-lg\">\n                  <CodeBlock code={restApiExample} language=\"http\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/mcp-server-control.tsx",
    "slug": "src_ui_components_mcp-server-control_mcpservercontrol",
    "imports": [
      "Card",
      "CardContent",
      "CardHeader",
      "CardTitle",
      "Badge",
      "Button",
      "ScrollArea",
      "Server",
      "Zap",
      "Info",
      "CodeBlock"
    ],
    "references": [
      "Card",
      "CardHeader",
      "CardTitle",
      "Server",
      "CardContent",
      "Badge",
      "Button",
      "Info",
      "ScrollArea",
      "CodeBlock"
    ],
    "relationships": [
      {
        "source": "src_ui_components_mcp-server-control_mcpservercontrol",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_mcp-server-control_mcpservercontrol",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_mcp-server-control_mcpservercontrol",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_mcp-server-control_mcpservercontrol",
        "target": "cardtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_mcp-server-control_mcpservercontrol",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_mcp-server-control_mcpservercontrol",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_mcp-server-control_mcpservercontrol",
        "target": "scrollarea",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_mcp-server-control_mcpservercontrol",
        "target": "server",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_mcp-server-control_mcpservercontrol",
        "target": "zap",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_mcp-server-control_mcpservercontrol",
        "target": "info",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_mcp-server-control_mcpservercontrol",
        "target": "codeblock",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "`-###-get-server-health-get-http://localhost:${mcpserverport}/health-###-get-all-code-entities-get-http://localhost:${mcpserverport}/entities-`",
        "type": "uses",
        "weight": 2,
        "context": "calls trim",
        "sourceLine": 82,
        "targetFunction": "trim"
      }
    ],
    "methods": [
      {
        "name": "handleStartMcpServer",
        "code": "const handleStartMcpServer = async () => {\n    setMcpStatus('loading');\n    try {\n        const res = await fetch('/api/mcp/start', { method: 'POST' });\n        const data = await res.json();\n        if (res.ok) {\n            setMcpStatus('running');\n            setMcpPort(data.port);\n        } else {\n            setMcpStatus('error');\n        }\n    } catch (e) {\n        setMcpStatus('error');\n    }\n  };",
        "returnType": "void",
        "params": []
      },
      {
        "name": "handleStopMcpServer",
        "code": "const handleStopMcpServer = async () => {\n    setMcpStatus('loading');\n    try {\n        const res = await fetch('/api/mcp/stop', { method: 'POST' });\n        if (res.ok) {\n            setMcpStatus('stopped');\n            setMcpPort(null);\n        } else {\n            setMcpStatus('error');\n        }\n    } catch (e) {\n        setMcpStatus('error');\n    }\n  };",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "fetchMcpConfig",
    "kind": "function",
    "code": "const fetchMcpConfig = async () => {\n        try {\n            const res = await fetch('/api/mcp/config');\n            if (res.ok) {\n                const config = await res.json();\n                setMcpConfig(config);\n            }\n        } catch (e) {\n            console.error(\"Failed to fetch MCP config\", e);\n        }\n    };",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/mcp-server-control.tsx",
    "slug": "src_ui_components_mcp-server-control_fetchmcpconfig",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "checkStatus",
    "kind": "function",
    "code": "const checkStatus = async () => {\n        try {\n            const res = await fetch(`http://localhost:${mcpServerPort}/health`);\n            if (res.ok) {\n                setMcpStatus('running');\n                setMcpPort(mcpServerPort);\n            } else {\n                setMcpStatus('stopped');\n            }\n        } catch (e) {\n            setMcpStatus('stopped');\n        }\n    };",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/mcp-server-control.tsx",
    "slug": "src_ui_components_mcp-server-control_checkstatus",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleStartMcpServer",
    "kind": "function",
    "code": "const handleStartMcpServer = async () => {\n    setMcpStatus('loading');\n    try {\n        const res = await fetch('/api/mcp/start', { method: 'POST' });\n        const data = await res.json();\n        if (res.ok) {\n            setMcpStatus('running');\n            setMcpPort(data.port);\n        } else {\n            setMcpStatus('error');\n        }\n    } catch (e) {\n        setMcpStatus('error');\n    }\n  };",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/mcp-server-control.tsx",
    "slug": "src_ui_components_mcp-server-control_handlestartmcpserver",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleStopMcpServer",
    "kind": "function",
    "code": "const handleStopMcpServer = async () => {\n    setMcpStatus('loading');\n    try {\n        const res = await fetch('/api/mcp/stop', { method: 'POST' });\n        if (res.ok) {\n            setMcpStatus('stopped');\n            setMcpPort(null);\n        } else {\n            setMcpStatus('error');\n        }\n    } catch (e) {\n        setMcpStatus('error');\n    }\n  };",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/mcp-server-control.tsx",
    "slug": "src_ui_components_mcp-server-control_handlestopmcpserver",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "InteractiveGraph",
    "kind": "component",
    "code": "export function InteractiveGraph({ nodes, edges, focusNodeId, selectedNodeId, onNodeClick, onNodeHover, onGroupClick, showMinimap = true }: InteractiveGraphProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [scale, setScale] = useState(0.25)\n  const [offset, setOffset] = useState({ x: 0, y: 0 })\n  const [isDragging, setIsDragging] = useState(false)\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 })\n  const [hoveredNode, setHoveredNode] = useState<string | null>(null)\n  const [selectedNode, setSelectedNode] = useState<string | null>(focusNodeId || null)\n  \n  // Update selected node when selectedNodeId prop changes\n  useEffect(() => {\n    setSelectedNode(selectedNodeId || null)\n  }, [selectedNodeId])\n  const [filteredTypes, setFilteredTypes] = useState<Set<string>>(new Set())\n  const [searchTerm, setSearchTerm] = useState('')\n  const [layoutMode, setLayoutMode] = useState<'force' | 'hierarchical' | 'circular' | 'grouped'>('grouped')\n  const [showLabels, setShowLabels] = useState(true)\n  const [showConnectionsOnly, setShowConnectionsOnly] = useState(false)\n  const [nodeSpacing, setNodeSpacing] = useState(250)\n  const [isAutoLayouting, setIsAutoLayouting] = useState(false)\n  const [draggedNode, setDraggedNode] = useState<string | null>(null)\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 })\n  const [draggedGroup, setDraggedGroup] = useState<string | null>(null)\n  const [groupDragOffset, setGroupDragOffset] = useState({ x: 0, y: 0 })\n  const [groupingMode, setGroupingMode] = useState<'none' | 'file' | 'parent'>('file')\n  const [showGroupContainers, setShowGroupContainers] = useState(true)\n  const [edgeStyle, setEdgeStyle] = useState<'straight' | 'curved' | 'step'>('curved')\n  const [focusedGroup, setFocusedGroup] = useState<string | null>(null)\n  const [groupFocusMode, setGroupFocusMode] = useState(false)\n  const [nodeContextMenu, setNodeContextMenu] = useState<{\n    nodeId: string;\n    x: number;\n    y: number;\n    node: Node;\n  } | null>(null)\n  const [groupContextMenu, setGroupContextMenu] = useState<{\n    groupId: string;\n    x: number;\n    y: number;\n    nodes: Node[];\n  } | null>(null)\n  const animationRef = useRef<number>()\n  const nodesRef = useRef<Node[]>(nodes)\n  const edgesRef = useRef<Edge[]>(edges)\n\n  // Physics simulation parameters - adjusted for grouped layouts\n  const FORCE_STRENGTH = layoutMode === 'grouped' ? 0.01 : layoutMode === 'force' ? 0.02 : 0.008\n  const DAMPING = 0.88\n  const CENTER_FORCE = layoutMode === 'grouped' ? 0.001 : layoutMode === 'force' ? 0.003 : 0.001\n\n  // Create groups based on grouping mode\n  const nodeGroups = useMemo(() => {\n    if (groupingMode === 'none') return new Map<string, Node[]>()\n    \n    const groups = new Map<string, Node[]>()\n    \n    if (groupingMode === 'file') {\n      // Group by file path\n      nodes.forEach(node => {\n        let groupKey = 'Unknown'\n        \n        if (node.filePath && node.filePath.trim() !== '') {\n          let filePath = node.filePath\n          \n          // Remove common prefixes to get to the meaningful file path\n          const prefixesToRemove = [\n            '/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/',\n            'src/',\n            './src/',\n            './'\n          ]\n          \n          for (const prefix of prefixesToRemove) {\n            if (filePath.startsWith(prefix)) {\n              filePath = filePath.substring(prefix.length)\n              break\n            }\n          }\n          \n          // Extract the file name from the path\n          const lastSlashIndex = filePath.lastIndexOf('/')\n          let fileName = lastSlashIndex >= 0 ? filePath.substring(lastSlashIndex + 1) : filePath\n          \n          // Remove file extension for cleaner grouping\n          fileName = fileName.replace(/\\.(tsx?|jsx?|js|ts)$/, '')\n          \n          // Handle default fallback paths specially\n          if (filePath.startsWith('components/') && !filePath.includes('/', 'components/'.length)) {\n            // This is a default fallback path like \"components/MyComponent\"\n            groupKey = fileName\n          } else {\n            // Use the file name as the group key\n            groupKey = fileName\n          }\n        } else {\n          // No file path available, group by component type\n          groupKey = `Unknown (${node.type})`\n        }\n        \n        if (!groups.has(groupKey)) {\n          groups.set(groupKey, [])\n        }\n        groups.get(groupKey)!.push(node)\n      })\n    } else if (groupingMode === 'parent') {\n      // Group by parent component (nodes that contain other nodes)\n      const parentMap = new Map<string, string>() // child -> parent\n      \n      edges.forEach(edge => {\n        if (edge.type === 'contains') {\n          parentMap.set(edge.target, edge.source)\n        }\n      })\n      \n      // Group nodes by their parent\n      nodes.forEach(node => {\n        const parent = parentMap.get(node.id) || 'root'\n        if (!groups.has(parent)) {\n          groups.set(parent, [])\n        }\n        groups.get(parent)!.push(node)\n      })\n    }\n    \n    return groups\n  }, [nodes, edges, groupingMode])\n\n  // Update refs when props change and apply layout\n  useEffect(() => {\n    let layoutNodes = [...nodes]\n    \n    if (layoutMode === 'hierarchical') {\n      layoutNodes = applyHierarchicalLayout(layoutNodes, edges)\n    } else if (layoutMode === 'circular') {\n      layoutNodes = applyCircularLayout(layoutNodes)\n    } else if (layoutMode === 'grouped' && groupingMode !== 'none') {\n      layoutNodes = applyGroupedLayout(layoutNodes, nodeGroups)\n    }\n    \n    nodesRef.current = layoutNodes\n    edgesRef.current = edges\n  }, [nodes, edges, layoutMode, nodeGroups, groupingMode])\n  \n  // Calculate tree layout for nodes within a group\n  const calculateTreeLayout = (groupNodes: Node[], spacing: number) => {\n    if (groupNodes.length === 0) return []\n    if (groupNodes.length === 1) return [{ x: 0, y: 0 }]\n    \n    const positions: { x: number, y: number }[] = []\n    \n    // Sort nodes by type and connections for better tree structure\n    const sortedNodes = [...groupNodes].sort((a, b) => {\n      // Primary components at root, functions as branches, methods as leaves\n      const typeOrder = { component: 0, class: 1, function: 2, method: 3 }\n      const aOrder = typeOrder[a.type as keyof typeof typeOrder] ?? 4\n      const bOrder = typeOrder[b.type as keyof typeof typeOrder] ?? 4\n      \n      if (aOrder !== bOrder) return aOrder - bOrder\n      return (b.connections || 0) - (a.connections || 0) // More connected nodes higher\n    })\n    \n    if (sortedNodes.length <= 3) {\n      // Small groups: horizontal line layout with better spacing\n      const actualSpacing = spacing * 1.3 // Increase spacing between nodes\n      const totalWidth = (sortedNodes.length - 1) * actualSpacing\n      sortedNodes.forEach((_, index) => {\n        positions.push({\n          x: -totalWidth / 2 + index * actualSpacing,\n          y: 0\n        })\n      })\n    } else if (sortedNodes.length <= 6) {\n      // Medium groups: 2-level tree structure with improved spacing\n      const root = sortedNodes[0]\n      const children = sortedNodes.slice(1)\n      \n      // Root at top center with more vertical space\n      positions.push({ x: 0, y: -spacing * 1.3 })\n      \n      // Children arranged in a horizontal line below with more spacing\n      const childSpacing = spacing * 1.5 // Increased horizontal spacing\n      const childWidth = (children.length - 1) * childSpacing\n      children.forEach((_, index) => {\n        positions.push({\n          x: -childWidth / 2 + index * childSpacing,\n          y: spacing * 1.1 // Increased vertical spacing\n        })\n      })\n    } else {\n      // Large groups: 3-level tree structure with better spacing\n      const root = sortedNodes[0]\n      const level2Count = Math.min(3, Math.ceil(sortedNodes.length / 3))\n      const level2Nodes = sortedNodes.slice(1, 1 + level2Count)\n      const level3Nodes = sortedNodes.slice(1 + level2Count)\n      \n      // Root at top center with more space\n      positions.push({ x: 0, y: -spacing * 1.5 })\n      \n      // Level 2: spread horizontally with better spacing\n      const level2Spacing = spacing * 1.4\n      const level2Width = (level2Count - 1) * level2Spacing\n      level2Nodes.forEach((_, index) => {\n        positions.push({\n          x: level2Count === 1 ? 0 : -level2Width / 2 + index * level2Spacing,\n          y: -spacing * 0.1 // Slightly below root\n        })\n      })\n      \n      // Level 3: arrange under level 2 nodes with better spacing\n      const nodesPerParent = Math.ceil(level3Nodes.length / level2Count)\n      const childSpacing = spacing * 1.1\n      level3Nodes.forEach((_, index) => {\n        const parentIndex = Math.floor(index / nodesPerParent)\n        const childIndex = index % nodesPerParent\n        const parentX = level2Count === 1 ? 0 : -level2Width / 2 + parentIndex * level2Spacing\n        \n        const siblingCount = Math.min(nodesPerParent, level3Nodes.length - parentIndex * nodesPerParent)\n        const siblingWidth = (siblingCount - 1) * childSpacing\n        \n        positions.push({\n          x: parentX + (siblingCount === 1 ? 0 : -siblingWidth / 2 + childIndex * childSpacing),\n          y: spacing * 1.8 // Increased vertical spacing for level 3\n        })\n      })\n    }\n    \n    return positions\n  }\n\n  const getNodeGradient = (type: string) => {\n    const gradients = {\n      component: ['#10F5CC', '#0EA5E9'], // Cyan to blue gradient\n      class: ['#818CF8', '#6366F1'], // Indigo gradient\n      function: ['#FCD34D', '#F59E0B'], // Yellow gradient\n      method: ['#F472B6', '#EC4899'] // Pink gradient\n    }\n    return gradients[type as keyof typeof gradients] || ['#9CA3AF', '#6B7280']\n  }\n\n  const getEdgeColor = (type: string, opacity = 1) => {\n    const colors = {\n      'uses': `rgba(59, 130, 246, ${opacity})`, // Blue - component uses\n      'inherits': `rgba(147, 51, 234, ${opacity})`, // Purple - inheritance\n      'contains': `rgba(16, 185, 129, ${opacity})` // Green - containment\n    }\n    return colors[type as keyof typeof colors] || `rgba(107, 114, 128, ${opacity})`\n  }\n\n  const applyForces = useCallback(() => {\n    const currentNodes = nodesRef.current\n    const currentEdges = edgesRef.current\n    \n    if (!currentNodes || currentNodes.length === 0) return\n\n    // Reset forces\n    currentNodes.forEach(node => {\n      node.vx = (node.vx || 0) * DAMPING\n      node.vy = (node.vy || 0) * DAMPING\n    })\n\n    // Spring forces for edges\n    currentEdges.forEach(edge => {\n      const sourceNode = currentNodes.find(n => n.id === edge.source)\n      const targetNode = currentNodes.find(n => n.id === edge.target)\n      \n      if (sourceNode && targetNode) {\n        const dx = targetNode.x - sourceNode.x\n        const dy = targetNode.y - sourceNode.y\n        const distance = Math.sqrt(dx * dx + dy * dy)\n        const idealDistance = nodeSpacing * (1 + Math.random() * 0.2) // Add slight randomness to prevent rigid patterns\n        \n        if (distance > 0) {\n          const force = (distance - idealDistance) * FORCE_STRENGTH\n          const forceX = (dx / distance) * force\n          const forceY = (dy / distance) * force\n          \n          sourceNode.vx = (sourceNode.vx || 0) + forceX\n          sourceNode.vy = (sourceNode.vy || 0) + forceY\n          targetNode.vx = (targetNode.vx || 0) - forceX\n          targetNode.vy = (targetNode.vy || 0) - forceY\n        }\n      }\n    })\n\n    // Repulsion forces between nodes (stronger to prevent overlaps)\n    for (let i = 0; i < currentNodes.length; i++) {\n      for (let j = i + 1; j < currentNodes.length; j++) {\n        const nodeA = currentNodes[i]\n        const nodeB = currentNodes[j]\n        \n        const dx = nodeB.x - nodeA.x\n        const dy = nodeB.y - nodeA.y\n        const distance = Math.sqrt(dx * dx + dy * dy)\n        \n        // Adjust distances based on layout mode for better grouping\n        const minDistance = layoutMode === 'grouped' ? nodeSpacing * 0.6 : nodeSpacing * 0.9\n        const repulsionDistance = layoutMode === 'grouped' ? nodeSpacing * 1.2 : nodeSpacing * 1.8\n        \n        if (distance > 0) {\n          let force = 0\n          \n          if (distance < minDistance) {\n            // Adjust repulsion based on layout mode\n            const repulsionStrength = layoutMode === 'grouped' ? 0.1 : 0.15\n            force = (minDistance - distance) * repulsionStrength\n          } else if (distance < repulsionDistance) {\n            // Softer repulsion for grouped layouts\n            const softRepulsion = layoutMode === 'grouped' ? 0.015 : 0.025\n            force = (repulsionDistance - distance) * softRepulsion\n          }\n          \n          if (force > 0) {\n            const forceX = (dx / distance) * force\n            const forceY = (dy / distance) * force\n            \n            nodeA.vx = (nodeA.vx || 0) - forceX\n            nodeA.vy = (nodeA.vy || 0) - forceY\n            nodeB.vx = (nodeB.vx || 0) + forceX\n            nodeB.vy = (nodeB.vy || 0) + forceY\n          }\n        } else {\n          // Nodes at exact same position - push them apart immediately\n          const randomAngle = Math.random() * Math.PI * 2\n          const pushDistance = minDistance * 1.5\n          nodeA.x += Math.cos(randomAngle) * pushDistance * 0.7\n          nodeA.y += Math.sin(randomAngle) * pushDistance * 0.7\n          nodeB.x -= Math.cos(randomAngle) * pushDistance * 0.7\n          nodeB.y -= Math.sin(randomAngle) * pushDistance * 0.7\n        }\n      }\n    }\n\n    // Center force - dynamic based on canvas size\n    const canvas = canvasRef.current\n    const centerX = canvas && canvas.width > 0 ? canvas.width / 2 : 400\n    const centerY = canvas && canvas.height > 0 ? canvas.height / 2 : 300\n    currentNodes.forEach(node => {\n      const dx = centerX - node.x\n      const dy = centerY - node.y\n      node.vx = (node.vx || 0) + dx * CENTER_FORCE\n      node.vy = (node.vy || 0) + dy * CENTER_FORCE\n    })\n\n    // Update positions\n    currentNodes.forEach(node => {\n      if (!node.fx && !node.fy) {\n        node.x += node.vx || 0\n        node.y += node.vy || 0\n      }\n    })\n  }, [nodeSpacing])\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const ctx = canvas.getContext('2d')\n    if (!ctx) return\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    ctx.save()\n\n    // Apply transform\n    ctx.translate(offset.x, offset.y)\n    ctx.scale(scale, scale)\n\n    const currentNodes = nodesRef.current\n    const currentEdges = edgesRef.current\n    const groupBoxes = (currentNodes as any).groupBoxes as Map<string, { x: number, y: number, width: number, height: number }> | undefined\n\n    // Draw group containers first (behind everything else)\n    if (showGroupContainers && groupBoxes && groupingMode !== 'none') {\n      groupBoxes.forEach((box, groupKey) => {\n        ctx.save()\n        \n        const isDraggedGroup = draggedGroup === groupKey\n        const isHoveredGroup = hoveredNode === `group-${groupKey}`\n        const isFocusedGroup = groupFocusMode && focusedGroup === groupKey\n        \n        // Enhanced group container style with better visibility\n        let baseAlpha = isDraggedGroup ? 0.15 : isHoveredGroup ? 0.12 : 0.08\n        let borderAlpha = isDraggedGroup ? 0.6 : isHoveredGroup ? 0.5 : 0.4\n        \n        // Special styling for focused groups\n        if (isFocusedGroup) {\n          baseAlpha = 0.2\n          borderAlpha = 0.8\n        }\n        \n        // Gradient background\n        const gradient = ctx.createLinearGradient(box.x, box.y, box.x + box.width, box.y + box.height)\n        \n        if (isFocusedGroup) {\n          // Amber/orange gradient for focused groups\n          gradient.addColorStop(0, `rgba(245, 158, 11, ${baseAlpha})`)\n          gradient.addColorStop(1, `rgba(217, 119, 6, ${baseAlpha * 0.7})`)\n          ctx.fillStyle = gradient\n          ctx.strokeStyle = `rgba(245, 158, 11, ${borderAlpha})`\n        } else {\n          // Blue/purple gradient for normal groups\n          gradient.addColorStop(0, `rgba(59, 130, 246, ${baseAlpha})`)\n          gradient.addColorStop(1, `rgba(147, 51, 234, ${baseAlpha * 0.7})`)\n          ctx.fillStyle = gradient\n          ctx.strokeStyle = `rgba(59, 130, 246, ${borderAlpha})`\n        }\n        ctx.lineWidth = isDraggedGroup ? 3 : 2\n        ctx.setLineDash(isDraggedGroup ? [12, 6] : [8, 4])\n        \n        // Enhanced shadow for depth\n        if (isDraggedGroup || isHoveredGroup || isFocusedGroup) {\n          ctx.shadowBlur = isFocusedGroup ? 25 : 20\n          ctx.shadowColor = isFocusedGroup ? 'rgba(245, 158, 11, 0.4)' : 'rgba(59, 130, 246, 0.3)'\n          ctx.shadowOffsetX = 0\n          ctx.shadowOffsetY = isFocusedGroup ? 6 : 4\n        }\n        \n        // Draw rounded rectangle for group with larger radius\n        const radius = 24\n        ctx.beginPath()\n        ctx.moveTo(box.x + radius, box.y)\n        ctx.lineTo(box.x + box.width - radius, box.y)\n        ctx.quadraticCurveTo(box.x + box.width, box.y, box.x + box.width, box.y + radius)\n        ctx.lineTo(box.x + box.width, box.y + box.height - radius)\n        ctx.quadraticCurveTo(box.x + box.width, box.y + box.height, box.x + box.width - radius, box.y + box.height)\n        ctx.lineTo(box.x + radius, box.y + box.height)\n        ctx.quadraticCurveTo(box.x, box.y + box.height, box.x, box.y + box.height - radius)\n        ctx.lineTo(box.x, box.y + radius)\n        ctx.quadraticCurveTo(box.x, box.y, box.x + radius, box.y)\n        ctx.closePath()\n        \n        ctx.fill()\n        ctx.stroke()\n        \n        // Reset shadow\n        ctx.shadowBlur = 0\n        ctx.shadowOffsetX = 0\n        ctx.shadowOffsetY = 0\n        \n        // Enhanced group label with better styling\n        ctx.setLineDash([])\n        ctx.font = '14px Inter, sans-serif'\n        ctx.textAlign = 'left'\n        ctx.textBaseline = 'top'\n        \n        // Format group label\n        let label = groupKey\n        if (groupingMode === 'file') {\n          if (groupKey.startsWith('Unknown (')) {\n            label = groupKey\n          } else {\n            label = `📁 ${groupKey}.tsx`\n          }\n        } else if (groupingMode === 'parent') {\n          const parentNode = currentNodes.find(n => n.id === groupKey)\n          label = parentNode ? `🏗️ ${parentNode.name}` : (groupKey === 'root' ? '🌐 Root Components' : groupKey)\n        }\n        \n        // Enhanced label background with gradient\n        const labelPadding = 10\n        const textMetrics = ctx.measureText(label)\n        const labelWidth = textMetrics.width + labelPadding * 2\n        const labelHeight = 28\n        const labelX = box.x + 15\n        const labelY = box.y - 18\n        \n        // Label gradient background\n        const labelGradient = ctx.createLinearGradient(labelX, labelY, labelX + labelWidth, labelY + labelHeight)\n        labelGradient.addColorStop(0, 'rgba(59, 130, 246, 0.95)')\n        labelGradient.addColorStop(1, 'rgba(147, 51, 234, 0.95)')\n        \n        ctx.fillStyle = labelGradient\n        ctx.beginPath()\n        ctx.moveTo(labelX + 8, labelY)\n        ctx.lineTo(labelX + labelWidth - 8, labelY)\n        ctx.quadraticCurveTo(labelX + labelWidth, labelY, labelX + labelWidth, labelY + 8)\n        ctx.lineTo(labelX + labelWidth, labelY + labelHeight - 8)\n        ctx.quadraticCurveTo(labelX + labelWidth, labelY + labelHeight, labelX + labelWidth - 8, labelY + labelHeight)\n        ctx.lineTo(labelX + 8, labelY + labelHeight)\n        ctx.quadraticCurveTo(labelX, labelY + labelHeight, labelX, labelY + labelHeight - 8)\n        ctx.lineTo(labelX, labelY + 8)\n        ctx.quadraticCurveTo(labelX, labelY, labelX + 8, labelY)\n        ctx.closePath()\n        ctx.fill()\n        \n        // Label border\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)'\n        ctx.lineWidth = 1\n        ctx.stroke()\n        \n        // Label text with shadow\n        ctx.shadowBlur = 2\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.5)'\n        ctx.shadowOffsetX = 0\n        ctx.shadowOffsetY = 1\n        \n        ctx.fillStyle = '#ffffff'\n        ctx.font = 'bold 12px Inter, sans-serif'\n        ctx.fillText(label, labelX + labelPadding, labelY + 8)\n        \n        // Drag handle indicator when group is hovered or dragged\n        if (isHoveredGroup || isDraggedGroup) {\n          ctx.shadowBlur = 0\n          ctx.shadowOffsetX = 0\n          ctx.shadowOffsetY = 0\n          \n          const handleSize = 6\n          const handleSpacing = 3\n          const handleX = box.x + box.width - 20\n          const handleY = box.y + 10\n          \n          ctx.fillStyle = 'rgba(255, 255, 255, 0.8)'\n          for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 2; j++) {\n              ctx.beginPath()\n              ctx.arc(\n                handleX + j * (handleSize + handleSpacing),\n                handleY + i * (handleSize + handleSpacing),\n                2,\n                0,\n                2 * Math.PI\n              )\n              ctx.fill()\n            }\n          }\n        }\n        \n        ctx.restore()\n      })\n    }\n\n    // Filter edges for drawing\n    let drawableEdges = currentEdges.filter(edge => !filteredTypes.has(edge.type))\n    \n    // Additional filtering for group focus mode\n    if (groupFocusMode && focusedGroup && nodeGroups.has(focusedGroup)) {\n      const groupMembers = nodeGroups.get(focusedGroup)!\n      const groupMemberIds = new Set(groupMembers.map(n => n.id))\n      \n      // Find all connected nodes first\n      const connectedNodeIds = new Set<string>()\n      groupMemberIds.forEach(memberId => connectedNodeIds.add(memberId))\n      \n      drawableEdges.forEach(edge => {\n        if (groupMemberIds.has(edge.source)) {\n          connectedNodeIds.add(edge.target)\n        }\n        if (groupMemberIds.has(edge.target)) {\n          connectedNodeIds.add(edge.source)\n        }\n      })\n      \n      // Only show edges that connect visible nodes\n      drawableEdges = drawableEdges.filter(edge => \n        connectedNodeIds.has(edge.source) && connectedNodeIds.has(edge.target)\n      )\n    }\n\n    // Draw edges (filtered)\n    drawableEdges.forEach(edge => {\n\n      const sourceNode = currentNodes.find(n => n.id === edge.source)\n      const targetNode = currentNodes.find(n => n.id === edge.target)\n      \n      if (sourceNode && targetNode) {\n        const isHighlighted = selectedNode === edge.source || selectedNode === edge.target\n        const isHovered = hoveredNode === edge.source || hoveredNode === edge.target\n        const opacity = isHighlighted ? 1 : isHovered ? 0.8 : 0.6\n        const edgeWeight = (edge as any).weight || 1\n        const baseWidth = Math.max(1, Math.min(6, edgeWeight))\n        const lineWidth = isHighlighted ? baseWidth + 3 : isHovered ? baseWidth + 1 : baseWidth\n        \n        // Calculate edge positions (from edge of circles, not centers)\n        const dx = targetNode.x - sourceNode.x\n        const dy = targetNode.y - sourceNode.y\n        const distance = Math.sqrt(dx * dx + dy * dy)\n\n        // If distance is zero, nodes are at the same spot. Skip drawing this edge to avoid NaN/Infinity.\n        if (distance === 0) {\n          // console.warn(`Edge between ${sourceNode.id} and ${targetNode.id} has zero length.`); // Optional: for debugging\n          return; // Skip rendering this specific edge\n        }\n        \n        const normalizedDx = dx / distance\n        const normalizedDy = dy / distance\n        \n        const startX = sourceNode.x + normalizedDx * sourceNode.radius\n        const startY = sourceNode.y + normalizedDy * sourceNode.radius\n        const endX = targetNode.x - normalizedDx * targetNode.radius\n        const endY = targetNode.y - normalizedDy * targetNode.radius\n        \n        // Enhanced edge styling\n        const edgeColor = getEdgeColor(edge.type, opacity)\n        \n        if (isHighlighted) {\n          // Glow effect for highlighted edges\n          ctx.shadowBlur = 12\n          ctx.shadowColor = edgeColor\n          ctx.shadowOffsetX = 0\n          ctx.shadowOffsetY = 0\n        }\n        \n        // Draw main edge line\n        ctx.strokeStyle = edgeColor\n        ctx.lineWidth = lineWidth\n        \n        // Different line styles for different relationship types\n        switch (edge.type) {\n          case 'uses':\n            ctx.setLineDash([]) // Solid line for uses\n            break\n          case 'inherits':\n            ctx.setLineDash([12, 3, 3, 3]) // Dash-dot for inheritance\n            break\n          case 'contains':\n            ctx.setLineDash([8, 4]) // Dashed for containment\n            break\n          default:\n            ctx.setLineDash([])\n        }\n        \n        // Draw edge with selected style\n        ctx.beginPath()\n        \n        if (edgeStyle === 'straight') {\n          ctx.moveTo(startX, startY)\n          ctx.lineTo(endX, endY)\n        } else if (edgeStyle === 'curved') {\n          // Curved bezier path\n          const midX = (startX + endX) / 2\n          const midY = (startY + endY) / 2\n          const controlOffset = distance * 0.2\n          const controlX = midX + (dy / distance) * controlOffset\n          const controlY = midY - (dx / distance) * controlOffset\n          \n          ctx.moveTo(startX, startY)\n          ctx.quadraticCurveTo(controlX, controlY, endX, endY)\n        } else if (edgeStyle === 'step') {\n          // Step/orthogonal path\n          const midX = (startX + endX) / 2\n          ctx.moveTo(startX, startY)\n          ctx.lineTo(midX, startY)\n          ctx.lineTo(midX, endY)\n          ctx.lineTo(endX, endY)\n        }\n        \n        ctx.stroke()\n        \n        ctx.shadowBlur = 0\n        ctx.shadowOffsetX = 0\n        ctx.shadowOffsetY = 0\n        \n        // Enhanced arrow for all relationships with size based on weight\n        const angle = Math.atan2(dy, dx)\n        const arrowLength = isHighlighted ? 25 : Math.max(12, 12 + edgeWeight * 2)\n        const arrowAngle = Math.PI / 6\n        \n        // Arrow gradient\n        const arrowGradient = ctx.createLinearGradient(\n          endX - arrowLength * Math.cos(angle),\n          endY - arrowLength * Math.sin(angle),\n          endX,\n          endY\n        )\n        arrowGradient.addColorStop(0, edgeColor)\n        arrowGradient.addColorStop(1, edgeColor.replace(/[\\d.]+\\)$/g, '1)'))\n        \n        ctx.fillStyle = arrowGradient\n        ctx.beginPath()\n        ctx.moveTo(endX, endY)\n        ctx.lineTo(\n          endX - arrowLength * Math.cos(angle - arrowAngle),\n          endY - arrowLength * Math.sin(angle - arrowAngle)\n        )\n        ctx.lineTo(\n          endX - arrowLength * Math.cos(angle + arrowAngle),\n          endY - arrowLength * Math.sin(angle + arrowAngle)\n        )\n        ctx.closePath()\n        ctx.fill()\n        \n        // Relationship type label on highlighted edges\n        if (isHighlighted) {\n          const midX = (startX + endX) / 2\n          const midY = (startY + endY) / 2\n          \n          // Label background\n          const labelPadding = 6\n          const labelText = edge.type.toUpperCase()\n          ctx.font = 'bold 10px Inter, sans-serif'\n          const textMetrics = ctx.measureText(labelText)\n          const labelWidth = textMetrics.width + labelPadding * 2\n          const labelHeight = 16\n          \n          // Background with rounded corners effect\n          ctx.fillStyle = 'rgba(0, 0, 0, 0.8)'\n          ctx.beginPath()\n          if (typeof ctx.roundRect === 'function') {\n            ctx.roundRect(\n              midX - labelWidth / 2,\n              midY - labelHeight / 2,\n              labelWidth,\n              labelHeight,\n              4\n            );\n          } else {\n            ctx.rect(\n              midX - labelWidth / 2,\n              midY - labelHeight / 2,\n              labelWidth,\n              labelHeight\n            );\n          }\n          ctx.fill()\n          \n          // Label text\n          ctx.fillStyle = '#ffffff'\n          ctx.textAlign = 'center'\n          ctx.textBaseline = 'middle'\n          ctx.fillText(labelText, midX, midY)\n        }\n      }\n    })\n\n    // Draw nodes (only visible ones)\n    let visibleNodes: Node[]\n    \n    if (groupFocusMode && focusedGroup && nodeGroups.has(focusedGroup)) {\n      // Group focus mode - show group members and their connected nodes\n      const groupMembers = nodeGroups.get(focusedGroup)!\n      const groupMemberIds = new Set(groupMembers.map(n => n.id))\n      \n      // Find all nodes connected to any group member\n      const connectedNodeIds = new Set<string>()\n      groupMemberIds.forEach(memberId => connectedNodeIds.add(memberId))\n      \n      drawableEdges.forEach(edge => {\n        if (groupMemberIds.has(edge.source)) {\n          connectedNodeIds.add(edge.target)\n        }\n        if (groupMemberIds.has(edge.target)) {\n          connectedNodeIds.add(edge.source)\n        }\n      })\n      \n      visibleNodes = currentNodes.filter(node => connectedNodeIds.has(node.id))\n    } else if (showConnectionsOnly && selectedNode) {\n      visibleNodes = currentNodes.filter(node => \n        node.id === selectedNode ||\n        drawableEdges.some(edge => edge.source === node.id || edge.target === node.id)\n      )\n    } else {\n      visibleNodes = currentNodes.filter(node => \n        !searchTerm || \n        node.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        node.type.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n    \n    visibleNodes.forEach(node => {\n      const isSelected = selectedNode === node.id\n      const isHovered = hoveredNode === node.id\n      const [color1, color2] = getNodeGradient(node.type)\n      \n      // Modern card-based node design\n      ctx.save()\n      \n      const nodeSize = Math.max(90, node.radius * 3.5) // Increased node size for better spacing\n      const cornerRadius = 20\n      \n      // Outer glow for selected/hovered nodes\n      if (isSelected || isHovered) {\n        const glowSize = isSelected ? 20 : 12\n        const glowGradient = ctx.createRadialGradient(\n          node.x, node.y, 0,\n          node.x, node.y, nodeSize + glowSize\n        )\n        glowGradient.addColorStop(0, isSelected ? color1 + '40' : color1 + '20')\n        glowGradient.addColorStop(0.5, isSelected ? color1 + '20' : color1 + '10')\n        glowGradient.addColorStop(1, 'transparent')\n        \n        ctx.fillStyle = glowGradient\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, nodeSize + glowSize, 0, 2 * Math.PI)\n        ctx.fill()\n      }\n      \n      // Modern shadow\n      ctx.shadowBlur = isSelected ? 30 : isHovered ? 20 : 15\n      ctx.shadowColor = 'rgba(0, 0, 0, 0.15)'\n      ctx.shadowOffsetX = 0\n      ctx.shadowOffsetY = isSelected ? 8 : isHovered ? 6 : 4\n      \n      // Main node background - glassmorphism effect\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.95)'\n      ctx.beginPath()\n      if (typeof ctx.roundRect === 'function') {\n        ctx.roundRect(node.x - nodeSize/2, node.y - nodeSize/2, nodeSize, nodeSize, cornerRadius)\n      } else {\n        // Fallback for browsers that don't support roundRect\n        const x = node.x - nodeSize/2\n        const y = node.y - nodeSize/2\n        const r = cornerRadius\n        ctx.moveTo(x + r, y)\n        ctx.lineTo(x + nodeSize - r, y)\n        ctx.quadraticCurveTo(x + nodeSize, y, x + nodeSize, y + r)\n        ctx.lineTo(x + nodeSize, y + nodeSize - r)\n        ctx.quadraticCurveTo(x + nodeSize, y + nodeSize, x + nodeSize - r, y + nodeSize)\n        ctx.lineTo(x + r, y + nodeSize)\n        ctx.quadraticCurveTo(x, y + nodeSize, x, y + nodeSize - r)\n        ctx.lineTo(x, y + r)\n        ctx.quadraticCurveTo(x, y, x + r, y)\n      }\n      ctx.fill()\n      \n      // Reset shadow for inner elements\n      ctx.shadowBlur = 0\n      ctx.shadowOffsetX = 0\n      ctx.shadowOffsetY = 0\n      \n      // Gradient border\n      const borderGradient = ctx.createLinearGradient(\n        node.x - nodeSize/2, node.y - nodeSize/2,\n        node.x + nodeSize/2, node.y + nodeSize/2\n      )\n      borderGradient.addColorStop(0, color1)\n      borderGradient.addColorStop(1, color2)\n      \n      ctx.strokeStyle = borderGradient\n      ctx.lineWidth = isSelected ? 4 : isHovered ? 3 : 2\n      ctx.beginPath()\n      if (typeof ctx.roundRect === 'function') {\n        ctx.roundRect(node.x - nodeSize/2, node.y - nodeSize/2, nodeSize, nodeSize, cornerRadius)\n      } else {\n        // Fallback for browsers that don't support roundRect\n        const x = node.x - nodeSize/2\n        const y = node.y - nodeSize/2\n        const r = cornerRadius\n        ctx.moveTo(x + r, y)\n        ctx.lineTo(x + nodeSize - r, y)\n        ctx.quadraticCurveTo(x + nodeSize, y, x + nodeSize, y + r)\n        ctx.lineTo(x + nodeSize, y + nodeSize - r)\n        ctx.quadraticCurveTo(x + nodeSize, y + nodeSize, x + nodeSize - r, y + nodeSize)\n        ctx.lineTo(x + r, y + nodeSize)\n        ctx.quadraticCurveTo(x, y + nodeSize, x, y + nodeSize - r)\n        ctx.lineTo(x, y + r)\n        ctx.quadraticCurveTo(x, y, x + r, y)\n      }\n      ctx.stroke()\n      \n      // Type icon background\n      const iconBgSize = 24\n      const iconBgGradient = ctx.createLinearGradient(\n        node.x - iconBgSize/2, node.y - nodeSize/2 + 10,\n        node.x + iconBgSize/2, node.y - nodeSize/2 + 10 + iconBgSize\n      )\n      iconBgGradient.addColorStop(0, color1)\n      iconBgGradient.addColorStop(1, color2)\n      \n      ctx.fillStyle = iconBgGradient\n      ctx.beginPath()\n      ctx.arc(node.x, node.y - nodeSize/2 + 22, iconBgSize/2, 0, 2 * Math.PI)\n      ctx.fill()\n      \n      // Type icon\n      ctx.fillStyle = '#ffffff'\n      ctx.font = '14px Inter, system-ui, sans-serif'\n      ctx.textAlign = 'center'\n      ctx.textBaseline = 'middle'\n      \n      const icons = {\n        component: '⚛',\n        class: '◧',\n        function: 'ƒ',\n        method: '◉'\n      }\n      \n      ctx.fillText(icons[node.type as keyof typeof icons] || '◆', node.x, node.y - nodeSize/2 + 22)\n      \n      ctx.restore()\n      \n      \n      // Node label - modern typography\n      if (showLabels || isSelected || isHovered) {\n        ctx.save()\n        \n        // Text background for better readability\n        const textMetrics = ctx.measureText(node.name)\n        const textWidth = Math.min(textMetrics.width, nodeSize - 10)\n        const textHeight = 16\n        \n        ctx.fillStyle = 'rgba(0, 0, 0, 0.02)'\n        roundRect(\n          ctx,\n          node.x - textWidth/2 - 4,\n          node.y - textHeight/2 - 2,\n          textWidth + 8,\n          textHeight + 4,\n          4\n        )\n        ctx.fill()\n        \n        // Node name\n        ctx.fillStyle = '#1f2937'\n        ctx.font = `${isSelected ? '600' : '500'} ${isSelected ? '11px' : '10px'} Inter, system-ui, sans-serif`\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        \n        // Truncate long names\n        let displayName = node.name\n        if (displayName.length > 12) {\n          displayName = displayName.substring(0, 10) + '...'\n        }\n        \n        ctx.fillText(displayName, node.x, node.y)\n        \n        // File path (smaller, below name)\n        if ((isSelected || isHovered) && node.filePath) {\n          ctx.fillStyle = '#9ca3af'\n          ctx.font = '8px Inter, system-ui, sans-serif'\n          const fileName = node.filePath.split('/').pop() || ''\n          ctx.fillText(fileName, node.x, node.y + 14)\n        }\n        \n        ctx.restore()\n      }\n      \n      // Connection count indicator - modern pill style\n      if (node.connections > 0) {\n        ctx.save()\n        \n        const badgeHeight = 20\n        const badgeText = node.connections.toString()\n        ctx.font = '10px Inter, sans-serif'\n        const badgeWidth = Math.max(24, ctx.measureText(badgeText).width + 12)\n        const badgeX = node.x\n        const badgeY = node.y + nodeSize/2 - 10\n        \n        // Badge background\n        ctx.fillStyle = 'rgba(239, 68, 68, 0.1)'\n        ctx.beginPath()\n        roundRect(ctx, badgeX - badgeWidth/2, badgeY - badgeHeight/2, badgeWidth, badgeHeight, badgeHeight/2)\n        ctx.fill()\n        \n        // Badge border\n        ctx.strokeStyle = '#ef4444'\n        ctx.lineWidth = 1\n        ctx.stroke()\n        \n        // Badge text\n        ctx.fillStyle = '#ef4444'\n        ctx.font = '600 10px Inter, sans-serif'\n        ctx.textAlign = 'center'\n        ctx.textBaseline = 'middle'\n        ctx.fillText(badgeText + ' connections', badgeX, badgeY)\n        ctx.restore()\n      }\n      \n    })\n\n    ctx.restore()\n  }, [scale, offset, hoveredNode, selectedNode, filteredTypes, searchTerm, showConnectionsOnly, showLabels, groupingMode, showGroupContainers, groupFocusMode, focusedGroup])\n\n  // Minimap component with proper viewport tracking\n  const MinimapComponent = ({ nodes, edges, scale, offset, canvasRef, selectedNode }: {\n    nodes: Node[]\n    edges: Edge[]\n    scale: number\n    offset: { x: number, y: number }\n    canvasRef: React.RefObject<HTMLCanvasElement>\n    selectedNode: string | null\n  }) => {\n    const minimapCanvasRef = useRef<HTMLCanvasElement>(null)\n    \n    useEffect(() => {\n      const canvas = minimapCanvasRef.current\n      if (!canvas || nodes.length === 0) return\n\n      const ctx = canvas.getContext('2d')\n      if (!ctx) return\n\n      ctx.clearRect(0, 0, 128, 96)\n      \n      // Calculate world bounds\n      const padding = 50\n      const minX = Math.min(...nodes.map(n => n.x)) - padding\n      const maxX = Math.max(...nodes.map(n => n.x)) + padding\n      const minY = Math.min(...nodes.map(n => n.y)) - padding\n      const maxY = Math.max(...nodes.map(n => n.y)) + padding\n      \n      const worldWidth = maxX - minX\n      const worldHeight = maxY - minY\n      const scaleX = 128 / worldWidth\n      const scaleY = 96 / worldHeight\n      const minimapScale = Math.min(scaleX, scaleY)\n      \n      const offsetX = (128 - worldWidth * minimapScale) / 2\n      const offsetY = (96 - worldHeight * minimapScale) / 2\n      \n      // Draw edges\n      ctx.strokeStyle = 'rgba(100, 116, 139, 0.3)'\n      ctx.lineWidth = 1\n      edges.forEach(edge => {\n        const sourceNode = nodes.find(n => n.id === edge.source)\n        const targetNode = nodes.find(n => n.id === edge.target)\n        \n        if (sourceNode && targetNode) {\n          const x1 = offsetX + (sourceNode.x - minX) * minimapScale\n          const y1 = offsetY + (sourceNode.y - minY) * minimapScale\n          const x2 = offsetX + (targetNode.x - minX) * minimapScale\n          const y2 = offsetY + (targetNode.y - minY) * minimapScale\n          \n          ctx.beginPath()\n          ctx.moveTo(x1, y1)\n          ctx.lineTo(x2, y2)\n          ctx.stroke()\n        }\n      })\n      \n      // Draw nodes\n      nodes.forEach(node => {\n        const x = offsetX + (node.x - minX) * minimapScale\n        const y = offsetY + (node.y - minY) * minimapScale\n        const radius = Math.max(1, 2)\n        \n        ctx.fillStyle = node.id === selectedNode ? '#3b82f6' : '#64748b'\n        ctx.beginPath()\n        ctx.arc(x, y, radius, 0, 2 * Math.PI)\n        ctx.fill()\n      })\n    }, [nodes, edges, selectedNode])\n\n    // Calculate viewport indicator position and size\n    const calculateViewport = () => {\n      if (!canvasRef.current || nodes.length === 0) return null\n\n      const canvas = canvasRef.current\n      const padding = 50\n      const minX = Math.min(...nodes.map(n => n.x)) - padding\n      const maxX = Math.max(...nodes.map(n => n.x)) + padding\n      const minY = Math.min(...nodes.map(n => n.y)) - padding\n      const maxY = Math.max(...nodes.map(n => n.y)) + padding\n      \n      const worldWidth = maxX - minX\n      const worldHeight = maxY - minY\n      \n      // Current viewport in world coordinates\n      const viewportLeft = (-offset.x) / scale\n      const viewportTop = (-offset.y) / scale\n      const viewportWidth = canvas.width / scale\n      const viewportHeight = canvas.height / scale\n      \n      // Convert to minimap coordinates (0-100%)\n      const left = Math.max(0, Math.min(100, ((viewportLeft - minX) / worldWidth) * 100))\n      const top = Math.max(0, Math.min(100, ((viewportTop - minY) / worldHeight) * 100))\n      const width = Math.min(100 - left, (viewportWidth / worldWidth) * 100)\n      const height = Math.min(100 - top, (viewportHeight / worldHeight) * 100)\n      \n      return { left, top, width, height }\n    }\n\n    const viewport = calculateViewport()\n    \n    return (\n      <div className=\"absolute top-4 right-4 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm border border-slate-200 dark:border-slate-600 rounded-lg p-2 shadow-lg\">\n        <div className=\"w-32 h-24 relative bg-slate-50 dark:bg-slate-900 rounded overflow-hidden\">\n          <canvas\n            ref={minimapCanvasRef}\n            width={128}\n            height={96}\n            className=\"w-full h-full\"\n            style={{ display: 'block' }}\n          />\n          {/* Viewport indicator */}\n          {viewport && (\n            <div \n              className=\"absolute border-2 border-blue-500 bg-blue-500/20 pointer-events-none\"\n              style={{\n                left: `${viewport.left}%`,\n                top: `${viewport.top}%`,\n                width: `${viewport.width}%`,\n                height: `${viewport.height}%`,\n              }}\n            />\n          )}\n        </div>\n        <div className=\"text-xs text-slate-600 dark:text-slate-400 mt-1 text-center\">\n          Navigation\n        </div>\n      </div>\n    )\n  }\n\n  // Helper function for rounded rectangles\n  const roundRect = (ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number) => {\n    ctx.beginPath()\n    ctx.moveTo(x + radius, y)\n    ctx.lineTo(x + width - radius, y)\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n    ctx.lineTo(x + width, y + height - radius)\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n    ctx.lineTo(x + radius, y + height)\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n    ctx.lineTo(x, y + radius)\n    ctx.quadraticCurveTo(x, y, x + radius, y)\n    ctx.closePath()\n  }\n\n\n  // Layout algorithms\n  const applyHierarchicalLayout = (nodes: Node[], edges: Edge[]) => {\n    const levels = new Map<string, number>()\n    const visited = new Set<string>()\n    \n    // Find root nodes (no incoming edges)\n    const incomingCount = new Map<string, number>()\n    nodes.forEach(node => incomingCount.set(node.id, 0))\n    edges.forEach(edge => {\n      incomingCount.set(edge.target, (incomingCount.get(edge.target) || 0) + 1)\n    })\n    \n    const rootNodes = nodes.filter(node => incomingCount.get(node.id) === 0)\n    \n    // BFS to assign levels\n    const queue = rootNodes.map(node => ({ id: node.id, level: 0 }))\n    \n    while (queue.length > 0) {\n      const { id, level } = queue.shift()!\n      if (visited.has(id)) continue\n      \n      visited.add(id)\n      levels.set(id, level)\n      \n      edges\n        .filter(edge => edge.source === id)\n        .forEach(edge => {\n          if (!visited.has(edge.target)) {\n            queue.push({ id: edge.target, level: level + 1 })\n          }\n        })\n    }\n    \n    // Position nodes by level\n    const levelGroups = new Map<number, string[]>()\n    levels.forEach((level, nodeId) => {\n      if (!levelGroups.has(level)) levelGroups.set(level, [])\n      levelGroups.get(level)!.push(nodeId)\n    })\n    \n    return nodes.map(node => {\n      const level = levels.get(node.id) || 0\n      const nodesAtLevel = levelGroups.get(level) || []\n      const index = nodesAtLevel.indexOf(node.id)\n      \n      const levelSpacing = nodeSpacing * 1.8\n      const nodeSpacingInLevel = nodeSpacing * 0.8\n      \n      return {\n        ...node,\n        x: 150 + level * levelSpacing,\n        y: 100 + (index * nodeSpacingInLevel) - ((nodesAtLevel.length - 1) * nodeSpacingInLevel / 2),\n        fx: layoutMode === 'hierarchical' ? 150 + level * levelSpacing : null,\n        fy: layoutMode === 'hierarchical' ? 100 + (index * nodeSpacingInLevel) - ((nodesAtLevel.length - 1) * nodeSpacingInLevel / 2) : null\n      }\n    })\n  }\n  \n  const applyCircularLayout = (nodes: Node[]) => {\n    const centerX = 400\n    const centerY = 300\n    const radius = Math.max(nodeSpacing, 100 + nodes.length * (nodeSpacing / 10))\n    \n    return nodes.map((node, index) => {\n      const angle = (2 * Math.PI * index) / nodes.length - Math.PI / 2\n      return {\n        ...node,\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle),\n        fx: layoutMode === 'circular' ? centerX + radius * Math.cos(angle) : null,\n        fy: layoutMode === 'circular' ? centerY + radius * Math.sin(angle) : null\n      }\n    })\n  }\n  \n  // Advanced force-directed layout with group constraints and proper spacing\n  const applyAdvancedForceLayout = (nodes: Node[], groups: Map<string, Node[]>) => {\n    const layoutNodes = [...nodes]\n    const groupBoxes = new Map<string, { x: number, y: number, width: number, height: number, centerX: number, centerY: number, fixed?: boolean }>()\n    \n    // Calculate optimal group sizing and positioning\n    const groupKeys = Array.from(groups.keys())\n    const numGroups = groupKeys.length\n    \n    if (numGroups === 0) return layoutNodes\n    \n    // Calculate average node size for spacing calculations\n    const avgNodeRadius = nodes.length > 0 ? nodes.reduce((sum, node) => sum + node.radius, 0) / nodes.length : 20\n    const minNodeSpacing = Math.max(avgNodeRadius * 3, 80) // Minimum distance between node centers\n    \n    // Dynamic grid sizing based on group count and sizes\n    const gridSize = Math.max(2, Math.ceil(Math.sqrt(numGroups * 1.2))) // Slightly larger grid for better spacing\n    \n    // Calculate required spacing based on largest groups\n    const maxNodesInAnyGroup = Math.max(...Array.from(groups.values()).map(nodes => nodes.length))\n    const estimatedGroupSize = calculateOptimalGroupSize(maxNodesInAnyGroup, minNodeSpacing)\n    const groupSpacing = Math.max(estimatedGroupSize + 100, nodeSpacing * 4)\n    \n    const startX = 300\n    const startY = 300\n    \n    groupKeys.forEach((groupKey, groupIndex) => {\n      const groupNodes = groups.get(groupKey) || []\n      const numNodesInGroup = groupNodes.length\n      \n      // Calculate group position in grid\n      const gridRow = Math.floor(groupIndex / gridSize)\n      const gridCol = groupIndex % gridSize\n      const groupCenterX = startX + gridCol * groupSpacing\n      const groupCenterY = startY + gridRow * groupSpacing\n      \n      // Calculate optimal group dimensions for this specific group\n      const optimalSize = calculateOptimalGroupSize(numNodesInGroup, minNodeSpacing)\n      const groupPadding = Math.max(50, avgNodeRadius * 2) // Generous padding\n      \n      // Layout nodes within the group using enhanced algorithm\n      const nodePositions = calculateOptimalNodePositions(\n        numNodesInGroup, \n        groupCenterX, \n        groupCenterY, \n        optimalSize, \n        minNodeSpacing\n      )\n      \n      groupNodes.forEach((node, nodeIndex) => {\n        const layoutNode = layoutNodes.find(n => n.id === node.id)\n        if (layoutNode && nodePositions[nodeIndex]) {\n          layoutNode.x = nodePositions[nodeIndex].x\n          layoutNode.y = nodePositions[nodeIndex].y\n        }\n      })\n      \n      // Apply overlap resolution within the group\n      resolveInternalNodeOverlaps(groupNodes, layoutNodes, minNodeSpacing)\n      \n      // Calculate actual bounding box based on final node positions\n      const groupNodePositions = groupNodes.map(node => {\n        const layoutNode = layoutNodes.find(n => n.id === node.id)\n        return layoutNode ? { x: layoutNode.x, y: layoutNode.y, radius: layoutNode.radius } : { x: groupCenterX, y: groupCenterY, radius: avgNodeRadius }\n      })\n      \n      if (groupNodePositions.length > 0) {\n        const minX = Math.min(...groupNodePositions.map(p => p.x - p.radius)) - groupPadding\n        const maxX = Math.max(...groupNodePositions.map(p => p.x + p.radius)) + groupPadding\n        const minY = Math.min(...groupNodePositions.map(p => p.y - p.radius)) - groupPadding\n        const maxY = Math.max(...groupNodePositions.map(p => p.y + p.radius)) + groupPadding\n        \n        const width = Math.max(optimalSize, maxX - minX)\n        const height = Math.max(optimalSize, maxY - minY)\n        \n        groupBoxes.set(groupKey, {\n          x: groupCenterX - width / 2,\n          y: groupCenterY - height / 2,\n          width,\n          height,\n          centerX: groupCenterX,\n          centerY: groupCenterY\n        })\n      }\n    })\n    \n    // Apply group collision detection and adjustment\n    const adjustedGroups = resolveGroupCollisions(groupBoxes, groups, layoutNodes)\n    \n    // Store group boxes for drawing\n    ;(layoutNodes as any).groupBoxes = adjustedGroups\n    \n    return layoutNodes\n  }\n\n  // Calculate optimal group size based on number of nodes and spacing requirements\n  const calculateOptimalGroupSize = (numNodes: number, minSpacing: number): number => {\n    if (numNodes <= 1) return Math.max(120, minSpacing * 2)\n    \n    // Calculate area needed for nodes with proper spacing\n    const nodeArea = numNodes * Math.PI * Math.pow(minSpacing / 2, 2)\n    const baseRadius = Math.sqrt(nodeArea / Math.PI)\n    \n    // Add extra space for better distribution and visual appeal\n    const scaleFactor = Math.max(1.5, 1 + Math.log(numNodes) * 0.2)\n    return Math.max(180, baseRadius * 2 * scaleFactor)\n  }\n\n  // Calculate optimal positions for nodes within a group\n  const calculateOptimalNodePositions = (\n    numNodes: number, \n    centerX: number, \n    centerY: number, \n    groupSize: number, \n    minSpacing: number\n  ): Array<{ x: number, y: number }> => {\n    const positions: Array<{ x: number, y: number }> = []\n    \n    if (numNodes === 1) {\n      positions.push({ x: centerX, y: centerY })\n      return positions\n    }\n    \n    if (numNodes === 2) {\n      const spacing = minSpacing * 0.8\n      positions.push({ x: centerX - spacing / 2, y: centerY })\n      positions.push({ x: centerX + spacing / 2, y: centerY })\n      return positions\n    }\n    \n    if (numNodes <= 6) {\n      // Circular arrangement for small groups\n      const radius = Math.min(groupSize / 3, minSpacing * 0.7)\n      for (let i = 0; i < numNodes; i++) {\n        const angle = (2 * Math.PI * i) / numNodes\n        positions.push({\n          x: centerX + radius * Math.cos(angle),\n          y: centerY + radius * Math.sin(angle)\n        })\n      }\n      return positions\n    }\n    \n    // For larger groups, use a hybrid approach: rings + spiral\n    const innerRingSize = 6\n    const outerNodes = numNodes - innerRingSize\n    \n    // Inner ring\n    const innerRadius = minSpacing * 0.6\n    for (let i = 0; i < innerRingSize; i++) {\n      const angle = (2 * Math.PI * i) / innerRingSize\n      positions.push({\n        x: centerX + innerRadius * Math.cos(angle),\n        y: centerY + innerRadius * Math.sin(angle)\n      })\n    }\n    \n    // Outer spiral for remaining nodes\n    const maxRadius = groupSize / 2.5\n    const spiralTightness = 0.5\n    const angleStep = (2 * Math.PI) / 6 // Base angle step\n    \n    for (let i = 0; i < outerNodes; i++) {\n      const spiralProgress = i / outerNodes\n      const radius = innerRadius + (maxRadius - innerRadius) * Math.sqrt(spiralProgress)\n      const angle = angleStep * i + spiralProgress * Math.PI * spiralTightness\n      \n      positions.push({\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      })\n    }\n    \n    return positions\n  }\n\n  // Resolve overlaps between nodes within a group\n  const resolveInternalNodeOverlaps = (\n    groupNodes: Node[], \n    layoutNodes: Node[], \n    minSpacing: number\n  ) => {\n    const maxIterations = 5\n    const groupLayoutNodes = groupNodes.map(node => layoutNodes.find(n => n.id === node.id)).filter(Boolean) as Node[]\n    \n    for (let iteration = 0; iteration < maxIterations; iteration++) {\n      let hasOverlaps = false\n      \n      for (let i = 0; i < groupLayoutNodes.length; i++) {\n        for (let j = i + 1; j < groupLayoutNodes.length; j++) {\n          const nodeA = groupLayoutNodes[i]\n          const nodeB = groupLayoutNodes[j]\n          \n          const dx = nodeB.x - nodeA.x\n          const dy = nodeB.y - nodeA.y\n          const distance = Math.sqrt(dx * dx + dy * dy)\n          const requiredDistance = minSpacing\n          \n          if (distance < requiredDistance && distance > 0) {\n            hasOverlaps = true\n            \n            const overlap = requiredDistance - distance\n            const separationForce = overlap * 0.5\n            const normalX = dx / distance\n            const normalY = dy / distance\n            \n            nodeA.x -= normalX * separationForce\n            nodeA.y -= normalY * separationForce\n            nodeB.x += normalX * separationForce\n            nodeB.y += normalY * separationForce\n          } else if (distance === 0) {\n            // Handle exact overlap\n            const randomAngle = Math.random() * 2 * Math.PI\n            const pushDistance = minSpacing / 2\n            nodeA.x += Math.cos(randomAngle) * pushDistance\n            nodeA.y += Math.sin(randomAngle) * pushDistance\n            nodeB.x -= Math.cos(randomAngle) * pushDistance\n            nodeB.y -= Math.sin(randomAngle) * pushDistance\n            hasOverlaps = true\n          }\n        }\n      }\n      \n      if (!hasOverlaps) break\n    }\n  }\n\n  // Resolve collisions between group boxes with enhanced algorithm\n  const resolveGroupCollisions = (groupBoxes: Map<string, any>, groups?: Map<string, Node[]>, layoutNodes?: Node[]) => {\n    const boxes = Array.from(groupBoxes.entries())\n    const maxIterations = 25 // More iterations for better separation\n    \n    // Store original positions to track movement\n    const originalPositions = new Map()\n    boxes.forEach(([key, box]) => {\n      originalPositions.set(key, { x: box.x, y: box.y, centerX: box.centerX, centerY: box.centerY })\n    })\n    \n    for (let iteration = 0; iteration < maxIterations; iteration++) {\n      let hasCollisions = false\n      \n      for (let i = 0; i < boxes.length; i++) {\n        for (let j = i + 1; j < boxes.length; j++) {\n          const [, boxA] = boxes[i]\n          const [, boxB] = boxes[j]\n          \n          // Increased padding between groups to prevent overlapping\n          const avgSize = (boxA.width + boxA.height + boxB.width + boxB.height) / 4\n          const padding = Math.max(120, avgSize * 0.25) // Much larger padding\n          \n          if (boxA.x < boxB.x + boxB.width + padding &&\n              boxA.x + boxA.width + padding > boxB.x &&\n              boxA.y < boxB.y + boxB.height + padding &&\n              boxA.y + boxA.height + padding > boxB.y) {\n            \n            hasCollisions = true\n            \n            // Calculate push direction and force\n            const centerAX = boxA.x + boxA.width / 2\n            const centerAY = boxA.y + boxA.height / 2\n            const centerBX = boxB.x + boxB.width / 2\n            const centerBY = boxB.y + boxB.height / 2\n            \n            const dx = centerBX - centerAX\n            const dy = centerBY - centerAY\n            const distance = Math.sqrt(dx * dx + dy * dy)\n            \n            if (distance > 0) {\n              // Calculate required separation distance\n              const requiredDistanceX = (boxA.width + boxB.width) / 2 + padding\n              const requiredDistanceY = (boxA.height + boxB.height) / 2 + padding\n              const requiredDistance = Math.sqrt(requiredDistanceX * requiredDistanceX + requiredDistanceY * requiredDistanceY)\n              \n              if (distance < requiredDistance) {\n                const overlap = requiredDistance - distance\n                const pushDistance = Math.max(80, overlap * 1.2) // Much stronger separation\n                const normalX = dx / distance\n                const normalY = dy / distance\n                \n                // Apply stronger separation force\n                boxA.x -= normalX * pushDistance / 2\n                boxA.y -= normalY * pushDistance / 2\n                boxA.centerX = boxA.x + boxA.width / 2\n                boxA.centerY = boxA.y + boxA.height / 2\n                \n                boxB.x += normalX * pushDistance / 2\n                boxB.y += normalY * pushDistance / 2\n                boxB.centerX = boxB.x + boxB.width / 2\n                boxB.centerY = boxB.y + boxB.height / 2\n              }\n            } else {\n              // Handle exact center overlap\n              const randomAngle = Math.random() * 2 * Math.PI\n              const pushDistance = Math.max(150, avgSize * 0.8) // Stronger random separation\n              \n              boxA.x -= Math.cos(randomAngle) * pushDistance / 2\n              boxA.y -= Math.sin(randomAngle) * pushDistance / 2\n              boxA.centerX = boxA.x + boxA.width / 2\n              boxA.centerY = boxA.y + boxA.height / 2\n              \n              boxB.x += Math.cos(randomAngle) * pushDistance / 2\n              boxB.y += Math.sin(randomAngle) * pushDistance / 2\n              boxB.centerX = boxB.x + boxB.width / 2\n              boxB.centerY = boxB.y + boxB.height / 2\n            }\n          }\n        }\n      }\n      \n      if (!hasCollisions) break\n    }\n    \n    // Move nodes along with their groups if collision resolution moved them\n    if (groups && layoutNodes) {\n      boxes.forEach(([groupKey, box]) => {\n        const originalPos = originalPositions.get(groupKey)\n        if (originalPos) {\n          const deltaX = box.centerX - originalPos.centerX\n          const deltaY = box.centerY - originalPos.centerY\n          \n          // Only move nodes if the group was significantly moved\n          if (Math.abs(deltaX) > 5 || Math.abs(deltaY) > 5) {\n            const groupNodes = groups.get(groupKey) || []\n            groupNodes.forEach(groupNode => {\n              const layoutNode = layoutNodes.find(n => n.id === groupNode.id)\n              if (layoutNode) {\n                layoutNode.x += deltaX\n                layoutNode.y += deltaY\n              }\n            })\n          }\n        }\n      })\n    }\n    \n    // Update the map with adjusted positions\n    const adjustedMap = new Map()\n    boxes.forEach(([key, box]) => {\n      adjustedMap.set(key, box)\n    })\n    \n    return adjustedMap\n  }\n\n  // Function to resolve node overlaps within a group\n  const resolveNodeOverlapsInGroup = (groupNodes: Node[], groupCenterX: number, groupCenterY: number, spacing: number) => {\n    const minDistance = spacing * 0.7 // Minimum distance between node centers\n    const maxIterations = 30\n    \n    for (let iteration = 0; iteration < maxIterations; iteration++) {\n      let hasOverlaps = false\n      \n      for (let i = 0; i < groupNodes.length; i++) {\n        for (let j = i + 1; j < groupNodes.length; j++) {\n          const nodeA = groupNodes[i]\n          const nodeB = groupNodes[j]\n          \n          const dx = nodeB.x - nodeA.x\n          const dy = nodeB.y - nodeA.y\n          const distance = Math.sqrt(dx * dx + dy * dy)\n          const requiredDistance = Math.max(minDistance, (nodeA.radius + nodeB.radius) * 2.2) // Ensure nodes don't visually overlap\n          \n          if (distance < requiredDistance) {\n            hasOverlaps = true\n            \n            // Calculate separation vector\n            if (distance > 0) {\n              const overlap = requiredDistance - distance\n              const separationX = (dx / distance) * overlap * 0.6\n              const separationY = (dy / distance) * overlap * 0.6\n              \n              // Move nodes apart\n              nodeA.x -= separationX / 2\n              nodeA.y -= separationY / 2\n              nodeB.x += separationX / 2\n              nodeB.y += separationY / 2\n            } else {\n              // Handle exact same position\n              const angle = Math.random() * 2 * Math.PI\n              const separation = requiredDistance / 2\n              \n              nodeA.x = groupCenterX - Math.cos(angle) * separation\n              nodeA.y = groupCenterY - Math.sin(angle) * separation\n              nodeB.x = groupCenterX + Math.cos(angle) * separation\n              nodeB.y = groupCenterY + Math.sin(angle) * separation\n            }\n          }\n        }\n      }\n      \n      if (!hasOverlaps) break\n    }\n    \n    // Apply gentle centering force to keep nodes roughly centered in group\n    const currentCenterX = groupNodes.reduce((sum, node) => sum + node.x, 0) / groupNodes.length\n    const currentCenterY = groupNodes.reduce((sum, node) => sum + node.y, 0) / groupNodes.length\n    \n    const offsetX = groupCenterX - currentCenterX\n    const offsetY = groupCenterY - currentCenterY\n    \n    // Apply a gentle centering adjustment\n    groupNodes.forEach(node => {\n      node.x += offsetX * 0.3\n      node.y += offsetY * 0.3\n    })\n  }\n\n  const applyGroupedLayout = (nodes: Node[], groups: Map<string, Node[]>) => {\n    const layoutNodes = [...nodes]\n    const groupBoxes = new Map()\n    const canvas = canvasRef.current\n    const canvasWidth = canvas ? canvas.width : 1200\n    const canvasHeight = canvas ? canvas.height : 800\n    \n    // Calculate initial group positions with proper spacing\n    const groupEntries = Array.from(groups.entries()).filter(([_, nodes]) => nodes.length > 0)\n    const groupsPerRow = Math.min(3, Math.ceil(Math.sqrt(groupEntries.length))) // Max 3 groups per row\n    const groupPadding = 200 // Large padding between groups\n    const availableWidth = canvasWidth - groupPadding * 2\n    const availableHeight = canvasHeight - groupPadding * 2\n    const groupWidth = availableWidth / groupsPerRow\n    const groupHeight = availableHeight / Math.ceil(groupEntries.length / groupsPerRow)\n    \n    groupEntries.forEach(([groupKey, groupNodes], groupIndex) => {\n      if (groupNodes.length === 0) return\n      \n      // Calculate this group's center position with padding\n      const row = Math.floor(groupIndex / groupsPerRow)\n      const col = groupIndex % groupsPerRow\n      const groupCenterX = groupPadding + (col + 0.5) * groupWidth\n      const groupCenterY = groupPadding + (row + 0.5) * groupHeight\n      \n      // Get tree layout positions relative to center with better spacing\n      const internalSpacing = nodeSpacing * 1.2 // Increased from 0.8 to 1.2 for more space\n      const treePositions = calculateTreeLayout(groupNodes, internalSpacing)\n      \n      // Apply absolute positions to nodes within this group\n      groupNodes.forEach((node, index) => {\n        const layoutNode = layoutNodes.find(n => n.id === node.id)\n        if (layoutNode && treePositions[index]) {\n          // Position nodes relative to group center\n          layoutNode.x = groupCenterX + treePositions[index].x\n          layoutNode.y = groupCenterY + treePositions[index].y\n        }\n      })\n      \n      // Resolve node overlaps within this group\n      const groupLayoutNodes = groupNodes.map(node => \n        layoutNodes.find(n => n.id === node.id)\n      ).filter(Boolean) as Node[]\n      \n      resolveNodeOverlapsInGroup(groupLayoutNodes, groupCenterX, groupCenterY, internalSpacing)\n      \n      // Calculate group container after positioning and overlap resolution\n      const groupNodePositions = groupLayoutNodes.map(node => ({\n        x: node.x,\n        y: node.y,\n        radius: node.radius\n      }))\n      \n      if (groupNodePositions.length > 0) {\n        const padding = 120 // More generous padding for group containers to accommodate spacing\n        const minX = Math.min(...groupNodePositions.map(p => p.x - p.radius)) - padding\n        const maxX = Math.max(...groupNodePositions.map(p => p.x + p.radius)) + padding\n        const minY = Math.min(...groupNodePositions.map(p => p.y - p.radius)) - padding\n        const maxY = Math.max(...groupNodePositions.map(p => p.y + p.radius)) + padding\n        \n        groupBoxes.set(groupKey, {\n          x: minX,\n          y: minY,\n          width: maxX - minX,\n          height: maxY - minY,\n          centerX: (minX + maxX) / 2,\n          centerY: (minY + maxY) / 2\n        })\n      }\n    })\n    \n    // Apply collision resolution and move nodes with their groups\n    const resolvedBoxes = resolveGroupCollisions(groupBoxes, groups, layoutNodes)\n    \n    // Attach resolved group boxes to nodes for rendering\n    ;(layoutNodes as any).groupBoxes = resolvedBoxes\n    \n    return layoutNodes\n  }\n\n  // Check if two nodes overlap\n  const nodesOverlap = (node1: Node, node2: Node, minDistance: number) => {\n    const dx = node1.x - node2.x\n    const dy = node1.y - node2.y\n    const distance = Math.sqrt(dx * dx + dy * dy)\n    return distance < minDistance\n  }\n\n  // Find a non-overlapping position for a node\n  const findNonOverlappingPosition = (node: Node, otherNodes: Node[], centerX: number, centerY: number, minDistance: number, maxAttempts = 50) => {\n    let bestPosition = { x: node.x, y: node.y }\n    let bestDistance = 0\n    \n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\n      // Try different positions around the center\n      const angle = (Math.PI * 2 * attempt) / maxAttempts\n      const radius = minDistance + (attempt * 20)\n      const testX = centerX + Math.cos(angle) * radius\n      const testY = centerY + Math.sin(angle) * radius\n      \n      // Check if this position overlaps with any other node\n      let overlaps = false\n      let minDistanceToOthers = Infinity\n      \n      for (const otherNode of otherNodes) {\n        if (otherNode.id === node.id) continue\n        \n        const distance = Math.sqrt((testX - otherNode.x) ** 2 + (testY - otherNode.y) ** 2)\n        minDistanceToOthers = Math.min(minDistanceToOthers, distance)\n        \n        if (distance < minDistance) {\n          overlaps = true\n          break\n        }\n      }\n      \n      if (!overlaps) {\n        return { x: testX, y: testY }\n      }\n      \n      // Keep track of the best position (furthest from other nodes)\n      if (minDistanceToOthers > bestDistance) {\n        bestDistance = minDistanceToOthers\n        bestPosition = { x: testX, y: testY }\n      }\n    }\n    \n    return bestPosition\n  }\n\n  // Auto-layout function to clean up node positions\n  const autoLayout = useCallback(() => {\n    setIsAutoLayouting(true)\n    \n    const currentNodes = nodesRef.current\n    if (!currentNodes || currentNodes.length === 0) {\n      setIsAutoLayouting(false)\n      return\n    }\n\n    // Clear any fixed positions\n    currentNodes.forEach(node => {\n      node.fx = null\n      node.fy = null\n      node.vx = 0\n      node.vy = 0\n    })\n\n    const minDistance = nodeSpacing * 0.8 // Minimum distance between node centers\n    const centerX = 400\n    const centerY = 300\n\n    // Apply current layout mode\n    if (layoutMode === 'hierarchical') {\n      const layoutNodes = applyHierarchicalLayout(currentNodes, edgesRef.current)\n      \n      // Apply positions and resolve overlaps level by level\n      const levels = new Map<number, Node[]>()\n      \n      layoutNodes.forEach((layoutNode, index) => {\n        const level = Math.floor((layoutNode.x - 150) / (nodeSpacing * 1.8))\n        if (!levels.has(level)) levels.set(level, [])\n        \n        currentNodes[index].x = layoutNode.x\n        currentNodes[index].y = layoutNode.y\n        levels.get(level)!.push(currentNodes[index])\n      })\n      \n      // Fix overlaps within each level\n      levels.forEach((nodesInLevel) => {\n        nodesInLevel.sort((a, b) => a.y - b.y)\n        \n        for (let i = 0; i < nodesInLevel.length; i++) {\n          for (let j = i + 1; j < nodesInLevel.length; j++) {\n            if (nodesOverlap(nodesInLevel[i], nodesInLevel[j], minDistance)) {\n              // Move the lower node down\n              nodesInLevel[j].y = nodesInLevel[i].y + minDistance\n            }\n          }\n        }\n      })\n      \n    } else if (layoutMode === 'circular') {\n      const layoutNodes = applyCircularLayout(currentNodes)\n      layoutNodes.forEach((layoutNode, index) => {\n        currentNodes[index].x = layoutNode.x\n        currentNodes[index].y = layoutNode.y\n      })\n      \n      // Circular layout shouldn't have overlaps, but check anyway\n      for (let i = 0; i < currentNodes.length; i++) {\n        for (let j = i + 1; j < currentNodes.length; j++) {\n          if (nodesOverlap(currentNodes[i], currentNodes[j], minDistance)) {\n            // Adjust radius slightly for overlapping nodes\n            const angle = Math.atan2(currentNodes[j].y - centerY, currentNodes[j].x - centerX)\n            const newRadius = Math.sqrt((currentNodes[j].x - centerX) ** 2 + (currentNodes[j].y - centerY) ** 2) + minDistance\n            currentNodes[j].x = centerX + Math.cos(angle) * newRadius\n            currentNodes[j].y = centerY + Math.sin(angle) * newRadius\n          }\n        }\n      }\n      \n    } else if (layoutMode === 'grouped' && groupingMode !== 'none') {\n      const layoutNodes = applyGroupedLayout(currentNodes, nodeGroups)\n      layoutNodes.forEach((layoutNode, index) => {\n        currentNodes[index].x = layoutNode.x\n        currentNodes[index].y = layoutNode.y\n        currentNodes[index].fx = layoutNode.fx\n        currentNodes[index].fy = layoutNode.fy\n      })\n      ;(currentNodes as any).groupBoxes = (layoutNodes as any).groupBoxes\n      \n    } else {\n      // Force layout - use intelligent grid placement with overlap resolution\n      const sortedNodes = [...currentNodes].sort((a, b) => b.connections - a.connections) // Place highly connected nodes first\n      \n      // Start with a spiral pattern for better distribution\n      sortedNodes.forEach((node, index) => {\n        if (index === 0) {\n          // First node at center\n          node.x = centerX\n          node.y = centerY\n        } else {\n          // Place subsequent nodes in a spiral\n          const angle = index * 0.5 // Golden angle approximation\n          const radius = Math.sqrt(index) * (nodeSpacing * 0.6)\n          let newX = centerX + Math.cos(angle) * radius\n          let newY = centerY + Math.sin(angle) * radius\n          \n          // Find non-overlapping position\n          const position = findNonOverlappingPosition(\n            { ...node, x: newX, y: newY },\n            sortedNodes.slice(0, index),\n            centerX,\n            centerY,\n            minDistance\n          )\n          \n          node.x = position.x\n          node.y = position.y\n        }\n      })\n      \n      // Final pass to eliminate any remaining overlaps\n      for (let iteration = 0; iteration < 3; iteration++) {\n        let hasOverlaps = false\n        \n        for (let i = 0; i < currentNodes.length; i++) {\n          for (let j = i + 1; j < currentNodes.length; j++) {\n            if (nodesOverlap(currentNodes[i], currentNodes[j], minDistance)) {\n              hasOverlaps = true\n              \n              // Move nodes apart\n              const dx = currentNodes[j].x - currentNodes[i].x\n              const dy = currentNodes[j].y - currentNodes[i].y\n              const distance = Math.sqrt(dx * dx + dy * dy)\n              \n              if (distance > 0) {\n                const pushDistance = (minDistance - distance) / 2\n                const normalX = dx / distance\n                const normalY = dy / distance\n                \n                currentNodes[i].x -= normalX * pushDistance\n                currentNodes[i].y -= normalY * pushDistance\n                currentNodes[j].x += normalX * pushDistance\n                currentNodes[j].y += normalY * pushDistance\n              } else {\n                // Nodes are at exact same position, move them apart\n                currentNodes[j].x += minDistance\n                currentNodes[j].y += minDistance * 0.5\n              }\n            }\n          }\n        }\n        \n        if (!hasOverlaps) break\n      }\n    }\n\n    // Animation timeout\n    setTimeout(() => {\n      setIsAutoLayouting(false)\n    }, 1000)\n  }, [layoutMode, nodeSpacing, nodeGroups, groupingMode])\n\n  const animate = useCallback(() => {\n    if (layoutMode === 'force') {\n      applyForces()\n    }\n    draw()\n    animationRef.current = requestAnimationFrame(animate)\n  }, [applyForces, draw, layoutMode])\n\n  useEffect(() => {\n    animate()\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current)\n      }\n    }\n  }, [animate])\n\n  const resetView = useCallback(() => {\n    setScale(1)\n    setOffset({ x: 0, y: 0 })\n  }, [])\n\n  // Context menu actions\n  const handleNodeAction = (action: string, node: Node) => {\n    switch (action) {\n      case 'focus':\n        setSelectedNode(node.id)\n        setShowConnectionsOnly(true)\n        break\n      case 'details':\n        onNodeClick?.(node.id)\n        break\n      case 'drag':\n        setDraggedNode(node.id)\n        setDragOffset({ x: 0, y: 0 })\n        node.fx = node.x\n        node.fy = node.y\n        break\n    }\n    setNodeContextMenu(null)\n  }\n\n  const handleGroupAction = (action: string, groupId: string, nodes: Node[]) => {\n    switch (action) {\n      case 'isolate':\n        setGroupFocusMode(true)\n        setFocusedGroup(groupId)\n        setSelectedNode(null)\n        break\n      case 'details':\n        if (onGroupClick) {\n          onGroupClick(groupId, nodes)\n        }\n        break\n      case 'expand':\n        // Could implement group expansion logic here\n        break\n    }\n    setGroupContextMenu(null)\n  }\n\n  const fitToView = useCallback(() => {\n    const canvas = canvasRef.current\n    if (!canvas || nodesRef.current.length === 0 || canvas.width === 0 || canvas.height === 0) return\n\n    const nodes = nodesRef.current\n    const padding = 80\n\n    // Calculate bounding box of all nodes\n    const minX = Math.min(...nodes.map(n => n.x)) - padding\n    const maxX = Math.max(...nodes.map(n => n.x)) + padding\n    const minY = Math.min(...nodes.map(n => n.y)) - padding\n    const maxY = Math.max(...nodes.map(n => n.y)) + padding\n\n    const contentWidth = maxX - minX\n    const contentHeight = maxY - minY\n\n    // Avoid division by zero\n    if (contentWidth === 0 || contentHeight === 0) return\n\n    // Calculate scale to fit content with more conservative scaling\n    const scaleX = canvas.width / contentWidth\n    const scaleY = canvas.height / contentHeight\n    const newScale = Math.max(0.1, Math.min(scaleX, scaleY, 1.5)) // More reasonable scale range\n\n    // Calculate offset to center content\n    const centerX = (minX + maxX) / 2\n    const centerY = (minY + maxY) / 2\n    const newOffsetX = canvas.width / 2 - centerX * newScale\n    const newOffsetY = canvas.height / 2 - centerY * newScale\n\n    setScale(newScale)\n    setOffset({ x: newOffsetX, y: newOffsetY })\n  }, [])\n\n  const zoomToNode = useCallback((nodeId: string) => {\n    const node = nodesRef.current.find(n => n.id === nodeId)\n    const canvas = canvasRef.current\n    if (!node || !canvas) return\n\n    const targetScale = 1.5\n    const newOffsetX = canvas.width / 2 - node.x * targetScale\n    const newOffsetY = canvas.height / 2 - node.y * targetScale\n\n    setScale(targetScale)\n    setOffset({ x: newOffsetX, y: newOffsetY })\n  }, [])\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.target !== document.body) return // Only work when not typing in inputs\n      \n      switch (e.key) {\n        case 'r':\n        case 'R':\n          e.preventDefault()\n          resetView()\n          break\n        case 'f':\n        case 'F':\n          e.preventDefault()\n          fitToView()\n          break\n        case '=':\n        case '+':\n          e.preventDefault()\n          setScale(prev => Math.min(5, prev * 1.2))\n          break\n        case '-':\n        case '_':\n          e.preventDefault()\n          setScale(prev => Math.max(0.2, prev / 1.2))\n          break\n        case ' ':\n          e.preventDefault()\n          autoLayout()\n          break\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [resetView, fitToView, autoLayout])\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const rect = canvas.getBoundingClientRect()\n    const x = (e.clientX - rect.left - offset.x) / scale\n    const y = (e.clientY - rect.top - offset.y) / scale\n\n    const currentNodes = nodesRef.current\n    const groupBoxes = (currentNodes as any).groupBoxes as Map<string, { x: number, y: number, width: number, height: number }> | undefined\n    \n    // First check if clicking on a node (higher priority than groups)\n    const currentEdges = edgesRef.current.filter(edge => !filteredTypes.has(edge.type))\n    let visibleNodes: Node[]\n    \n    if (groupFocusMode && focusedGroup && nodeGroups.has(focusedGroup)) {\n      // Group focus mode - same logic as rendering\n      const groupMembers = nodeGroups.get(focusedGroup)!\n      const groupMemberIds = new Set(groupMembers.map(n => n.id))\n      \n      const connectedNodeIds = new Set<string>()\n      groupMemberIds.forEach(memberId => connectedNodeIds.add(memberId))\n      \n      currentEdges.forEach(edge => {\n        if (groupMemberIds.has(edge.source)) {\n          connectedNodeIds.add(edge.target)\n        }\n        if (groupMemberIds.has(edge.target)) {\n          connectedNodeIds.add(edge.source)\n        }\n      })\n      \n      visibleNodes = nodesRef.current.filter(node => connectedNodeIds.has(node.id))\n    } else if (showConnectionsOnly && selectedNode) {\n      visibleNodes = nodesRef.current.filter(node => \n        node.id === selectedNode ||\n        currentEdges.some(edge => edge.source === node.id || edge.target === node.id)\n      )\n    } else {\n      visibleNodes = nodesRef.current.filter(node => \n        !searchTerm || \n        node.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        node.type.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n    \n    // Increase click area for nodes slightly for better UX\n    const clickedNode = visibleNodes.find(node => {\n      const dx = x - node.x\n      const dy = y - node.y\n      const clickRadius = node.radius + 5 // Add 5px buffer for easier clicking\n      return Math.sqrt(dx * dx + dy * dy) <= clickRadius\n    })\n\n    if (clickedNode) {\n      // Node clicked - show context menu instead of dragging immediately\n      const canvasRect = canvasRef.current?.getBoundingClientRect()\n      if (canvasRect) {\n        const screenX = (clickedNode.x * scale) + offset.x + canvasRect.left\n        const screenY = (clickedNode.y * scale) + offset.y + canvasRect.top - 60 // Position above node\n        \n        setNodeContextMenu({\n          nodeId: clickedNode.id,\n          x: screenX,\n          y: screenY,\n          node: clickedNode\n        })\n        \n        // Clear group context menu if open\n        setGroupContextMenu(null)\n      }\n      return // Exit early - node takes priority\n    }\n    \n    // Only check for group dragging if no node was clicked\n    if (showGroupContainers && groupBoxes && groupingMode !== 'none') {\n      let clickedGroup: string | null = null\n      \n      groupBoxes.forEach((box, groupKey) => {\n        if (x >= box.x && x <= box.x + box.width && \n            y >= box.y && y <= box.y + box.height) {\n          clickedGroup = groupKey\n        }\n      })\n      \n      if (clickedGroup) {\n        // Check if click is in the group header area for dragging\n        const groupBox = groupBoxes.get(clickedGroup)!\n        const headerHeight = 40 // Only drag from header area\n        \n        if (y <= groupBox.y + headerHeight) {\n          // Start group dragging only from header\n          setDraggedGroup(clickedGroup)\n          setGroupDragOffset({\n            x: x - groupBox.x,\n            y: y - groupBox.y\n          })\n          return\n        } else {\n          // Click on group body - show context menu\n          if (nodeGroups.has(clickedGroup)) {\n            const groupNodes = nodeGroups.get(clickedGroup)!\n            const groupBox = groupBoxes.get(clickedGroup)!\n            const canvasRect = canvasRef.current?.getBoundingClientRect()\n            \n            if (canvasRect) {\n              const screenX = (groupBox.x * scale) + offset.x + canvasRect.left + (groupBox.width * scale) / 2\n              const screenY = (groupBox.y * scale) + offset.y + canvasRect.top - 10 // Position above group\n              \n              setGroupContextMenu({\n                groupId: clickedGroup,\n                x: screenX,\n                y: screenY,\n                nodes: groupNodes\n              })\n              \n              // Clear node context menu if open\n              setNodeContextMenu(null)\n            }\n          }\n          return\n        }\n      }\n    }\n    \n    // If no node or group clicked, clear context menus and start canvas dragging\n    setNodeContextMenu(null)\n    setGroupContextMenu(null)\n    setIsDragging(true)\n    setDragStart({ x: e.clientX - offset.x, y: e.clientY - offset.y })\n  }\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const rect = canvas.getBoundingClientRect()\n    const x = (e.clientX - rect.left - offset.x) / scale\n    const y = (e.clientY - rect.top - offset.y) / scale\n\n    if (draggedGroup) {\n      // Dragging a group\n      const currentNodes = nodesRef.current\n      const groupBoxes = (currentNodes as any).groupBoxes as Map<string, any> | undefined\n      \n      if (groupBoxes && groupBoxes.has(draggedGroup)) {\n        const groupBox = groupBoxes.get(draggedGroup)!\n        const newX = x - groupDragOffset.x\n        const newY = y - groupDragOffset.y\n        \n        // Calculate the displacement\n        const deltaX = newX - groupBox.x\n        const deltaY = newY - groupBox.y\n        \n        // Update group box position\n        groupBox.x = newX\n        groupBox.y = newY\n        groupBox.centerX = newX + groupBox.width / 2\n        groupBox.centerY = newY + groupBox.height / 2\n        \n        // Move all nodes in this group\n        const groupNodes = nodeGroups.get(draggedGroup) || []\n        groupNodes.forEach(node => {\n          const layoutNode = currentNodes.find(n => n.id === node.id)\n          if (layoutNode) {\n            layoutNode.x += deltaX\n            layoutNode.y += deltaY\n            layoutNode.fx = layoutNode.x\n            layoutNode.fy = layoutNode.y\n          }\n        })\n      }\n      canvas.style.cursor = 'grabbing'\n    } else if (draggedNode) {\n      // Dragging a node\n      const node = nodesRef.current.find(n => n.id === draggedNode)\n      if (node) {\n        node.x = x - dragOffset.x\n        node.y = y - dragOffset.y\n        node.fx = node.x\n        node.fy = node.y\n      }\n      canvas.style.cursor = 'grabbing'\n    } else if (isDragging) {\n      // Dragging the canvas\n      setOffset({\n        x: e.clientX - dragStart.x,\n        y: e.clientY - dragStart.y\n      })\n      canvas.style.cursor = 'grabbing'\n    } else {\n      // Check for hovered elements\n      let hoveredElement: string | null = null\n      \n      // Check for hovered group first\n      const currentNodes = nodesRef.current\n      const groupBoxes = (currentNodes as any).groupBoxes as Map<string, { x: number, y: number, width: number, height: number }> | undefined\n      \n      if (showGroupContainers && groupBoxes && groupingMode !== 'none') {\n        groupBoxes.forEach((box, groupKey) => {\n          if (x >= box.x && x <= box.x + box.width && \n              y >= box.y && y <= box.y + box.height) {\n            hoveredElement = `group-${groupKey}`\n          }\n        })\n      }\n      \n      // If not hovering over a group, check for nodes\n      if (!hoveredElement) {\n        const currentEdges = edgesRef.current.filter(edge => !filteredTypes.has(edge.type))\n        const visibleNodes = showConnectionsOnly && selectedNode \n          ? nodesRef.current.filter(node => \n              node.id === selectedNode ||\n              currentEdges.some(edge => edge.source === node.id || edge.target === node.id)\n            )\n          : nodesRef.current.filter(node => \n              !searchTerm || \n              node.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n              node.type.toLowerCase().includes(searchTerm.toLowerCase())\n            )\n        \n        const hoveredNode = visibleNodes.find(node => {\n          const dx = x - node.x\n          const dy = y - node.y\n          return Math.sqrt(dx * dx + dy * dy) <= node.radius\n        })\n\n        if (hoveredNode) {\n          hoveredElement = hoveredNode.id\n        }\n      }\n\n      setHoveredNode(hoveredElement)\n      \n      // Set cursor based on what's hovered\n      if (hoveredElement?.startsWith('group-')) {\n        canvas.style.cursor = 'move'\n      } else if (hoveredElement) {\n        canvas.style.cursor = 'pointer'\n      } else {\n        canvas.style.cursor = 'grab'\n      }\n    }\n  }\n\n  const handleMouseUp = () => {\n    if (draggedGroup) {\n      // Release the dragged group\n      const currentNodes = nodesRef.current\n      const groupNodes = nodeGroups.get(draggedGroup) || []\n      \n      // Keep group nodes fixed for a bit, then release for physics\n      setTimeout(() => {\n        groupNodes.forEach(node => {\n          const layoutNode = currentNodes.find(n => n.id === node.id)\n          if (layoutNode) {\n            layoutNode.fx = null\n            layoutNode.fy = null\n          }\n        })\n      }, 1000)\n      \n      setDraggedGroup(null)\n      setGroupDragOffset({ x: 0, y: 0 })\n    } else if (draggedNode) {\n      // Release the dragged node but keep it fixed in place\n      const node = nodesRef.current.find(n => n.id === draggedNode)\n      if (node) {\n        // Keep the node fixed for a bit, then release for physics\n        setTimeout(() => {\n          node.fx = null\n          node.fy = null\n        }, 500)\n      }\n      setDraggedNode(null)\n      setDragOffset({ x: 0, y: 0 })\n    }\n    setIsDragging(false)\n  }\n\n  const handleWheel = (e: React.WheelEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n    \n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const rect = canvas.getBoundingClientRect()\n    const mouseX = e.clientX - rect.left\n    const mouseY = e.clientY - rect.top\n    \n    // Calculate zoom factor with more granular control\n    const zoomIntensity = 0.1\n    const zoomFactor = e.deltaY > 0 ? (1 - zoomIntensity) : (1 + zoomIntensity)\n    const newScale = Math.max(0.2, Math.min(5, scale * zoomFactor))\n    \n    if (newScale !== scale) {\n      // Calculate the point in world coordinates before zoom\n      const worldX = (mouseX - offset.x) / scale\n      const worldY = (mouseY - offset.y) / scale\n      \n      // Calculate new offset to keep the mouse point stationary\n      const newOffsetX = mouseX - worldX * newScale\n      const newOffsetY = mouseY - worldY * newScale\n      \n      setScale(newScale)\n      setOffset({ x: newOffsetX, y: newOffsetY })\n    }\n  }\n\n\n  const toggleFilter = (type: string) => {\n    setFilteredTypes(prev => {\n      const newSet = new Set(prev)\n      if (newSet.has(type)) {\n        newSet.delete(type)\n      } else {\n        newSet.add(type)\n      }\n      return newSet\n    })\n  }\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    const container = containerRef.current\n    if (!canvas || !container) return\n\n    const resizeCanvas = () => {\n      // Force a reflow to get accurate dimensions\n      container.style.width = container.style.width\n      \n      // Get the container dimensions with proper calculations\n      const rect = container.getBoundingClientRect()\n      const computedStyle = window.getComputedStyle(container)\n      \n      // Calculate available space minus padding and borders\n      const paddingX = parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight)\n      const paddingY = parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom)\n      const borderX = parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth)\n      const borderY = parseFloat(computedStyle.borderTopWidth) + parseFloat(computedStyle.borderBottomWidth)\n      \n      // Set canvas size to fill container\n      const availableWidth = Math.max(600, rect.width - paddingX - borderX)\n      const availableHeight = Math.max(400, rect.height - paddingY - borderY)\n      \n      canvas.width = availableWidth\n      canvas.height = availableHeight\n      \n      // Set CSS size to match\n      canvas.style.width = availableWidth + 'px'\n      canvas.style.height = availableHeight + 'px'\n    }\n\n    // Prevent page scrolling when interacting with the graph\n    const preventScroll = (e: WheelEvent) => {\n      if (canvas && canvas.contains(e.target as globalThis.Node)) {\n        e.preventDefault()\n        e.stopPropagation()\n      }\n    }\n\n    const preventTouch = (e: TouchEvent) => {\n      if (canvas && canvas.contains(e.target as globalThis.Node)) {\n        e.preventDefault()\n      }\n    }\n\n    resizeCanvas()\n    // Force initial resize after a short delay to ensure container is rendered\n    setTimeout(resizeCanvas, 100)\n    setTimeout(resizeCanvas, 500)\n    \n    window.addEventListener('resize', resizeCanvas)\n    document.addEventListener('wheel', preventScroll, { passive: false })\n    document.addEventListener('touchmove', preventTouch, { passive: false })\n    \n    return () => {\n      window.removeEventListener('resize', resizeCanvas)\n      document.removeEventListener('wheel', preventScroll)\n      document.removeEventListener('touchmove', preventTouch)\n    }\n  }, [])\n\n  const relationshipTypes = ['uses', 'inherits', 'contains']\n\n  return (\n    <Card \n      ref={containerRef} \n      className=\"w-full h-full flex flex-col relative overflow-hidden bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-950 shadow-2xl border border-slate-200 dark:border-slate-700 rounded-xl\"\n    >\n      {/* Compact Controls Header */}\n      <CardHeader className=\"flex flex-col gap-3 p-4 bg-white/80 dark:bg-slate-900/80 backdrop-blur-xl border-b border-slate-200 dark:border-slate-700 z-10 shadow-sm\">\n        {/* Primary Controls Row */}\n        <div className=\"flex flex-wrap items-center gap-4\">\n          {/* Search Section */}\n          <div className=\"flex items-center gap-2 bg-slate-50 dark:bg-slate-800/50 rounded-md p-2 border border-slate-200 dark:border-slate-700\">\n            <div className=\"text-xs font-medium text-slate-700 dark:text-slate-300\">🔍</div>\n            <Input\n              placeholder=\"Search...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-32 h-8 text-sm border-slate-300 dark:border-slate-600 focus:border-blue-500 dark:focus:border-blue-400\"\n            />\n          </div>\n          \n          {/* Layout Section */}\n          <div className=\"flex items-center gap-2 bg-slate-50 dark:bg-slate-800/50 rounded-md p-2 border border-slate-200 dark:border-slate-700\">\n            <div className=\"text-xs font-medium text-slate-700 dark:text-slate-300\">📐</div>\n            <Select value={layoutMode} onValueChange={(value: any) => setLayoutMode(value)}>\n              <SelectTrigger className=\"w-32 h-8 text-sm border-slate-300 dark:border-slate-600\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"force\">Force</SelectItem>\n                <SelectItem value=\"hierarchical\">Hierarchy</SelectItem>\n                <SelectItem value=\"circular\">Circular</SelectItem>\n                <SelectItem value=\"grouped\">Grouped</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {/* Auto Layout Button */}\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={autoLayout}\n            disabled={isAutoLayouting}\n            className=\"h-8 px-3 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white border-0 text-xs\"\n          >\n            <Shuffle className={`h-3 w-3 mr-1 ${isAutoLayouting ? 'animate-spin' : ''}`} />\n            {isAutoLayouting ? 'Organizing...' : 'Auto Layout'}\n          </Button>\n        </div>\n        \n        {/* Secondary Controls Row */}\n        <div className=\"flex flex-wrap items-center gap-3\">\n          {/* View Options */}\n          <div className=\"flex items-center gap-3 bg-slate-50 dark:bg-slate-800/50 rounded-md p-2 border border-slate-200 dark:border-slate-700\">\n            <label className=\"flex items-center gap-1 text-xs text-slate-700 dark:text-slate-300 cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                checked={showLabels}\n                onChange={(e) => setShowLabels(e.target.checked)}\n                className=\"w-3 h-3 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500\"\n              />\n              Labels\n            </label>\n            <label className=\"flex items-center gap-1 text-xs text-slate-700 dark:text-slate-300 cursor-pointer\">\n              <input\n                type=\"checkbox\"\n                checked={showConnectionsOnly}\n                onChange={(e) => setShowConnectionsOnly(e.target.checked)}\n                className=\"w-3 h-3 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500\"\n                disabled={!selectedNode}\n              />\n              Connected\n            </label>\n            {groupFocusMode && focusedGroup && (\n              <div className=\"flex items-center gap-1 px-2 py-1 bg-amber-100 dark:bg-amber-900/30 rounded border border-amber-300 dark:border-amber-700\">\n                <div className=\"w-2 h-2 bg-amber-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-xs font-medium text-amber-800 dark:text-amber-200\">\n                  Focused: {focusedGroup}\n                </span>\n                <button\n                  onClick={() => {\n                    setGroupFocusMode(false)\n                    setFocusedGroup(null)\n                  }}\n                  className=\"ml-1 text-amber-600 dark:text-amber-400 hover:text-amber-800 dark:hover:text-amber-200\"\n                  title=\"Clear group focus\"\n                >\n                  ×\n                </button>\n              </div>\n            )}\n          </div>\n          \n          {/* Line Style Control */}\n          <div className=\"flex items-center gap-2 bg-slate-50 dark:bg-slate-800/50 rounded-md p-2 border border-slate-200 dark:border-slate-700\">\n            <div className=\"text-xs font-medium text-slate-700 dark:text-slate-300\">📏</div>\n            <Select value={edgeStyle} onValueChange={(value: any) => setEdgeStyle(value)}>\n              <SelectTrigger className=\"w-20 h-8 text-xs border-slate-300 dark:border-slate-600\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"straight\">Straight</SelectItem>\n                <SelectItem value=\"curved\">Curved</SelectItem>\n                <SelectItem value=\"step\">Step</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {/* Grouping Options */}\n          {layoutMode === 'grouped' && (\n            <div className=\"flex items-center gap-2 bg-slate-50 dark:bg-slate-800/50 rounded-md p-2 border border-slate-200 dark:border-slate-700\">\n              <div className=\"text-xs font-medium text-slate-700 dark:text-slate-300\">📦</div>\n              <Select value={groupingMode} onValueChange={(value: any) => setGroupingMode(value)}>\n                <SelectTrigger className=\"w-20 h-8 text-xs border-slate-300 dark:border-slate-600\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">None</SelectItem>\n                  <SelectItem value=\"file\">File</SelectItem>\n                  <SelectItem value=\"parent\">Parent</SelectItem>\n                </SelectContent>\n              </Select>\n              <label className=\"flex items-center gap-1 text-xs text-slate-700 dark:text-slate-300 cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={showGroupContainers}\n                  onChange={(e) => setShowGroupContainers(e.target.checked)}\n                  className=\"w-3 h-3 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500\"\n                />\n                Boxes\n              </label>\n            </div>\n          )}\n          \n          {/* Spacing Control */}\n          <div className=\"flex items-center gap-2 bg-slate-50 dark:bg-slate-800/50 rounded-md p-2 border border-slate-200 dark:border-slate-700\">\n            <div className=\"text-xs font-medium text-slate-700 dark:text-slate-300\">📏</div>\n            <div className=\"flex items-center gap-2 w-24\">\n              <Slider\n                value={[nodeSpacing]}\n                onValueChange={(value) => setNodeSpacing(value[0])}\n                min={150}\n                max={500}\n                step={20}\n                className=\"flex-1\"\n              />\n              <span className=\"text-xs text-slate-600 dark:text-slate-400 min-w-[2.5rem] font-mono text-center\">{nodeSpacing}</span>\n            </div>\n          </div>\n          \n          {/* Zoom Controls */}\n          <div className=\"flex items-center gap-2 bg-slate-50 dark:bg-slate-800/50 rounded-md p-2 border border-slate-200 dark:border-slate-700\">\n            <div className=\"flex items-center gap-1 bg-white dark:bg-slate-900 rounded p-1 border border-slate-300 dark:border-slate-600\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setScale(prev => Math.min(5, prev * 1.2))}\n                className=\"h-6 w-6 p-0 hover:bg-blue-100 dark:hover:bg-blue-900/30\"\n                title=\"Zoom In (+)\"\n              >\n                <ZoomIn className=\"h-3 w-3\" />\n              </Button>\n              <div className=\"px-2 text-xs font-mono text-slate-600 dark:text-slate-400 min-w-[2.5rem] text-center\">\n                {Math.round(scale * 100)}%\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setScale(prev => Math.max(0.2, prev / 1.2))}\n                className=\"h-6 w-6 p-0 hover:bg-blue-100 dark:hover:bg-blue-900/30\"\n                title=\"Zoom Out (-)\"\n              >\n                <ZoomOut className=\"h-3 w-3\" />\n              </Button>\n            </div>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={fitToView}\n              className=\"h-6 px-2 hover:bg-green-100 dark:hover:bg-green-900/30 text-xs\"\n              title=\"Fit to View (F)\"\n            >\n              Fit\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={resetView}\n              className=\"h-6 px-2 hover:bg-blue-100 dark:hover:bg-blue-900/30 text-xs\"\n              title=\"Reset View (R)\"\n            >\n              <RotateCcw className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        </div>\n        \n        {/* Relationship Filters Row */}\n        <div className=\"flex items-center gap-2 bg-slate-50 dark:bg-slate-800/50 rounded-md p-2 border border-slate-200 dark:border-slate-700\">\n          <div className=\"text-xs font-medium text-slate-700 dark:text-slate-300 flex items-center gap-1\">\n            <Filter className=\"h-3 w-3\" />\n            Filters:\n          </div>\n          <div className=\"flex gap-2 flex-wrap\">\n            {relationshipTypes.map(type => (\n              <Badge\n                key={type}\n                variant={filteredTypes.has(type) ? \"outline\" : \"default\"}\n                className={`cursor-pointer transition-all duration-200 hover:scale-105 px-2 py-1 text-xs font-medium ${\n                  filteredTypes.has(type) ? 'opacity-50 grayscale bg-slate-100 dark:bg-slate-800' : 'shadow-sm hover:shadow-md'\n                }`}\n                onClick={() => toggleFilter(type)}\n                style={{\n                  backgroundColor: filteredTypes.has(type) ? 'transparent' : getEdgeColor(type, 0.15),\n                  borderColor: getEdgeColor(type, 0.8),\n                  color: filteredTypes.has(type) ? 'currentColor' : getEdgeColor(type, 1)\n                }}\n              >\n                <span className=\"inline-block w-2 h-2 rounded-full mr-1\" \n                      style={{ backgroundColor: getEdgeColor(type, 1) }}></span>\n                {type}\n              </Badge>\n            ))}\n          </div>\n        </div>\n      </CardHeader>\n      \n      {/* Enhanced Graph Container */}\n      <div\n        className=\"relative w-full flex-1 shadow-lg border border-slate-200 dark:border-slate-700 rounded-xl\"\n        style={{ \n          background: 'linear-gradient(135deg, rgb(248 250 252) 0%, rgb(255 255 255) 50%, rgb(248 250 252) 100%)',\n          overflow: 'hidden',\n          minHeight: '80vh',\n          height: '80vh'\n        }}\n      >\n        {/* Enhanced Decorative Grid Background */}\n        <div \n          className=\"absolute inset-0 opacity-20 dark:opacity-10\"\n          style={{\n            backgroundImage: `\n              radial-gradient(circle at 25px 25px, rgb(59 130 246 / 0.3) 2px, transparent 2px),\n              linear-gradient(rgb(148 163 184 / 0.2) 1px, transparent 1px), \n              linear-gradient(90deg, rgb(148 163 184 / 0.2) 1px, transparent 1px)\n            `,\n            backgroundSize: '50px 50px, 50px 50px, 50px 50px',\n            borderRadius: '16px'\n          }}\n        ></div>\n        \n        <canvas\n          ref={canvasRef}\n          onMouseDown={handleMouseDown}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onMouseLeave={handleMouseUp}\n          onWheel={handleWheel}\n          className=\"w-full h-full relative z-10 cursor-grab active:cursor-grabbing\"\n          style={{ \n            touchAction: 'none',\n            display: 'block',\n            width: '100%',\n            height: '100%'\n          }}\n        />\n        \n        {/* Minimap */}\n        {showMinimap && nodesRef.current.length > 0 && (\n          <MinimapComponent \n            nodes={nodesRef.current}\n            edges={edgesRef.current}\n            scale={scale}\n            offset={offset}\n            canvasRef={canvasRef}\n            selectedNode={selectedNode}\n          />\n        )}\n        \n        {/* Enhanced Node Info Tooltip */}\n        {hoveredNode && (\n          <div className=\"absolute top-6 left-6 bg-white dark:bg-slate-800 rounded-lg shadow-xl border border-slate-200 dark:border-slate-600 p-4 z-20 min-w-[200px] backdrop-blur-sm bg-white/95 dark:bg-slate-800/95\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <div className=\"w-3 h-3 rounded-full\" style={{ \n                backgroundColor: getNodeGradient(nodesRef.current.find(n => n.id === hoveredNode)?.type || 'component')[0] \n              }}></div>\n              <div className=\"font-semibold text-slate-900 dark:text-slate-100\">\n                {nodesRef.current.find(n => n.id === hoveredNode)?.name}\n              </div>\n            </div>\n            <div className=\"text-sm text-slate-600 dark:text-slate-400 mb-1\">\n              Type: {nodesRef.current.find(n => n.id === hoveredNode)?.type}\n            </div>\n            <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n              Connections: {nodesRef.current.find(n => n.id === hoveredNode)?.connections || 0}\n            </div>\n          </div>\n        )}\n        \n        {/* Enhanced Graph Instructions */}\n        <div className=\"absolute bottom-6 right-6 bg-white/95 dark:bg-slate-900/95 border border-slate-200 dark:border-slate-700 rounded-lg p-4 text-sm backdrop-blur-sm shadow-lg max-w-xs\">\n          <div className=\"font-semibold mb-2 text-slate-900 dark:text-slate-100\">Navigation Controls</div>\n          <div className=\"space-y-1.5 text-xs text-slate-700 dark:text-slate-300\">\n            <div className=\"flex justify-between\">\n              <span>Pan canvas</span>\n              <span className=\"font-mono bg-slate-100 dark:bg-slate-800 px-1 rounded\">Drag</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Zoom</span>\n              <span className=\"font-mono bg-slate-100 dark:bg-slate-800 px-1 rounded\">Scroll</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Move nodes</span>\n              <span className=\"font-mono bg-slate-100 dark:bg-slate-800 px-1 rounded\">Drag node</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Move groups</span>\n              <span className=\"font-mono bg-slate-100 dark:bg-slate-800 px-1 rounded\">Drag group</span>\n            </div>\n            <hr className=\"my-2 border-slate-200 dark:border-slate-700\" />\n            <div className=\"font-medium text-slate-800 dark:text-slate-200\">Keyboard Shortcuts</div>\n            <div className=\"flex justify-between\">\n              <span>Reset view</span>\n              <span className=\"font-mono bg-slate-100 dark:bg-slate-800 px-1 rounded\">R</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Fit to view</span>\n              <span className=\"font-mono bg-slate-100 dark:bg-slate-800 px-1 rounded\">F</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Zoom in/out</span>\n              <span className=\"font-mono bg-slate-100 dark:bg-slate-800 px-1 rounded\">+/-</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Auto layout</span>\n              <span className=\"font-mono bg-slate-100 dark:bg-slate-800 px-1 rounded\">Space</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Card>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_interactivegraph",
    "imports": [
      "Card",
      "CardContent",
      "CardHeader",
      "CardTitle",
      "Badge",
      "Button",
      "Slider",
      "ZoomIn",
      "ZoomOut",
      "RotateCcw",
      "Filter",
      "Shuffle",
      "Tabs",
      "TabsContent",
      "TabsList",
      "TabsTrigger",
      "Input",
      "Select",
      "SelectContent",
      "SelectItem",
      "SelectTrigger",
      "SelectValue"
    ],
    "references": [
      "Card",
      "CardHeader",
      "Input",
      "Select",
      "SelectTrigger",
      "SelectValue",
      "SelectContent",
      "SelectItem",
      "Button",
      "Shuffle",
      "Slider",
      "ZoomIn",
      "ZoomOut",
      "RotateCcw",
      "Filter",
      "Badge",
      "MinimapComponent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "cardcontent",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "cardtitle",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "slider",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "zoomin",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "zoomout",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "rotateccw",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "filter",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "shuffle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "tabs",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "tabscontent",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "tabslist",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "input",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "select",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "selectcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "selectitem",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "selecttrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "selectvalue",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_interactive-graph_interactivegraph",
        "target": "minimapcomponent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "target": "[...groupnodes]",
        "type": "uses",
        "weight": 2,
        "context": "calls sort",
        "sourceLine": 201,
        "targetFunction": "sort"
      },
      {
        "target": "array.from(groups.values())",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 1252,
        "targetFunction": "map"
      },
      {
        "target": "array.from(groups.entries())",
        "type": "uses",
        "weight": 2,
        "context": "calls filter",
        "sourceLine": 1648,
        "targetFunction": "filter"
      },
      {
        "target": "[...currentnodes]",
        "type": "uses",
        "weight": 2,
        "context": "calls sort",
        "sourceLine": 1854,
        "targetFunction": "sort"
      }
    ],
    "methods": [
      {
        "name": "calculateTreeLayout",
        "code": "const calculateTreeLayout = (groupNodes: Node[], spacing: number) => {\n    if (groupNodes.length === 0) return []\n    if (groupNodes.length === 1) return [{ x: 0, y: 0 }]\n    \n    const positions: { x: number, y: number }[] = []\n    \n    // Sort nodes by type and connections for better tree structure\n    const sortedNodes = [...groupNodes].sort((a, b) => {\n      // Primary components at root, functions as branches, methods as leaves\n      const typeOrder = { component: 0, class: 1, function: 2, method: 3 }\n      const aOrder = typeOrder[a.type as keyof typeof typeOrder] ?? 4\n      const bOrder = typeOrder[b.type as keyof typeof typeOrder] ?? 4\n      \n      if (aOrder !== bOrder) return aOrder - bOrder\n      return (b.connections || 0) - (a.connections || 0) // More connected nodes higher\n    })\n    \n    if (sortedNodes.length <= 3) {\n      // Small groups: horizontal line layout with better spacing\n      const actualSpacing = spacing * 1.3 // Increase spacing between nodes\n      const totalWidth = (sortedNodes.length - 1) * actualSpacing\n      sortedNodes.forEach((_, index) => {\n        positions.push({\n          x: -totalWidth / 2 + index * actualSpacing,\n          y: 0\n        })\n      })\n    } else if (sortedNodes.length <= 6) {\n      // Medium groups: 2-level tree structure with improved spacing\n      const root = sortedNodes[0]\n      const children = sortedNodes.slice(1)\n      \n      // Root at top center with more vertical space\n      positions.push({ x: 0, y: -spacing * 1.3 })\n      \n      // Children arranged in a horizontal line below with more spacing\n      const childSpacing = spacing * 1.5 // Increased horizontal spacing\n      const childWidth = (children.length - 1) * childSpacing\n      children.forEach((_, index) => {\n        positions.push({\n          x: -childWidth / 2 + index * childSpacing,\n          y: spacing * 1.1 // Increased vertical spacing\n        })\n      })\n    } else {\n      // Large groups: 3-level tree structure with better spacing\n      const root = sortedNodes[0]\n      const level2Count = Math.min(3, Math.ceil(sortedNodes.length / 3))\n      const level2Nodes = sortedNodes.slice(1, 1 + level2Count)\n      const level3Nodes = sortedNodes.slice(1 + level2Count)\n      \n      // Root at top center with more space\n      positions.push({ x: 0, y: -spacing * 1.5 })\n      \n      // Level 2: spread horizontally with better spacing\n      const level2Spacing = spacing * 1.4\n      const level2Width = (level2Count - 1) * level2Spacing\n      level2Nodes.forEach((_, index) => {\n        positions.push({\n          x: level2Count === 1 ? 0 : -level2Width / 2 + index * level2Spacing,\n          y: -spacing * 0.1 // Slightly below root\n        })\n      })\n      \n      // Level 3: arrange under level 2 nodes with better spacing\n      const nodesPerParent = Math.ceil(level3Nodes.length / level2Count)\n      const childSpacing = spacing * 1.1\n      level3Nodes.forEach((_, index) => {\n        const parentIndex = Math.floor(index / nodesPerParent)\n        const childIndex = index % nodesPerParent\n        const parentX = level2Count === 1 ? 0 : -level2Width / 2 + parentIndex * level2Spacing\n        \n        const siblingCount = Math.min(nodesPerParent, level3Nodes.length - parentIndex * nodesPerParent)\n        const siblingWidth = (siblingCount - 1) * childSpacing\n        \n        positions.push({\n          x: parentX + (siblingCount === 1 ? 0 : -siblingWidth / 2 + childIndex * childSpacing),\n          y: spacing * 1.8 // Increased vertical spacing for level 3\n        })\n      })\n    }\n    \n    return positions\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "groupNodes",
            "type": "Node[]"
          },
          {
            "name": "spacing",
            "type": "number"
          }
        ]
      },
      {
        "name": "getNodeGradient",
        "code": "const getNodeGradient = (type: string) => {\n    const gradients = {\n      component: ['#10F5CC', '#0EA5E9'], // Cyan to blue gradient\n      class: ['#818CF8', '#6366F1'], // Indigo gradient\n      function: ['#FCD34D', '#F59E0B'], // Yellow gradient\n      method: ['#F472B6', '#EC4899'] // Pink gradient\n    }\n    return gradients[type as keyof typeof gradients] || ['#9CA3AF', '#6B7280']\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "type",
            "type": "string"
          }
        ]
      },
      {
        "name": "getEdgeColor",
        "code": "const getEdgeColor = (type: string, opacity = 1) => {\n    const colors = {\n      'uses': `rgba(59, 130, 246, ${opacity})`, // Blue - component uses\n      'inherits': `rgba(147, 51, 234, ${opacity})`, // Purple - inheritance\n      'contains': `rgba(16, 185, 129, ${opacity})` // Green - containment\n    }\n    return colors[type as keyof typeof colors] || `rgba(107, 114, 128, ${opacity})`\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "type",
            "type": "string"
          },
          {
            "name": "opacity",
            "type": "any"
          }
        ]
      },
      {
        "name": "MinimapComponent",
        "code": "const MinimapComponent = ({ nodes, edges, scale, offset, canvasRef, selectedNode }: {\n    nodes: Node[]\n    edges: Edge[]\n    scale: number\n    offset: { x: number, y: number }\n    canvasRef: React.RefObject<HTMLCanvasElement>\n    selectedNode: string | null\n  }) => {\n    const minimapCanvasRef = useRef<HTMLCanvasElement>(null)\n    \n    useEffect(() => {\n      const canvas = minimapCanvasRef.current\n      if (!canvas || nodes.length === 0) return\n\n      const ctx = canvas.getContext('2d')\n      if (!ctx) return\n\n      ctx.clearRect(0, 0, 128, 96)\n      \n      // Calculate world bounds\n      const padding = 50\n      const minX = Math.min(...nodes.map(n => n.x)) - padding\n      const maxX = Math.max(...nodes.map(n => n.x)) + padding\n      const minY = Math.min(...nodes.map(n => n.y)) - padding\n      const maxY = Math.max(...nodes.map(n => n.y)) + padding\n      \n      const worldWidth = maxX - minX\n      const worldHeight = maxY - minY\n      const scaleX = 128 / worldWidth\n      const scaleY = 96 / worldHeight\n      const minimapScale = Math.min(scaleX, scaleY)\n      \n      const offsetX = (128 - worldWidth * minimapScale) / 2\n      const offsetY = (96 - worldHeight * minimapScale) / 2\n      \n      // Draw edges\n      ctx.strokeStyle = 'rgba(100, 116, 139, 0.3)'\n      ctx.lineWidth = 1\n      edges.forEach(edge => {\n        const sourceNode = nodes.find(n => n.id === edge.source)\n        const targetNode = nodes.find(n => n.id === edge.target)\n        \n        if (sourceNode && targetNode) {\n          const x1 = offsetX + (sourceNode.x - minX) * minimapScale\n          const y1 = offsetY + (sourceNode.y - minY) * minimapScale\n          const x2 = offsetX + (targetNode.x - minX) * minimapScale\n          const y2 = offsetY + (targetNode.y - minY) * minimapScale\n          \n          ctx.beginPath()\n          ctx.moveTo(x1, y1)\n          ctx.lineTo(x2, y2)\n          ctx.stroke()\n        }\n      })\n      \n      // Draw nodes\n      nodes.forEach(node => {\n        const x = offsetX + (node.x - minX) * minimapScale\n        const y = offsetY + (node.y - minY) * minimapScale\n        const radius = Math.max(1, 2)\n        \n        ctx.fillStyle = node.id === selectedNode ? '#3b82f6' : '#64748b'\n        ctx.beginPath()\n        ctx.arc(x, y, radius, 0, 2 * Math.PI)\n        ctx.fill()\n      })\n    }, [nodes, edges, selectedNode])\n\n    // Calculate viewport indicator position and size\n    const calculateViewport = () => {\n      if (!canvasRef.current || nodes.length === 0) return null\n\n      const canvas = canvasRef.current\n      const padding = 50\n      const minX = Math.min(...nodes.map(n => n.x)) - padding\n      const maxX = Math.max(...nodes.map(n => n.x)) + padding\n      const minY = Math.min(...nodes.map(n => n.y)) - padding\n      const maxY = Math.max(...nodes.map(n => n.y)) + padding\n      \n      const worldWidth = maxX - minX\n      const worldHeight = maxY - minY\n      \n      // Current viewport in world coordinates\n      const viewportLeft = (-offset.x) / scale\n      const viewportTop = (-offset.y) / scale\n      const viewportWidth = canvas.width / scale\n      const viewportHeight = canvas.height / scale\n      \n      // Convert to minimap coordinates (0-100%)\n      const left = Math.max(0, Math.min(100, ((viewportLeft - minX) / worldWidth) * 100))\n      const top = Math.max(0, Math.min(100, ((viewportTop - minY) / worldHeight) * 100))\n      const width = Math.min(100 - left, (viewportWidth / worldWidth) * 100)\n      const height = Math.min(100 - top, (viewportHeight / worldHeight) * 100)\n      \n      return { left, top, width, height }\n    }\n\n    const viewport = calculateViewport()\n    \n    return (\n      <div className=\"absolute top-4 right-4 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm border border-slate-200 dark:border-slate-600 rounded-lg p-2 shadow-lg\">\n        <div className=\"w-32 h-24 relative bg-slate-50 dark:bg-slate-900 rounded overflow-hidden\">\n          <canvas\n            ref={minimapCanvasRef}\n            width={128}\n            height={96}\n            className=\"w-full h-full\"\n            style={{ display: 'block' }}\n          />\n          {/* Viewport indicator */}\n          {viewport && (\n            <div \n              className=\"absolute border-2 border-blue-500 bg-blue-500/20 pointer-events-none\"\n              style={{\n                left: `${viewport.left}%`,\n                top: `${viewport.top}%`,\n                width: `${viewport.width}%`,\n                height: `${viewport.height}%`,\n              }}\n            />\n          )}\n        </div>\n        <div className=\"text-xs text-slate-600 dark:text-slate-400 mt-1 text-center\">\n          Navigation\n        </div>\n      </div>\n    )\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "{ nodes, edges, scale, offset, canvasRef, selectedNode }",
            "type": "{\n    nodes: Node[]\n    edges: Edge[]\n    scale: number\n    offset: { x: number, y: number }\n    canvasRef: React.RefObject<HTMLCanvasElement>\n    selectedNode: string | null\n  }"
          }
        ]
      },
      {
        "name": "roundRect",
        "code": "const roundRect = (ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number) => {\n    ctx.beginPath()\n    ctx.moveTo(x + radius, y)\n    ctx.lineTo(x + width - radius, y)\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n    ctx.lineTo(x + width, y + height - radius)\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n    ctx.lineTo(x + radius, y + height)\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n    ctx.lineTo(x, y + radius)\n    ctx.quadraticCurveTo(x, y, x + radius, y)\n    ctx.closePath()\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "ctx",
            "type": "CanvasRenderingContext2D"
          },
          {
            "name": "x",
            "type": "number"
          },
          {
            "name": "y",
            "type": "number"
          },
          {
            "name": "width",
            "type": "number"
          },
          {
            "name": "height",
            "type": "number"
          },
          {
            "name": "radius",
            "type": "number"
          }
        ]
      },
      {
        "name": "applyHierarchicalLayout",
        "code": "const applyHierarchicalLayout = (nodes: Node[], edges: Edge[]) => {\n    const levels = new Map<string, number>()\n    const visited = new Set<string>()\n    \n    // Find root nodes (no incoming edges)\n    const incomingCount = new Map<string, number>()\n    nodes.forEach(node => incomingCount.set(node.id, 0))\n    edges.forEach(edge => {\n      incomingCount.set(edge.target, (incomingCount.get(edge.target) || 0) + 1)\n    })\n    \n    const rootNodes = nodes.filter(node => incomingCount.get(node.id) === 0)\n    \n    // BFS to assign levels\n    const queue = rootNodes.map(node => ({ id: node.id, level: 0 }))\n    \n    while (queue.length > 0) {\n      const { id, level } = queue.shift()!\n      if (visited.has(id)) continue\n      \n      visited.add(id)\n      levels.set(id, level)\n      \n      edges\n        .filter(edge => edge.source === id)\n        .forEach(edge => {\n          if (!visited.has(edge.target)) {\n            queue.push({ id: edge.target, level: level + 1 })\n          }\n        })\n    }\n    \n    // Position nodes by level\n    const levelGroups = new Map<number, string[]>()\n    levels.forEach((level, nodeId) => {\n      if (!levelGroups.has(level)) levelGroups.set(level, [])\n      levelGroups.get(level)!.push(nodeId)\n    })\n    \n    return nodes.map(node => {\n      const level = levels.get(node.id) || 0\n      const nodesAtLevel = levelGroups.get(level) || []\n      const index = nodesAtLevel.indexOf(node.id)\n      \n      const levelSpacing = nodeSpacing * 1.8\n      const nodeSpacingInLevel = nodeSpacing * 0.8\n      \n      return {\n        ...node,\n        x: 150 + level * levelSpacing,\n        y: 100 + (index * nodeSpacingInLevel) - ((nodesAtLevel.length - 1) * nodeSpacingInLevel / 2),\n        fx: layoutMode === 'hierarchical' ? 150 + level * levelSpacing : null,\n        fy: layoutMode === 'hierarchical' ? 100 + (index * nodeSpacingInLevel) - ((nodesAtLevel.length - 1) * nodeSpacingInLevel / 2) : null\n      }\n    })\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "nodes",
            "type": "Node[]"
          },
          {
            "name": "edges",
            "type": "Edge[]"
          }
        ]
      },
      {
        "name": "applyCircularLayout",
        "code": "const applyCircularLayout = (nodes: Node[]) => {\n    const centerX = 400\n    const centerY = 300\n    const radius = Math.max(nodeSpacing, 100 + nodes.length * (nodeSpacing / 10))\n    \n    return nodes.map((node, index) => {\n      const angle = (2 * Math.PI * index) / nodes.length - Math.PI / 2\n      return {\n        ...node,\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle),\n        fx: layoutMode === 'circular' ? centerX + radius * Math.cos(angle) : null,\n        fy: layoutMode === 'circular' ? centerY + radius * Math.sin(angle) : null\n      }\n    })\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "nodes",
            "type": "Node[]"
          }
        ]
      },
      {
        "name": "applyAdvancedForceLayout",
        "code": "const applyAdvancedForceLayout = (nodes: Node[], groups: Map<string, Node[]>) => {\n    const layoutNodes = [...nodes]\n    const groupBoxes = new Map<string, { x: number, y: number, width: number, height: number, centerX: number, centerY: number, fixed?: boolean }>()\n    \n    // Calculate optimal group sizing and positioning\n    const groupKeys = Array.from(groups.keys())\n    const numGroups = groupKeys.length\n    \n    if (numGroups === 0) return layoutNodes\n    \n    // Calculate average node size for spacing calculations\n    const avgNodeRadius = nodes.length > 0 ? nodes.reduce((sum, node) => sum + node.radius, 0) / nodes.length : 20\n    const minNodeSpacing = Math.max(avgNodeRadius * 3, 80) // Minimum distance between node centers\n    \n    // Dynamic grid sizing based on group count and sizes\n    const gridSize = Math.max(2, Math.ceil(Math.sqrt(numGroups * 1.2))) // Slightly larger grid for better spacing\n    \n    // Calculate required spacing based on largest groups\n    const maxNodesInAnyGroup = Math.max(...Array.from(groups.values()).map(nodes => nodes.length))\n    const estimatedGroupSize = calculateOptimalGroupSize(maxNodesInAnyGroup, minNodeSpacing)\n    const groupSpacing = Math.max(estimatedGroupSize + 100, nodeSpacing * 4)\n    \n    const startX = 300\n    const startY = 300\n    \n    groupKeys.forEach((groupKey, groupIndex) => {\n      const groupNodes = groups.get(groupKey) || []\n      const numNodesInGroup = groupNodes.length\n      \n      // Calculate group position in grid\n      const gridRow = Math.floor(groupIndex / gridSize)\n      const gridCol = groupIndex % gridSize\n      const groupCenterX = startX + gridCol * groupSpacing\n      const groupCenterY = startY + gridRow * groupSpacing\n      \n      // Calculate optimal group dimensions for this specific group\n      const optimalSize = calculateOptimalGroupSize(numNodesInGroup, minNodeSpacing)\n      const groupPadding = Math.max(50, avgNodeRadius * 2) // Generous padding\n      \n      // Layout nodes within the group using enhanced algorithm\n      const nodePositions = calculateOptimalNodePositions(\n        numNodesInGroup, \n        groupCenterX, \n        groupCenterY, \n        optimalSize, \n        minNodeSpacing\n      )\n      \n      groupNodes.forEach((node, nodeIndex) => {\n        const layoutNode = layoutNodes.find(n => n.id === node.id)\n        if (layoutNode && nodePositions[nodeIndex]) {\n          layoutNode.x = nodePositions[nodeIndex].x\n          layoutNode.y = nodePositions[nodeIndex].y\n        }\n      })\n      \n      // Apply overlap resolution within the group\n      resolveInternalNodeOverlaps(groupNodes, layoutNodes, minNodeSpacing)\n      \n      // Calculate actual bounding box based on final node positions\n      const groupNodePositions = groupNodes.map(node => {\n        const layoutNode = layoutNodes.find(n => n.id === node.id)\n        return layoutNode ? { x: layoutNode.x, y: layoutNode.y, radius: layoutNode.radius } : { x: groupCenterX, y: groupCenterY, radius: avgNodeRadius }\n      })\n      \n      if (groupNodePositions.length > 0) {\n        const minX = Math.min(...groupNodePositions.map(p => p.x - p.radius)) - groupPadding\n        const maxX = Math.max(...groupNodePositions.map(p => p.x + p.radius)) + groupPadding\n        const minY = Math.min(...groupNodePositions.map(p => p.y - p.radius)) - groupPadding\n        const maxY = Math.max(...groupNodePositions.map(p => p.y + p.radius)) + groupPadding\n        \n        const width = Math.max(optimalSize, maxX - minX)\n        const height = Math.max(optimalSize, maxY - minY)\n        \n        groupBoxes.set(groupKey, {\n          x: groupCenterX - width / 2,\n          y: groupCenterY - height / 2,\n          width,\n          height,\n          centerX: groupCenterX,\n          centerY: groupCenterY\n        })\n      }\n    })\n    \n    // Apply group collision detection and adjustment\n    const adjustedGroups = resolveGroupCollisions(groupBoxes, groups, layoutNodes)\n    \n    // Store group boxes for drawing\n    ;(layoutNodes as any).groupBoxes = adjustedGroups\n    \n    return layoutNodes\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "nodes",
            "type": "Node[]"
          },
          {
            "name": "groups",
            "type": "Map<string, Node[]>"
          }
        ]
      },
      {
        "name": "calculateOptimalGroupSize",
        "code": "const calculateOptimalGroupSize = (numNodes: number, minSpacing: number): number => {\n    if (numNodes <= 1) return Math.max(120, minSpacing * 2)\n    \n    // Calculate area needed for nodes with proper spacing\n    const nodeArea = numNodes * Math.PI * Math.pow(minSpacing / 2, 2)\n    const baseRadius = Math.sqrt(nodeArea / Math.PI)\n    \n    // Add extra space for better distribution and visual appeal\n    const scaleFactor = Math.max(1.5, 1 + Math.log(numNodes) * 0.2)\n    return Math.max(180, baseRadius * 2 * scaleFactor)\n  }",
        "returnType": "number",
        "params": [
          {
            "name": "numNodes",
            "type": "number"
          },
          {
            "name": "minSpacing",
            "type": "number"
          }
        ]
      },
      {
        "name": "calculateOptimalNodePositions",
        "code": "const calculateOptimalNodePositions = (\n    numNodes: number, \n    centerX: number, \n    centerY: number, \n    groupSize: number, \n    minSpacing: number\n  ): Array<{ x: number, y: number }> => {\n    const positions: Array<{ x: number, y: number }> = []\n    \n    if (numNodes === 1) {\n      positions.push({ x: centerX, y: centerY })\n      return positions\n    }\n    \n    if (numNodes === 2) {\n      const spacing = minSpacing * 0.8\n      positions.push({ x: centerX - spacing / 2, y: centerY })\n      positions.push({ x: centerX + spacing / 2, y: centerY })\n      return positions\n    }\n    \n    if (numNodes <= 6) {\n      // Circular arrangement for small groups\n      const radius = Math.min(groupSize / 3, minSpacing * 0.7)\n      for (let i = 0; i < numNodes; i++) {\n        const angle = (2 * Math.PI * i) / numNodes\n        positions.push({\n          x: centerX + radius * Math.cos(angle),\n          y: centerY + radius * Math.sin(angle)\n        })\n      }\n      return positions\n    }\n    \n    // For larger groups, use a hybrid approach: rings + spiral\n    const innerRingSize = 6\n    const outerNodes = numNodes - innerRingSize\n    \n    // Inner ring\n    const innerRadius = minSpacing * 0.6\n    for (let i = 0; i < innerRingSize; i++) {\n      const angle = (2 * Math.PI * i) / innerRingSize\n      positions.push({\n        x: centerX + innerRadius * Math.cos(angle),\n        y: centerY + innerRadius * Math.sin(angle)\n      })\n    }\n    \n    // Outer spiral for remaining nodes\n    const maxRadius = groupSize / 2.5\n    const spiralTightness = 0.5\n    const angleStep = (2 * Math.PI) / 6 // Base angle step\n    \n    for (let i = 0; i < outerNodes; i++) {\n      const spiralProgress = i / outerNodes\n      const radius = innerRadius + (maxRadius - innerRadius) * Math.sqrt(spiralProgress)\n      const angle = angleStep * i + spiralProgress * Math.PI * spiralTightness\n      \n      positions.push({\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      })\n    }\n    \n    return positions\n  }",
        "returnType": "Array<{ x: number, y: number }>",
        "params": [
          {
            "name": "numNodes",
            "type": "number"
          },
          {
            "name": "centerX",
            "type": "number"
          },
          {
            "name": "centerY",
            "type": "number"
          },
          {
            "name": "groupSize",
            "type": "number"
          },
          {
            "name": "minSpacing",
            "type": "number"
          }
        ]
      },
      {
        "name": "resolveInternalNodeOverlaps",
        "code": "const resolveInternalNodeOverlaps = (\n    groupNodes: Node[], \n    layoutNodes: Node[], \n    minSpacing: number\n  ) => {\n    const maxIterations = 5\n    const groupLayoutNodes = groupNodes.map(node => layoutNodes.find(n => n.id === node.id)).filter(Boolean) as Node[]\n    \n    for (let iteration = 0; iteration < maxIterations; iteration++) {\n      let hasOverlaps = false\n      \n      for (let i = 0; i < groupLayoutNodes.length; i++) {\n        for (let j = i + 1; j < groupLayoutNodes.length; j++) {\n          const nodeA = groupLayoutNodes[i]\n          const nodeB = groupLayoutNodes[j]\n          \n          const dx = nodeB.x - nodeA.x\n          const dy = nodeB.y - nodeA.y\n          const distance = Math.sqrt(dx * dx + dy * dy)\n          const requiredDistance = minSpacing\n          \n          if (distance < requiredDistance && distance > 0) {\n            hasOverlaps = true\n            \n            const overlap = requiredDistance - distance\n            const separationForce = overlap * 0.5\n            const normalX = dx / distance\n            const normalY = dy / distance\n            \n            nodeA.x -= normalX * separationForce\n            nodeA.y -= normalY * separationForce\n            nodeB.x += normalX * separationForce\n            nodeB.y += normalY * separationForce\n          } else if (distance === 0) {\n            // Handle exact overlap\n            const randomAngle = Math.random() * 2 * Math.PI\n            const pushDistance = minSpacing / 2\n            nodeA.x += Math.cos(randomAngle) * pushDistance\n            nodeA.y += Math.sin(randomAngle) * pushDistance\n            nodeB.x -= Math.cos(randomAngle) * pushDistance\n            nodeB.y -= Math.sin(randomAngle) * pushDistance\n            hasOverlaps = true\n          }\n        }\n      }\n      \n      if (!hasOverlaps) break\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "groupNodes",
            "type": "Node[]"
          },
          {
            "name": "layoutNodes",
            "type": "Node[]"
          },
          {
            "name": "minSpacing",
            "type": "number"
          }
        ]
      },
      {
        "name": "resolveGroupCollisions",
        "code": "const resolveGroupCollisions = (groupBoxes: Map<string, any>, groups?: Map<string, Node[]>, layoutNodes?: Node[]) => {\n    const boxes = Array.from(groupBoxes.entries())\n    const maxIterations = 25 // More iterations for better separation\n    \n    // Store original positions to track movement\n    const originalPositions = new Map()\n    boxes.forEach(([key, box]) => {\n      originalPositions.set(key, { x: box.x, y: box.y, centerX: box.centerX, centerY: box.centerY })\n    })\n    \n    for (let iteration = 0; iteration < maxIterations; iteration++) {\n      let hasCollisions = false\n      \n      for (let i = 0; i < boxes.length; i++) {\n        for (let j = i + 1; j < boxes.length; j++) {\n          const [, boxA] = boxes[i]\n          const [, boxB] = boxes[j]\n          \n          // Increased padding between groups to prevent overlapping\n          const avgSize = (boxA.width + boxA.height + boxB.width + boxB.height) / 4\n          const padding = Math.max(120, avgSize * 0.25) // Much larger padding\n          \n          if (boxA.x < boxB.x + boxB.width + padding &&\n              boxA.x + boxA.width + padding > boxB.x &&\n              boxA.y < boxB.y + boxB.height + padding &&\n              boxA.y + boxA.height + padding > boxB.y) {\n            \n            hasCollisions = true\n            \n            // Calculate push direction and force\n            const centerAX = boxA.x + boxA.width / 2\n            const centerAY = boxA.y + boxA.height / 2\n            const centerBX = boxB.x + boxB.width / 2\n            const centerBY = boxB.y + boxB.height / 2\n            \n            const dx = centerBX - centerAX\n            const dy = centerBY - centerAY\n            const distance = Math.sqrt(dx * dx + dy * dy)\n            \n            if (distance > 0) {\n              // Calculate required separation distance\n              const requiredDistanceX = (boxA.width + boxB.width) / 2 + padding\n              const requiredDistanceY = (boxA.height + boxB.height) / 2 + padding\n              const requiredDistance = Math.sqrt(requiredDistanceX * requiredDistanceX + requiredDistanceY * requiredDistanceY)\n              \n              if (distance < requiredDistance) {\n                const overlap = requiredDistance - distance\n                const pushDistance = Math.max(80, overlap * 1.2) // Much stronger separation\n                const normalX = dx / distance\n                const normalY = dy / distance\n                \n                // Apply stronger separation force\n                boxA.x -= normalX * pushDistance / 2\n                boxA.y -= normalY * pushDistance / 2\n                boxA.centerX = boxA.x + boxA.width / 2\n                boxA.centerY = boxA.y + boxA.height / 2\n                \n                boxB.x += normalX * pushDistance / 2\n                boxB.y += normalY * pushDistance / 2\n                boxB.centerX = boxB.x + boxB.width / 2\n                boxB.centerY = boxB.y + boxB.height / 2\n              }\n            } else {\n              // Handle exact center overlap\n              const randomAngle = Math.random() * 2 * Math.PI\n              const pushDistance = Math.max(150, avgSize * 0.8) // Stronger random separation\n              \n              boxA.x -= Math.cos(randomAngle) * pushDistance / 2\n              boxA.y -= Math.sin(randomAngle) * pushDistance / 2\n              boxA.centerX = boxA.x + boxA.width / 2\n              boxA.centerY = boxA.y + boxA.height / 2\n              \n              boxB.x += Math.cos(randomAngle) * pushDistance / 2\n              boxB.y += Math.sin(randomAngle) * pushDistance / 2\n              boxB.centerX = boxB.x + boxB.width / 2\n              boxB.centerY = boxB.y + boxB.height / 2\n            }\n          }\n        }\n      }\n      \n      if (!hasCollisions) break\n    }\n    \n    // Move nodes along with their groups if collision resolution moved them\n    if (groups && layoutNodes) {\n      boxes.forEach(([groupKey, box]) => {\n        const originalPos = originalPositions.get(groupKey)\n        if (originalPos) {\n          const deltaX = box.centerX - originalPos.centerX\n          const deltaY = box.centerY - originalPos.centerY\n          \n          // Only move nodes if the group was significantly moved\n          if (Math.abs(deltaX) > 5 || Math.abs(deltaY) > 5) {\n            const groupNodes = groups.get(groupKey) || []\n            groupNodes.forEach(groupNode => {\n              const layoutNode = layoutNodes.find(n => n.id === groupNode.id)\n              if (layoutNode) {\n                layoutNode.x += deltaX\n                layoutNode.y += deltaY\n              }\n            })\n          }\n        }\n      })\n    }\n    \n    // Update the map with adjusted positions\n    const adjustedMap = new Map()\n    boxes.forEach(([key, box]) => {\n      adjustedMap.set(key, box)\n    })\n    \n    return adjustedMap\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "groupBoxes",
            "type": "Map<string, any>"
          },
          {
            "name": "groups",
            "type": "Map<string, Node[]>"
          },
          {
            "name": "layoutNodes",
            "type": "Node[]"
          }
        ]
      },
      {
        "name": "resolveNodeOverlapsInGroup",
        "code": "const resolveNodeOverlapsInGroup = (groupNodes: Node[], groupCenterX: number, groupCenterY: number, spacing: number) => {\n    const minDistance = spacing * 0.7 // Minimum distance between node centers\n    const maxIterations = 30\n    \n    for (let iteration = 0; iteration < maxIterations; iteration++) {\n      let hasOverlaps = false\n      \n      for (let i = 0; i < groupNodes.length; i++) {\n        for (let j = i + 1; j < groupNodes.length; j++) {\n          const nodeA = groupNodes[i]\n          const nodeB = groupNodes[j]\n          \n          const dx = nodeB.x - nodeA.x\n          const dy = nodeB.y - nodeA.y\n          const distance = Math.sqrt(dx * dx + dy * dy)\n          const requiredDistance = Math.max(minDistance, (nodeA.radius + nodeB.radius) * 2.2) // Ensure nodes don't visually overlap\n          \n          if (distance < requiredDistance) {\n            hasOverlaps = true\n            \n            // Calculate separation vector\n            if (distance > 0) {\n              const overlap = requiredDistance - distance\n              const separationX = (dx / distance) * overlap * 0.6\n              const separationY = (dy / distance) * overlap * 0.6\n              \n              // Move nodes apart\n              nodeA.x -= separationX / 2\n              nodeA.y -= separationY / 2\n              nodeB.x += separationX / 2\n              nodeB.y += separationY / 2\n            } else {\n              // Handle exact same position\n              const angle = Math.random() * 2 * Math.PI\n              const separation = requiredDistance / 2\n              \n              nodeA.x = groupCenterX - Math.cos(angle) * separation\n              nodeA.y = groupCenterY - Math.sin(angle) * separation\n              nodeB.x = groupCenterX + Math.cos(angle) * separation\n              nodeB.y = groupCenterY + Math.sin(angle) * separation\n            }\n          }\n        }\n      }\n      \n      if (!hasOverlaps) break\n    }\n    \n    // Apply gentle centering force to keep nodes roughly centered in group\n    const currentCenterX = groupNodes.reduce((sum, node) => sum + node.x, 0) / groupNodes.length\n    const currentCenterY = groupNodes.reduce((sum, node) => sum + node.y, 0) / groupNodes.length\n    \n    const offsetX = groupCenterX - currentCenterX\n    const offsetY = groupCenterY - currentCenterY\n    \n    // Apply a gentle centering adjustment\n    groupNodes.forEach(node => {\n      node.x += offsetX * 0.3\n      node.y += offsetY * 0.3\n    })\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "groupNodes",
            "type": "Node[]"
          },
          {
            "name": "groupCenterX",
            "type": "number"
          },
          {
            "name": "groupCenterY",
            "type": "number"
          },
          {
            "name": "spacing",
            "type": "number"
          }
        ]
      },
      {
        "name": "applyGroupedLayout",
        "code": "const applyGroupedLayout = (nodes: Node[], groups: Map<string, Node[]>) => {\n    const layoutNodes = [...nodes]\n    const groupBoxes = new Map()\n    const canvas = canvasRef.current\n    const canvasWidth = canvas ? canvas.width : 1200\n    const canvasHeight = canvas ? canvas.height : 800\n    \n    // Calculate initial group positions with proper spacing\n    const groupEntries = Array.from(groups.entries()).filter(([_, nodes]) => nodes.length > 0)\n    const groupsPerRow = Math.min(3, Math.ceil(Math.sqrt(groupEntries.length))) // Max 3 groups per row\n    const groupPadding = 200 // Large padding between groups\n    const availableWidth = canvasWidth - groupPadding * 2\n    const availableHeight = canvasHeight - groupPadding * 2\n    const groupWidth = availableWidth / groupsPerRow\n    const groupHeight = availableHeight / Math.ceil(groupEntries.length / groupsPerRow)\n    \n    groupEntries.forEach(([groupKey, groupNodes], groupIndex) => {\n      if (groupNodes.length === 0) return\n      \n      // Calculate this group's center position with padding\n      const row = Math.floor(groupIndex / groupsPerRow)\n      const col = groupIndex % groupsPerRow\n      const groupCenterX = groupPadding + (col + 0.5) * groupWidth\n      const groupCenterY = groupPadding + (row + 0.5) * groupHeight\n      \n      // Get tree layout positions relative to center with better spacing\n      const internalSpacing = nodeSpacing * 1.2 // Increased from 0.8 to 1.2 for more space\n      const treePositions = calculateTreeLayout(groupNodes, internalSpacing)\n      \n      // Apply absolute positions to nodes within this group\n      groupNodes.forEach((node, index) => {\n        const layoutNode = layoutNodes.find(n => n.id === node.id)\n        if (layoutNode && treePositions[index]) {\n          // Position nodes relative to group center\n          layoutNode.x = groupCenterX + treePositions[index].x\n          layoutNode.y = groupCenterY + treePositions[index].y\n        }\n      })\n      \n      // Resolve node overlaps within this group\n      const groupLayoutNodes = groupNodes.map(node => \n        layoutNodes.find(n => n.id === node.id)\n      ).filter(Boolean) as Node[]\n      \n      resolveNodeOverlapsInGroup(groupLayoutNodes, groupCenterX, groupCenterY, internalSpacing)\n      \n      // Calculate group container after positioning and overlap resolution\n      const groupNodePositions = groupLayoutNodes.map(node => ({\n        x: node.x,\n        y: node.y,\n        radius: node.radius\n      }))\n      \n      if (groupNodePositions.length > 0) {\n        const padding = 120 // More generous padding for group containers to accommodate spacing\n        const minX = Math.min(...groupNodePositions.map(p => p.x - p.radius)) - padding\n        const maxX = Math.max(...groupNodePositions.map(p => p.x + p.radius)) + padding\n        const minY = Math.min(...groupNodePositions.map(p => p.y - p.radius)) - padding\n        const maxY = Math.max(...groupNodePositions.map(p => p.y + p.radius)) + padding\n        \n        groupBoxes.set(groupKey, {\n          x: minX,\n          y: minY,\n          width: maxX - minX,\n          height: maxY - minY,\n          centerX: (minX + maxX) / 2,\n          centerY: (minY + maxY) / 2\n        })\n      }\n    })\n    \n    // Apply collision resolution and move nodes with their groups\n    const resolvedBoxes = resolveGroupCollisions(groupBoxes, groups, layoutNodes)\n    \n    // Attach resolved group boxes to nodes for rendering\n    ;(layoutNodes as any).groupBoxes = resolvedBoxes\n    \n    return layoutNodes\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "nodes",
            "type": "Node[]"
          },
          {
            "name": "groups",
            "type": "Map<string, Node[]>"
          }
        ]
      },
      {
        "name": "nodesOverlap",
        "code": "const nodesOverlap = (node1: Node, node2: Node, minDistance: number) => {\n    const dx = node1.x - node2.x\n    const dy = node1.y - node2.y\n    const distance = Math.sqrt(dx * dx + dy * dy)\n    return distance < minDistance\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "node1",
            "type": "Node"
          },
          {
            "name": "node2",
            "type": "Node"
          },
          {
            "name": "minDistance",
            "type": "number"
          }
        ]
      },
      {
        "name": "findNonOverlappingPosition",
        "code": "const findNonOverlappingPosition = (node: Node, otherNodes: Node[], centerX: number, centerY: number, minDistance: number, maxAttempts = 50) => {\n    let bestPosition = { x: node.x, y: node.y }\n    let bestDistance = 0\n    \n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\n      // Try different positions around the center\n      const angle = (Math.PI * 2 * attempt) / maxAttempts\n      const radius = minDistance + (attempt * 20)\n      const testX = centerX + Math.cos(angle) * radius\n      const testY = centerY + Math.sin(angle) * radius\n      \n      // Check if this position overlaps with any other node\n      let overlaps = false\n      let minDistanceToOthers = Infinity\n      \n      for (const otherNode of otherNodes) {\n        if (otherNode.id === node.id) continue\n        \n        const distance = Math.sqrt((testX - otherNode.x) ** 2 + (testY - otherNode.y) ** 2)\n        minDistanceToOthers = Math.min(minDistanceToOthers, distance)\n        \n        if (distance < minDistance) {\n          overlaps = true\n          break\n        }\n      }\n      \n      if (!overlaps) {\n        return { x: testX, y: testY }\n      }\n      \n      // Keep track of the best position (furthest from other nodes)\n      if (minDistanceToOthers > bestDistance) {\n        bestDistance = minDistanceToOthers\n        bestPosition = { x: testX, y: testY }\n      }\n    }\n    \n    return bestPosition\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "node",
            "type": "Node"
          },
          {
            "name": "otherNodes",
            "type": "Node[]"
          },
          {
            "name": "centerX",
            "type": "number"
          },
          {
            "name": "centerY",
            "type": "number"
          },
          {
            "name": "minDistance",
            "type": "number"
          },
          {
            "name": "maxAttempts",
            "type": "any"
          }
        ]
      },
      {
        "name": "handleNodeAction",
        "code": "const handleNodeAction = (action: string, node: Node) => {\n    switch (action) {\n      case 'focus':\n        setSelectedNode(node.id)\n        setShowConnectionsOnly(true)\n        break\n      case 'details':\n        onNodeClick?.(node.id)\n        break\n      case 'drag':\n        setDraggedNode(node.id)\n        setDragOffset({ x: 0, y: 0 })\n        node.fx = node.x\n        node.fy = node.y\n        break\n    }\n    setNodeContextMenu(null)\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "action",
            "type": "string"
          },
          {
            "name": "node",
            "type": "Node"
          }
        ]
      },
      {
        "name": "handleGroupAction",
        "code": "const handleGroupAction = (action: string, groupId: string, nodes: Node[]) => {\n    switch (action) {\n      case 'isolate':\n        setGroupFocusMode(true)\n        setFocusedGroup(groupId)\n        setSelectedNode(null)\n        break\n      case 'details':\n        if (onGroupClick) {\n          onGroupClick(groupId, nodes)\n        }\n        break\n      case 'expand':\n        // Could implement group expansion logic here\n        break\n    }\n    setGroupContextMenu(null)\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "action",
            "type": "string"
          },
          {
            "name": "groupId",
            "type": "string"
          },
          {
            "name": "nodes",
            "type": "Node[]"
          }
        ]
      },
      {
        "name": "handleMouseDown",
        "code": "const handleMouseDown = (e: React.MouseEvent) => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const rect = canvas.getBoundingClientRect()\n    const x = (e.clientX - rect.left - offset.x) / scale\n    const y = (e.clientY - rect.top - offset.y) / scale\n\n    const currentNodes = nodesRef.current\n    const groupBoxes = (currentNodes as any).groupBoxes as Map<string, { x: number, y: number, width: number, height: number }> | undefined\n    \n    // First check if clicking on a node (higher priority than groups)\n    const currentEdges = edgesRef.current.filter(edge => !filteredTypes.has(edge.type))\n    let visibleNodes: Node[]\n    \n    if (groupFocusMode && focusedGroup && nodeGroups.has(focusedGroup)) {\n      // Group focus mode - same logic as rendering\n      const groupMembers = nodeGroups.get(focusedGroup)!\n      const groupMemberIds = new Set(groupMembers.map(n => n.id))\n      \n      const connectedNodeIds = new Set<string>()\n      groupMemberIds.forEach(memberId => connectedNodeIds.add(memberId))\n      \n      currentEdges.forEach(edge => {\n        if (groupMemberIds.has(edge.source)) {\n          connectedNodeIds.add(edge.target)\n        }\n        if (groupMemberIds.has(edge.target)) {\n          connectedNodeIds.add(edge.source)\n        }\n      })\n      \n      visibleNodes = nodesRef.current.filter(node => connectedNodeIds.has(node.id))\n    } else if (showConnectionsOnly && selectedNode) {\n      visibleNodes = nodesRef.current.filter(node => \n        node.id === selectedNode ||\n        currentEdges.some(edge => edge.source === node.id || edge.target === node.id)\n      )\n    } else {\n      visibleNodes = nodesRef.current.filter(node => \n        !searchTerm || \n        node.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        node.type.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n    \n    // Increase click area for nodes slightly for better UX\n    const clickedNode = visibleNodes.find(node => {\n      const dx = x - node.x\n      const dy = y - node.y\n      const clickRadius = node.radius + 5 // Add 5px buffer for easier clicking\n      return Math.sqrt(dx * dx + dy * dy) <= clickRadius\n    })\n\n    if (clickedNode) {\n      // Node clicked - show context menu instead of dragging immediately\n      const canvasRect = canvasRef.current?.getBoundingClientRect()\n      if (canvasRect) {\n        const screenX = (clickedNode.x * scale) + offset.x + canvasRect.left\n        const screenY = (clickedNode.y * scale) + offset.y + canvasRect.top - 60 // Position above node\n        \n        setNodeContextMenu({\n          nodeId: clickedNode.id,\n          x: screenX,\n          y: screenY,\n          node: clickedNode\n        })\n        \n        // Clear group context menu if open\n        setGroupContextMenu(null)\n      }\n      return // Exit early - node takes priority\n    }\n    \n    // Only check for group dragging if no node was clicked\n    if (showGroupContainers && groupBoxes && groupingMode !== 'none') {\n      let clickedGroup: string | null = null\n      \n      groupBoxes.forEach((box, groupKey) => {\n        if (x >= box.x && x <= box.x + box.width && \n            y >= box.y && y <= box.y + box.height) {\n          clickedGroup = groupKey\n        }\n      })\n      \n      if (clickedGroup) {\n        // Check if click is in the group header area for dragging\n        const groupBox = groupBoxes.get(clickedGroup)!\n        const headerHeight = 40 // Only drag from header area\n        \n        if (y <= groupBox.y + headerHeight) {\n          // Start group dragging only from header\n          setDraggedGroup(clickedGroup)\n          setGroupDragOffset({\n            x: x - groupBox.x,\n            y: y - groupBox.y\n          })\n          return\n        } else {\n          // Click on group body - show context menu\n          if (nodeGroups.has(clickedGroup)) {\n            const groupNodes = nodeGroups.get(clickedGroup)!\n            const groupBox = groupBoxes.get(clickedGroup)!\n            const canvasRect = canvasRef.current?.getBoundingClientRect()\n            \n            if (canvasRect) {\n              const screenX = (groupBox.x * scale) + offset.x + canvasRect.left + (groupBox.width * scale) / 2\n              const screenY = (groupBox.y * scale) + offset.y + canvasRect.top - 10 // Position above group\n              \n              setGroupContextMenu({\n                groupId: clickedGroup,\n                x: screenX,\n                y: screenY,\n                nodes: groupNodes\n              })\n              \n              // Clear node context menu if open\n              setNodeContextMenu(null)\n            }\n          }\n          return\n        }\n      }\n    }\n    \n    // If no node or group clicked, clear context menus and start canvas dragging\n    setNodeContextMenu(null)\n    setGroupContextMenu(null)\n    setIsDragging(true)\n    setDragStart({ x: e.clientX - offset.x, y: e.clientY - offset.y })\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "e",
            "type": "React.MouseEvent"
          }
        ]
      },
      {
        "name": "handleMouseMove",
        "code": "const handleMouseMove = (e: React.MouseEvent) => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const rect = canvas.getBoundingClientRect()\n    const x = (e.clientX - rect.left - offset.x) / scale\n    const y = (e.clientY - rect.top - offset.y) / scale\n\n    if (draggedGroup) {\n      // Dragging a group\n      const currentNodes = nodesRef.current\n      const groupBoxes = (currentNodes as any).groupBoxes as Map<string, any> | undefined\n      \n      if (groupBoxes && groupBoxes.has(draggedGroup)) {\n        const groupBox = groupBoxes.get(draggedGroup)!\n        const newX = x - groupDragOffset.x\n        const newY = y - groupDragOffset.y\n        \n        // Calculate the displacement\n        const deltaX = newX - groupBox.x\n        const deltaY = newY - groupBox.y\n        \n        // Update group box position\n        groupBox.x = newX\n        groupBox.y = newY\n        groupBox.centerX = newX + groupBox.width / 2\n        groupBox.centerY = newY + groupBox.height / 2\n        \n        // Move all nodes in this group\n        const groupNodes = nodeGroups.get(draggedGroup) || []\n        groupNodes.forEach(node => {\n          const layoutNode = currentNodes.find(n => n.id === node.id)\n          if (layoutNode) {\n            layoutNode.x += deltaX\n            layoutNode.y += deltaY\n            layoutNode.fx = layoutNode.x\n            layoutNode.fy = layoutNode.y\n          }\n        })\n      }\n      canvas.style.cursor = 'grabbing'\n    } else if (draggedNode) {\n      // Dragging a node\n      const node = nodesRef.current.find(n => n.id === draggedNode)\n      if (node) {\n        node.x = x - dragOffset.x\n        node.y = y - dragOffset.y\n        node.fx = node.x\n        node.fy = node.y\n      }\n      canvas.style.cursor = 'grabbing'\n    } else if (isDragging) {\n      // Dragging the canvas\n      setOffset({\n        x: e.clientX - dragStart.x,\n        y: e.clientY - dragStart.y\n      })\n      canvas.style.cursor = 'grabbing'\n    } else {\n      // Check for hovered elements\n      let hoveredElement: string | null = null\n      \n      // Check for hovered group first\n      const currentNodes = nodesRef.current\n      const groupBoxes = (currentNodes as any).groupBoxes as Map<string, { x: number, y: number, width: number, height: number }> | undefined\n      \n      if (showGroupContainers && groupBoxes && groupingMode !== 'none') {\n        groupBoxes.forEach((box, groupKey) => {\n          if (x >= box.x && x <= box.x + box.width && \n              y >= box.y && y <= box.y + box.height) {\n            hoveredElement = `group-${groupKey}`\n          }\n        })\n      }\n      \n      // If not hovering over a group, check for nodes\n      if (!hoveredElement) {\n        const currentEdges = edgesRef.current.filter(edge => !filteredTypes.has(edge.type))\n        const visibleNodes = showConnectionsOnly && selectedNode \n          ? nodesRef.current.filter(node => \n              node.id === selectedNode ||\n              currentEdges.some(edge => edge.source === node.id || edge.target === node.id)\n            )\n          : nodesRef.current.filter(node => \n              !searchTerm || \n              node.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n              node.type.toLowerCase().includes(searchTerm.toLowerCase())\n            )\n        \n        const hoveredNode = visibleNodes.find(node => {\n          const dx = x - node.x\n          const dy = y - node.y\n          return Math.sqrt(dx * dx + dy * dy) <= node.radius\n        })\n\n        if (hoveredNode) {\n          hoveredElement = hoveredNode.id\n        }\n      }\n\n      setHoveredNode(hoveredElement)\n      \n      // Set cursor based on what's hovered\n      if (hoveredElement?.startsWith('group-')) {\n        canvas.style.cursor = 'move'\n      } else if (hoveredElement) {\n        canvas.style.cursor = 'pointer'\n      } else {\n        canvas.style.cursor = 'grab'\n      }\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "e",
            "type": "React.MouseEvent"
          }
        ]
      },
      {
        "name": "handleMouseUp",
        "code": "const handleMouseUp = () => {\n    if (draggedGroup) {\n      // Release the dragged group\n      const currentNodes = nodesRef.current\n      const groupNodes = nodeGroups.get(draggedGroup) || []\n      \n      // Keep group nodes fixed for a bit, then release for physics\n      setTimeout(() => {\n        groupNodes.forEach(node => {\n          const layoutNode = currentNodes.find(n => n.id === node.id)\n          if (layoutNode) {\n            layoutNode.fx = null\n            layoutNode.fy = null\n          }\n        })\n      }, 1000)\n      \n      setDraggedGroup(null)\n      setGroupDragOffset({ x: 0, y: 0 })\n    } else if (draggedNode) {\n      // Release the dragged node but keep it fixed in place\n      const node = nodesRef.current.find(n => n.id === draggedNode)\n      if (node) {\n        // Keep the node fixed for a bit, then release for physics\n        setTimeout(() => {\n          node.fx = null\n          node.fy = null\n        }, 500)\n      }\n      setDraggedNode(null)\n      setDragOffset({ x: 0, y: 0 })\n    }\n    setIsDragging(false)\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "handleWheel",
        "code": "const handleWheel = (e: React.WheelEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n    \n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const rect = canvas.getBoundingClientRect()\n    const mouseX = e.clientX - rect.left\n    const mouseY = e.clientY - rect.top\n    \n    // Calculate zoom factor with more granular control\n    const zoomIntensity = 0.1\n    const zoomFactor = e.deltaY > 0 ? (1 - zoomIntensity) : (1 + zoomIntensity)\n    const newScale = Math.max(0.2, Math.min(5, scale * zoomFactor))\n    \n    if (newScale !== scale) {\n      // Calculate the point in world coordinates before zoom\n      const worldX = (mouseX - offset.x) / scale\n      const worldY = (mouseY - offset.y) / scale\n      \n      // Calculate new offset to keep the mouse point stationary\n      const newOffsetX = mouseX - worldX * newScale\n      const newOffsetY = mouseY - worldY * newScale\n      \n      setScale(newScale)\n      setOffset({ x: newOffsetX, y: newOffsetY })\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "e",
            "type": "React.WheelEvent"
          }
        ]
      },
      {
        "name": "toggleFilter",
        "code": "const toggleFilter = (type: string) => {\n    setFilteredTypes(prev => {\n      const newSet = new Set(prev)\n      if (newSet.has(type)) {\n        newSet.delete(type)\n      } else {\n        newSet.add(type)\n      }\n      return newSet\n    })\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "type",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "calculateTreeLayout",
    "kind": "function",
    "code": "const calculateTreeLayout = (groupNodes: Node[], spacing: number) => {\n    if (groupNodes.length === 0) return []\n    if (groupNodes.length === 1) return [{ x: 0, y: 0 }]\n    \n    const positions: { x: number, y: number }[] = []\n    \n    // Sort nodes by type and connections for better tree structure\n    const sortedNodes = [...groupNodes].sort((a, b) => {\n      // Primary components at root, functions as branches, methods as leaves\n      const typeOrder = { component: 0, class: 1, function: 2, method: 3 }\n      const aOrder = typeOrder[a.type as keyof typeof typeOrder] ?? 4\n      const bOrder = typeOrder[b.type as keyof typeof typeOrder] ?? 4\n      \n      if (aOrder !== bOrder) return aOrder - bOrder\n      return (b.connections || 0) - (a.connections || 0) // More connected nodes higher\n    })\n    \n    if (sortedNodes.length <= 3) {\n      // Small groups: horizontal line layout with better spacing\n      const actualSpacing = spacing * 1.3 // Increase spacing between nodes\n      const totalWidth = (sortedNodes.length - 1) * actualSpacing\n      sortedNodes.forEach((_, index) => {\n        positions.push({\n          x: -totalWidth / 2 + index * actualSpacing,\n          y: 0\n        })\n      })\n    } else if (sortedNodes.length <= 6) {\n      // Medium groups: 2-level tree structure with improved spacing\n      const root = sortedNodes[0]\n      const children = sortedNodes.slice(1)\n      \n      // Root at top center with more vertical space\n      positions.push({ x: 0, y: -spacing * 1.3 })\n      \n      // Children arranged in a horizontal line below with more spacing\n      const childSpacing = spacing * 1.5 // Increased horizontal spacing\n      const childWidth = (children.length - 1) * childSpacing\n      children.forEach((_, index) => {\n        positions.push({\n          x: -childWidth / 2 + index * childSpacing,\n          y: spacing * 1.1 // Increased vertical spacing\n        })\n      })\n    } else {\n      // Large groups: 3-level tree structure with better spacing\n      const root = sortedNodes[0]\n      const level2Count = Math.min(3, Math.ceil(sortedNodes.length / 3))\n      const level2Nodes = sortedNodes.slice(1, 1 + level2Count)\n      const level3Nodes = sortedNodes.slice(1 + level2Count)\n      \n      // Root at top center with more space\n      positions.push({ x: 0, y: -spacing * 1.5 })\n      \n      // Level 2: spread horizontally with better spacing\n      const level2Spacing = spacing * 1.4\n      const level2Width = (level2Count - 1) * level2Spacing\n      level2Nodes.forEach((_, index) => {\n        positions.push({\n          x: level2Count === 1 ? 0 : -level2Width / 2 + index * level2Spacing,\n          y: -spacing * 0.1 // Slightly below root\n        })\n      })\n      \n      // Level 3: arrange under level 2 nodes with better spacing\n      const nodesPerParent = Math.ceil(level3Nodes.length / level2Count)\n      const childSpacing = spacing * 1.1\n      level3Nodes.forEach((_, index) => {\n        const parentIndex = Math.floor(index / nodesPerParent)\n        const childIndex = index % nodesPerParent\n        const parentX = level2Count === 1 ? 0 : -level2Width / 2 + parentIndex * level2Spacing\n        \n        const siblingCount = Math.min(nodesPerParent, level3Nodes.length - parentIndex * nodesPerParent)\n        const siblingWidth = (siblingCount - 1) * childSpacing\n        \n        positions.push({\n          x: parentX + (siblingCount === 1 ? 0 : -siblingWidth / 2 + childIndex * childSpacing),\n          y: spacing * 1.8 // Increased vertical spacing for level 3\n        })\n      })\n    }\n    \n    return positions\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_calculatetreelayout",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getNodeGradient",
    "kind": "function",
    "code": "const getNodeGradient = (type: string) => {\n    const gradients = {\n      component: ['#10F5CC', '#0EA5E9'], // Cyan to blue gradient\n      class: ['#818CF8', '#6366F1'], // Indigo gradient\n      function: ['#FCD34D', '#F59E0B'], // Yellow gradient\n      method: ['#F472B6', '#EC4899'] // Pink gradient\n    }\n    return gradients[type as keyof typeof gradients] || ['#9CA3AF', '#6B7280']\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_getnodegradient",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getEdgeColor",
    "kind": "function",
    "code": "const getEdgeColor = (type: string, opacity = 1) => {\n    const colors = {\n      'uses': `rgba(59, 130, 246, ${opacity})`, // Blue - component uses\n      'inherits': `rgba(147, 51, 234, ${opacity})`, // Purple - inheritance\n      'contains': `rgba(16, 185, 129, ${opacity})` // Green - containment\n    }\n    return colors[type as keyof typeof colors] || `rgba(107, 114, 128, ${opacity})`\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_getedgecolor",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "MinimapComponent",
    "kind": "component",
    "code": "const MinimapComponent = ({ nodes, edges, scale, offset, canvasRef, selectedNode }: {\n    nodes: Node[]\n    edges: Edge[]\n    scale: number\n    offset: { x: number, y: number }\n    canvasRef: React.RefObject<HTMLCanvasElement>\n    selectedNode: string | null\n  }) => {\n    const minimapCanvasRef = useRef<HTMLCanvasElement>(null)\n    \n    useEffect(() => {\n      const canvas = minimapCanvasRef.current\n      if (!canvas || nodes.length === 0) return\n\n      const ctx = canvas.getContext('2d')\n      if (!ctx) return\n\n      ctx.clearRect(0, 0, 128, 96)\n      \n      // Calculate world bounds\n      const padding = 50\n      const minX = Math.min(...nodes.map(n => n.x)) - padding\n      const maxX = Math.max(...nodes.map(n => n.x)) + padding\n      const minY = Math.min(...nodes.map(n => n.y)) - padding\n      const maxY = Math.max(...nodes.map(n => n.y)) + padding\n      \n      const worldWidth = maxX - minX\n      const worldHeight = maxY - minY\n      const scaleX = 128 / worldWidth\n      const scaleY = 96 / worldHeight\n      const minimapScale = Math.min(scaleX, scaleY)\n      \n      const offsetX = (128 - worldWidth * minimapScale) / 2\n      const offsetY = (96 - worldHeight * minimapScale) / 2\n      \n      // Draw edges\n      ctx.strokeStyle = 'rgba(100, 116, 139, 0.3)'\n      ctx.lineWidth = 1\n      edges.forEach(edge => {\n        const sourceNode = nodes.find(n => n.id === edge.source)\n        const targetNode = nodes.find(n => n.id === edge.target)\n        \n        if (sourceNode && targetNode) {\n          const x1 = offsetX + (sourceNode.x - minX) * minimapScale\n          const y1 = offsetY + (sourceNode.y - minY) * minimapScale\n          const x2 = offsetX + (targetNode.x - minX) * minimapScale\n          const y2 = offsetY + (targetNode.y - minY) * minimapScale\n          \n          ctx.beginPath()\n          ctx.moveTo(x1, y1)\n          ctx.lineTo(x2, y2)\n          ctx.stroke()\n        }\n      })\n      \n      // Draw nodes\n      nodes.forEach(node => {\n        const x = offsetX + (node.x - minX) * minimapScale\n        const y = offsetY + (node.y - minY) * minimapScale\n        const radius = Math.max(1, 2)\n        \n        ctx.fillStyle = node.id === selectedNode ? '#3b82f6' : '#64748b'\n        ctx.beginPath()\n        ctx.arc(x, y, radius, 0, 2 * Math.PI)\n        ctx.fill()\n      })\n    }, [nodes, edges, selectedNode])\n\n    // Calculate viewport indicator position and size\n    const calculateViewport = () => {\n      if (!canvasRef.current || nodes.length === 0) return null\n\n      const canvas = canvasRef.current\n      const padding = 50\n      const minX = Math.min(...nodes.map(n => n.x)) - padding\n      const maxX = Math.max(...nodes.map(n => n.x)) + padding\n      const minY = Math.min(...nodes.map(n => n.y)) - padding\n      const maxY = Math.max(...nodes.map(n => n.y)) + padding\n      \n      const worldWidth = maxX - minX\n      const worldHeight = maxY - minY\n      \n      // Current viewport in world coordinates\n      const viewportLeft = (-offset.x) / scale\n      const viewportTop = (-offset.y) / scale\n      const viewportWidth = canvas.width / scale\n      const viewportHeight = canvas.height / scale\n      \n      // Convert to minimap coordinates (0-100%)\n      const left = Math.max(0, Math.min(100, ((viewportLeft - minX) / worldWidth) * 100))\n      const top = Math.max(0, Math.min(100, ((viewportTop - minY) / worldHeight) * 100))\n      const width = Math.min(100 - left, (viewportWidth / worldWidth) * 100)\n      const height = Math.min(100 - top, (viewportHeight / worldHeight) * 100)\n      \n      return { left, top, width, height }\n    }\n\n    const viewport = calculateViewport()\n    \n    return (\n      <div className=\"absolute top-4 right-4 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm border border-slate-200 dark:border-slate-600 rounded-lg p-2 shadow-lg\">\n        <div className=\"w-32 h-24 relative bg-slate-50 dark:bg-slate-900 rounded overflow-hidden\">\n          <canvas\n            ref={minimapCanvasRef}\n            width={128}\n            height={96}\n            className=\"w-full h-full\"\n            style={{ display: 'block' }}\n          />\n          {/* Viewport indicator */}\n          {viewport && (\n            <div \n              className=\"absolute border-2 border-blue-500 bg-blue-500/20 pointer-events-none\"\n              style={{\n                left: `${viewport.left}%`,\n                top: `${viewport.top}%`,\n                width: `${viewport.width}%`,\n                height: `${viewport.height}%`,\n              }}\n            />\n          )}\n        </div>\n        <div className=\"text-xs text-slate-600 dark:text-slate-400 mt-1 text-center\">\n          Navigation\n        </div>\n      </div>\n    )\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_minimapcomponent",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "calculateViewport",
        "code": "const calculateViewport = () => {\n      if (!canvasRef.current || nodes.length === 0) return null\n\n      const canvas = canvasRef.current\n      const padding = 50\n      const minX = Math.min(...nodes.map(n => n.x)) - padding\n      const maxX = Math.max(...nodes.map(n => n.x)) + padding\n      const minY = Math.min(...nodes.map(n => n.y)) - padding\n      const maxY = Math.max(...nodes.map(n => n.y)) + padding\n      \n      const worldWidth = maxX - minX\n      const worldHeight = maxY - minY\n      \n      // Current viewport in world coordinates\n      const viewportLeft = (-offset.x) / scale\n      const viewportTop = (-offset.y) / scale\n      const viewportWidth = canvas.width / scale\n      const viewportHeight = canvas.height / scale\n      \n      // Convert to minimap coordinates (0-100%)\n      const left = Math.max(0, Math.min(100, ((viewportLeft - minX) / worldWidth) * 100))\n      const top = Math.max(0, Math.min(100, ((viewportTop - minY) / worldHeight) * 100))\n      const width = Math.min(100 - left, (viewportWidth / worldWidth) * 100)\n      const height = Math.min(100 - top, (viewportHeight / worldHeight) * 100)\n      \n      return { left, top, width, height }\n    }",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "calculateViewport",
    "kind": "function",
    "code": "const calculateViewport = () => {\n      if (!canvasRef.current || nodes.length === 0) return null\n\n      const canvas = canvasRef.current\n      const padding = 50\n      const minX = Math.min(...nodes.map(n => n.x)) - padding\n      const maxX = Math.max(...nodes.map(n => n.x)) + padding\n      const minY = Math.min(...nodes.map(n => n.y)) - padding\n      const maxY = Math.max(...nodes.map(n => n.y)) + padding\n      \n      const worldWidth = maxX - minX\n      const worldHeight = maxY - minY\n      \n      // Current viewport in world coordinates\n      const viewportLeft = (-offset.x) / scale\n      const viewportTop = (-offset.y) / scale\n      const viewportWidth = canvas.width / scale\n      const viewportHeight = canvas.height / scale\n      \n      // Convert to minimap coordinates (0-100%)\n      const left = Math.max(0, Math.min(100, ((viewportLeft - minX) / worldWidth) * 100))\n      const top = Math.max(0, Math.min(100, ((viewportTop - minY) / worldHeight) * 100))\n      const width = Math.min(100 - left, (viewportWidth / worldWidth) * 100)\n      const height = Math.min(100 - top, (viewportHeight / worldHeight) * 100)\n      \n      return { left, top, width, height }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_calculateviewport",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "roundRect",
    "kind": "function",
    "code": "const roundRect = (ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, radius: number) => {\n    ctx.beginPath()\n    ctx.moveTo(x + radius, y)\n    ctx.lineTo(x + width - radius, y)\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n    ctx.lineTo(x + width, y + height - radius)\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n    ctx.lineTo(x + radius, y + height)\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n    ctx.lineTo(x, y + radius)\n    ctx.quadraticCurveTo(x, y, x + radius, y)\n    ctx.closePath()\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_roundrect",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "applyHierarchicalLayout",
    "kind": "function",
    "code": "const applyHierarchicalLayout = (nodes: Node[], edges: Edge[]) => {\n    const levels = new Map<string, number>()\n    const visited = new Set<string>()\n    \n    // Find root nodes (no incoming edges)\n    const incomingCount = new Map<string, number>()\n    nodes.forEach(node => incomingCount.set(node.id, 0))\n    edges.forEach(edge => {\n      incomingCount.set(edge.target, (incomingCount.get(edge.target) || 0) + 1)\n    })\n    \n    const rootNodes = nodes.filter(node => incomingCount.get(node.id) === 0)\n    \n    // BFS to assign levels\n    const queue = rootNodes.map(node => ({ id: node.id, level: 0 }))\n    \n    while (queue.length > 0) {\n      const { id, level } = queue.shift()!\n      if (visited.has(id)) continue\n      \n      visited.add(id)\n      levels.set(id, level)\n      \n      edges\n        .filter(edge => edge.source === id)\n        .forEach(edge => {\n          if (!visited.has(edge.target)) {\n            queue.push({ id: edge.target, level: level + 1 })\n          }\n        })\n    }\n    \n    // Position nodes by level\n    const levelGroups = new Map<number, string[]>()\n    levels.forEach((level, nodeId) => {\n      if (!levelGroups.has(level)) levelGroups.set(level, [])\n      levelGroups.get(level)!.push(nodeId)\n    })\n    \n    return nodes.map(node => {\n      const level = levels.get(node.id) || 0\n      const nodesAtLevel = levelGroups.get(level) || []\n      const index = nodesAtLevel.indexOf(node.id)\n      \n      const levelSpacing = nodeSpacing * 1.8\n      const nodeSpacingInLevel = nodeSpacing * 0.8\n      \n      return {\n        ...node,\n        x: 150 + level * levelSpacing,\n        y: 100 + (index * nodeSpacingInLevel) - ((nodesAtLevel.length - 1) * nodeSpacingInLevel / 2),\n        fx: layoutMode === 'hierarchical' ? 150 + level * levelSpacing : null,\n        fy: layoutMode === 'hierarchical' ? 100 + (index * nodeSpacingInLevel) - ((nodesAtLevel.length - 1) * nodeSpacingInLevel / 2) : null\n      }\n    })\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_applyhierarchicallayout",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "applyCircularLayout",
    "kind": "function",
    "code": "const applyCircularLayout = (nodes: Node[]) => {\n    const centerX = 400\n    const centerY = 300\n    const radius = Math.max(nodeSpacing, 100 + nodes.length * (nodeSpacing / 10))\n    \n    return nodes.map((node, index) => {\n      const angle = (2 * Math.PI * index) / nodes.length - Math.PI / 2\n      return {\n        ...node,\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle),\n        fx: layoutMode === 'circular' ? centerX + radius * Math.cos(angle) : null,\n        fy: layoutMode === 'circular' ? centerY + radius * Math.sin(angle) : null\n      }\n    })\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_applycircularlayout",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "applyAdvancedForceLayout",
    "kind": "function",
    "code": "const applyAdvancedForceLayout = (nodes: Node[], groups: Map<string, Node[]>) => {\n    const layoutNodes = [...nodes]\n    const groupBoxes = new Map<string, { x: number, y: number, width: number, height: number, centerX: number, centerY: number, fixed?: boolean }>()\n    \n    // Calculate optimal group sizing and positioning\n    const groupKeys = Array.from(groups.keys())\n    const numGroups = groupKeys.length\n    \n    if (numGroups === 0) return layoutNodes\n    \n    // Calculate average node size for spacing calculations\n    const avgNodeRadius = nodes.length > 0 ? nodes.reduce((sum, node) => sum + node.radius, 0) / nodes.length : 20\n    const minNodeSpacing = Math.max(avgNodeRadius * 3, 80) // Minimum distance between node centers\n    \n    // Dynamic grid sizing based on group count and sizes\n    const gridSize = Math.max(2, Math.ceil(Math.sqrt(numGroups * 1.2))) // Slightly larger grid for better spacing\n    \n    // Calculate required spacing based on largest groups\n    const maxNodesInAnyGroup = Math.max(...Array.from(groups.values()).map(nodes => nodes.length))\n    const estimatedGroupSize = calculateOptimalGroupSize(maxNodesInAnyGroup, minNodeSpacing)\n    const groupSpacing = Math.max(estimatedGroupSize + 100, nodeSpacing * 4)\n    \n    const startX = 300\n    const startY = 300\n    \n    groupKeys.forEach((groupKey, groupIndex) => {\n      const groupNodes = groups.get(groupKey) || []\n      const numNodesInGroup = groupNodes.length\n      \n      // Calculate group position in grid\n      const gridRow = Math.floor(groupIndex / gridSize)\n      const gridCol = groupIndex % gridSize\n      const groupCenterX = startX + gridCol * groupSpacing\n      const groupCenterY = startY + gridRow * groupSpacing\n      \n      // Calculate optimal group dimensions for this specific group\n      const optimalSize = calculateOptimalGroupSize(numNodesInGroup, minNodeSpacing)\n      const groupPadding = Math.max(50, avgNodeRadius * 2) // Generous padding\n      \n      // Layout nodes within the group using enhanced algorithm\n      const nodePositions = calculateOptimalNodePositions(\n        numNodesInGroup, \n        groupCenterX, \n        groupCenterY, \n        optimalSize, \n        minNodeSpacing\n      )\n      \n      groupNodes.forEach((node, nodeIndex) => {\n        const layoutNode = layoutNodes.find(n => n.id === node.id)\n        if (layoutNode && nodePositions[nodeIndex]) {\n          layoutNode.x = nodePositions[nodeIndex].x\n          layoutNode.y = nodePositions[nodeIndex].y\n        }\n      })\n      \n      // Apply overlap resolution within the group\n      resolveInternalNodeOverlaps(groupNodes, layoutNodes, minNodeSpacing)\n      \n      // Calculate actual bounding box based on final node positions\n      const groupNodePositions = groupNodes.map(node => {\n        const layoutNode = layoutNodes.find(n => n.id === node.id)\n        return layoutNode ? { x: layoutNode.x, y: layoutNode.y, radius: layoutNode.radius } : { x: groupCenterX, y: groupCenterY, radius: avgNodeRadius }\n      })\n      \n      if (groupNodePositions.length > 0) {\n        const minX = Math.min(...groupNodePositions.map(p => p.x - p.radius)) - groupPadding\n        const maxX = Math.max(...groupNodePositions.map(p => p.x + p.radius)) + groupPadding\n        const minY = Math.min(...groupNodePositions.map(p => p.y - p.radius)) - groupPadding\n        const maxY = Math.max(...groupNodePositions.map(p => p.y + p.radius)) + groupPadding\n        \n        const width = Math.max(optimalSize, maxX - minX)\n        const height = Math.max(optimalSize, maxY - minY)\n        \n        groupBoxes.set(groupKey, {\n          x: groupCenterX - width / 2,\n          y: groupCenterY - height / 2,\n          width,\n          height,\n          centerX: groupCenterX,\n          centerY: groupCenterY\n        })\n      }\n    })\n    \n    // Apply group collision detection and adjustment\n    const adjustedGroups = resolveGroupCollisions(groupBoxes, groups, layoutNodes)\n    \n    // Store group boxes for drawing\n    ;(layoutNodes as any).groupBoxes = adjustedGroups\n    \n    return layoutNodes\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_applyadvancedforcelayout",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "calculateOptimalGroupSize",
    "kind": "function",
    "code": "const calculateOptimalGroupSize = (numNodes: number, minSpacing: number): number => {\n    if (numNodes <= 1) return Math.max(120, minSpacing * 2)\n    \n    // Calculate area needed for nodes with proper spacing\n    const nodeArea = numNodes * Math.PI * Math.pow(minSpacing / 2, 2)\n    const baseRadius = Math.sqrt(nodeArea / Math.PI)\n    \n    // Add extra space for better distribution and visual appeal\n    const scaleFactor = Math.max(1.5, 1 + Math.log(numNodes) * 0.2)\n    return Math.max(180, baseRadius * 2 * scaleFactor)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_calculateoptimalgroupsize",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "calculateOptimalNodePositions",
    "kind": "function",
    "code": "const calculateOptimalNodePositions = (\n    numNodes: number, \n    centerX: number, \n    centerY: number, \n    groupSize: number, \n    minSpacing: number\n  ): Array<{ x: number, y: number }> => {\n    const positions: Array<{ x: number, y: number }> = []\n    \n    if (numNodes === 1) {\n      positions.push({ x: centerX, y: centerY })\n      return positions\n    }\n    \n    if (numNodes === 2) {\n      const spacing = minSpacing * 0.8\n      positions.push({ x: centerX - spacing / 2, y: centerY })\n      positions.push({ x: centerX + spacing / 2, y: centerY })\n      return positions\n    }\n    \n    if (numNodes <= 6) {\n      // Circular arrangement for small groups\n      const radius = Math.min(groupSize / 3, minSpacing * 0.7)\n      for (let i = 0; i < numNodes; i++) {\n        const angle = (2 * Math.PI * i) / numNodes\n        positions.push({\n          x: centerX + radius * Math.cos(angle),\n          y: centerY + radius * Math.sin(angle)\n        })\n      }\n      return positions\n    }\n    \n    // For larger groups, use a hybrid approach: rings + spiral\n    const innerRingSize = 6\n    const outerNodes = numNodes - innerRingSize\n    \n    // Inner ring\n    const innerRadius = minSpacing * 0.6\n    for (let i = 0; i < innerRingSize; i++) {\n      const angle = (2 * Math.PI * i) / innerRingSize\n      positions.push({\n        x: centerX + innerRadius * Math.cos(angle),\n        y: centerY + innerRadius * Math.sin(angle)\n      })\n    }\n    \n    // Outer spiral for remaining nodes\n    const maxRadius = groupSize / 2.5\n    const spiralTightness = 0.5\n    const angleStep = (2 * Math.PI) / 6 // Base angle step\n    \n    for (let i = 0; i < outerNodes; i++) {\n      const spiralProgress = i / outerNodes\n      const radius = innerRadius + (maxRadius - innerRadius) * Math.sqrt(spiralProgress)\n      const angle = angleStep * i + spiralProgress * Math.PI * spiralTightness\n      \n      positions.push({\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      })\n    }\n    \n    return positions\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_calculateoptimalnodepositions",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "resolveInternalNodeOverlaps",
    "kind": "function",
    "code": "const resolveInternalNodeOverlaps = (\n    groupNodes: Node[], \n    layoutNodes: Node[], \n    minSpacing: number\n  ) => {\n    const maxIterations = 5\n    const groupLayoutNodes = groupNodes.map(node => layoutNodes.find(n => n.id === node.id)).filter(Boolean) as Node[]\n    \n    for (let iteration = 0; iteration < maxIterations; iteration++) {\n      let hasOverlaps = false\n      \n      for (let i = 0; i < groupLayoutNodes.length; i++) {\n        for (let j = i + 1; j < groupLayoutNodes.length; j++) {\n          const nodeA = groupLayoutNodes[i]\n          const nodeB = groupLayoutNodes[j]\n          \n          const dx = nodeB.x - nodeA.x\n          const dy = nodeB.y - nodeA.y\n          const distance = Math.sqrt(dx * dx + dy * dy)\n          const requiredDistance = minSpacing\n          \n          if (distance < requiredDistance && distance > 0) {\n            hasOverlaps = true\n            \n            const overlap = requiredDistance - distance\n            const separationForce = overlap * 0.5\n            const normalX = dx / distance\n            const normalY = dy / distance\n            \n            nodeA.x -= normalX * separationForce\n            nodeA.y -= normalY * separationForce\n            nodeB.x += normalX * separationForce\n            nodeB.y += normalY * separationForce\n          } else if (distance === 0) {\n            // Handle exact overlap\n            const randomAngle = Math.random() * 2 * Math.PI\n            const pushDistance = minSpacing / 2\n            nodeA.x += Math.cos(randomAngle) * pushDistance\n            nodeA.y += Math.sin(randomAngle) * pushDistance\n            nodeB.x -= Math.cos(randomAngle) * pushDistance\n            nodeB.y -= Math.sin(randomAngle) * pushDistance\n            hasOverlaps = true\n          }\n        }\n      }\n      \n      if (!hasOverlaps) break\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_resolveinternalnodeoverlaps",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "resolveGroupCollisions",
    "kind": "function",
    "code": "const resolveGroupCollisions = (groupBoxes: Map<string, any>, groups?: Map<string, Node[]>, layoutNodes?: Node[]) => {\n    const boxes = Array.from(groupBoxes.entries())\n    const maxIterations = 25 // More iterations for better separation\n    \n    // Store original positions to track movement\n    const originalPositions = new Map()\n    boxes.forEach(([key, box]) => {\n      originalPositions.set(key, { x: box.x, y: box.y, centerX: box.centerX, centerY: box.centerY })\n    })\n    \n    for (let iteration = 0; iteration < maxIterations; iteration++) {\n      let hasCollisions = false\n      \n      for (let i = 0; i < boxes.length; i++) {\n        for (let j = i + 1; j < boxes.length; j++) {\n          const [, boxA] = boxes[i]\n          const [, boxB] = boxes[j]\n          \n          // Increased padding between groups to prevent overlapping\n          const avgSize = (boxA.width + boxA.height + boxB.width + boxB.height) / 4\n          const padding = Math.max(120, avgSize * 0.25) // Much larger padding\n          \n          if (boxA.x < boxB.x + boxB.width + padding &&\n              boxA.x + boxA.width + padding > boxB.x &&\n              boxA.y < boxB.y + boxB.height + padding &&\n              boxA.y + boxA.height + padding > boxB.y) {\n            \n            hasCollisions = true\n            \n            // Calculate push direction and force\n            const centerAX = boxA.x + boxA.width / 2\n            const centerAY = boxA.y + boxA.height / 2\n            const centerBX = boxB.x + boxB.width / 2\n            const centerBY = boxB.y + boxB.height / 2\n            \n            const dx = centerBX - centerAX\n            const dy = centerBY - centerAY\n            const distance = Math.sqrt(dx * dx + dy * dy)\n            \n            if (distance > 0) {\n              // Calculate required separation distance\n              const requiredDistanceX = (boxA.width + boxB.width) / 2 + padding\n              const requiredDistanceY = (boxA.height + boxB.height) / 2 + padding\n              const requiredDistance = Math.sqrt(requiredDistanceX * requiredDistanceX + requiredDistanceY * requiredDistanceY)\n              \n              if (distance < requiredDistance) {\n                const overlap = requiredDistance - distance\n                const pushDistance = Math.max(80, overlap * 1.2) // Much stronger separation\n                const normalX = dx / distance\n                const normalY = dy / distance\n                \n                // Apply stronger separation force\n                boxA.x -= normalX * pushDistance / 2\n                boxA.y -= normalY * pushDistance / 2\n                boxA.centerX = boxA.x + boxA.width / 2\n                boxA.centerY = boxA.y + boxA.height / 2\n                \n                boxB.x += normalX * pushDistance / 2\n                boxB.y += normalY * pushDistance / 2\n                boxB.centerX = boxB.x + boxB.width / 2\n                boxB.centerY = boxB.y + boxB.height / 2\n              }\n            } else {\n              // Handle exact center overlap\n              const randomAngle = Math.random() * 2 * Math.PI\n              const pushDistance = Math.max(150, avgSize * 0.8) // Stronger random separation\n              \n              boxA.x -= Math.cos(randomAngle) * pushDistance / 2\n              boxA.y -= Math.sin(randomAngle) * pushDistance / 2\n              boxA.centerX = boxA.x + boxA.width / 2\n              boxA.centerY = boxA.y + boxA.height / 2\n              \n              boxB.x += Math.cos(randomAngle) * pushDistance / 2\n              boxB.y += Math.sin(randomAngle) * pushDistance / 2\n              boxB.centerX = boxB.x + boxB.width / 2\n              boxB.centerY = boxB.y + boxB.height / 2\n            }\n          }\n        }\n      }\n      \n      if (!hasCollisions) break\n    }\n    \n    // Move nodes along with their groups if collision resolution moved them\n    if (groups && layoutNodes) {\n      boxes.forEach(([groupKey, box]) => {\n        const originalPos = originalPositions.get(groupKey)\n        if (originalPos) {\n          const deltaX = box.centerX - originalPos.centerX\n          const deltaY = box.centerY - originalPos.centerY\n          \n          // Only move nodes if the group was significantly moved\n          if (Math.abs(deltaX) > 5 || Math.abs(deltaY) > 5) {\n            const groupNodes = groups.get(groupKey) || []\n            groupNodes.forEach(groupNode => {\n              const layoutNode = layoutNodes.find(n => n.id === groupNode.id)\n              if (layoutNode) {\n                layoutNode.x += deltaX\n                layoutNode.y += deltaY\n              }\n            })\n          }\n        }\n      })\n    }\n    \n    // Update the map with adjusted positions\n    const adjustedMap = new Map()\n    boxes.forEach(([key, box]) => {\n      adjustedMap.set(key, box)\n    })\n    \n    return adjustedMap\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_resolvegroupcollisions",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "resolveNodeOverlapsInGroup",
    "kind": "function",
    "code": "const resolveNodeOverlapsInGroup = (groupNodes: Node[], groupCenterX: number, groupCenterY: number, spacing: number) => {\n    const minDistance = spacing * 0.7 // Minimum distance between node centers\n    const maxIterations = 30\n    \n    for (let iteration = 0; iteration < maxIterations; iteration++) {\n      let hasOverlaps = false\n      \n      for (let i = 0; i < groupNodes.length; i++) {\n        for (let j = i + 1; j < groupNodes.length; j++) {\n          const nodeA = groupNodes[i]\n          const nodeB = groupNodes[j]\n          \n          const dx = nodeB.x - nodeA.x\n          const dy = nodeB.y - nodeA.y\n          const distance = Math.sqrt(dx * dx + dy * dy)\n          const requiredDistance = Math.max(minDistance, (nodeA.radius + nodeB.radius) * 2.2) // Ensure nodes don't visually overlap\n          \n          if (distance < requiredDistance) {\n            hasOverlaps = true\n            \n            // Calculate separation vector\n            if (distance > 0) {\n              const overlap = requiredDistance - distance\n              const separationX = (dx / distance) * overlap * 0.6\n              const separationY = (dy / distance) * overlap * 0.6\n              \n              // Move nodes apart\n              nodeA.x -= separationX / 2\n              nodeA.y -= separationY / 2\n              nodeB.x += separationX / 2\n              nodeB.y += separationY / 2\n            } else {\n              // Handle exact same position\n              const angle = Math.random() * 2 * Math.PI\n              const separation = requiredDistance / 2\n              \n              nodeA.x = groupCenterX - Math.cos(angle) * separation\n              nodeA.y = groupCenterY - Math.sin(angle) * separation\n              nodeB.x = groupCenterX + Math.cos(angle) * separation\n              nodeB.y = groupCenterY + Math.sin(angle) * separation\n            }\n          }\n        }\n      }\n      \n      if (!hasOverlaps) break\n    }\n    \n    // Apply gentle centering force to keep nodes roughly centered in group\n    const currentCenterX = groupNodes.reduce((sum, node) => sum + node.x, 0) / groupNodes.length\n    const currentCenterY = groupNodes.reduce((sum, node) => sum + node.y, 0) / groupNodes.length\n    \n    const offsetX = groupCenterX - currentCenterX\n    const offsetY = groupCenterY - currentCenterY\n    \n    // Apply a gentle centering adjustment\n    groupNodes.forEach(node => {\n      node.x += offsetX * 0.3\n      node.y += offsetY * 0.3\n    })\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_resolvenodeoverlapsingroup",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "applyGroupedLayout",
    "kind": "function",
    "code": "const applyGroupedLayout = (nodes: Node[], groups: Map<string, Node[]>) => {\n    const layoutNodes = [...nodes]\n    const groupBoxes = new Map()\n    const canvas = canvasRef.current\n    const canvasWidth = canvas ? canvas.width : 1200\n    const canvasHeight = canvas ? canvas.height : 800\n    \n    // Calculate initial group positions with proper spacing\n    const groupEntries = Array.from(groups.entries()).filter(([_, nodes]) => nodes.length > 0)\n    const groupsPerRow = Math.min(3, Math.ceil(Math.sqrt(groupEntries.length))) // Max 3 groups per row\n    const groupPadding = 200 // Large padding between groups\n    const availableWidth = canvasWidth - groupPadding * 2\n    const availableHeight = canvasHeight - groupPadding * 2\n    const groupWidth = availableWidth / groupsPerRow\n    const groupHeight = availableHeight / Math.ceil(groupEntries.length / groupsPerRow)\n    \n    groupEntries.forEach(([groupKey, groupNodes], groupIndex) => {\n      if (groupNodes.length === 0) return\n      \n      // Calculate this group's center position with padding\n      const row = Math.floor(groupIndex / groupsPerRow)\n      const col = groupIndex % groupsPerRow\n      const groupCenterX = groupPadding + (col + 0.5) * groupWidth\n      const groupCenterY = groupPadding + (row + 0.5) * groupHeight\n      \n      // Get tree layout positions relative to center with better spacing\n      const internalSpacing = nodeSpacing * 1.2 // Increased from 0.8 to 1.2 for more space\n      const treePositions = calculateTreeLayout(groupNodes, internalSpacing)\n      \n      // Apply absolute positions to nodes within this group\n      groupNodes.forEach((node, index) => {\n        const layoutNode = layoutNodes.find(n => n.id === node.id)\n        if (layoutNode && treePositions[index]) {\n          // Position nodes relative to group center\n          layoutNode.x = groupCenterX + treePositions[index].x\n          layoutNode.y = groupCenterY + treePositions[index].y\n        }\n      })\n      \n      // Resolve node overlaps within this group\n      const groupLayoutNodes = groupNodes.map(node => \n        layoutNodes.find(n => n.id === node.id)\n      ).filter(Boolean) as Node[]\n      \n      resolveNodeOverlapsInGroup(groupLayoutNodes, groupCenterX, groupCenterY, internalSpacing)\n      \n      // Calculate group container after positioning and overlap resolution\n      const groupNodePositions = groupLayoutNodes.map(node => ({\n        x: node.x,\n        y: node.y,\n        radius: node.radius\n      }))\n      \n      if (groupNodePositions.length > 0) {\n        const padding = 120 // More generous padding for group containers to accommodate spacing\n        const minX = Math.min(...groupNodePositions.map(p => p.x - p.radius)) - padding\n        const maxX = Math.max(...groupNodePositions.map(p => p.x + p.radius)) + padding\n        const minY = Math.min(...groupNodePositions.map(p => p.y - p.radius)) - padding\n        const maxY = Math.max(...groupNodePositions.map(p => p.y + p.radius)) + padding\n        \n        groupBoxes.set(groupKey, {\n          x: minX,\n          y: minY,\n          width: maxX - minX,\n          height: maxY - minY,\n          centerX: (minX + maxX) / 2,\n          centerY: (minY + maxY) / 2\n        })\n      }\n    })\n    \n    // Apply collision resolution and move nodes with their groups\n    const resolvedBoxes = resolveGroupCollisions(groupBoxes, groups, layoutNodes)\n    \n    // Attach resolved group boxes to nodes for rendering\n    ;(layoutNodes as any).groupBoxes = resolvedBoxes\n    \n    return layoutNodes\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_applygroupedlayout",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "nodesOverlap",
    "kind": "function",
    "code": "const nodesOverlap = (node1: Node, node2: Node, minDistance: number) => {\n    const dx = node1.x - node2.x\n    const dy = node1.y - node2.y\n    const distance = Math.sqrt(dx * dx + dy * dy)\n    return distance < minDistance\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_nodesoverlap",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "findNonOverlappingPosition",
    "kind": "function",
    "code": "const findNonOverlappingPosition = (node: Node, otherNodes: Node[], centerX: number, centerY: number, minDistance: number, maxAttempts = 50) => {\n    let bestPosition = { x: node.x, y: node.y }\n    let bestDistance = 0\n    \n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\n      // Try different positions around the center\n      const angle = (Math.PI * 2 * attempt) / maxAttempts\n      const radius = minDistance + (attempt * 20)\n      const testX = centerX + Math.cos(angle) * radius\n      const testY = centerY + Math.sin(angle) * radius\n      \n      // Check if this position overlaps with any other node\n      let overlaps = false\n      let minDistanceToOthers = Infinity\n      \n      for (const otherNode of otherNodes) {\n        if (otherNode.id === node.id) continue\n        \n        const distance = Math.sqrt((testX - otherNode.x) ** 2 + (testY - otherNode.y) ** 2)\n        minDistanceToOthers = Math.min(minDistanceToOthers, distance)\n        \n        if (distance < minDistance) {\n          overlaps = true\n          break\n        }\n      }\n      \n      if (!overlaps) {\n        return { x: testX, y: testY }\n      }\n      \n      // Keep track of the best position (furthest from other nodes)\n      if (minDistanceToOthers > bestDistance) {\n        bestDistance = minDistanceToOthers\n        bestPosition = { x: testX, y: testY }\n      }\n    }\n    \n    return bestPosition\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_findnonoverlappingposition",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleNodeAction",
    "kind": "function",
    "code": "const handleNodeAction = (action: string, node: Node) => {\n    switch (action) {\n      case 'focus':\n        setSelectedNode(node.id)\n        setShowConnectionsOnly(true)\n        break\n      case 'details':\n        onNodeClick?.(node.id)\n        break\n      case 'drag':\n        setDraggedNode(node.id)\n        setDragOffset({ x: 0, y: 0 })\n        node.fx = node.x\n        node.fy = node.y\n        break\n    }\n    setNodeContextMenu(null)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_handlenodeaction",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleGroupAction",
    "kind": "function",
    "code": "const handleGroupAction = (action: string, groupId: string, nodes: Node[]) => {\n    switch (action) {\n      case 'isolate':\n        setGroupFocusMode(true)\n        setFocusedGroup(groupId)\n        setSelectedNode(null)\n        break\n      case 'details':\n        if (onGroupClick) {\n          onGroupClick(groupId, nodes)\n        }\n        break\n      case 'expand':\n        // Could implement group expansion logic here\n        break\n    }\n    setGroupContextMenu(null)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_handlegroupaction",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleKeyDown",
    "kind": "function",
    "code": "const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.target !== document.body) return // Only work when not typing in inputs\n      \n      switch (e.key) {\n        case 'r':\n        case 'R':\n          e.preventDefault()\n          resetView()\n          break\n        case 'f':\n        case 'F':\n          e.preventDefault()\n          fitToView()\n          break\n        case '=':\n        case '+':\n          e.preventDefault()\n          setScale(prev => Math.min(5, prev * 1.2))\n          break\n        case '-':\n        case '_':\n          e.preventDefault()\n          setScale(prev => Math.max(0.2, prev / 1.2))\n          break\n        case ' ':\n          e.preventDefault()\n          autoLayout()\n          break\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_handlekeydown",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleMouseDown",
    "kind": "function",
    "code": "const handleMouseDown = (e: React.MouseEvent) => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const rect = canvas.getBoundingClientRect()\n    const x = (e.clientX - rect.left - offset.x) / scale\n    const y = (e.clientY - rect.top - offset.y) / scale\n\n    const currentNodes = nodesRef.current\n    const groupBoxes = (currentNodes as any).groupBoxes as Map<string, { x: number, y: number, width: number, height: number }> | undefined\n    \n    // First check if clicking on a node (higher priority than groups)\n    const currentEdges = edgesRef.current.filter(edge => !filteredTypes.has(edge.type))\n    let visibleNodes: Node[]\n    \n    if (groupFocusMode && focusedGroup && nodeGroups.has(focusedGroup)) {\n      // Group focus mode - same logic as rendering\n      const groupMembers = nodeGroups.get(focusedGroup)!\n      const groupMemberIds = new Set(groupMembers.map(n => n.id))\n      \n      const connectedNodeIds = new Set<string>()\n      groupMemberIds.forEach(memberId => connectedNodeIds.add(memberId))\n      \n      currentEdges.forEach(edge => {\n        if (groupMemberIds.has(edge.source)) {\n          connectedNodeIds.add(edge.target)\n        }\n        if (groupMemberIds.has(edge.target)) {\n          connectedNodeIds.add(edge.source)\n        }\n      })\n      \n      visibleNodes = nodesRef.current.filter(node => connectedNodeIds.has(node.id))\n    } else if (showConnectionsOnly && selectedNode) {\n      visibleNodes = nodesRef.current.filter(node => \n        node.id === selectedNode ||\n        currentEdges.some(edge => edge.source === node.id || edge.target === node.id)\n      )\n    } else {\n      visibleNodes = nodesRef.current.filter(node => \n        !searchTerm || \n        node.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        node.type.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n    \n    // Increase click area for nodes slightly for better UX\n    const clickedNode = visibleNodes.find(node => {\n      const dx = x - node.x\n      const dy = y - node.y\n      const clickRadius = node.radius + 5 // Add 5px buffer for easier clicking\n      return Math.sqrt(dx * dx + dy * dy) <= clickRadius\n    })\n\n    if (clickedNode) {\n      // Node clicked - show context menu instead of dragging immediately\n      const canvasRect = canvasRef.current?.getBoundingClientRect()\n      if (canvasRect) {\n        const screenX = (clickedNode.x * scale) + offset.x + canvasRect.left\n        const screenY = (clickedNode.y * scale) + offset.y + canvasRect.top - 60 // Position above node\n        \n        setNodeContextMenu({\n          nodeId: clickedNode.id,\n          x: screenX,\n          y: screenY,\n          node: clickedNode\n        })\n        \n        // Clear group context menu if open\n        setGroupContextMenu(null)\n      }\n      return // Exit early - node takes priority\n    }\n    \n    // Only check for group dragging if no node was clicked\n    if (showGroupContainers && groupBoxes && groupingMode !== 'none') {\n      let clickedGroup: string | null = null\n      \n      groupBoxes.forEach((box, groupKey) => {\n        if (x >= box.x && x <= box.x + box.width && \n            y >= box.y && y <= box.y + box.height) {\n          clickedGroup = groupKey\n        }\n      })\n      \n      if (clickedGroup) {\n        // Check if click is in the group header area for dragging\n        const groupBox = groupBoxes.get(clickedGroup)!\n        const headerHeight = 40 // Only drag from header area\n        \n        if (y <= groupBox.y + headerHeight) {\n          // Start group dragging only from header\n          setDraggedGroup(clickedGroup)\n          setGroupDragOffset({\n            x: x - groupBox.x,\n            y: y - groupBox.y\n          })\n          return\n        } else {\n          // Click on group body - show context menu\n          if (nodeGroups.has(clickedGroup)) {\n            const groupNodes = nodeGroups.get(clickedGroup)!\n            const groupBox = groupBoxes.get(clickedGroup)!\n            const canvasRect = canvasRef.current?.getBoundingClientRect()\n            \n            if (canvasRect) {\n              const screenX = (groupBox.x * scale) + offset.x + canvasRect.left + (groupBox.width * scale) / 2\n              const screenY = (groupBox.y * scale) + offset.y + canvasRect.top - 10 // Position above group\n              \n              setGroupContextMenu({\n                groupId: clickedGroup,\n                x: screenX,\n                y: screenY,\n                nodes: groupNodes\n              })\n              \n              // Clear node context menu if open\n              setNodeContextMenu(null)\n            }\n          }\n          return\n        }\n      }\n    }\n    \n    // If no node or group clicked, clear context menus and start canvas dragging\n    setNodeContextMenu(null)\n    setGroupContextMenu(null)\n    setIsDragging(true)\n    setDragStart({ x: e.clientX - offset.x, y: e.clientY - offset.y })\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_handlemousedown",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleMouseMove",
    "kind": "function",
    "code": "const handleMouseMove = (e: React.MouseEvent) => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const rect = canvas.getBoundingClientRect()\n    const x = (e.clientX - rect.left - offset.x) / scale\n    const y = (e.clientY - rect.top - offset.y) / scale\n\n    if (draggedGroup) {\n      // Dragging a group\n      const currentNodes = nodesRef.current\n      const groupBoxes = (currentNodes as any).groupBoxes as Map<string, any> | undefined\n      \n      if (groupBoxes && groupBoxes.has(draggedGroup)) {\n        const groupBox = groupBoxes.get(draggedGroup)!\n        const newX = x - groupDragOffset.x\n        const newY = y - groupDragOffset.y\n        \n        // Calculate the displacement\n        const deltaX = newX - groupBox.x\n        const deltaY = newY - groupBox.y\n        \n        // Update group box position\n        groupBox.x = newX\n        groupBox.y = newY\n        groupBox.centerX = newX + groupBox.width / 2\n        groupBox.centerY = newY + groupBox.height / 2\n        \n        // Move all nodes in this group\n        const groupNodes = nodeGroups.get(draggedGroup) || []\n        groupNodes.forEach(node => {\n          const layoutNode = currentNodes.find(n => n.id === node.id)\n          if (layoutNode) {\n            layoutNode.x += deltaX\n            layoutNode.y += deltaY\n            layoutNode.fx = layoutNode.x\n            layoutNode.fy = layoutNode.y\n          }\n        })\n      }\n      canvas.style.cursor = 'grabbing'\n    } else if (draggedNode) {\n      // Dragging a node\n      const node = nodesRef.current.find(n => n.id === draggedNode)\n      if (node) {\n        node.x = x - dragOffset.x\n        node.y = y - dragOffset.y\n        node.fx = node.x\n        node.fy = node.y\n      }\n      canvas.style.cursor = 'grabbing'\n    } else if (isDragging) {\n      // Dragging the canvas\n      setOffset({\n        x: e.clientX - dragStart.x,\n        y: e.clientY - dragStart.y\n      })\n      canvas.style.cursor = 'grabbing'\n    } else {\n      // Check for hovered elements\n      let hoveredElement: string | null = null\n      \n      // Check for hovered group first\n      const currentNodes = nodesRef.current\n      const groupBoxes = (currentNodes as any).groupBoxes as Map<string, { x: number, y: number, width: number, height: number }> | undefined\n      \n      if (showGroupContainers && groupBoxes && groupingMode !== 'none') {\n        groupBoxes.forEach((box, groupKey) => {\n          if (x >= box.x && x <= box.x + box.width && \n              y >= box.y && y <= box.y + box.height) {\n            hoveredElement = `group-${groupKey}`\n          }\n        })\n      }\n      \n      // If not hovering over a group, check for nodes\n      if (!hoveredElement) {\n        const currentEdges = edgesRef.current.filter(edge => !filteredTypes.has(edge.type))\n        const visibleNodes = showConnectionsOnly && selectedNode \n          ? nodesRef.current.filter(node => \n              node.id === selectedNode ||\n              currentEdges.some(edge => edge.source === node.id || edge.target === node.id)\n            )\n          : nodesRef.current.filter(node => \n              !searchTerm || \n              node.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n              node.type.toLowerCase().includes(searchTerm.toLowerCase())\n            )\n        \n        const hoveredNode = visibleNodes.find(node => {\n          const dx = x - node.x\n          const dy = y - node.y\n          return Math.sqrt(dx * dx + dy * dy) <= node.radius\n        })\n\n        if (hoveredNode) {\n          hoveredElement = hoveredNode.id\n        }\n      }\n\n      setHoveredNode(hoveredElement)\n      \n      // Set cursor based on what's hovered\n      if (hoveredElement?.startsWith('group-')) {\n        canvas.style.cursor = 'move'\n      } else if (hoveredElement) {\n        canvas.style.cursor = 'pointer'\n      } else {\n        canvas.style.cursor = 'grab'\n      }\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_handlemousemove",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleMouseUp",
    "kind": "function",
    "code": "const handleMouseUp = () => {\n    if (draggedGroup) {\n      // Release the dragged group\n      const currentNodes = nodesRef.current\n      const groupNodes = nodeGroups.get(draggedGroup) || []\n      \n      // Keep group nodes fixed for a bit, then release for physics\n      setTimeout(() => {\n        groupNodes.forEach(node => {\n          const layoutNode = currentNodes.find(n => n.id === node.id)\n          if (layoutNode) {\n            layoutNode.fx = null\n            layoutNode.fy = null\n          }\n        })\n      }, 1000)\n      \n      setDraggedGroup(null)\n      setGroupDragOffset({ x: 0, y: 0 })\n    } else if (draggedNode) {\n      // Release the dragged node but keep it fixed in place\n      const node = nodesRef.current.find(n => n.id === draggedNode)\n      if (node) {\n        // Keep the node fixed for a bit, then release for physics\n        setTimeout(() => {\n          node.fx = null\n          node.fy = null\n        }, 500)\n      }\n      setDraggedNode(null)\n      setDragOffset({ x: 0, y: 0 })\n    }\n    setIsDragging(false)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_handlemouseup",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleWheel",
    "kind": "function",
    "code": "const handleWheel = (e: React.WheelEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n    \n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const rect = canvas.getBoundingClientRect()\n    const mouseX = e.clientX - rect.left\n    const mouseY = e.clientY - rect.top\n    \n    // Calculate zoom factor with more granular control\n    const zoomIntensity = 0.1\n    const zoomFactor = e.deltaY > 0 ? (1 - zoomIntensity) : (1 + zoomIntensity)\n    const newScale = Math.max(0.2, Math.min(5, scale * zoomFactor))\n    \n    if (newScale !== scale) {\n      // Calculate the point in world coordinates before zoom\n      const worldX = (mouseX - offset.x) / scale\n      const worldY = (mouseY - offset.y) / scale\n      \n      // Calculate new offset to keep the mouse point stationary\n      const newOffsetX = mouseX - worldX * newScale\n      const newOffsetY = mouseY - worldY * newScale\n      \n      setScale(newScale)\n      setOffset({ x: newOffsetX, y: newOffsetY })\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_handlewheel",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "toggleFilter",
    "kind": "function",
    "code": "const toggleFilter = (type: string) => {\n    setFilteredTypes(prev => {\n      const newSet = new Set(prev)\n      if (newSet.has(type)) {\n        newSet.delete(type)\n      } else {\n        newSet.add(type)\n      }\n      return newSet\n    })\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_togglefilter",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "resizeCanvas",
    "kind": "function",
    "code": "const resizeCanvas = () => {\n      // Force a reflow to get accurate dimensions\n      container.style.width = container.style.width\n      \n      // Get the container dimensions with proper calculations\n      const rect = container.getBoundingClientRect()\n      const computedStyle = window.getComputedStyle(container)\n      \n      // Calculate available space minus padding and borders\n      const paddingX = parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight)\n      const paddingY = parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom)\n      const borderX = parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth)\n      const borderY = parseFloat(computedStyle.borderTopWidth) + parseFloat(computedStyle.borderBottomWidth)\n      \n      // Set canvas size to fill container\n      const availableWidth = Math.max(600, rect.width - paddingX - borderX)\n      const availableHeight = Math.max(400, rect.height - paddingY - borderY)\n      \n      canvas.width = availableWidth\n      canvas.height = availableHeight\n      \n      // Set CSS size to match\n      canvas.style.width = availableWidth + 'px'\n      canvas.style.height = availableHeight + 'px'\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_resizecanvas",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "preventScroll",
    "kind": "function",
    "code": "const preventScroll = (e: WheelEvent) => {\n      if (canvas && canvas.contains(e.target as globalThis.Node)) {\n        e.preventDefault()\n        e.stopPropagation()\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_preventscroll",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "preventTouch",
    "kind": "function",
    "code": "const preventTouch = (e: TouchEvent) => {\n      if (canvas && canvas.contains(e.target as globalThis.Node)) {\n        e.preventDefault()\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/interactive-graph.tsx",
    "slug": "src_ui_components_interactive-graph_preventtouch",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Header",
    "kind": "component",
    "code": "export function Header() {\n  return (\n    <header className=\"border-b border-slate-100 dark:border-slate-800 bg-white dark:bg-slate-900 px-6 py-3 flex items-center justify-between\">\n      <Search />\n      <div className=\"flex items-center gap-3\">\n        <ModeToggle />\n      </div>\n    </header>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/header.tsx",
    "slug": "src_ui_components_header_header",
    "imports": [
      "ModeToggle",
      "Search",
      "Button",
      "Sparkles"
    ],
    "references": [
      "Search",
      "ModeToggle"
    ],
    "relationships": [
      {
        "source": "src_ui_components_header_header",
        "target": "modetoggle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_header_header",
        "target": "search",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_header_header",
        "target": "button",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_header_header",
        "target": "sparkles",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "ComponentStats",
    "kind": "component",
    "code": "export function ComponentStats({ type = 'component', searchQuery = '' }: ComponentStatsProps) {\n  const [components, setComponents] = useState<ComponentData[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // For methods, we need to extract methods from all components\n        if (type === 'method') {\n          const allMethods: ComponentData[] = []\n          \n          // Load all component details and extract their methods\n          await Promise.all(\n            data.map(async (comp: { name: string; slug: string }) => {\n              try {\n                const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n                const detail = await detailRes.json()\n                \n                // If this component has methods, add them to our collection\n                if (detail.methods && Array.isArray(detail.methods)) {\n                  detail.methods.forEach((method: any) => {\n                    // Skip if the method name is the same as the component (main function)\n                    if (method.name !== comp.name) {\n                      allMethods.push({\n                        name: method.name,\n                        slug: `${comp.slug}#${method.name}`, // Use fragment for method linking\n                        description: method.description || `A method in ${comp.name}`,\n                        filePath: detail.filePath || 'Unknown path',\n                        methodCount: 0,\n                        type: 'method',\n                        parentName: comp.name,\n                        parentType: detail.type || 'component'\n                      })\n                    }\n                  })\n                }\n              } catch (error) {\n                console.error(`Error fetching details for ${comp.name}:`, error)\n              }\n            })\n          )\n          \n          setComponents(allMethods)\n          setLoading(false)\n          return\n        }\n        \n        // For non-method types, classify items based on naming patterns\n        const fullComponents: ComponentData[] = data.map((comp: any) => {\n          let detectedType = 'component' // default\n          \n          const name = comp.name\n          const filePath = comp.filePath || ''\n          \n          // UI components (from ui/ directory) \n          if (comp.slug?.startsWith('ui_') || filePath.includes('/ui/')) {\n            if (name[0] === name[0].toUpperCase() && !name.includes('_')) {\n              detectedType = 'component' // PascalCase = React component\n            } else {\n              detectedType = 'function' // camelCase = function/method\n            }\n          }\n          // Functions and methods (camelCase names)\n          else if (name[0] === name[0].toLowerCase() && /[a-z][A-Z]/.test(name) || \n                   name.includes('handle') || name.includes('fetch') || name.includes('get') || \n                   name.includes('set') || name.includes('toggle') || name.includes('render')) {\n            detectedType = 'function'\n          }\n          // Classes (usually PascalCase and might contain certain keywords)\n          else if (name[0] === name[0].toUpperCase() && \n                   (name.includes('Service') || name.includes('Manager') || name.includes('Controller') || \n                    name.includes('Handler') || name.includes('Provider') && !filePath.includes('component'))) {\n            detectedType = 'class'  \n          }\n          // Components (PascalCase, typically React components)\n          else if (name[0] === name[0].toUpperCase()) {\n            detectedType = 'component'\n          }\n          // Everything else defaults to function\n          else {\n            detectedType = 'function'\n          }\n\n          return {\n            ...comp,\n            type: comp.type || detectedType,\n            description: comp.description || `A ${detectedType} in your codebase.`,\n            filePath: comp.filePath || 'Unknown path',\n            methodCount: comp.methodCount || 0\n          }\n        })\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }, [type])\n\n  if (loading) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-muted-foreground\">Loading component statistics...</p>\n      </div>\n    )\n  }\n\n  // Filter components based on search query\n  const filteredComponents = components.filter(component => {\n    if (!searchQuery) return true\n    const query = searchQuery.toLowerCase()\n    return (\n      component.name.toLowerCase().includes(query) ||\n      (component.description && component.description.toLowerCase().includes(query)) ||\n      (component.filePath && component.filePath.toLowerCase().includes(query))\n    )\n  })\n\n  if (filteredComponents.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        {searchQuery ? (\n          <div className=\"space-y-4\">\n            <p className=\"text-muted-foreground text-lg\">No {type}s found matching \"{searchQuery}\"</p>\n            <p className=\"text-sm text-muted-foreground\">Try adjusting your search terms or browse all {type}s</p>\n          </div>\n        ) : (\n          <p className=\"text-muted-foreground\">No {type}s found in the documentation.</p>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {searchQuery && (\n        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n          <span>Showing {filteredComponents.length} of {components.length} {type}s</span>\n          {searchQuery && <span>matching \"{searchQuery}\"</span>}\n        </div>\n      )}\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {filteredComponents.map((component) => {\n          // Determine the correct base path based on type\n          let basePath = '/components/';\n          if (type === 'class') basePath = '/classes/';\n          if (type === 'function') basePath = '/functions/';\n          \n          // For methods, use the parent type to determine the base path\n          if (type === 'method' && component.parentType) {\n            if (component.parentType === 'class') basePath = '/classes/';\n            if (component.parentType === 'function') basePath = '/functions/';\n          }\n          \n          // Extract the path and fragment for proper routing\n          const [path, fragment] = component.slug.split('#');\n          const href = `${basePath}${path}${fragment ? `#${fragment}` : ''}`;\n          \n          // Create a truly unique key by including the type and parent info if available\n          const uniqueKey = `${type}-${component.slug}-${component.parentName || ''}-${Math.random().toString(36).substring(7)}`;\n          \n          return (\n            <Link key={uniqueKey} href={href} className=\"h-full block group\">\n              <Card className=\"h-full hover:shadow-lg transition-all duration-300 cursor-pointer border-none shadow-sm bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm group-hover:scale-[1.02]\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`p-2 rounded-lg ${\n                        type === 'method' ? 'bg-amber-100 dark:bg-amber-900/20' :\n                        type === 'class' ? 'bg-blue-100 dark:bg-blue-900/20' :\n                        type === 'function' ? 'bg-emerald-100 dark:bg-emerald-900/20' :\n                        'bg-violet-100 dark:bg-violet-900/20'\n                      }`}>\n                        {type === 'method' ? (\n                          <FileCode className=\"h-5 w-5 text-amber-600 dark:text-amber-400\" />\n                        ) : type === 'class' ? (\n                          <Code className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                        ) : type === 'function' ? (\n                          <FileCode className=\"h-5 w-5 text-emerald-600 dark:text-emerald-400\" />\n                        ) : (\n                          <Code className=\"h-5 w-5 text-violet-600 dark:text-violet-400\" />\n                        )}\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-lg group-hover:text-violet-600 dark:group-hover:text-violet-400 transition-colors\">\n                          {component.name}\n                        </h3>\n                        {component.parentName && (\n                          <p className=\"text-xs text-muted-foreground\">\n                            in {component.parentName}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <Badge variant=\"secondary\" className=\"text-xs font-normal shrink-0\">\n                      {component.methodCount > 0 ? `${component.methodCount} methods` : type}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground line-clamp-3 mb-4 leading-relaxed\">\n                    {component.description || `A ${type} in your codebase.`}\n                  </p>\n                  <div className=\"flex items-center gap-2 text-xs text-muted-foreground pt-2 border-t border-slate-100 dark:border-slate-800\">\n                    <Clock className=\"h-3 w-3\" />\n                    <span className=\"truncate max-w-[200px]\">{component.filePath || 'Unknown path'}</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </Link>\n          )\n        })}\n      </div>\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/component-stats.tsx",
    "slug": "src_ui_components_component-stats_componentstats",
    "imports": [
      "Card",
      "CardContent",
      "Badge",
      "Link",
      "FileCode",
      "Clock",
      "Code"
    ],
    "references": [
      "Link",
      "Card",
      "CardContent",
      "FileCode",
      "Code",
      "Badge",
      "Clock"
    ],
    "relationships": [
      {
        "source": "src_ui_components_component-stats_componentstats",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-stats_componentstats",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-stats_componentstats",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-stats_componentstats",
        "target": "link",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-stats_componentstats",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-stats_componentstats",
        "target": "clock",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-stats_componentstats",
        "target": "code",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "/[a-z][a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 93,
        "targetFunction": "test"
      },
      {
        "target": "math.random().tostring(36)",
        "type": "uses",
        "weight": 2,
        "context": "calls substring",
        "sourceLine": 200,
        "targetFunction": "substring"
      },
      {
        "target": "math.random()",
        "type": "uses",
        "weight": 2,
        "context": "calls toString",
        "sourceLine": 200,
        "targetFunction": "toString"
      }
    ],
    "methods": []
  },
  {
    "name": "fetchComponents",
    "kind": "function",
    "code": "async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // For methods, we need to extract methods from all components\n        if (type === 'method') {\n          const allMethods: ComponentData[] = []\n          \n          // Load all component details and extract their methods\n          await Promise.all(\n            data.map(async (comp: { name: string; slug: string }) => {\n              try {\n                const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n                const detail = await detailRes.json()\n                \n                // If this component has methods, add them to our collection\n                if (detail.methods && Array.isArray(detail.methods)) {\n                  detail.methods.forEach((method: any) => {\n                    // Skip if the method name is the same as the component (main function)\n                    if (method.name !== comp.name) {\n                      allMethods.push({\n                        name: method.name,\n                        slug: `${comp.slug}#${method.name}`, // Use fragment for method linking\n                        description: method.description || `A method in ${comp.name}`,\n                        filePath: detail.filePath || 'Unknown path',\n                        methodCount: 0,\n                        type: 'method',\n                        parentName: comp.name,\n                        parentType: detail.type || 'component'\n                      })\n                    }\n                  })\n                }\n              } catch (error) {\n                console.error(`Error fetching details for ${comp.name}:`, error)\n              }\n            })\n          )\n          \n          setComponents(allMethods)\n          setLoading(false)\n          return\n        }\n        \n        // For non-method types, classify items based on naming patterns\n        const fullComponents: ComponentData[] = data.map((comp: any) => {\n          let detectedType = 'component' // default\n          \n          const name = comp.name\n          const filePath = comp.filePath || ''\n          \n          // UI components (from ui/ directory) \n          if (comp.slug?.startsWith('ui_') || filePath.includes('/ui/')) {\n            if (name[0] === name[0].toUpperCase() && !name.includes('_')) {\n              detectedType = 'component' // PascalCase = React component\n            } else {\n              detectedType = 'function' // camelCase = function/method\n            }\n          }\n          // Functions and methods (camelCase names)\n          else if (name[0] === name[0].toLowerCase() && /[a-z][A-Z]/.test(name) || \n                   name.includes('handle') || name.includes('fetch') || name.includes('get') || \n                   name.includes('set') || name.includes('toggle') || name.includes('render')) {\n            detectedType = 'function'\n          }\n          // Classes (usually PascalCase and might contain certain keywords)\n          else if (name[0] === name[0].toUpperCase() && \n                   (name.includes('Service') || name.includes('Manager') || name.includes('Controller') || \n                    name.includes('Handler') || name.includes('Provider') && !filePath.includes('component'))) {\n            detectedType = 'class'  \n          }\n          // Components (PascalCase, typically React components)\n          else if (name[0] === name[0].toUpperCase()) {\n            detectedType = 'component'\n          }\n          // Everything else defaults to function\n          else {\n            detectedType = 'function'\n          }\n\n          return {\n            ...comp,\n            type: comp.type || detectedType,\n            description: comp.description || `A ${detectedType} in your codebase.`,\n            filePath: comp.filePath || 'Unknown path',\n            methodCount: comp.methodCount || 0\n          }\n        })\n\n        // Filter by the requested type\n        const filteredComponents = fullComponents.filter(c =>\n          type === 'component' ?\n            c.type === 'component' || !c.type : // Include components or those without type specified\n            c.type === type\n        )\n\n        setComponents(filteredComponents)\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/component-stats.tsx",
    "slug": "src_ui_components_component-stats_fetchcomponents",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "ComponentDetails",
    "kind": "component",
    "code": "export function ComponentDetails({ component }: ComponentDetailsProps) {\n  const contentRef = useRef<HTMLDivElement>(null)\n\n  if (!component) {\n    return (\n      <div className=\"p-8 text-center\">\n        <h2 className=\"text-2xl font-bold mb-4\">Component not found</h2>\n        <p>The requested component could not be found.</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n      <div className=\"md:col-span-3\">\n        <div ref={contentRef} className=\"space-y-8\">\n          <div>\n            <h1 id=\"overview\" className=\"text-3xl font-bold mb-2\">{component.name}</h1>\n            <p className=\"text-muted-foreground mb-4\">{component.filePath}</p>\n            <div className=\"flex flex-wrap gap-2 mb-6\">\n              <Badge variant=\"outline\">{component.type || 'Component'}</Badge>\n              {component.props && component.props.length > 0 && (\n                <Badge variant=\"outline\">{component.props.length} Props</Badge>\n              )}\n              {component.methods && component.methods.length > 0 && (\n                <Badge variant=\"outline\">{component.methods.length} Methods</Badge>\n              )}\n            </div>\n            <div className=\"prose dark:prose-invert max-w-none\">\n              {component.description ? (\n                <ReactMarkdown rehypePlugins={[rehypeRaw, rehypeHighlight]}>\n                  {component.description}\n                </ReactMarkdown>\n              ) : (\n                <p className=\"text-muted-foreground italic\">No description available.</p>\n              )}\n            </div>\n          </div>\n\n          {component.props && component.props.length > 0 && (\n            <div>\n              <h2 id=\"props\" className=\"text-2xl font-bold mb-4\">Props</h2>\n              <div className=\"space-y-4\">\n                {component.props.map((prop: any, index: number) => (\n                  <Card key={index}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex flex-wrap items-center gap-2 mb-2\">\n                        <h3 className=\"text-lg font-semibold\">{prop.name}</h3>\n                        <Badge variant=\"outline\">{prop.type}</Badge>\n                        {prop.required && <Badge>Required</Badge>}\n                      </div>\n                      {prop.description && (\n                        <div className=\"text-sm text-muted-foreground prose dark:prose-invert max-w-none\">\n                          <ReactMarkdown rehypePlugins={[rehypeRaw, rehypeHighlight]}>\n                            {prop.description}\n                          </ReactMarkdown>\n                        </div>\n                      )}\n                      {prop.defaultValue && (\n                        <div className=\"mt-2\">\n                          <span className=\"text-sm font-medium\">Default:</span>{\" \"}\n                          <code className=\"text-sm bg-muted px-1 py-0.5 rounded\">{prop.defaultValue}</code>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {component.methods && component.methods.length > 0 && (\n            <div>\n              <h2 id=\"methods\" className=\"text-2xl font-bold mb-4\">Methods</h2>\n              <div className=\"space-y-6\">\n                {component.methods.map((method: any, index: number) => (\n                  <div key={index} className=\"space-y-2\">\n                    <h3 id={`method-${method.name}`} className=\"text-xl font-semibold\">{method.name}</h3>\n                    {method.description && (\n                      <div className=\"text-muted-foreground prose dark:prose-invert max-w-none\">\n                        <ReactMarkdown rehypePlugins={[rehypeRaw, rehypeHighlight]}>\n                          {method.description}\n                        </ReactMarkdown>\n                      </div>\n                    )}\n                    \n                    {method.params && method.params.length > 0 && (\n                      <div className=\"mt-2\">\n                        <h4 className=\"text-md font-medium mb-2\">Parameters</h4>\n                        <ul className=\"space-y-1 list-disc list-inside\">\n                          {method.params.map((param: any, paramIndex: number) => (\n                            <li key={paramIndex}>\n                              <code>{param.name}</code>: <span className=\"text-sm\">{param.type}</span>\n                              {param.description && (\n                                <div className=\"text-muted-foreground inline-block ml-1 prose dark:prose-invert max-w-none\">\n                                  -&nbsp;\n                                  <ReactMarkdown rehypePlugins={[rehypeRaw, rehypeHighlight]}>\n                                    {param.description}\n                                  </ReactMarkdown>\n                                </div>\n                              )}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                    \n                    {method.returnType && method.returnType !== 'void' && (\n                      <div className=\"mt-2\">\n                        <h4 className=\"text-md font-medium\">Returns</h4>\n                        <p><code>{method.returnType}</code></p>\n                      </div>\n                    )}\n                    \n                    {method.code && (\n                      <div className=\"mt-3\">\n                        <CodeBlock code={method.code} language=\"typescript\" />\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {component.code && (\n            <div>\n              <h2 id=\"source-code\" className=\"text-2xl font-bold mb-4\">Source Code</h2>\n              <CodeBlock code={component.code} language=\"typescript\" />\n            </div>\n          )}\n\n          {component.similarityWarnings && component.similarityWarnings.length > 0 && (\n            <div>\n              <h2 id=\"similar-code\" className=\"text-2xl font-bold mb-4\">Similar Code</h2>\n              <p className=\"mb-4 text-muted-foreground\">\n                These components or methods have similar implementation to this component.\n              </p>\n              <div className=\"space-y-4\">\n                {component.similarityWarnings.map((warning: any, index: number) => (\n                  <Card key={index}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <h3 className=\"text-lg font-semibold\">\n                          {warning.similarTo} in {warning.componentName}\n                        </h3>\n                        <Badge variant=\"outline\">\n                          {Math.round(warning.score * 100)}% similar\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">{warning.reason}</p>\n                      {warning.filePath && (\n                        <p className=\"text-xs text-muted-foreground\">{warning.filePath}</p>\n                      )}\n                      {warning.code && (\n                        <div className=\"mt-2\">\n                          <CodeBlock code={warning.code} language=\"typescript\" />\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"hidden md:block\">\n        <div className=\"sticky top-20\">\n          <TableOfContents \n            contentRef={contentRef}\n            title=\"On this page\"\n            className=\"p-4 rounded-lg border\"\n          />\n        </div>\n      </div>\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/component-details.tsx",
    "slug": "src_ui_components_component-details_componentdetails",
    "imports": [
      "Card",
      "CardContent",
      "Badge",
      "CodeBlock",
      "TableOfContents",
      "ReactMarkdown"
    ],
    "references": [
      "Badge",
      "ReactMarkdown",
      "Card",
      "CardContent",
      "CodeBlock",
      "TableOfContents"
    ],
    "relationships": [
      {
        "source": "src_ui_components_component-details_componentdetails",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-details_componentdetails",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-details_componentdetails",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-details_componentdetails",
        "target": "codeblock",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-details_componentdetails",
        "target": "tableofcontents",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-details_componentdetails",
        "target": "reactmarkdown",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "ComponentClient",
    "kind": "component",
    "code": "export default function ComponentClient({ slug }: { slug: string }) {\n  const [componentData, setComponentData] = useState<ComponentData | null>(null)\n  const [description, setDescription] = useState<string | null>(null)\n  const [isGenerating, setIsGenerating] = useState(false)\n  const [loading, setLoading] = useState(true)\n  const [activeTab, setActiveTab] = useState('code')\n  const [selectedMethod, setSelectedMethod] = useState<string | null>(null)\n  const [copySuccess, setCopySuccess] = useState<string | null>(null)\n  const [codeStats, setCodeStats] = useState<{\n    lines: number\n    complexity: number\n    maintainability: string\n  } | null>(null)\n\n  // Check for method fragment in URL\n  useEffect(() => {\n    // Check if URL has a fragment that might be a method name\n    if (typeof window !== 'undefined') {\n      const fragment = window.location.hash.replace('#', '');\n      if (fragment) {\n        setSelectedMethod(fragment);\n        setActiveTab('methods');\n      }\n    }\n  }, []);\n\n  // Calculate code statistics\n  const calculateCodeStats = (code: string) => {\n    const lines = code.split('\\n').filter(line => line.trim() !== '').length\n    const complexity = Math.min(Math.max(Math.floor(lines / 10), 1), 10)\n    const maintainability = complexity <= 3 ? 'Excellent' : complexity <= 6 ? 'Good' : complexity <= 8 ? 'Fair' : 'Needs Attention'\n    return { lines, complexity, maintainability }\n  }\n\n  // Copy to clipboard functionality\n  const copyToClipboard = async (text: string, type: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopySuccess(type)\n      setTimeout(() => setCopySuccess(null), 2000)\n    } catch (err) {\n      console.error('Failed to copy: ', err)\n    }\n  }\n\n  // Fetch component data\n  useEffect(() => {\n    async function fetchComponent() {\n      try {\n        // Try to fetch from docs-data\n        const res = await fetch(`/docs-data/${slug}.json`)\n        if (res.ok) {\n          const data = await res.json()\n          // Ensure all required fields exist with defaults\n          const componentData = {\n            ...data,\n            similarComponents: data.similarComponents || [],\n            lastUpdated: data.lastUpdated || new Date().toLocaleDateString(),\n            type: data.type || \"Component\",\n            route: data.route || `/components/${slug}`,\n            props: data.props || [],\n            methods: data.methods || []\n          }\n          setComponentData(componentData)\n          if (componentData.code) {\n            setCodeStats(calculateCodeStats(componentData.code))\n          }\n          if (data.description) {\n            setDescription(data.description)\n          }\n        } else {\n          // Fallback to mock data\n          setComponentData({\n            name: slug,\n            type: \"React Component\",\n            filePath: `src/components/${slug}.tsx`,\n            route: `/components/${slug}`,\n            code: `import React from 'react';\\n\\nexport function ${slug}({ title, children }) {\\n  return (\\n    <div className=\\\"component\\\">\\n      <h2>{title}</h2>\\n      <div>{children}</div>\\n    </div>\\n  );\\n}`,\n            lastUpdated: \"2 days ago\",\n            similarComponents: [\n              {\n                name: slug === \"Modal\" ? \"Dialog\" : \"Modal\",\n                similarity: 85,\n                reason: \"Both handle popup content with similar open/close behavior\",\n              },\n              {\n                name: \"Dropdown\",\n                similarity: 65,\n                reason: \"Similar toggling behavior and content display\",\n              },\n            ],\n          })\n        }\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        // Set fallback data on error\n        setComponentData({\n          name: slug,\n          type: \"Component\",\n          filePath: `src/components/${slug}.tsx`,\n          route: `/components/${slug}`,\n          code: `// Error loading component data for ${slug}`,\n          lastUpdated: new Date().toLocaleDateString(),\n          similarComponents: [],\n          props: [],\n          methods: []\n        })\n        setLoading(false)\n      }\n    }\n    fetchComponent()\n  }, [slug])\n\n  const [generationError, setGenerationError] = useState<string | null>(null);\n  const [modelUsed, setModelUsed] = useState<string | null>(null);\n\n  const generateDescription = async () => {\n    if (!componentData) return;\n    setIsGenerating(true);\n    setGenerationError(null);\n    setModelUsed(null);\n    \n    try {\n      console.log('Generating description for component:', componentData.name);\n      \n      const response = await fetch('/api/describe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          componentName: componentData.name,\n          code: componentData.code || `function ${componentData.name}() { /* Code not available */ }`,\n          filePath: componentData.filePath,\n          slug: slug,\n        }),\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok || data.error) {\n        console.error('Error from API:', data.error || 'Unknown error');\n        setGenerationError(data.error || 'Failed to generate description');\n        return;\n      }\n      \n      setDescription(data.description);\n      if (data.model) {\n        setModelUsed(data.model);\n      }\n      \n      // Update the component data with the new description\n      if (componentData) {\n        setComponentData({\n          ...componentData,\n          description: data.description,\n          lastUpdated: new Date().toISOString()\n        });\n      }\n      \n      console.log('Description generated successfully using model:', data.model);\n    } catch (error) {\n      console.error('Error generating description:', error);\n      setGenerationError(error instanceof Error ? error.message : 'Unknown error occurred');\n    } finally {\n      setIsGenerating(false);\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"container max-w-5xl py-12\">\n        <p className=\"text-center text-muted-foreground\">Loading component data...</p>\n      </div>\n    )\n  }\n\n  if (!componentData) {\n    return (\n      <div className=\"container max-w-5xl py-12\">\n        <p className=\"text-center text-muted-foreground\">Component not found</p>\n      </div>\n    )\n  }\n\n  const selectedMethodData = componentData.methods?.find(m => m.name === selectedMethod)\n\n  return (\n    <div className=\"container max-w-5xl py-12\">\n      <div className=\"flex flex-col gap-4 mb-8\">\n        <div className=\"flex items-center gap-3\">\n          <h1 className=\"text-4xl font-bold tracking-tight\">{componentData.name}</h1>\n          <Badge className=\"bg-violet-500 hover:bg-violet-600\">{componentData.type || \"Component\"}</Badge>\n        </div>\n        <div className=\"flex flex-col gap-2\">\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <FileCode className=\"h-4 w-4\" />\n            <span className=\"font-mono text-sm\">{componentData.filePath}</span>\n          </div>\n          {componentData.exportedFrom && componentData.exportedFrom.length > 1 && (\n            <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n              <span>Also exported from:</span>\n              <div className=\"flex flex-wrap gap-1\">\n                {componentData.exportedFrom\n                  .filter(path => path !== componentData.filePath)\n                  .map((exportPath, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {exportPath.split('/').pop()}\n                    </Badge>\n                  ))}\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"flex items-center justify-between mt-2\">\n          <p className=\"text-muted-foreground\">Last updated {componentData.lastUpdated || \"recently\"}</p>\n          <Button onClick={generateDescription} disabled={isGenerating} className=\"gap-2\">\n            {isGenerating ? (\n              \"Generating...\"\n            ) : (\n              <>\n                <Sparkles className=\"h-4 w-4\" />\n                Generate AI Description\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n      <AnimatePresence>\n        {description && (\n          <motion.div initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: 10 }}>\n            <Card className=\"mt-4 bg-white/5 border-violet-500/30\">\n              <CardHeader>\n                <CardTitle className=\"text-violet-600 dark:text-violet-400\">AI Description</CardTitle>\n                {modelUsed && (\n                  <CardDescription>\n                    Generated with {modelUsed}\n                  </CardDescription>\n                )}\n              </CardHeader>\n              <CardContent>\n                <div className=\"prose dark:prose-invert max-w-none\">\n                  <ReactMarkdown\n                    rehypePlugins={[rehypeRaw, rehypeHighlight]}\n                  >\n                    {description}\n                  </ReactMarkdown>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {generationError && !description && (\n        <div className=\"bg-red-50 dark:bg-red-900/20 p-6 rounded-xl shadow-sm mb-10 border border-red-100 dark:border-red-900/30\">\n          <h3 className=\"font-medium mb-3 text-red-600 dark:text-red-400\">Error Generating Description</h3>\n          <p className=\"text-md\">{generationError}</p>\n          <p className=\"text-sm mt-2 text-slate-600 dark:text-slate-400\">\n            Make sure Ollama is running locally or check your environment configuration.\n          </p>\n        </div>\n      )}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mb-10\">\n        <TabsList className=\"mb-6 bg-white dark:bg-slate-900 p-1 rounded-lg\">\n          <TabsTrigger value=\"code\" className=\"rounded-md\">\n            Code\n          </TabsTrigger>\n          <TabsTrigger value=\"usage\" className=\"rounded-md\">\n            Usage\n          </TabsTrigger>\n          <TabsTrigger value=\"props\" className=\"rounded-md\">\n            Props\n          </TabsTrigger>\n          <TabsTrigger value=\"methods\" className=\"rounded-md\">\n            Methods\n          </TabsTrigger>\n          <TabsTrigger value=\"relationships\" className=\"rounded-md\">\n            Relationships\n          </TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"code\">\n          <Card>\n            <CodeBlock code={componentData.code || `// Code not available for ${componentData.name}`} language=\"tsx\" />\n          </Card>\n        </TabsContent>\n        <TabsContent value=\"usage\">\n          <Card>\n            <CodeBlock\n              code={`import { ${componentData.name} } from '${componentData.filePath.replace(/\\.tsx?$/, '')}';\\n\\n// Usage example here`}\n              language=\"tsx\"\n            />\n          </Card>\n        </TabsContent>\n        <TabsContent value=\"props\">\n          <Card>\n            <div className=\"overflow-hidden rounded-xl border border-slate-100 dark:border-slate-800 bg-white dark:bg-slate-900 shadow-sm\">\n              <table className=\"w-full\">\n                <thead className=\"bg-slate-50 dark:bg-slate-800/50\">\n                  <tr>\n                    <th className=\"p-3 text-left font-medium\">Prop</th>\n                    <th className=\"p-3 text-left font-medium\">Type</th>\n                    <th className=\"p-3 text-left font-medium\">Required</th>\n                    <th className=\"p-3 text-left font-medium\">Default</th>\n                    <th className=\"p-3 text-left font-medium\">Description</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {componentData.props && componentData.props.length > 0 ? componentData.props.map((prop) => (\n                    <tr key={prop.name} className=\"border-t border-slate-100 dark:border-slate-800\">\n                      <td className=\"p-3 font-mono text-sm\">{prop.name}</td>\n                      <td className=\"p-3 font-mono text-sm text-violet-500\">{prop.type}</td>\n                      <td className=\"p-3\">{prop.required ? 'Yes' : 'No'}</td>\n                      <td className=\"p-3 font-mono text-sm\">{prop.defaultValue || 'N/A'}</td>\n                      <td className=\"p-3\">{prop.description || 'N/A'}</td>\n                    </tr>\n                  )) : (\n                    <tr>\n                      <td colSpan={5} className=\"p-6 text-center text-muted-foreground\">\n                        No props defined for this component\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </Card>\n        </TabsContent>\n        <TabsContent value=\"methods\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"md:col-span-1\">\n              <Card>\n                {componentData.methods && componentData.methods.length > 0 ? (\n                  <ul className=\"space-y-4\">\n                    {componentData.methods.map((method, index) => (\n                      <li\n                        key={method.name}\n                        className={`p-3 cursor-pointer ${selectedMethod === method.name ? 'bg-slate-100 dark:bg-slate-800' : 'hover:bg-slate-50 dark:hover:bg-slate-800/50'}`}\n                        onClick={() => setSelectedMethod(method.name)}\n                      >\n                        <a href={`#${method.name}`} className=\"font-medium\">{method.name}</a>\n                        <div className=\"text-sm text-muted-foreground line-clamp-2 prose dark:prose-invert max-w-none\">\n                          <ReactMarkdown rehypePlugins={[rehypeRaw, rehypeHighlight]}>\n                            {method.description || \"\"}\n                          </ReactMarkdown>\n                        </div>\n                      </li>\n                    ))}\n                  </ul>\n                ) : (\n                  <div className=\"p-6 text-center text-muted-foreground\">\n                    No methods defined for this component\n                  </div>\n                )}\n              </Card>\n            </div>\n            <div className=\"md:col-span-2\">\n              {selectedMethodData && (\n                <motion.div initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -10 }} className=\"mt-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">{selectedMethodData.name}</CardTitle>\n                      <CardDescription>\n                        <div className=\"text-muted-foreground pt-2 prose dark:prose-invert max-w-none\">\n                          <ReactMarkdown rehypePlugins={[rehypeRaw, rehypeHighlight]}>\n                            {selectedMethodData.description || \"\"}\n                          </ReactMarkdown>\n                        </div>\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      {selectedMethodData.params && selectedMethodData.params.length > 0 && (\n                        <div className=\"mb-4\">\n                          <h5 className=\"font-medium mb-2\">Parameters</h5>\n                          <div className=\"overflow-hidden rounded-xl border border-slate-100 dark:border-slate-800 bg-white dark:bg-slate-900 shadow-sm\">\n                            <table className=\"w-full\">\n                              <thead className=\"bg-slate-50 dark:bg-slate-800/50\">\n                                <tr>\n                                  <th className=\"p-3 text-left font-medium\">Name</th>\n                                  <th className=\"p-3 text-left font-medium\">Type</th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                {selectedMethodData.params.map((param) => (\n                                  <tr key={param.name} className=\"border-t border-slate-100 dark:border-slate-800\">\n                                    <td className=\"p-3 font-mono text-sm\">{param.name}</td>\n                                    <td className=\"p-3 font-mono text-sm text-violet-500\">{param.type}</td>\n                                  </tr>\n                                ))}\n                              </tbody>\n                            </table>\n                          </div>\n                        </div>\n                      )}\n                      <Card>\n                        <CodeBlock\n                          code={selectedMethodData.code || ''}\n                          language=\"typescript\"\n                        />\n                      </Card>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n        <TabsContent value=\"relationships\">\n          <Card>\n            <CodeRelationships entityId={slug} />\n          </Card>\n        </TabsContent>\n      </Tabs>\n      <Card>\n        <CardHeader>\n          <CardTitle>Similar Components</CardTitle>\n          <CardDescription>Based on an analysis of the codebase, here are some components with similar functionality or implementation.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {componentData.similarComponents?.map((comp) => (\n              <a href={`/components/${comp.slug || comp.name.toLowerCase()}`} key={comp.name} className=\"block p-4 rounded-lg border bg-card text-card-foreground shadow-sm hover:bg-muted/50 transition-colors\">\n                <div className=\"flex justify-between items-start\">\n                  <h4 className=\"font-semibold\">{comp.name}</h4>\n                  <div className=\"text-sm font-semibold text-violet-500\">{comp.similarity}%</div>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-1\">{comp.reason}</p>\n              </a>\n            )) || (\n              <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n                No similar components found\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/component-client.tsx",
    "slug": "src_ui_components_component-client_componentclient",
    "imports": [
      "Sparkles",
      "FileCode",
      "Clock",
      "Tag",
      "GitBranch",
      "Users",
      "Code2",
      "BookOpen",
      "Lightbulb",
      "Copy",
      "Check",
      "ExternalLink",
      "Info",
      "Button",
      "Tabs",
      "TabsContent",
      "TabsList",
      "TabsTrigger",
      "CodeBlock",
      "Badge",
      "CodeRelationships",
      "Card",
      "CardContent",
      "CardDescription",
      "CardHeader",
      "CardTitle",
      "ReactMarkdown",
      "AnimatePresence"
    ],
    "references": [
      "Badge",
      "FileCode",
      "Button",
      "Sparkles",
      "AnimatePresence",
      "Card",
      "CardHeader",
      "CardTitle",
      "CardDescription",
      "CardContent",
      "ReactMarkdown",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "TabsContent",
      "CodeBlock",
      "CodeRelationships"
    ],
    "relationships": [
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "sparkles",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "clock",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "tag",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "gitbranch",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "users",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "code2",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "bookopen",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "lightbulb",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "copy",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "check",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "externallink",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "info",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "tabscontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "codeblock",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "coderelationships",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "carddescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "cardtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "reactmarkdown",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_component-client_componentclient",
        "target": "animatepresence",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": [
      {
        "name": "calculateCodeStats",
        "code": "const calculateCodeStats = (code: string) => {\n    const lines = code.split('\\n').filter(line => line.trim() !== '').length\n    const complexity = Math.min(Math.max(Math.floor(lines / 10), 1), 10)\n    const maintainability = complexity <= 3 ? 'Excellent' : complexity <= 6 ? 'Good' : complexity <= 8 ? 'Fair' : 'Needs Attention'\n    return { lines, complexity, maintainability }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "code",
            "type": "string"
          }
        ]
      },
      {
        "name": "copyToClipboard",
        "code": "const copyToClipboard = async (text: string, type: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopySuccess(type)\n      setTimeout(() => setCopySuccess(null), 2000)\n    } catch (err) {\n      console.error('Failed to copy: ', err)\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "text",
            "type": "string"
          },
          {
            "name": "type",
            "type": "string"
          }
        ]
      },
      {
        "name": "generateDescription",
        "code": "const generateDescription = async () => {\n    if (!componentData) return;\n    setIsGenerating(true);\n    setGenerationError(null);\n    setModelUsed(null);\n    \n    try {\n      console.log('Generating description for component:', componentData.name);\n      \n      const response = await fetch('/api/describe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          componentName: componentData.name,\n          code: componentData.code || `function ${componentData.name}() { /* Code not available */ }`,\n          filePath: componentData.filePath,\n          slug: slug,\n        }),\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok || data.error) {\n        console.error('Error from API:', data.error || 'Unknown error');\n        setGenerationError(data.error || 'Failed to generate description');\n        return;\n      }\n      \n      setDescription(data.description);\n      if (data.model) {\n        setModelUsed(data.model);\n      }\n      \n      // Update the component data with the new description\n      if (componentData) {\n        setComponentData({\n          ...componentData,\n          description: data.description,\n          lastUpdated: new Date().toISOString()\n        });\n      }\n      \n      console.log('Description generated successfully using model:', data.model);\n    } catch (error) {\n      console.error('Error generating description:', error);\n      setGenerationError(error instanceof Error ? error.message : 'Unknown error occurred');\n    } finally {\n      setIsGenerating(false);\n    }\n  }",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "calculateCodeStats",
    "kind": "function",
    "code": "const calculateCodeStats = (code: string) => {\n    const lines = code.split('\\n').filter(line => line.trim() !== '').length\n    const complexity = Math.min(Math.max(Math.floor(lines / 10), 1), 10)\n    const maintainability = complexity <= 3 ? 'Excellent' : complexity <= 6 ? 'Good' : complexity <= 8 ? 'Fair' : 'Needs Attention'\n    return { lines, complexity, maintainability }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/component-client.tsx",
    "slug": "src_ui_components_component-client_calculatecodestats",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "copyToClipboard",
    "kind": "function",
    "code": "const copyToClipboard = async (text: string, type: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopySuccess(type)\n      setTimeout(() => setCopySuccess(null), 2000)\n    } catch (err) {\n      console.error('Failed to copy: ', err)\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/component-client.tsx",
    "slug": "src_ui_components_component-client_copytoclipboard",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "fetchComponent",
    "kind": "function",
    "code": "async function fetchComponent() {\n      try {\n        // Try to fetch from docs-data\n        const res = await fetch(`/docs-data/${slug}.json`)\n        if (res.ok) {\n          const data = await res.json()\n          // Ensure all required fields exist with defaults\n          const componentData = {\n            ...data,\n            similarComponents: data.similarComponents || [],\n            lastUpdated: data.lastUpdated || new Date().toLocaleDateString(),\n            type: data.type || \"Component\",\n            route: data.route || `/components/${slug}`,\n            props: data.props || [],\n            methods: data.methods || []\n          }\n          setComponentData(componentData)\n          if (componentData.code) {\n            setCodeStats(calculateCodeStats(componentData.code))\n          }\n          if (data.description) {\n            setDescription(data.description)\n          }\n        } else {\n          // Fallback to mock data\n          setComponentData({\n            name: slug,\n            type: \"React Component\",\n            filePath: `src/components/${slug}.tsx`,\n            route: `/components/${slug}`,\n            code: `import React from 'react';\\n\\nexport function ${slug}({ title, children }) {\\n  return (\\n    <div className=\\\"component\\\">\\n      <h2>{title}</h2>\\n      <div>{children}</div>\\n    </div>\\n  );\\n}`,\n            lastUpdated: \"2 days ago\",\n            similarComponents: [\n              {\n                name: slug === \"Modal\" ? \"Dialog\" : \"Modal\",\n                similarity: 85,\n                reason: \"Both handle popup content with similar open/close behavior\",\n              },\n              {\n                name: \"Dropdown\",\n                similarity: 65,\n                reason: \"Similar toggling behavior and content display\",\n              },\n            ],\n          })\n        }\n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        // Set fallback data on error\n        setComponentData({\n          name: slug,\n          type: \"Component\",\n          filePath: `src/components/${slug}.tsx`,\n          route: `/components/${slug}`,\n          code: `// Error loading component data for ${slug}`,\n          lastUpdated: new Date().toLocaleDateString(),\n          similarComponents: [],\n          props: [],\n          methods: []\n        })\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/component-client.tsx",
    "slug": "src_ui_components_component-client_fetchcomponent",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "generateDescription",
    "kind": "function",
    "code": "const generateDescription = async () => {\n    if (!componentData) return;\n    setIsGenerating(true);\n    setGenerationError(null);\n    setModelUsed(null);\n    \n    try {\n      console.log('Generating description for component:', componentData.name);\n      \n      const response = await fetch('/api/describe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          componentName: componentData.name,\n          code: componentData.code || `function ${componentData.name}() { /* Code not available */ }`,\n          filePath: componentData.filePath,\n          slug: slug,\n        }),\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok || data.error) {\n        console.error('Error from API:', data.error || 'Unknown error');\n        setGenerationError(data.error || 'Failed to generate description');\n        return;\n      }\n      \n      setDescription(data.description);\n      if (data.model) {\n        setModelUsed(data.model);\n      }\n      \n      // Update the component data with the new description\n      if (componentData) {\n        setComponentData({\n          ...componentData,\n          description: data.description,\n          lastUpdated: new Date().toISOString()\n        });\n      }\n      \n      console.log('Description generated successfully using model:', data.model);\n    } catch (error) {\n      console.error('Error generating description:', error);\n      setGenerationError(error instanceof Error ? error.message : 'Unknown error occurred');\n    } finally {\n      setIsGenerating(false);\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/component-client.tsx",
    "slug": "src_ui_components_component-client_generatedescription",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "ComparisonModal",
    "kind": "component",
    "code": "export function ComparisonModal({\n  isOpen,\n  onClose,\n  component1,\n  component2,\n  similarityScore: initialSimilarityScore,\n  methodName,\n  isMethodComparison = false\n}: ComparisonModalProps) {\n  const [view, setView] = useState<\"split\" | \"unified\">(\"split\")\n  const [isFullScreen, setIsFullScreen] = useState(false)\n  const [showHighlights, setShowHighlights] = useState(true)\n  const [similarityScore, setSimilarityScore] = useState(initialSimilarityScore)\n\n  // Extract method code if we're comparing methods\n  const extractMethodCode = (code: string, methodName?: string) => {\n    if (!isMethodComparison || !methodName) return code;\n\n    // If the code already appears to be just a method (starts with common function patterns) return as is\n    if (code.trim().startsWith('function') ||\n      code.trim().startsWith('const') ||\n      code.trim().startsWith('let') ||\n      code.trim().startsWith('export')) {\n      return code;\n    }\n\n    try {\n      // More comprehensive regex to find method definitions with various patterns\n      const methodPatterns = [\n        // Standard function declarations\n        `function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Function expression assignments (const/let/var)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function assignments\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function without braces (single expression)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*[^;{]*;?`,\n        // Class methods\n        `${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async functions\n        `async\\\\s+function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async arrow functions\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*async\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`\n      ];\n\n      // Join all patterns with OR\n      const combinedPattern = methodPatterns.join('|');\n      const methodRegex = new RegExp(combinedPattern, 'g');\n\n      let match;\n      // Find the first match\n      if ((match = methodRegex.exec(code)) !== null) {\n        return match[0];\n      }\n\n      // Alternative approach if the regex fails: try to find the method by looking for its name\n      // and then extracting a reasonable block after it\n      const methodStartIndex = code.indexOf(`function ${methodName}`) > -1\n        ? code.indexOf(`function ${methodName}`)\n        : code.indexOf(`${methodName} =`) > -1\n          ? code.indexOf(`${methodName} =`)\n          : code.indexOf(`${methodName}(`) > -1\n            ? code.indexOf(`${methodName}(`)\n            : -1;\n\n      if (methodStartIndex > -1) {\n        // Find a reasonable endpoint - either the next method or the end of the file\n        let depth = 0;\n        let endIndex = methodStartIndex;\n\n        // Go through the code character by character looking for matching braces\n        for (let i = methodStartIndex; i < code.length; i++) {\n          if (code[i] === '{') depth++;\n          else if (code[i] === '}') {\n            depth--;\n            if (depth === 0) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n\n        if (endIndex > methodStartIndex) {\n          return code.substring(methodStartIndex, endIndex);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error extracting method code:\", e);\n    }\n\n    return code;\n  };\n\n  // Process the component code\n  const processedCode1 = extractMethodCode(component1.code || '', methodName);\n  const processedCode2 = extractMethodCode(component2.code || '', methodName);\n\n  // Calculate diff using jsdiff\n  const diff = diffLines(processedCode1, processedCode2);\n\n  // Normalize code for comparison - trim trailing whitespace on each line\n  const normalizedCode1 = processedCode1.split('\\n').map(line => line.trimRight());\n  const normalizedCode2 = processedCode2.split('\\n').map(line => line.trimRight());\n\n  // Calculate diff for split view - more accurate line-by-line comparison\n  const lines1 = normalizedCode1;\n  const lines2 = normalizedCode2;\n\n  // For the split view, we want to know which lines are different\n  const normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ');\n\n  const highlightedCode1 = lines1.map((line, i) => {\n    // Consider a line different only if it's beyond the other file's length\n    // or if the normalized content differs\n    const isDifferent = i >= lines2.length ||\n      normalizeForComparison(line) !== normalizeForComparison(lines2[i]);\n\n    return {\n      line: line,\n      isDifferent: isDifferent\n    };\n  });\n\n  const highlightedCode2 = lines2.map((line, i) => {\n    // Consider a line different only if it's beyond the other file's length\n    // or if the normalized content differs\n    const isDifferent = i >= lines1.length ||\n      normalizeForComparison(line) !== normalizeForComparison(lines1[i]);\n\n    return {\n      line: line,\n      isDifferent: isDifferent\n    };\n  });\n\n  // Count differences (using jsdiff results for accuracy)\n  const diffCount = diff.reduce((count: number, part: Change) => {\n    if (part.added || part.removed) {\n      // Count lines in the changed part\n      return count + (part.value.match(/\\n/g) || []).length + (part.value.endsWith('\\n') ? 0 : 1);\n    }\n    return count;\n  }, 0);\n\n  // Double-check for identical code\n  React.useEffect(() => {\n    // If the similarity score is already 100%, no need to check\n    if (initialSimilarityScore >= 100 || initialSimilarityScore === 1) return;\n\n    // If there are no differences, the components are identical\n    if (diffCount === 0) {\n      console.log('No differences detected, setting similarity score to 100%');\n      setSimilarityScore(100);\n      return;\n    }\n\n    // Try a more robust comparison:\n    // 1. Normalize whitespace (replace all whitespace with a single space)\n    // 2. Remove comments\n    // 3. Trim each line\n    const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };\n\n    const normalizedCode1 = normalize(processedCode1);\n    const normalizedCode2 = normalize(processedCode2);\n\n    if (normalizedCode1 === normalizedCode2) {\n      console.log('Components detected as identical after normalization, setting similarity score to 100%');\n      setSimilarityScore(100);\n    }\n  }, [processedCode1, processedCode2, initialSimilarityScore, diffCount]);\n\n  const modalClasses = isFullScreen\n    ? \"max-w-[99vw] w-[99vw] h-[99vh] flex flex-col p-0 rounded-lg shadow-2xl border-2 border-slate-200 dark:border-slate-700\"\n    : \"max-w-[98vw] w-[98vw] h-[95vh] flex flex-col p-0 rounded-lg shadow-2xl border-2 border-slate-200 dark:border-slate-700\"\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className={`${modalClasses} !max-w-screen-2xl !w-screen`}>\n        <DialogHeader className=\"p-6 border-b border-slate-200 dark:border-slate-700 bg-gradient-to-r from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-900\">\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-indigo-500 to-violet-700 dark:from-indigo-400 dark:to-violet-500\">\n              {isMethodComparison ? \"Method Comparison\" : \"Component Comparison\"}\n            </DialogTitle>\n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={() => setIsFullScreen(!isFullScreen)}\n                className=\"p-2 rounded-md hover:bg-slate-200 dark:hover:bg-slate-700 transition-all\"\n                title={isFullScreen ? \"Exit fullscreen\" : \"Enter fullscreen\"}\n              >\n                <EnterFullScreenIcon className=\"h-4 w-4 text-slate-500 dark:text-slate-400\" />\n              </button>\n              <Badge\n                className={`py-1.5 px-3 text-sm font-medium ${similarityScore >= 100 || similarityScore === 1\n                  ? \"bg-green-50 text-green-700 border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800\"\n                  : similarityScore >= 80\n                    ? \"bg-red-50 text-red-700 border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800\"\n                    : \"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\"\n                  }`}\n              >\n                {similarityScore >= 100 || similarityScore === 1\n                  ? \"Identical Components\"\n                  : `${Math.round(similarityScore)}% Similar ${diffCount > 0\n                    ? `• ${diffCount} Differences`\n                    : similarityScore < 100 && similarityScore < 1\n                      ? \"• Semantic differences detected\"\n                      : \"\"}`}\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-8 mt-6\">\n            <div className=\"flex items-center gap-3 bg-white dark:bg-slate-800 rounded-lg p-3 shadow-sm\">\n              <div className=\"flex-shrink-0 p-2 rounded-full bg-indigo-100 dark:bg-indigo-900/30\">\n                <CodeIcon className=\"h-4 w-4 text-indigo-600 dark:text-indigo-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg\">\n                  {isMethodComparison && methodName\n                    ? `${component1.name}.${methodName}`\n                    : component1.name}\n                </h3>\n                <p className=\"text-xs text-muted-foreground font-mono\">{component1.filePath}</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3 bg-white dark:bg-slate-800 rounded-lg p-3 shadow-sm\">\n              <div className=\"flex-shrink-0 p-2 rounded-full bg-violet-100 dark:bg-violet-900/30\">\n                <CodeIcon className=\"h-4 w-4 text-violet-600 dark:text-violet-400\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-lg\">\n                  {isMethodComparison && methodName\n                    ? `${component2.name}.${methodName}`\n                    : component2.name}\n                </h3>\n                <p className=\"text-xs text-muted-foreground font-mono\">{component2.filePath}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end mt-4 gap-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"highlights-mode\"\n                checked={showHighlights}\n                onCheckedChange={setShowHighlights}\n              />\n              <Label htmlFor=\"highlights-mode\" className=\"cursor-pointer\">Show Differences</Label>\n            </div>\n            <Tabs value={view} onValueChange={(v) => setView(v as \"split\" | \"unified\")} className=\"w-auto\">\n              <TabsList className=\"bg-slate-100 dark:bg-slate-800 p-1 rounded-lg\">\n                <TabsTrigger value=\"split\" className=\"rounded-md data-[state=active]:bg-white dark:data-[state=active]:bg-slate-700 data-[state=active]:shadow-sm\">\n                  Split View\n                </TabsTrigger>\n                <TabsTrigger value=\"unified\" className=\"rounded-md data-[state=active]:bg-white dark:data-[state=active]:bg-slate-700 data-[state=active]:shadow-sm\">\n                  Unified View\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </div>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-hidden min-h-0 bg-white dark:bg-slate-900 rounded-b-lg\">\n          {view === \"split\" ? (\n            <div className=\"flex h-full w-full\">\n              <ScrollArea className=\"w-[50%] border-r border-slate-200 dark:border-slate-700\">\n                <div className=\"py-4 px-2 font-mono text-xs\">\n                  {highlightedCode1.map((line, i) => (\n                    <div\n                      key={i}\n                      className={`py-0.5 px-6 flex leading-relaxed ${line.isDifferent && showHighlights\n                        ? \"bg-red-50 dark:bg-red-900/20 border-l-4 border-red-400 dark:border-red-600\"\n                        : \"\"\n                        }`}\n                    >\n                      <span className={`select-none text-slate-400 w-16 mr-4 text-right text-xs`}>{i + 1}</span>\n                      <span className=\"whitespace-pre overflow-x-auto flex-1 text-xs\">{line.line}</span>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n              <ScrollArea className=\"w-[50%]\">\n                <div className=\"py-4 px-2 font-mono text-xs\">\n                  {highlightedCode2.map((line, i) => (\n                    <div\n                      key={i}\n                      className={`py-0.5 px-6 flex leading-relaxed ${line.isDifferent && showHighlights\n                        ? \"bg-green-50 dark:bg-green-900/20 border-l-4 border-green-400 dark:border-green-600\"\n                        : \"\"\n                        }`}\n                    >\n                      <span className={`select-none text-slate-400 w-16 mr-4 text-right text-xs`}>{i + 1}</span>\n                      <span className=\"whitespace-pre overflow-x-auto flex-1 text-xs\">{line.line}</span>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </div>\n          ) : (\n            <ScrollArea className=\"h-full\">\n              <div className=\"py-4 px-2 font-mono text-xs\">\n                {diff.map((part: Change, partIndex: number) => {\n                  // Ensure part.value is treated as a string\n                  const value = part.value || '';\n                  // Split lines, handling potential trailing newline correctly\n                  const lines = value.split('\\n').filter((l: string, i: number, arr: string[]) => i < arr.length - 1 || l !== '');\n                  const prefix = part.added ? '+' : part.removed ? '-' : ' ';\n                  const bgColor = part.added ? 'bg-green-50 dark:bg-green-900/20' : part.removed ? 'bg-red-50 dark:bg-red-900/20' : '';\n                  const textColor = part.added ? 'text-green-700 dark:text-green-400' : part.removed ? 'text-red-700 dark:text-red-400' : 'text-slate-400';\n                  const borderColor = part.added ? 'border-l-4 border-green-400 dark:border-green-600' : part.removed ? 'border-l-4 border-red-400 dark:border-red-600' : '';\n\n                  return lines.map((line: string, lineIndex: number) => (\n                    <div\n                      key={`${partIndex}-${lineIndex}`}\n                      className={`py-0.5 px-6 flex leading-relaxed ${showHighlights ? bgColor : ''} ${showHighlights ? borderColor : ''}`}\n                    >\n                      <span className={`select-none ${textColor} w-6 mr-2 text-center font-bold ${!showHighlights && (part.added || part.removed) ? 'opacity-0' : ''}`}>{prefix}</span>\n                      {/* No original line numbers in this basic view */}\n                      <span className=\"whitespace-pre overflow-x-auto flex-1\">{line}</span>\n                    </div>\n                  ));\n                })}\n              </div>\n            </ScrollArea>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/comparison-modal.tsx",
    "slug": "src_ui_components_comparison-modal_comparisonmodal",
    "imports": [
      "Dialog",
      "DialogContent",
      "DialogHeader",
      "DialogTitle",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "Badge",
      "ScrollArea",
      "CodeIcon",
      "EnterFullScreenIcon",
      "Switch",
      "Label",
      "Change"
    ],
    "references": [
      "Dialog",
      "DialogContent",
      "DialogHeader",
      "DialogTitle",
      "EnterFullScreenIcon",
      "Badge",
      "CodeIcon",
      "Switch",
      "Label",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "ScrollArea"
    ],
    "relationships": [
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "scrollarea",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "codeicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "enterfullscreenicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "switch",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "label",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_comparison-modal_comparisonmodal",
        "target": "change",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": [
      {
        "name": "extractMethodCode",
        "code": "const extractMethodCode = (code: string, methodName?: string) => {\n    if (!isMethodComparison || !methodName) return code;\n\n    // If the code already appears to be just a method (starts with common function patterns) return as is\n    if (code.trim().startsWith('function') ||\n      code.trim().startsWith('const') ||\n      code.trim().startsWith('let') ||\n      code.trim().startsWith('export')) {\n      return code;\n    }\n\n    try {\n      // More comprehensive regex to find method definitions with various patterns\n      const methodPatterns = [\n        // Standard function declarations\n        `function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Function expression assignments (const/let/var)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function assignments\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function without braces (single expression)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*[^;{]*;?`,\n        // Class methods\n        `${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async functions\n        `async\\\\s+function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async arrow functions\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*async\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`\n      ];\n\n      // Join all patterns with OR\n      const combinedPattern = methodPatterns.join('|');\n      const methodRegex = new RegExp(combinedPattern, 'g');\n\n      let match;\n      // Find the first match\n      if ((match = methodRegex.exec(code)) !== null) {\n        return match[0];\n      }\n\n      // Alternative approach if the regex fails: try to find the method by looking for its name\n      // and then extracting a reasonable block after it\n      const methodStartIndex = code.indexOf(`function ${methodName}`) > -1\n        ? code.indexOf(`function ${methodName}`)\n        : code.indexOf(`${methodName} =`) > -1\n          ? code.indexOf(`${methodName} =`)\n          : code.indexOf(`${methodName}(`) > -1\n            ? code.indexOf(`${methodName}(`)\n            : -1;\n\n      if (methodStartIndex > -1) {\n        // Find a reasonable endpoint - either the next method or the end of the file\n        let depth = 0;\n        let endIndex = methodStartIndex;\n\n        // Go through the code character by character looking for matching braces\n        for (let i = methodStartIndex; i < code.length; i++) {\n          if (code[i] === '{') depth++;\n          else if (code[i] === '}') {\n            depth--;\n            if (depth === 0) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n\n        if (endIndex > methodStartIndex) {\n          return code.substring(methodStartIndex, endIndex);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error extracting method code:\", e);\n    }\n\n    return code;\n  };",
        "returnType": "void",
        "params": [
          {
            "name": "code",
            "type": "string"
          },
          {
            "name": "methodName",
            "type": "string"
          }
        ]
      },
      {
        "name": "normalizeForComparison",
        "code": "const normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ');",
        "returnType": "void",
        "params": [
          {
            "name": "line",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "extractMethodCode",
    "kind": "function",
    "code": "const extractMethodCode = (code: string, methodName?: string) => {\n    if (!isMethodComparison || !methodName) return code;\n\n    // If the code already appears to be just a method (starts with common function patterns) return as is\n    if (code.trim().startsWith('function') ||\n      code.trim().startsWith('const') ||\n      code.trim().startsWith('let') ||\n      code.trim().startsWith('export')) {\n      return code;\n    }\n\n    try {\n      // More comprehensive regex to find method definitions with various patterns\n      const methodPatterns = [\n        // Standard function declarations\n        `function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Function expression assignments (const/let/var)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*function\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function assignments\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`,\n        // Arrow function without braces (single expression)\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*[^;{]*;?`,\n        // Class methods\n        `${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async functions\n        `async\\\\s+function\\\\s+${methodName}\\\\s*\\\\([^)]*\\\\)\\\\s*{[\\\\s\\\\S]*?}`,\n        // Async arrow functions\n        `(const|let|var)\\\\s+${methodName}\\\\s*=\\\\s*async\\\\s*\\\\([^)]*\\\\)\\\\s*=>\\\\s*{[\\\\s\\\\S]*?}`\n      ];\n\n      // Join all patterns with OR\n      const combinedPattern = methodPatterns.join('|');\n      const methodRegex = new RegExp(combinedPattern, 'g');\n\n      let match;\n      // Find the first match\n      if ((match = methodRegex.exec(code)) !== null) {\n        return match[0];\n      }\n\n      // Alternative approach if the regex fails: try to find the method by looking for its name\n      // and then extracting a reasonable block after it\n      const methodStartIndex = code.indexOf(`function ${methodName}`) > -1\n        ? code.indexOf(`function ${methodName}`)\n        : code.indexOf(`${methodName} =`) > -1\n          ? code.indexOf(`${methodName} =`)\n          : code.indexOf(`${methodName}(`) > -1\n            ? code.indexOf(`${methodName}(`)\n            : -1;\n\n      if (methodStartIndex > -1) {\n        // Find a reasonable endpoint - either the next method or the end of the file\n        let depth = 0;\n        let endIndex = methodStartIndex;\n\n        // Go through the code character by character looking for matching braces\n        for (let i = methodStartIndex; i < code.length; i++) {\n          if (code[i] === '{') depth++;\n          else if (code[i] === '}') {\n            depth--;\n            if (depth === 0) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n\n        if (endIndex > methodStartIndex) {\n          return code.substring(methodStartIndex, endIndex);\n        }\n      }\n    } catch (e) {\n      console.error(\"Error extracting method code:\", e);\n    }\n\n    return code;\n  };",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/comparison-modal.tsx",
    "slug": "src_ui_components_comparison-modal_extractmethodcode",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "normalizeForComparison",
    "kind": "function",
    "code": "const normalizeForComparison = (line: string) => line.trim().replace(/\\s+/g, ' ');",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/comparison-modal.tsx",
    "slug": "src_ui_components_comparison-modal_normalizeforcomparison",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "normalize",
    "kind": "function",
    "code": "const normalize = (code: string) => {\n      return code\n        .replace(/\\/\\/.*$/gm, '') // Remove single-line comments\n        .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove multi-line comments\n        .split('\\n')\n        .map(line => line.trim()) // Trim each line\n        .filter(line => line.length > 0) // Remove empty lines\n        .join(' ')\n        .replace(/\\s+/g, ' ') // Normalize remaining whitespace\n        .trim();\n    };",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/comparison-modal.tsx",
    "slug": "src_ui_components_comparison-modal_normalize",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CodeStructure",
    "kind": "component",
    "code": "export function CodeStructure() {\n  const [fileStructure, setFileStructure] = useState<FileStructure[]>([])\n  const [loading, setLoading] = useState(true)\n  const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set())\n  const [selectedPath, setSelectedPath] = useState<string>('')\n  const [breadcrumb, setBreadcrumb] = useState<string[]>([])\n  const [searchQuery, setSearchQuery] = useState('')\n  const [viewMode, setViewMode] = useState<'tree' | 'analytics' | 'issues'>('tree')\n  const [filterType, setFilterType] = useState<'all' | 'components' | 'functions' | 'classes' | 'issues'>('all')\n  const [selectedFile, setSelectedFile] = useState<FileStructure | null>(null)\n  const [componentDetails, setComponentDetails] = useState<Map<string, ComponentData[]>>(new Map())\n\n  // Helper to toggle folder expansion\n  function toggleFolder(path: string) {\n    setExpandedFolders((prev: Set<string>) => {\n      const newSet = new Set(prev)\n      if (newSet.has(path)) {\n        newSet.delete(path)\n      } else {\n        newSet.add(path)\n      }\n      return newSet\n    })\n  }\n\n  // Helper to update breadcrumb\n  function updateBreadcrumb(path: string) {\n    if (!path) return setBreadcrumb([])\n    setBreadcrumb(path.split('/').filter(Boolean))\n  }\n\n  // Fetch component data and organize it by file path with enhanced metadata\n  useEffect(() => {\n    async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Group components by their file paths with full data\n        const filesByPath: Record<string, ComponentData[]> = {}\n        const detailsMap = new Map<string, ComponentData[]>()\n\n        // Process each component and fetch detailed data\n        await Promise.all(data.map(async (comp: { name: string; slug: string; filePath: string }) => {\n          if (!comp.filePath) return\n\n          try {\n            // Fetch detailed component data\n            const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n            const detailData = await detailRes.json()\n\n            const componentData: ComponentData = {\n              name: comp.name,\n              slug: comp.slug,\n              filePath: comp.filePath,\n              kind: detailData.kind,\n              methods: detailData.methods || [],\n              relationships: detailData.relationships || [],\n              imports: detailData.imports || [],\n              references: detailData.references || [],\n              similarityWarnings: detailData.similarityWarnings || [],\n              description: detailData.description\n            }\n\n            // Store the component in its path\n            const path = comp.filePath\n            if (!filesByPath[path]) {\n              filesByPath[path] = []\n            }\n            filesByPath[path].push(componentData)\n\n            // Update details map\n            if (!detailsMap.has(path)) {\n              detailsMap.set(path, [])\n            }\n            detailsMap.get(path)!.push(componentData)\n          } catch (error) {\n            console.error(`Error loading details for ${comp.slug}:`, error)\n          }\n        }))\n\n        setComponentDetails(detailsMap)\n\n        // Convert flat paths to a tree structure with stats\n        const rootStructure: FileStructure[] = []\n\n        // Helper function to calculate folder stats\n        const calculateStats = (items: FileStructure[]): any => {\n          let stats = {\n            componentCount: 0,\n            methodCount: 0,\n            relationshipCount: 0,\n            importCount: 0,\n            similarityIssues: 0,\n            complexity: 0,\n            size: 0\n          }\n\n          items.forEach(item => {\n            if (item.type === 'folder' && item.children) {\n              const childStats = calculateStats(item.children)\n              Object.keys(stats).forEach(key => {\n                stats[key as keyof typeof stats] += childStats[key]\n              })\n            } else if (item.components) {\n              item.components.forEach(comp => {\n                stats.componentCount++\n                stats.methodCount += comp.methods?.length || 0\n                stats.relationshipCount += comp.relationships?.length || 0\n                stats.importCount += comp.imports?.length || 0\n                stats.similarityIssues += comp.similarityWarnings?.length || 0\n              })\n            }\n          })\n\n          return stats\n        }\n\n        // Helper to determine entity type\n        const determineEntityType = (comp: ComponentData): FileStructure['entityType'] => {\n          if (comp.kind === 'function') return 'function'\n          if (comp.kind === 'class') return 'class'\n          if (comp.kind === 'method') return 'method'\n          if (comp.kind === 'component') return 'component'\n          return 'unknown'\n        }\n\n        // Process each file path\n        Object.entries(filesByPath).forEach(([path, components]) => {\n          // Split the path into parts (folders/file)\n          const parts = path.split('/')\n          let currentLevel = rootStructure\n\n          // Process each part of the path except the last one (the file)\n          for (let i = 0; i < parts.length - 1; i++) {\n            const part = parts[i]\n            if (!part) continue // Skip empty parts\n\n            // Look for existing folder\n            let folder = currentLevel.find(item =>\n              item.type === 'folder' && item.name === part\n            )\n\n            // Create folder if it doesn't exist\n            if (!folder) {\n              folder = {\n                name: part,\n                path: parts.slice(0, i + 1).join('/'),\n                type: 'folder',\n                children: [],\n                stats: {\n                  componentCount: 0,\n                  methodCount: 0,\n                  relationshipCount: 0,\n                  importCount: 0,\n                  similarityIssues: 0,\n                  complexity: 0,\n                  size: 0\n                }\n              }\n              currentLevel.push(folder)\n            }\n\n            // Update current level to this folder's children\n            currentLevel = folder.children!\n          }\n\n          // Add the file at the current level with stats\n          const fileName = parts[parts.length - 1]\n          if (fileName) {\n            const fileStats = {\n              componentCount: components.length,\n              methodCount: components.reduce((acc, comp) => acc + (comp.methods?.length || 0), 0),\n              relationshipCount: components.reduce((acc, comp) => acc + (comp.relationships?.length || 0), 0),\n              importCount: components.reduce((acc, comp) => acc + (comp.imports?.length || 0), 0),\n              similarityIssues: components.reduce((acc, comp) => acc + (comp.similarityWarnings?.length || 0), 0),\n              complexity: 0, // Could be calculated based on methods, relationships, etc.\n              size: components.length\n            }\n\n            currentLevel.push({\n              name: fileName,\n              path: path,\n              type: 'file',\n              components: components,\n              stats: fileStats,\n              children: components.map((comp, compIndex) => ({\n                name: comp.name,\n                path: `${path}#${comp.name}-${compIndex}`,\n                type: 'file' as const,\n                componentSlug: comp.slug,\n                uniqueKey: `${comp.slug}-${path}-${compIndex}`,\n                entityType: determineEntityType(comp),\n                stats: {\n                  methodCount: comp.methods?.length || 0,\n                  relationshipCount: comp.relationships?.length || 0,\n                  importCount: comp.imports?.length || 0,\n                  similarityIssues: comp.similarityWarnings?.length || 0\n                }\n              }))\n            })\n          }\n        })\n\n        // Calculate stats for all folders\n        const updateFolderStats = (items: FileStructure[]) => {\n          items.forEach(item => {\n            if (item.type === 'folder' && item.children) {\n              updateFolderStats(item.children)\n              item.stats = calculateStats(item.children)\n            }\n          })\n        }\n        updateFolderStats(rootStructure)\n\n        // Sort the structure (folders first, then alphabetically)\n        const sortStructure = (items: FileStructure[]): FileStructure[] => {\n          return items.sort((a, b) => {\n            // Folders first\n            if (a.type !== b.type) {\n              return a.type === 'folder' ? -1 : 1\n            }\n            // Then alphabetically\n            return a.name.localeCompare(b.name)\n          }).map(item => {\n            if (item.children) {\n              return { ...item, children: sortStructure(item.children) }\n            }\n            return item\n          })\n        }\n\n        setFileStructure(sortStructure(rootStructure))\n        setLoading(false)\n        // Optionally, expand root by default\n        setExpandedFolders(new Set(['']))\n      } catch (error) {\n        console.error('Error loading file structure:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponents()\n  }, [])\n\n  // Filter file structure based on search and filter type\n  const filteredStructure = useMemo(() => {\n    if (!searchQuery && filterType === 'all') return fileStructure\n\n    const filterItems = (items: FileStructure[]): FileStructure[] => {\n      return items.reduce((acc: FileStructure[], item) => {\n        // Check if item matches search\n        const matchesSearch = !searchQuery || \n          item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          item.components?.some(comp => \n            comp.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n            comp.description?.toLowerCase().includes(searchQuery.toLowerCase())\n          )\n\n        // Check if item matches filter type\n        let matchesFilter = filterType === 'all'\n        if (filterType === 'issues') {\n          matchesFilter = (item.stats?.similarityIssues || 0) > 0\n        } else if (filterType !== 'all' && item.components) {\n          matchesFilter = item.components.some(comp => {\n            const entityType = determineEntityType(comp)\n            return filterType === 'components' && entityType === 'component' ||\n                   filterType === 'functions' && entityType === 'function' ||\n                   filterType === 'classes' && entityType === 'class'\n          })\n        }\n\n        if (item.type === 'folder' && item.children) {\n          const filteredChildren = filterItems(item.children)\n          if (filteredChildren.length > 0) {\n            return [...acc, { ...item, children: filteredChildren }]\n          }\n        } else if (matchesSearch && matchesFilter) {\n          return [...acc, item]\n        }\n\n        return acc\n      }, [])\n    }\n\n    return filterItems(fileStructure)\n  }, [fileStructure, searchQuery, filterType])\n\n  // Helper to determine entity type\n  const determineEntityType = (comp: ComponentData): FileStructure['entityType'] => {\n    if (comp.kind === 'function') return 'function'\n    if (comp.kind === 'class') return 'class'\n    if (comp.kind === 'method') return 'method'\n    if (comp.kind === 'component') return 'component'\n    return 'unknown'\n  }\n\n  // Calculate overall project stats\n  const projectStats = useMemo(() => {\n    const stats = {\n      totalFiles: 0,\n      totalComponents: 0,\n      totalMethods: 0,\n      totalRelationships: 0,\n      totalIssues: 0,\n      componentTypes: new Map<string, number>()\n    }\n\n    const countStats = (items: FileStructure[]) => {\n      items.forEach(item => {\n        if (item.type === 'file') {\n          stats.totalFiles++\n          if (item.stats) {\n            stats.totalComponents += item.stats.componentCount || 0\n            stats.totalMethods += item.stats.methodCount || 0\n            stats.totalRelationships += item.stats.relationshipCount || 0\n            stats.totalIssues += item.stats.similarityIssues || 0\n          }\n          item.components?.forEach(comp => {\n            const type = determineEntityType(comp)\n            if (type) {\n              stats.componentTypes.set(type, (stats.componentTypes.get(type) || 0) + 1)\n            }\n          })\n        } else if (item.children) {\n          countStats(item.children)\n        }\n      })\n    }\n\n    countStats(fileStructure)\n    return stats\n  }, [fileStructure])\n\n  // Enhanced render tree with stats and tooltips\n  function renderTree(items: FileStructure[], depth = 0, parentPath = '') {\n    return (\n      <TooltipProvider>\n        <ul className={`pl-${depth * 4} space-y-1`} style={{ paddingLeft: depth * 16 }}>\n          {items.map((item, index) => {\n            const isFolder = item.type === 'folder'\n            const isExpanded = isFolder && expandedFolders.has(item.path)\n            const isSelected = selectedPath === item.path\n            const hasIssues = (item.stats?.similarityIssues || 0) > 0\n            \n            return (\n              <li\n                key={item.uniqueKey || `${item.path}-${index}`}\n                className={`py-1 rounded transition-colors ${isSelected ? 'bg-blue-50 dark:bg-blue-900/30' : ''}`}\n                onClick={e => {\n                  e.stopPropagation()\n                  setSelectedPath(item.path)\n                  updateBreadcrumb(item.path)\n                  if (isFolder) toggleFolder(item.path)\n                  else if (item.type === 'file') setSelectedFile(item)\n                }}\n                onMouseOver={e => {\n                  e.currentTarget.classList.add('bg-slate-100', 'dark:bg-slate-800/50')\n                }}\n                onMouseOut={e => {\n                  if (!isSelected) e.currentTarget.classList.remove('bg-slate-100', 'dark:bg-slate-800/50')\n                }}\n                style={{ cursor: 'pointer' }}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center flex-1\">\n                    {isFolder ? (\n                      <span className=\"mr-2 flex items-center\">\n                        <FolderIcon className={`h-4 w-4 ${isExpanded ? 'text-yellow-600' : 'text-blue-500'} transition-colors`} />\n                        <span className=\"ml-1 text-xs\">{isExpanded ? '▼' : '▶'}</span>\n                      </span>\n                    ) : item.componentSlug ? (\n                      <div className=\"mr-2 flex items-center\">\n                        {item.entityType === 'function' && <Code className=\"h-4 w-4 text-green-500\" />}\n                        {item.entityType === 'class' && <Package className=\"h-4 w-4 text-purple-500\" />}\n                        {item.entityType === 'component' && <FileCode className=\"h-4 w-4 text-blue-500\" />}\n                        {item.entityType === 'method' && <Hash className=\"h-4 w-4 text-orange-500\" />}\n                        {!item.entityType && <FileIcon className=\"h-4 w-4 text-gray-500\" />}\n                      </div>\n                    ) : (\n                      <FileIcon className=\"h-4 w-4 text-gray-500 mr-2\" />\n                    )}\n\n                    {item.componentSlug ? (\n                      <Link\n                        href={`/components/${item.componentSlug}`}\n                        className=\"text-sm hover:underline text-violet-500\"\n                        onClick={e => {\n                          e.stopPropagation()\n                          setSelectedPath(item.path)\n                          updateBreadcrumb(item.path)\n                        }}\n                      >\n                        {item.name}\n                      </Link>\n                    ) : (\n                      <span className=\"text-sm font-medium\">{item.name}</span>\n                    )}\n\n                    {/* Entity type badge */}\n                    {item.entityType && (\n                      <Badge className={`ml-2 text-xs ${\n                        item.entityType === 'component' ? 'bg-blue-50 text-blue-600 border-blue-200' :\n                        item.entityType === 'function' ? 'bg-green-50 text-green-600 border-green-200' :\n                        item.entityType === 'class' ? 'bg-purple-50 text-purple-600 border-purple-200' :\n                        item.entityType === 'method' ? 'bg-orange-50 text-orange-600 border-orange-200' :\n                        'bg-gray-50 text-gray-600 border-gray-200'\n                      }`}>\n                        {item.entityType}\n                      </Badge>\n                    )}\n\n                    {/* Issue indicator */}\n                    {hasIssues && (\n                      <Tooltip>\n                        <TooltipTrigger>\n                          <AlertCircle className=\"h-4 w-4 text-amber-500 ml-2\" />\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p>{item.stats?.similarityIssues} similarity issues detected</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    )}\n                  </div>\n\n                  {/* Stats badges for folders */}\n                  {isFolder && item.stats && (\n                    <div className=\"flex gap-1 ml-2\">\n                      {(item.stats.componentCount || 0) > 0 && (\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {item.stats.componentCount}\n                            </Badge>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p>{item.stats.componentCount} components</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      )}\n                      {(item.stats.similarityIssues || 0) > 0 && (\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              {item.stats.similarityIssues}\n                            </Badge>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p>{item.stats.similarityIssues} similarity issues</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Children */}\n                {isFolder && isExpanded && item.children && item.children.length > 0 && (\n                  <div>{renderTree(item.children, depth + 1, item.path)}</div>\n                )}\n              </li>\n            )\n          })}\n        </ul>\n      </TooltipProvider>\n    )\n  }\n\n  // Render analytics view\n  function renderAnalytics() {\n    return (\n      <div className=\"space-y-6\">\n        {/* Project Overview */}\n        <Card>\n          <CardHeader>\n            <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n              <Activity className=\"h-5 w-5\" />\n              Project Overview\n            </h3>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{projectStats.totalFiles}</div>\n                <div className=\"text-sm text-muted-foreground\">Files</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{projectStats.totalComponents}</div>\n                <div className=\"text-sm text-muted-foreground\">Components</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{projectStats.totalMethods}</div>\n                <div className=\"text-sm text-muted-foreground\">Methods</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-amber-600\">{projectStats.totalIssues}</div>\n                <div className=\"text-sm text-muted-foreground\">Issues</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Component Types Distribution */}\n        <Card>\n          <CardHeader>\n            <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n              <Layers className=\"h-5 w-5\" />\n              Component Types\n            </h3>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {Array.from(projectStats.componentTypes.entries()).map(([type, count]) => {\n                const percentage = (count / projectStats.totalComponents) * 100\n                return (\n                  <div key={type}>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span className=\"capitalize\">{type}s</span>\n                      <span>{count} ({percentage.toFixed(1)}%)</span>\n                    </div>\n                    <Progress value={percentage} className=\"h-2\" />\n                  </div>\n                )\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  // Render issues view\n  function renderIssues() {\n    const issueFiles = fileStructure.filter(item => \n      item.type === 'file' && (item.stats?.similarityIssues || 0) > 0\n    )\n\n    return (\n      <div className=\"space-y-4\">\n        {issueFiles.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No similarity issues detected.</p>\n          </div>\n        ) : (\n          issueFiles.map(file => (\n            <Card key={file.path} className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                  onClick={() => setSelectedFile(file)}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <AlertCircle className=\"h-5 w-5 text-amber-500\" />\n                    <div>\n                      <div className=\"font-medium\">{file.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">{file.path}</div>\n                    </div>\n                  </div>\n                  <Badge variant=\"destructive\">\n                    {file.stats?.similarityIssues} issues\n                  </Badge>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    )\n  }\n\n  if (loading) {\n    return (\n      <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Loading code structure...</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (fileStructure.length === 0) {\n    return (\n      <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No file structure information available.</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Controls */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            {/* Search */}\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search files and components...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            \n            {/* Filter */}\n            <div className=\"flex gap-2\">\n              <Select value={filterType} onValueChange={(value) => setFilterType(value as any)}>\n                <SelectTrigger className=\"w-48\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Items</SelectItem>\n                  <SelectItem value=\"components\">Components Only</SelectItem>\n                  <SelectItem value=\"functions\">Functions Only</SelectItem>\n                  <SelectItem value=\"classes\">Classes Only</SelectItem>\n                  <SelectItem value=\"issues\">Issues Only</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* View Tabs */}\n      <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as any)}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"tree\" className=\"flex items-center gap-2\">\n            <GitBranch className=\"h-4 w-4\" />\n            File Tree\n          </TabsTrigger>\n          <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\n            <Activity className=\"h-4 w-4\" />\n            Analytics\n          </TabsTrigger>\n          <TabsTrigger value=\"issues\" className=\"flex items-center gap-2\">\n            <AlertCircle className=\"h-4 w-4\" />\n            Issues ({projectStats.totalIssues})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"tree\">\n          <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n            <CardContent className=\"p-6\">\n              {/* Breadcrumb navigation */}\n              {breadcrumb.length > 0 && (\n                <nav className=\"mb-4 text-xs text-slate-600 dark:text-slate-300 flex flex-wrap gap-1\">\n                  <span\n                    className=\"hover:underline cursor-pointer\"\n                    onClick={() => {\n                      setSelectedPath('')\n                      setBreadcrumb([])\n                      setExpandedFolders(new Set(['']))\n                    }}\n                  >Root</span>\n                  {breadcrumb.map((part: string, idx: number) => (\n                    <React.Fragment key={idx}>\n                      <span className=\"mx-1\">/</span>\n                      <span\n                        className=\"hover:underline cursor-pointer\"\n                        onClick={() => {\n                          const path = breadcrumb.slice(0, idx + 1).join('/')\n                          setSelectedPath(path)\n                          setBreadcrumb(breadcrumb.slice(0, idx + 1))\n                          setExpandedFolders((prev: Set<string>) => {\n                            const newSet = new Set(prev)\n                            newSet.add(path)\n                            return newSet\n                          })\n                        }}\n                      >{part}</span>\n                    </React.Fragment>\n                  ))}\n                </nav>\n              )}\n              {renderTree(filteredStructure)}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\">\n          {renderAnalytics()}\n        </TabsContent>\n\n        <TabsContent value=\"issues\">\n          <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n            <CardHeader>\n              <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                <AlertCircle className=\"h-5 w-5 text-amber-500\" />\n                Code Similarity Issues\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Files with potential duplicate or similar code that may benefit from refactoring.\n              </p>\n            </CardHeader>\n            <CardContent>\n              {renderIssues()}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_codestructure",
    "imports": [
      "Card",
      "CardContent",
      "CardHeader",
      "FileIcon",
      "FolderIcon",
      "GitBranch",
      "Package",
      "AlertCircle",
      "Code",
      "Search",
      "Filter",
      "ChevronRight",
      "Activity",
      "FileCode",
      "Layers",
      "Hash",
      "Info",
      "Badge",
      "Link",
      "Input",
      "Button",
      "Tabs",
      "TabsContent",
      "TabsList",
      "TabsTrigger",
      "Progress",
      "Tooltip",
      "TooltipContent",
      "TooltipProvider",
      "TooltipTrigger",
      "Select",
      "SelectContent",
      "SelectItem",
      "SelectTrigger",
      "SelectValue",
      "Separator"
    ],
    "references": [
      "TooltipProvider",
      "FolderIcon",
      "Code",
      "Package",
      "FileCode",
      "Hash",
      "FileIcon",
      "Link",
      "Badge",
      "Tooltip",
      "TooltipTrigger",
      "AlertCircle",
      "TooltipContent",
      "Card",
      "CardHeader",
      "Activity",
      "CardContent",
      "Layers",
      "Progress",
      "Search",
      "Input",
      "Select",
      "SelectTrigger",
      "Filter",
      "SelectValue",
      "SelectContent",
      "SelectItem",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "GitBranch",
      "TabsContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "fileicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "foldericon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "gitbranch",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "package",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "alertcircle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "code",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "search",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "filter",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "chevronright",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "activity",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "layers",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "hash",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "info",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "link",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "input",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "button",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "tabscontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "progress",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "tooltip",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "tooltipcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "tooltipprovider",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "tooltiptrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "select",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "selectcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "selectitem",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "selecttrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "selectvalue",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-structure_codestructure",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "object.keys(stats)",
        "type": "uses",
        "weight": 2,
        "context": "calls forEach",
        "sourceLine": 151,
        "targetFunction": "forEach"
      },
      {
        "target": "object.entries(filesbypath)",
        "type": "uses",
        "weight": 2,
        "context": "calls forEach",
        "sourceLine": 178,
        "targetFunction": "forEach"
      },
      {
        "target": "array.from(projectstats.componenttypes.entries())",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 562,
        "targetFunction": "map"
      }
    ],
    "methods": [
      {
        "name": "toggleFolder",
        "code": "function toggleFolder(path: string) {\n    setExpandedFolders((prev: Set<string>) => {\n      const newSet = new Set(prev)\n      if (newSet.has(path)) {\n        newSet.delete(path)\n      } else {\n        newSet.add(path)\n      }\n      return newSet\n    })\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "path",
            "type": "string"
          }
        ]
      },
      {
        "name": "updateBreadcrumb",
        "code": "function updateBreadcrumb(path: string) {\n    if (!path) return setBreadcrumb([])\n    setBreadcrumb(path.split('/').filter(Boolean))\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "path",
            "type": "string"
          }
        ]
      },
      {
        "name": "determineEntityType",
        "code": "const determineEntityType = (comp: ComponentData): FileStructure['entityType'] => {\n    if (comp.kind === 'function') return 'function'\n    if (comp.kind === 'class') return 'class'\n    if (comp.kind === 'method') return 'method'\n    if (comp.kind === 'component') return 'component'\n    return 'unknown'\n  }",
        "returnType": "FileStructure['entityType']",
        "params": [
          {
            "name": "comp",
            "type": "ComponentData"
          }
        ]
      },
      {
        "name": "renderTree",
        "code": "function renderTree(items: FileStructure[], depth = 0, parentPath = '') {\n    return (\n      <TooltipProvider>\n        <ul className={`pl-${depth * 4} space-y-1`} style={{ paddingLeft: depth * 16 }}>\n          {items.map((item, index) => {\n            const isFolder = item.type === 'folder'\n            const isExpanded = isFolder && expandedFolders.has(item.path)\n            const isSelected = selectedPath === item.path\n            const hasIssues = (item.stats?.similarityIssues || 0) > 0\n            \n            return (\n              <li\n                key={item.uniqueKey || `${item.path}-${index}`}\n                className={`py-1 rounded transition-colors ${isSelected ? 'bg-blue-50 dark:bg-blue-900/30' : ''}`}\n                onClick={e => {\n                  e.stopPropagation()\n                  setSelectedPath(item.path)\n                  updateBreadcrumb(item.path)\n                  if (isFolder) toggleFolder(item.path)\n                  else if (item.type === 'file') setSelectedFile(item)\n                }}\n                onMouseOver={e => {\n                  e.currentTarget.classList.add('bg-slate-100', 'dark:bg-slate-800/50')\n                }}\n                onMouseOut={e => {\n                  if (!isSelected) e.currentTarget.classList.remove('bg-slate-100', 'dark:bg-slate-800/50')\n                }}\n                style={{ cursor: 'pointer' }}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center flex-1\">\n                    {isFolder ? (\n                      <span className=\"mr-2 flex items-center\">\n                        <FolderIcon className={`h-4 w-4 ${isExpanded ? 'text-yellow-600' : 'text-blue-500'} transition-colors`} />\n                        <span className=\"ml-1 text-xs\">{isExpanded ? '▼' : '▶'}</span>\n                      </span>\n                    ) : item.componentSlug ? (\n                      <div className=\"mr-2 flex items-center\">\n                        {item.entityType === 'function' && <Code className=\"h-4 w-4 text-green-500\" />}\n                        {item.entityType === 'class' && <Package className=\"h-4 w-4 text-purple-500\" />}\n                        {item.entityType === 'component' && <FileCode className=\"h-4 w-4 text-blue-500\" />}\n                        {item.entityType === 'method' && <Hash className=\"h-4 w-4 text-orange-500\" />}\n                        {!item.entityType && <FileIcon className=\"h-4 w-4 text-gray-500\" />}\n                      </div>\n                    ) : (\n                      <FileIcon className=\"h-4 w-4 text-gray-500 mr-2\" />\n                    )}\n\n                    {item.componentSlug ? (\n                      <Link\n                        href={`/components/${item.componentSlug}`}\n                        className=\"text-sm hover:underline text-violet-500\"\n                        onClick={e => {\n                          e.stopPropagation()\n                          setSelectedPath(item.path)\n                          updateBreadcrumb(item.path)\n                        }}\n                      >\n                        {item.name}\n                      </Link>\n                    ) : (\n                      <span className=\"text-sm font-medium\">{item.name}</span>\n                    )}\n\n                    {/* Entity type badge */}\n                    {item.entityType && (\n                      <Badge className={`ml-2 text-xs ${\n                        item.entityType === 'component' ? 'bg-blue-50 text-blue-600 border-blue-200' :\n                        item.entityType === 'function' ? 'bg-green-50 text-green-600 border-green-200' :\n                        item.entityType === 'class' ? 'bg-purple-50 text-purple-600 border-purple-200' :\n                        item.entityType === 'method' ? 'bg-orange-50 text-orange-600 border-orange-200' :\n                        'bg-gray-50 text-gray-600 border-gray-200'\n                      }`}>\n                        {item.entityType}\n                      </Badge>\n                    )}\n\n                    {/* Issue indicator */}\n                    {hasIssues && (\n                      <Tooltip>\n                        <TooltipTrigger>\n                          <AlertCircle className=\"h-4 w-4 text-amber-500 ml-2\" />\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p>{item.stats?.similarityIssues} similarity issues detected</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    )}\n                  </div>\n\n                  {/* Stats badges for folders */}\n                  {isFolder && item.stats && (\n                    <div className=\"flex gap-1 ml-2\">\n                      {(item.stats.componentCount || 0) > 0 && (\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {item.stats.componentCount}\n                            </Badge>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p>{item.stats.componentCount} components</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      )}\n                      {(item.stats.similarityIssues || 0) > 0 && (\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              {item.stats.similarityIssues}\n                            </Badge>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p>{item.stats.similarityIssues} similarity issues</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Children */}\n                {isFolder && isExpanded && item.children && item.children.length > 0 && (\n                  <div>{renderTree(item.children, depth + 1, item.path)}</div>\n                )}\n              </li>\n            )\n          })}\n        </ul>\n      </TooltipProvider>\n    )\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "items",
            "type": "FileStructure[]"
          },
          {
            "name": "depth",
            "type": "any"
          },
          {
            "name": "parentPath",
            "type": "any"
          }
        ]
      },
      {
        "name": "renderAnalytics",
        "code": "function renderAnalytics() {\n    return (\n      <div className=\"space-y-6\">\n        {/* Project Overview */}\n        <Card>\n          <CardHeader>\n            <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n              <Activity className=\"h-5 w-5\" />\n              Project Overview\n            </h3>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{projectStats.totalFiles}</div>\n                <div className=\"text-sm text-muted-foreground\">Files</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{projectStats.totalComponents}</div>\n                <div className=\"text-sm text-muted-foreground\">Components</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{projectStats.totalMethods}</div>\n                <div className=\"text-sm text-muted-foreground\">Methods</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-amber-600\">{projectStats.totalIssues}</div>\n                <div className=\"text-sm text-muted-foreground\">Issues</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Component Types Distribution */}\n        <Card>\n          <CardHeader>\n            <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n              <Layers className=\"h-5 w-5\" />\n              Component Types\n            </h3>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {Array.from(projectStats.componentTypes.entries()).map(([type, count]) => {\n                const percentage = (count / projectStats.totalComponents) * 100\n                return (\n                  <div key={type}>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span className=\"capitalize\">{type}s</span>\n                      <span>{count} ({percentage.toFixed(1)}%)</span>\n                    </div>\n                    <Progress value={percentage} className=\"h-2\" />\n                  </div>\n                )\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "renderIssues",
        "code": "function renderIssues() {\n    const issueFiles = fileStructure.filter(item => \n      item.type === 'file' && (item.stats?.similarityIssues || 0) > 0\n    )\n\n    return (\n      <div className=\"space-y-4\">\n        {issueFiles.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No similarity issues detected.</p>\n          </div>\n        ) : (\n          issueFiles.map(file => (\n            <Card key={file.path} className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                  onClick={() => setSelectedFile(file)}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <AlertCircle className=\"h-5 w-5 text-amber-500\" />\n                    <div>\n                      <div className=\"font-medium\">{file.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">{file.path}</div>\n                    </div>\n                  </div>\n                  <Badge variant=\"destructive\">\n                    {file.stats?.similarityIssues} issues\n                  </Badge>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    )\n  }",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "toggleFolder",
    "kind": "function",
    "code": "function toggleFolder(path: string) {\n    setExpandedFolders((prev: Set<string>) => {\n      const newSet = new Set(prev)\n      if (newSet.has(path)) {\n        newSet.delete(path)\n      } else {\n        newSet.add(path)\n      }\n      return newSet\n    })\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_togglefolder",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "updateBreadcrumb",
    "kind": "function",
    "code": "function updateBreadcrumb(path: string) {\n    if (!path) return setBreadcrumb([])\n    setBreadcrumb(path.split('/').filter(Boolean))\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_updatebreadcrumb",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "fetchComponents",
    "kind": "function",
    "code": "async function fetchComponents() {\n      try {\n        // Fetch the component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // Group components by their file paths with full data\n        const filesByPath: Record<string, ComponentData[]> = {}\n        const detailsMap = new Map<string, ComponentData[]>()\n\n        // Process each component and fetch detailed data\n        await Promise.all(data.map(async (comp: { name: string; slug: string; filePath: string }) => {\n          if (!comp.filePath) return\n\n          try {\n            // Fetch detailed component data\n            const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n            const detailData = await detailRes.json()\n\n            const componentData: ComponentData = {\n              name: comp.name,\n              slug: comp.slug,\n              filePath: comp.filePath,\n              kind: detailData.kind,\n              methods: detailData.methods || [],\n              relationships: detailData.relationships || [],\n              imports: detailData.imports || [],\n              references: detailData.references || [],\n              similarityWarnings: detailData.similarityWarnings || [],\n              description: detailData.description\n            }\n\n            // Store the component in its path\n            const path = comp.filePath\n            if (!filesByPath[path]) {\n              filesByPath[path] = []\n            }\n            filesByPath[path].push(componentData)\n\n            // Update details map\n            if (!detailsMap.has(path)) {\n              detailsMap.set(path, [])\n            }\n            detailsMap.get(path)!.push(componentData)\n          } catch (error) {\n            console.error(`Error loading details for ${comp.slug}:`, error)\n          }\n        }))\n\n        setComponentDetails(detailsMap)\n\n        // Convert flat paths to a tree structure with stats\n        const rootStructure: FileStructure[] = []\n\n        // Helper function to calculate folder stats\n        const calculateStats = (items: FileStructure[]): any => {\n          let stats = {\n            componentCount: 0,\n            methodCount: 0,\n            relationshipCount: 0,\n            importCount: 0,\n            similarityIssues: 0,\n            complexity: 0,\n            size: 0\n          }\n\n          items.forEach(item => {\n            if (item.type === 'folder' && item.children) {\n              const childStats = calculateStats(item.children)\n              Object.keys(stats).forEach(key => {\n                stats[key as keyof typeof stats] += childStats[key]\n              })\n            } else if (item.components) {\n              item.components.forEach(comp => {\n                stats.componentCount++\n                stats.methodCount += comp.methods?.length || 0\n                stats.relationshipCount += comp.relationships?.length || 0\n                stats.importCount += comp.imports?.length || 0\n                stats.similarityIssues += comp.similarityWarnings?.length || 0\n              })\n            }\n          })\n\n          return stats\n        }\n\n        // Helper to determine entity type\n        const determineEntityType = (comp: ComponentData): FileStructure['entityType'] => {\n          if (comp.kind === 'function') return 'function'\n          if (comp.kind === 'class') return 'class'\n          if (comp.kind === 'method') return 'method'\n          if (comp.kind === 'component') return 'component'\n          return 'unknown'\n        }\n\n        // Process each file path\n        Object.entries(filesByPath).forEach(([path, components]) => {\n          // Split the path into parts (folders/file)\n          const parts = path.split('/')\n          let currentLevel = rootStructure\n\n          // Process each part of the path except the last one (the file)\n          for (let i = 0; i < parts.length - 1; i++) {\n            const part = parts[i]\n            if (!part) continue // Skip empty parts\n\n            // Look for existing folder\n            let folder = currentLevel.find(item =>\n              item.type === 'folder' && item.name === part\n            )\n\n            // Create folder if it doesn't exist\n            if (!folder) {\n              folder = {\n                name: part,\n                path: parts.slice(0, i + 1).join('/'),\n                type: 'folder',\n                children: [],\n                stats: {\n                  componentCount: 0,\n                  methodCount: 0,\n                  relationshipCount: 0,\n                  importCount: 0,\n                  similarityIssues: 0,\n                  complexity: 0,\n                  size: 0\n                }\n              }\n              currentLevel.push(folder)\n            }\n\n            // Update current level to this folder's children\n            currentLevel = folder.children!\n          }\n\n          // Add the file at the current level with stats\n          const fileName = parts[parts.length - 1]\n          if (fileName) {\n            const fileStats = {\n              componentCount: components.length,\n              methodCount: components.reduce((acc, comp) => acc + (comp.methods?.length || 0), 0),\n              relationshipCount: components.reduce((acc, comp) => acc + (comp.relationships?.length || 0), 0),\n              importCount: components.reduce((acc, comp) => acc + (comp.imports?.length || 0), 0),\n              similarityIssues: components.reduce((acc, comp) => acc + (comp.similarityWarnings?.length || 0), 0),\n              complexity: 0, // Could be calculated based on methods, relationships, etc.\n              size: components.length\n            }\n\n            currentLevel.push({\n              name: fileName,\n              path: path,\n              type: 'file',\n              components: components,\n              stats: fileStats,\n              children: components.map((comp, compIndex) => ({\n                name: comp.name,\n                path: `${path}#${comp.name}-${compIndex}`,\n                type: 'file' as const,\n                componentSlug: comp.slug,\n                uniqueKey: `${comp.slug}-${path}-${compIndex}`,\n                entityType: determineEntityType(comp),\n                stats: {\n                  methodCount: comp.methods?.length || 0,\n                  relationshipCount: comp.relationships?.length || 0,\n                  importCount: comp.imports?.length || 0,\n                  similarityIssues: comp.similarityWarnings?.length || 0\n                }\n              }))\n            })\n          }\n        })\n\n        // Calculate stats for all folders\n        const updateFolderStats = (items: FileStructure[]) => {\n          items.forEach(item => {\n            if (item.type === 'folder' && item.children) {\n              updateFolderStats(item.children)\n              item.stats = calculateStats(item.children)\n            }\n          })\n        }\n        updateFolderStats(rootStructure)\n\n        // Sort the structure (folders first, then alphabetically)\n        const sortStructure = (items: FileStructure[]): FileStructure[] => {\n          return items.sort((a, b) => {\n            // Folders first\n            if (a.type !== b.type) {\n              return a.type === 'folder' ? -1 : 1\n            }\n            // Then alphabetically\n            return a.name.localeCompare(b.name)\n          }).map(item => {\n            if (item.children) {\n              return { ...item, children: sortStructure(item.children) }\n            }\n            return item\n          })\n        }\n\n        setFileStructure(sortStructure(rootStructure))\n        setLoading(false)\n        // Optionally, expand root by default\n        setExpandedFolders(new Set(['']))\n      } catch (error) {\n        console.error('Error loading file structure:', error)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_fetchcomponents",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "calculateStats",
    "kind": "function",
    "code": "const calculateStats = (items: FileStructure[]): any => {\n          let stats = {\n            componentCount: 0,\n            methodCount: 0,\n            relationshipCount: 0,\n            importCount: 0,\n            similarityIssues: 0,\n            complexity: 0,\n            size: 0\n          }\n\n          items.forEach(item => {\n            if (item.type === 'folder' && item.children) {\n              const childStats = calculateStats(item.children)\n              Object.keys(stats).forEach(key => {\n                stats[key as keyof typeof stats] += childStats[key]\n              })\n            } else if (item.components) {\n              item.components.forEach(comp => {\n                stats.componentCount++\n                stats.methodCount += comp.methods?.length || 0\n                stats.relationshipCount += comp.relationships?.length || 0\n                stats.importCount += comp.imports?.length || 0\n                stats.similarityIssues += comp.similarityWarnings?.length || 0\n              })\n            }\n          })\n\n          return stats\n        }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_calculatestats",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "determineEntityType",
    "kind": "function",
    "code": "const determineEntityType = (comp: ComponentData): FileStructure['entityType'] => {\n          if (comp.kind === 'function') return 'function'\n          if (comp.kind === 'class') return 'class'\n          if (comp.kind === 'method') return 'method'\n          if (comp.kind === 'component') return 'component'\n          return 'unknown'\n        }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_determineentitytype",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "updateFolderStats",
    "kind": "function",
    "code": "const updateFolderStats = (items: FileStructure[]) => {\n          items.forEach(item => {\n            if (item.type === 'folder' && item.children) {\n              updateFolderStats(item.children)\n              item.stats = calculateStats(item.children)\n            }\n          })\n        }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_updatefolderstats",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "sortStructure",
    "kind": "function",
    "code": "const sortStructure = (items: FileStructure[]): FileStructure[] => {\n          return items.sort((a, b) => {\n            // Folders first\n            if (a.type !== b.type) {\n              return a.type === 'folder' ? -1 : 1\n            }\n            // Then alphabetically\n            return a.name.localeCompare(b.name)\n          }).map(item => {\n            if (item.children) {\n              return { ...item, children: sortStructure(item.children) }\n            }\n            return item\n          })\n        }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_sortstructure",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "filterItems",
    "kind": "function",
    "code": "const filterItems = (items: FileStructure[]): FileStructure[] => {\n      return items.reduce((acc: FileStructure[], item) => {\n        // Check if item matches search\n        const matchesSearch = !searchQuery || \n          item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          item.components?.some(comp => \n            comp.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n            comp.description?.toLowerCase().includes(searchQuery.toLowerCase())\n          )\n\n        // Check if item matches filter type\n        let matchesFilter = filterType === 'all'\n        if (filterType === 'issues') {\n          matchesFilter = (item.stats?.similarityIssues || 0) > 0\n        } else if (filterType !== 'all' && item.components) {\n          matchesFilter = item.components.some(comp => {\n            const entityType = determineEntityType(comp)\n            return filterType === 'components' && entityType === 'component' ||\n                   filterType === 'functions' && entityType === 'function' ||\n                   filterType === 'classes' && entityType === 'class'\n          })\n        }\n\n        if (item.type === 'folder' && item.children) {\n          const filteredChildren = filterItems(item.children)\n          if (filteredChildren.length > 0) {\n            return [...acc, { ...item, children: filteredChildren }]\n          }\n        } else if (matchesSearch && matchesFilter) {\n          return [...acc, item]\n        }\n\n        return acc\n      }, [])\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_filteritems",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "determineEntityType",
    "kind": "function",
    "code": "const determineEntityType = (comp: ComponentData): FileStructure['entityType'] => {\n    if (comp.kind === 'function') return 'function'\n    if (comp.kind === 'class') return 'class'\n    if (comp.kind === 'method') return 'method'\n    if (comp.kind === 'component') return 'component'\n    return 'unknown'\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_determineentitytype",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "countStats",
    "kind": "function",
    "code": "const countStats = (items: FileStructure[]) => {\n      items.forEach(item => {\n        if (item.type === 'file') {\n          stats.totalFiles++\n          if (item.stats) {\n            stats.totalComponents += item.stats.componentCount || 0\n            stats.totalMethods += item.stats.methodCount || 0\n            stats.totalRelationships += item.stats.relationshipCount || 0\n            stats.totalIssues += item.stats.similarityIssues || 0\n          }\n          item.components?.forEach(comp => {\n            const type = determineEntityType(comp)\n            if (type) {\n              stats.componentTypes.set(type, (stats.componentTypes.get(type) || 0) + 1)\n            }\n          })\n        } else if (item.children) {\n          countStats(item.children)\n        }\n      })\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_countstats",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "renderTree",
    "kind": "function",
    "code": "function renderTree(items: FileStructure[], depth = 0, parentPath = '') {\n    return (\n      <TooltipProvider>\n        <ul className={`pl-${depth * 4} space-y-1`} style={{ paddingLeft: depth * 16 }}>\n          {items.map((item, index) => {\n            const isFolder = item.type === 'folder'\n            const isExpanded = isFolder && expandedFolders.has(item.path)\n            const isSelected = selectedPath === item.path\n            const hasIssues = (item.stats?.similarityIssues || 0) > 0\n            \n            return (\n              <li\n                key={item.uniqueKey || `${item.path}-${index}`}\n                className={`py-1 rounded transition-colors ${isSelected ? 'bg-blue-50 dark:bg-blue-900/30' : ''}`}\n                onClick={e => {\n                  e.stopPropagation()\n                  setSelectedPath(item.path)\n                  updateBreadcrumb(item.path)\n                  if (isFolder) toggleFolder(item.path)\n                  else if (item.type === 'file') setSelectedFile(item)\n                }}\n                onMouseOver={e => {\n                  e.currentTarget.classList.add('bg-slate-100', 'dark:bg-slate-800/50')\n                }}\n                onMouseOut={e => {\n                  if (!isSelected) e.currentTarget.classList.remove('bg-slate-100', 'dark:bg-slate-800/50')\n                }}\n                style={{ cursor: 'pointer' }}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center flex-1\">\n                    {isFolder ? (\n                      <span className=\"mr-2 flex items-center\">\n                        <FolderIcon className={`h-4 w-4 ${isExpanded ? 'text-yellow-600' : 'text-blue-500'} transition-colors`} />\n                        <span className=\"ml-1 text-xs\">{isExpanded ? '▼' : '▶'}</span>\n                      </span>\n                    ) : item.componentSlug ? (\n                      <div className=\"mr-2 flex items-center\">\n                        {item.entityType === 'function' && <Code className=\"h-4 w-4 text-green-500\" />}\n                        {item.entityType === 'class' && <Package className=\"h-4 w-4 text-purple-500\" />}\n                        {item.entityType === 'component' && <FileCode className=\"h-4 w-4 text-blue-500\" />}\n                        {item.entityType === 'method' && <Hash className=\"h-4 w-4 text-orange-500\" />}\n                        {!item.entityType && <FileIcon className=\"h-4 w-4 text-gray-500\" />}\n                      </div>\n                    ) : (\n                      <FileIcon className=\"h-4 w-4 text-gray-500 mr-2\" />\n                    )}\n\n                    {item.componentSlug ? (\n                      <Link\n                        href={`/components/${item.componentSlug}`}\n                        className=\"text-sm hover:underline text-violet-500\"\n                        onClick={e => {\n                          e.stopPropagation()\n                          setSelectedPath(item.path)\n                          updateBreadcrumb(item.path)\n                        }}\n                      >\n                        {item.name}\n                      </Link>\n                    ) : (\n                      <span className=\"text-sm font-medium\">{item.name}</span>\n                    )}\n\n                    {/* Entity type badge */}\n                    {item.entityType && (\n                      <Badge className={`ml-2 text-xs ${\n                        item.entityType === 'component' ? 'bg-blue-50 text-blue-600 border-blue-200' :\n                        item.entityType === 'function' ? 'bg-green-50 text-green-600 border-green-200' :\n                        item.entityType === 'class' ? 'bg-purple-50 text-purple-600 border-purple-200' :\n                        item.entityType === 'method' ? 'bg-orange-50 text-orange-600 border-orange-200' :\n                        'bg-gray-50 text-gray-600 border-gray-200'\n                      }`}>\n                        {item.entityType}\n                      </Badge>\n                    )}\n\n                    {/* Issue indicator */}\n                    {hasIssues && (\n                      <Tooltip>\n                        <TooltipTrigger>\n                          <AlertCircle className=\"h-4 w-4 text-amber-500 ml-2\" />\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p>{item.stats?.similarityIssues} similarity issues detected</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    )}\n                  </div>\n\n                  {/* Stats badges for folders */}\n                  {isFolder && item.stats && (\n                    <div className=\"flex gap-1 ml-2\">\n                      {(item.stats.componentCount || 0) > 0 && (\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {item.stats.componentCount}\n                            </Badge>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p>{item.stats.componentCount} components</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      )}\n                      {(item.stats.similarityIssues || 0) > 0 && (\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              {item.stats.similarityIssues}\n                            </Badge>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p>{item.stats.similarityIssues} similarity issues</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Children */}\n                {isFolder && isExpanded && item.children && item.children.length > 0 && (\n                  <div>{renderTree(item.children, depth + 1, item.path)}</div>\n                )}\n              </li>\n            )\n          })}\n        </ul>\n      </TooltipProvider>\n    )\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_rendertree",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "renderAnalytics",
    "kind": "function",
    "code": "function renderAnalytics() {\n    return (\n      <div className=\"space-y-6\">\n        {/* Project Overview */}\n        <Card>\n          <CardHeader>\n            <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n              <Activity className=\"h-5 w-5\" />\n              Project Overview\n            </h3>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{projectStats.totalFiles}</div>\n                <div className=\"text-sm text-muted-foreground\">Files</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{projectStats.totalComponents}</div>\n                <div className=\"text-sm text-muted-foreground\">Components</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{projectStats.totalMethods}</div>\n                <div className=\"text-sm text-muted-foreground\">Methods</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-amber-600\">{projectStats.totalIssues}</div>\n                <div className=\"text-sm text-muted-foreground\">Issues</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Component Types Distribution */}\n        <Card>\n          <CardHeader>\n            <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n              <Layers className=\"h-5 w-5\" />\n              Component Types\n            </h3>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {Array.from(projectStats.componentTypes.entries()).map(([type, count]) => {\n                const percentage = (count / projectStats.totalComponents) * 100\n                return (\n                  <div key={type}>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span className=\"capitalize\">{type}s</span>\n                      <span>{count} ({percentage.toFixed(1)}%)</span>\n                    </div>\n                    <Progress value={percentage} className=\"h-2\" />\n                  </div>\n                )\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_renderanalytics",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "renderIssues",
    "kind": "function",
    "code": "function renderIssues() {\n    const issueFiles = fileStructure.filter(item => \n      item.type === 'file' && (item.stats?.similarityIssues || 0) > 0\n    )\n\n    return (\n      <div className=\"space-y-4\">\n        {issueFiles.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No similarity issues detected.</p>\n          </div>\n        ) : (\n          issueFiles.map(file => (\n            <Card key={file.path} className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                  onClick={() => setSelectedFile(file)}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <AlertCircle className=\"h-5 w-5 text-amber-500\" />\n                    <div>\n                      <div className=\"font-medium\">{file.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">{file.path}</div>\n                    </div>\n                  </div>\n                  <Badge variant=\"destructive\">\n                    {file.stats?.similarityIssues} issues\n                  </Badge>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    )\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-structure.tsx",
    "slug": "src_ui_components_code-structure_renderissues",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CodeSimilaritySearch",
    "kind": "component",
    "code": "export function CodeSimilaritySearch() {\n    const [codeToCompare, setCodeToCompare] = useState(\"\");\n    const [results, setResults] = useState<SimilarityResult[]>([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    const handleSearch = async () => {\n        if (!codeToCompare.trim()) {\n            setError(\"Please paste some code to compare.\");\n            return;\n        }\n\n        setLoading(true);\n        setError(null);\n        setResults([]);\n\n        try {\n            const res = await fetch('http://localhost:6270/similarity', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ code: codeToCompare, limit: 5 })\n            });\n\n            if (!res.ok) {\n                const errData = await res.json();\n                throw new Error(errData.error || 'Failed to fetch similarity results');\n            }\n\n            const data = await res.json();\n            setResults(data);\n\n        } catch (e: any) {\n            setError(e.message || \"An unexpected error occurred.\");\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <Card>\n            <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center gap-3\">\n                    <div className=\"p-2 bg-primary/10 rounded-lg\">\n                        <Code2 className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div>\n                        <h3 className=\"text-xl font-semibold\">Code Similarity Search</h3>\n                        <p className=\"text-sm text-muted-foreground mt-1\">Find duplicate or similar code patterns</p>\n                    </div>\n                </CardTitle>\n            </CardHeader>\n            <CardContent>\n                <div className=\"bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6\">\n                    <div className=\"flex items-start gap-3\">\n                        <Lightbulb className=\"h-5 w-5 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0\" />\n                        <div>\n                            <p className=\"text-sm font-medium text-blue-900 dark:text-blue-100 mb-1\">How it works</p>\n                            <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                                Paste any code snippet below to find similar functions or components in your codebase. This helps identify duplicate logic and refactoring opportunities.\n                            </p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"grid gap-6\">\n                    <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium flex items-center gap-2\">\n                            <Search className=\"h-4 w-4\" />\n                            Code to analyze\n                        </label>\n                        <Textarea \n                            placeholder={`// Example: Paste any code snippet here\nfunction calculateTotal(items) {\n  return items.reduce((sum, item) => sum + item.price, 0);\n}`}\n                            value={codeToCompare}\n                            onChange={(e) => setCodeToCompare(e.target.value)}\n                            rows={10}\n                            className=\"font-mono text-sm resize-none border-2 border-dashed border-muted-foreground/20 hover:border-muted-foreground/40 focus:border-primary transition-colors\"\n                        />\n                        <p className=\"text-xs text-muted-foreground\">\n                            Tip: Works best with complete functions or code blocks\n                        </p>\n                    </div>\n                    <Button \n                        onClick={handleSearch} \n                        disabled={loading || !codeToCompare.trim()}\n                        size=\"lg\"\n                        className=\"w-full sm:w-auto\"\n                    >\n                        <Search className=\"h-4 w-4 mr-2\" />\n                        {loading ? \"Analyzing Code...\" : \"Find Similar Code\"}\n                    </Button>\n                    \n                    {error && (\n                        <div className=\"bg-red-50 dark:bg-red-950/30 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n                            <div className=\"flex items-start gap-3\">\n                                <AlertCircle className=\"h-5 w-5 text-red-600 dark:text-red-400 mt-0.5 flex-shrink-0\" />\n                                <div>\n                                    <p className=\"text-sm font-medium text-red-900 dark:text-red-100\">Search Failed</p>\n                                    <p className=\"text-sm text-red-800 dark:text-red-200 mt-1\">{error}</p>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    \n                    {loading && (\n                        <div className=\"space-y-4\">\n                            <div className=\"flex items-center gap-3 text-sm text-muted-foreground\">\n                                <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-primary border-t-transparent\" />\n                                <span>Analyzing code patterns...</span>\n                            </div>\n                            <div className=\"space-y-3\">\n                                {[...Array(3)].map((_, i) => (\n                                    <div key={i} className=\"border p-4 rounded-lg bg-slate-50 dark:bg-slate-800/50\">\n                                        <div className=\"flex justify-between items-start\">\n                                            <div className=\"space-y-2 flex-1\">\n                                                <Skeleton className=\"h-5 w-32\" />\n                                                <Skeleton className=\"h-4 w-48\" />\n                                            </div>\n                                            <Skeleton className=\"h-6 w-12\" />\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n\n                    {results.length > 0 && (\n                        <div className=\"space-y-6\">\n                            <div className=\"flex items-center justify-between\">\n                                <h4 className=\"text-lg font-semibold flex items-center gap-2\">\n                                    <Badge variant=\"secondary\">{results.length}</Badge>\n                                    Similar Code Found\n                                </h4>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                    Sorted by similarity\n                                </Badge>\n                            </div>\n                            <div className=\"space-y-4\">\n                                {results.map((result, index) => {\n                                    const similarityPercent = result.similarity * 100;\n                                    return (\n                                        <div key={index} className={`border-2 p-5 rounded-xl transition-all hover:shadow-md ${\n                                            similarityPercent >= 80 ? 'border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950/30' :\n                                            similarityPercent >= 60 ? 'border-orange-200 bg-orange-50 dark:border-orange-800 dark:bg-orange-950/30' :\n                                            'border-slate-200 bg-slate-50 dark:border-slate-700 dark:bg-slate-800/50'\n                                        }`}>\n                                            <div className=\"flex justify-between items-start mb-3\">\n                                                <div className=\"flex-1\">\n                                                    <div className=\"flex items-center gap-2 mb-2\">\n                                                        <a \n                                                            href={`/components/${result.id}`} \n                                                            target=\"_blank\" \n                                                            rel=\"noopener noreferrer\" \n                                                            className=\"font-semibold text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 hover:underline flex items-center gap-1\"\n                                                        >\n                                                            {result.name}\n                                                            <ExternalLink className=\"h-3 w-3\" />\n                                                        </a>\n                                                        <Badge \n                                                            variant={similarityPercent >= 80 ? 'destructive' : similarityPercent >= 60 ? 'default' : 'secondary'}\n                                                            className=\"text-xs\"\n                                                        >\n                                                            {similarityPercent >= 80 ? 'High Match' : similarityPercent >= 60 ? 'Good Match' : 'Partial Match'}\n                                                        </Badge>\n                                                    </div>\n                                                    <p className=\"text-sm text-muted-foreground font-mono truncate max-w-md\" title={result.path}>\n                                                        {result.path}\n                                                    </p>\n                                                </div>\n                                                <div className=\"text-right flex-shrink-0 ml-4\">\n                                                    <p className={`font-bold text-2xl ${\n                                                        similarityPercent >= 80 ? 'text-red-600 dark:text-red-400' :\n                                                        similarityPercent >= 60 ? 'text-orange-600 dark:text-orange-400' :\n                                                        'text-slate-600 dark:text-slate-400'\n                                                    }`}>\n                                                        {similarityPercent.toFixed(1)}%\n                                                    </p>\n                                                    <p className=\"text-xs text-muted-foreground\">Similarity</p>\n                                                </div>\n                                            </div>\n                                            <Progress \n                                                value={similarityPercent} \n                                                className={`h-3 ${\n                                                    similarityPercent >= 80 ? '[&>div]:bg-red-500' :\n                                                    similarityPercent >= 60 ? '[&>div]:bg-orange-500' :\n                                                    '[&>div]:bg-slate-500'\n                                                }`}\n                                            />\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                            {results.length >= 5 && (\n                                <div className=\"text-center\">\n                                    <p className=\"text-sm text-muted-foreground\">\n                                        Showing top 5 matches. Refine your search for more specific results.\n                                    </p>\n                                </div>\n                            )}\n                        </div>\n                    )}\n                    \n                    {results.length === 0 && !loading && !error && codeToCompare.trim() && (\n                        <div className=\"bg-green-50 dark:bg-green-950/30 border border-green-200 dark:border-green-800 rounded-lg p-6 text-center\">\n                            <div className=\"flex flex-col items-center space-y-3\">\n                                <div className=\"p-3 bg-green-100 dark:bg-green-900 rounded-full\">\n                                    <Search className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n                                </div>\n                                <div>\n                                    <p className=\"font-medium text-green-900 dark:text-green-100\">No Similar Code Found</p>\n                                    <p className=\"text-sm text-green-800 dark:text-green-200 mt-1\">\n                                        Great! This code appears to be unique in your codebase.\n                                    </p>\n                                </div>\n                                <div className=\"text-xs text-green-700 dark:text-green-300 bg-green-100 dark:bg-green-900 px-3 py-2 rounded\">\n                                    Try different code patterns or reduce complexity for broader matches\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </CardContent>\n        </Card>\n    )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-similarity-search.tsx",
    "slug": "src_ui_components_code-similarity-search_codesimilaritysearch",
    "imports": [
      "Card",
      "CardContent",
      "CardHeader",
      "CardTitle",
      "Button",
      "Textarea",
      "Search",
      "Code2",
      "ExternalLink",
      "AlertCircle",
      "Lightbulb",
      "Progress",
      "Badge",
      "Skeleton"
    ],
    "references": [
      "Card",
      "CardHeader",
      "CardTitle",
      "Code2",
      "CardContent",
      "Lightbulb",
      "Search",
      "Textarea",
      "Button",
      "AlertCircle",
      "Skeleton",
      "Badge",
      "ExternalLink",
      "Progress"
    ],
    "relationships": [
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "cardtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "textarea",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "search",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "code2",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "externallink",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "alertcircle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "lightbulb",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "progress",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-similarity-search_codesimilaritysearch",
        "target": "skeleton",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "[...array(3)]",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 131,
        "targetFunction": "map"
      },
      {
        "target": "array",
        "type": "uses",
        "weight": 2,
        "context": "calls Array",
        "sourceLine": 131,
        "targetFunction": "Array"
      }
    ],
    "methods": [
      {
        "name": "handleSearch",
        "code": "const handleSearch = async () => {\n        if (!codeToCompare.trim()) {\n            setError(\"Please paste some code to compare.\");\n            return;\n        }\n\n        setLoading(true);\n        setError(null);\n        setResults([]);\n\n        try {\n            const res = await fetch('http://localhost:6270/similarity', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ code: codeToCompare, limit: 5 })\n            });\n\n            if (!res.ok) {\n                const errData = await res.json();\n                throw new Error(errData.error || 'Failed to fetch similarity results');\n            }\n\n            const data = await res.json();\n            setResults(data);\n\n        } catch (e: any) {\n            setError(e.message || \"An unexpected error occurred.\");\n        } finally {\n            setLoading(false);\n        }\n    };",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "handleSearch",
    "kind": "function",
    "code": "const handleSearch = async () => {\n        if (!codeToCompare.trim()) {\n            setError(\"Please paste some code to compare.\");\n            return;\n        }\n\n        setLoading(true);\n        setError(null);\n        setResults([]);\n\n        try {\n            const res = await fetch('http://localhost:6270/similarity', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ code: codeToCompare, limit: 5 })\n            });\n\n            if (!res.ok) {\n                const errData = await res.json();\n                throw new Error(errData.error || 'Failed to fetch similarity results');\n            }\n\n            const data = await res.json();\n            setResults(data);\n\n        } catch (e: any) {\n            setError(e.message || \"An unexpected error occurred.\");\n        } finally {\n            setLoading(false);\n        }\n    };",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-similarity-search.tsx",
    "slug": "src_ui_components_code-similarity-search_handlesearch",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CodeRelationships",
    "kind": "component",
    "code": "export function CodeRelationships({ entityId }: CodeRelationshipsProps) {\n  const [view, setView] = useState<\"dependencies\" | \"dependents\" | \"all\">(\"all\")\n  const [components, setComponents] = useState<CodeEntity[]>([])\n  const [relationships, setRelationships] = useState<Relationship[]>([])\n  const [loading, setLoading] = useState(true)\n  const [graphView, setGraphView] = useState<\"list\" | \"graph\">(\"graph\")\n  const [selectedNodeForCode, setSelectedNodeForCode] = useState<string | null>(null)\n  const [nodeCodeData, setNodeCodeData] = useState<any>(null)\n  const [selectedNodeId, setSelectedNodeId] = useState<string | null>(null)\n  const [selectedNodeData, setSelectedNodeData] = useState<any>(null)\n  const [selectedGroupId, setSelectedGroupId] = useState<string | null>(null)\n  const [selectedGroupData, setSelectedGroupData] = useState<any>(null)\n  const [focusMode, setFocusMode] = useState(false)\n  const [panelPosition, setPanelPosition] = useState({ x: 0, y: 80 })\n  const [isDragging, setIsDragging] = useState(false)\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 })\n  const [isMinimized, setIsMinimized] = useState(false)\n  const panelRef = useRef<HTMLDivElement>(null)\n\n  // Fetch component data\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data and classify entity types based on file analysis\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            \n            // Determine entity type based on comprehensive analysis\n            let entityType = \"component\" // default\n            \n            // First, analyze the code content for function patterns\n            if (data.code) {\n              const code = data.code.toLowerCase()\n              \n              // Check for function patterns in the code\n              if (code.includes('function ') || \n                  code.includes('const ') && code.includes(' = ') && (code.includes('=>') || code.includes('function')) ||\n                  code.includes('export const ') && code.includes('=>') ||\n                  code.includes('export function ') ||\n                  code.includes('async ') && code.includes('=>')) {\n                \n                // Further check if it's NOT a React component\n                if (!code.includes('jsx') && \n                    !code.includes('tsx') && \n                    !code.includes('react') && \n                    !code.includes('component') &&\n                    !code.includes('props') &&\n                    !code.includes('return (') &&\n                    !code.includes('<') &&\n                    !data.props?.length) {\n                  entityType = \"function\"\n                }\n              }\n              \n              // Check for class patterns\n              if (code.includes('class ') && code.includes('extends')) {\n                entityType = \"class\"\n              }\n            }\n            \n            // Analyze file path for additional context\n            if (data.filePath) {\n              const filePath = data.filePath.toLowerCase()\n              \n              // File path based classification (higher priority for utilities)\n              if (filePath.includes('/lib/') || \n                  filePath.includes('/utils/') || \n                  filePath.includes('/helpers/') ||\n                  filePath.includes('/functions/')) {\n                entityType = \"function\"\n              } else if (filePath.includes('/services/') || \n                        filePath.includes('/classes/') ||\n                        filePath.includes('/models/')) {\n                entityType = \"class\"\n              }\n            }\n            \n            // Name-based classification\n            if (data.name) {\n              const name = data.name.toLowerCase()\n              \n              // Function naming patterns\n              if (name.includes('use') && name.length > 3 && name[3] === name[3].toUpperCase()) {\n                // React hook pattern (useState, useEffect, etc.)\n                entityType = \"function\"\n              } else if (name.match(/^[a-z][a-z0-9]*[A-Z]/) || // camelCase starting with lowercase\n                        name.includes('to') || \n                        name.includes('get') || \n                        name.includes('set') || \n                        name.includes('create') || \n                        name.includes('update') || \n                        name.includes('delete') || \n                        name.includes('fetch') ||\n                        name.includes('handle') ||\n                        name.includes('copy') ||\n                        name.includes('format') ||\n                        name.includes('parse') ||\n                        name.includes('validate')) {\n                entityType = \"function\"\n              }\n              \n              // Class naming patterns\n              if (name.includes('Service') || \n                  name.includes('Provider') || \n                  name.includes('Manager') ||\n                  name.includes('Controller') ||\n                  name.includes('Handler') && !name.includes('handle')) {\n                entityType = \"class\"\n              }\n            }\n            \n            // Check if it's a method within another component\n            if (data.parent || (data.methods && data.methods.length === 1 && data.props?.length === 0)) {\n              entityType = \"method\"\n            }\n            \n            // Final check: if it has props but no JSX, it might be a utility with TypeScript interface\n            if (data.props && data.props.length > 0 && data.code && !data.code.includes('<')) {\n              entityType = \"function\"\n            }\n            \n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: entityType,\n              filePath: data.filePath || data.route || `src/components/${comp.name}`,\n              methods: data.methods || [],\n              props: data.props || []\n            }\n          })\n        )\n\n        // Extract relationships from component data with enhanced relationship detection\n        const relationshipsData: Relationship[] = []\n\n        // Create a lookup map for easier entity finding\n        const entityLookup = new Map()\n        componentsData.forEach(comp => entityLookup.set(comp.name.toLowerCase(), comp.id))\n\n        // For each component, check for relationships directly\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            const currentEntity = componentsData.find(c => c.id === comp.slug)\n\n            // 1. Direct relationships from data.relationships\n            if (data.relationships && Array.isArray(data.relationships)) {\n              data.relationships.forEach((rel: any) => {\n                if (rel.source && rel.target && rel.type) {\n                  relationshipsData.push({\n                    source: rel.source,\n                    target: rel.target,\n                    type: rel.type,\n                    weight: rel.weight || 1,\n                    context: rel.context\n                  })\n                } else if (rel.target && rel.type && !rel.source) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: rel.target,\n                    type: rel.type,\n                    weight: rel.weight || 1,\n                    context: rel.context\n                  })\n                }\n              })\n            }\n\n            // 2. Create \"contains\" relationships for methods within components/classes\n            if (data.methods && Array.isArray(data.methods) && data.methods.length > 0) {\n              data.methods.forEach((method: any) => {\n                const methodSlug = `${comp.slug}-${method.name.toLowerCase()}`\n                // Check if a method entity exists\n                const methodEntity = componentsData.find(c => \n                  c.name.toLowerCase() === method.name.toLowerCase() || \n                  c.id === methodSlug\n                )\n                \n                if (methodEntity) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: methodEntity.id,\n                    type: \"contains\",\n                    weight: 1,\n                    context: \"owns method\"\n                  })\n                }\n              })\n            }\n\n            // 3. Detect inheritance relationships from naming patterns and file structure\n            if (currentEntity && currentEntity.type === \"class\") {\n              // Look for inheritance patterns in the name\n              if (data.name.includes('Service') && data.name !== 'BaseService') {\n                const baseServiceEntity = componentsData.find(c => \n                  c.name.toLowerCase().includes('baseservice') || \n                  c.name.toLowerCase().includes('base')\n                )\n                if (baseServiceEntity) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: baseServiceEntity.id,\n                    type: \"inherits\",\n                    weight: 2,\n                    context: \"class inheritance\"\n                  })\n                }\n              }\n              \n              // Provider pattern inheritance\n              if (data.name.includes('Provider')) {\n                const baseProviderEntity = componentsData.find(c => \n                  c.name.toLowerCase().includes('provider') && \n                  c.name.toLowerCase().includes('base')\n                )\n                if (baseProviderEntity && baseProviderEntity.id !== comp.slug) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: baseProviderEntity.id,\n                    type: \"inherits\",\n                    weight: 2,\n                    context: \"provider inheritance\"\n                  })\n                }\n              }\n            }\n\n            // 4. Import relationships (uses)\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetSlug = importItem.toLowerCase().replace(/\\s+/g, \"-\")\n                const targetEntity = componentsData.find(c => \n                  c.name.toLowerCase() === importItem.toLowerCase() ||\n                  c.id === targetSlug\n                )\n                \n                if (targetEntity && !relationshipsData.some(r => \n                  r.source === comp.slug && r.target === targetEntity.id && r.type === \"uses\"\n                )) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetEntity.id,\n                    type: \"uses\",\n                    weight: 2,\n                    context: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // 5. Reference relationships (uses/contains)\n            if (data.references && Array.isArray(data.references)) {\n              data.references.forEach((refItem: string) => {\n                const targetEntity = componentsData.find(c => \n                  c.name.toLowerCase() === refItem.toLowerCase()\n                )\n                \n                if (targetEntity && !relationshipsData.some(r => \n                  r.source === comp.slug && r.target === targetEntity.id\n                )) {\n                  // Determine relationship type based on entity types\n                  let relType: \"uses\" | \"contains\" = \"uses\"\n                  if (currentEntity?.type === \"component\" && targetEntity.type === \"component\") {\n                    relType = \"contains\" // Component containing/rendering another component\n                  }\n                  \n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetEntity.id,\n                    type: relType,\n                    weight: relType === \"contains\" ? 2 : 1,\n                    context: relType === \"contains\" ? \"renders component\" : \"references\"\n                  })\n                }\n              })\n            }\n\n            // 6. Analyze method code for function calls (uses relationships)\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: any) => {\n                if (method.code) {\n                  // Look for function calls in method code\n                  componentsData.forEach(targetEntity => {\n                    if (targetEntity.type === \"function\" && \n                        targetEntity.id !== comp.slug &&\n                        method.code.includes(targetEntity.name)) {\n                      \n                      if (!relationshipsData.some(r => \n                        r.source === comp.slug && r.target === targetEntity.id && r.type === \"uses\"\n                      )) {\n                        relationshipsData.push({\n                          source: comp.slug,\n                          target: targetEntity.id,\n                          type: \"uses\",\n                          weight: 1,\n                          context: \"calls function\"\n                        })\n                      }\n                    }\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        // Use only real data from the documentation\n        console.log('Loading real data from documentation')\n        console.log('Components loaded:', componentsData.length)\n        console.log('Relationships found:', uniqueRelationships.length)\n        \n        // Debug file paths\n        const filePathStats = componentsData.reduce((acc, comp) => {\n          if (comp.filePath) {\n            if (comp.filePath.startsWith('src/components/')) {\n              acc.defaultPaths++\n            } else {\n              acc.realPaths++\n            }\n          } else {\n            acc.noPaths++\n          }\n          return acc\n        }, { defaultPaths: 0, realPaths: 0, noPaths: 0 })\n        \n        console.log('File path statistics:', filePathStats)\n        console.log('Sample file paths:', componentsData.slice(0, 5).map(c => ({ name: c.name, filePath: c.filePath })))\n        \n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        // Set empty data if there's an error\n        setComponents([])\n        setRelationships([])\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  // Fetch code data for a specific node\n  const fetchNodeCodeData = async (nodeId: string) => {\n    try {\n      const res = await fetch(`/docs-data/${nodeId}.json`)\n      const data = await res.json()\n      setNodeCodeData(data)\n    } catch (error) {\n      console.error('Error fetching node code data:', error)\n      setNodeCodeData(null)\n    }\n  }\n\n  // Handle node click to select node and show side panel\n  const handleNodeClick = (nodeId: string) => {\n    setSelectedNodeId(nodeId)\n    // Fetch basic node data for the side panel\n    const nodeEntity = components.find(c => c.id === nodeId)\n    setSelectedNodeData(nodeEntity)\n    // Clear group selection when selecting a node\n    setSelectedGroupId(null)\n    setSelectedGroupData(null)\n    // Reset focus mode when selecting a new node\n    setFocusMode(false)\n    // Reset panel position when selecting a new node (default to right side)\n    setPanelPosition({ \n      x: typeof window !== 'undefined' ? window.innerWidth - 400 : 0, \n      y: 80 \n    })\n    // Reset minimize state\n    setIsMinimized(false)\n  }\n\n  // Handle group click to select group and show side panel\n  const handleGroupClick = (groupId: string, groupNodes: any[]) => {\n    setSelectedGroupId(groupId)\n    // Create group data object with summary information\n    const groupData = {\n      id: groupId,\n      name: groupId,\n      nodeCount: groupNodes.length,\n      nodes: groupNodes,\n      types: [...new Set(groupNodes.map(n => n.type))],\n      // Calculate connections to nodes outside this group\n      externalConnections: relationships.filter(rel => {\n        const groupNodeIds = new Set(groupNodes.map(n => n.id))\n        return (groupNodeIds.has(rel.source) && !groupNodeIds.has(rel.target)) ||\n               (groupNodeIds.has(rel.target) && !groupNodeIds.has(rel.source))\n      })\n    }\n    setSelectedGroupData(groupData)\n    // Clear node selection when selecting a group\n    setSelectedNodeId(null)\n    setSelectedNodeData(null)\n    // Reset focus mode when selecting a group\n    setFocusMode(false)\n    // Reset panel position when selecting a group\n    setPanelPosition({ \n      x: typeof window !== 'undefined' ? window.innerWidth - 400 : 0, \n      y: 80 \n    })\n    // Reset minimize state\n    setIsMinimized(false)\n  }\n\n  // Drag functionality for the panel\n  const handleMouseDown = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget || (e.target as HTMLElement).closest('.drag-handle')) {\n      setIsDragging(true)\n      setDragStart({\n        x: e.clientX - panelPosition.x,\n        y: e.clientY - panelPosition.y\n      })\n      e.preventDefault()\n    }\n  }\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (isDragging) {\n      const newX = e.clientX - dragStart.x\n      const newY = e.clientY - dragStart.y\n      \n      // Allow panel to be dragged anywhere, with minimal constraints to keep it accessible\n      const panel = panelRef.current\n      if (panel) {\n        const rect = panel.getBoundingClientRect()\n        const minVisibleArea = 50 // Minimum pixels that must remain visible\n        \n        setPanelPosition({\n          x: Math.max(-rect.width + minVisibleArea, Math.min(window.innerWidth - minVisibleArea, newX)),\n          y: Math.max(-rect.height + minVisibleArea, Math.min(window.innerHeight - minVisibleArea, newY))\n        })\n      }\n    }\n  }\n\n  const handleMouseUp = () => {\n    setIsDragging(false)\n  }\n\n  // Add global mouse event listeners for dragging\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove)\n      document.addEventListener('mouseup', handleMouseUp)\n      document.body.style.cursor = 'grabbing'\n      document.body.style.userSelect = 'none'\n      \n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove)\n        document.removeEventListener('mouseup', handleMouseUp)\n        document.body.style.cursor = ''\n        document.body.style.userSelect = ''\n      }\n    }\n  }, [isDragging, dragStart, panelPosition])\n\n  // Handle opening the full code modal\n  const openCodeModal = (nodeId: string) => {\n    setSelectedNodeForCode(nodeId)\n    fetchNodeCodeData(nodeId)\n    setSelectedNodeId(null)\n    setSelectedNodeData(null)\n  }\n\n  // Close code preview modal\n  const closeCodePreview = () => {\n    setSelectedNodeForCode(null)\n    setNodeCodeData(null)\n  }\n\n  // If entityId is provided, filter relationships for this entity\n  const filteredRelationships = useMemo(() => {\n    if (!entityId || relationships.length === 0) {\n      return relationships\n    }\n\n    return relationships.filter((rel) => {\n      if (view === \"dependencies\") return rel.source === entityId\n      if (view === \"dependents\") return rel.target === entityId\n      return rel.source === entityId || rel.target === entityId\n    })\n  }, [entityId, view, relationships])\n\n\n  // Get the current entity if entityId is provided\n  const currentEntity = useMemo(() => {\n    if (!entityId || components.length === 0) return undefined\n    return components.find((e) => e.id === entityId)\n  }, [entityId, components])\n\n  // Prepare graph data\n  const { graphNodes, graphEdges } = useMemo(() => {\n    if (components.length === 0 || filteredRelationships.length === 0) {\n      return { graphNodes: [], graphEdges: [] }\n    }\n\n    // Apply focus mode filtering if enabled and a node is selected\n    let workingRelationships = filteredRelationships\n    if (focusMode && selectedNodeId) {\n      // Find all relationships connected to the selected node\n      const relatedEntityIds = new Set<string>([selectedNodeId])\n      \n      // Get directly connected entities\n      filteredRelationships.forEach(rel => {\n        if (rel.source === selectedNodeId) {\n          relatedEntityIds.add(rel.target)\n        }\n        if (rel.target === selectedNodeId) {\n          relatedEntityIds.add(rel.source)\n        }\n      })\n\n      // Filter relationships to only include those involving related entities\n      workingRelationships = filteredRelationships.filter(rel =>\n        relatedEntityIds.has(rel.source) && relatedEntityIds.has(rel.target)\n      )\n    }\n\n    // Get all entities involved in relationships\n    const involvedEntityIds = new Set<string>()\n    workingRelationships.forEach(rel => {\n      involvedEntityIds.add(rel.source)\n      involvedEntityIds.add(rel.target)\n    })\n\n    // Create nodes\n    const nodes = components\n      .filter(comp => involvedEntityIds.has(comp.id))\n      .map(comp => {\n        const connections = workingRelationships.filter(\n          rel => rel.source === comp.id || rel.target === comp.id\n        ).length\n\n        return {\n          id: comp.id,\n          name: comp.name,\n          type: comp.type as 'component' | 'class' | 'function' | 'method',\n          x: Math.random() * 1200 + 300,\n          y: Math.random() * 800 + 200,\n          radius: Math.max(25, Math.min(45, 25 + connections * 2)),\n          color: '',\n          connections,\n          filePath: comp.filePath\n        }\n      })\n\n    // Create edges\n    const edges = workingRelationships.map(rel => ({\n      source: rel.source,\n      target: rel.target,\n      type: rel.type,\n      color: '',\n      width: 2,\n      weight: rel.weight || 1,\n      context: rel.context\n    }))\n\n    return { graphNodes: nodes, graphEdges: edges }\n  }, [components, filteredRelationships, focusMode, selectedNodeId])\n\n  const getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }\n\n  const getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"uses\":\n        return \"Uses\"\n      case \"inherits\":\n        return \"Inherits\"\n      case \"contains\":\n        return \"Contains\"\n      default:\n        return type\n    }\n  }\n\n  const getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"uses\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"inherits\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"contains\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      default:\n        return \"bg-slate-50 text-slate-700 border-slate-200 dark:bg-slate-900/20 dark:text-slate-400 dark:border-slate-800\"\n    }\n  }\n\n  // Calculate relationship statistics\n  const relationshipStats = useMemo(() => {\n    const stats = {\n      total: filteredRelationships.length,\n      byType: {} as Record<Relationship['type'], number>,\n      mostConnected: { name: '', connections: 0 }\n    };\n\n    filteredRelationships.forEach((rel: Relationship) => {\n      stats.byType[rel.type] = (stats.byType[rel.type] || 0) + 1;\n    });\n\n    const connectionCounts: Record<string, number> = {};\n    filteredRelationships.forEach((rel: Relationship) => {\n      connectionCounts[rel.source] = (connectionCounts[rel.source] || 0) + 1;\n      connectionCounts[rel.target] = (connectionCounts[rel.target] || 0) + 1;\n    });\n\n    let mostConnectedEntityInfo = { name: '', connections: 0 };\n    Object.entries(connectionCounts).forEach(([entityId, count]) => {\n      if (count > mostConnectedEntityInfo.connections) {\n        const entity = components.find((c: CodeEntity) => c.id === entityId);\n        mostConnectedEntityInfo = { name: entity?.name || entityId, connections: count };\n      }\n    });\n    stats.mostConnected = mostConnectedEntityInfo;\n\n    return stats;\n  }, [filteredRelationships, components]);\n\n  if (loading) {\n    return (\n      <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n        <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n          <CardTitle>Code Relationships</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Loading relationship data...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 pb-16\">\n      <McpServerControl />\n      <CodeSimilaritySearch />\n\n      {/* Statistics Panel */}\n      {filteredRelationships.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n          <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 border-blue-200 dark:border-blue-800\">\n            <CardContent className=\"p-4\">\n              <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">{relationshipStats.total}</div>\n              <div className=\"text-sm text-blue-700 dark:text-blue-300\">Total Relations</div>\n            </CardContent>\n          </Card>\n          \n          {Object.entries(relationshipStats.byType).map(([type, count]) => (\n            <Card key={type} className=\"bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900/20 dark:to-slate-800/20 border-slate-200 dark:border-slate-700\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-2xl font-bold text-slate-600 dark:text-slate-400\">{count}</div>\n                <div className=\"text-sm text-slate-700 dark:text-slate-300 capitalize\">{type}</div>\n              </CardContent>\n            </Card>\n          ))}\n          \n          {relationshipStats.mostConnected.connections > 0 && (\n            <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 border-purple-200 dark:border-purple-800\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-lg font-bold text-purple-600 dark:text-purple-400 truncate\">\n                  {relationshipStats.mostConnected.name}\n                </div>\n                <div className=\"text-sm text-purple-700 dark:text-purple-300\">\n                  Most Connected ({relationshipStats.mostConnected.connections})\n                </div>\n              </CardContent>\n            </Card>\n          )}\n          \n          {/* Data Source Info */}\n          {components.length > 0 && (\n            <Card className=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 border-green-200 dark:border-green-800\">\n              <CardContent className=\"p-4\">\n                <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n                  Real Data\n                </div>\n                <div className=\"text-sm text-green-700 dark:text-green-300\">\n                  Extracted from your actual codebase\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n\n      <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n        <CardHeader className=\"border-b border-slate-100 dark:border-slate-800\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>{currentEntity ? `Code Relationships for ${currentEntity.name}` : \"Code Relationships\"}</CardTitle>\n            <div className=\"flex gap-4\">\n              <Tabs value={graphView} onValueChange={(v) => setGraphView(v as any)}>\n                <TabsList className=\"bg-slate-100 dark:bg-slate-800\">\n                  <TabsTrigger value=\"graph\">Graph</TabsTrigger>\n                  <TabsTrigger value=\"list\">List</TabsTrigger>\n                </TabsList>\n              </Tabs>\n              {currentEntity && (\n                <Tabs value={view} onValueChange={(v) => setView(v as any)}>\n                  <TabsList className=\"bg-slate-100 dark:bg-slate-800\">\n                    <TabsTrigger value=\"all\">All</TabsTrigger>\n                    <TabsTrigger value=\"dependencies\">Dependencies</TabsTrigger>\n                    <TabsTrigger value=\"dependents\">Dependents</TabsTrigger>\n                  </TabsList>\n                </Tabs>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n      <CardContent className=\"p-6\">\n        {filteredRelationships.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No relationships found in your codebase.</p>\n            {components.length === 0 ? (\n              <p className=\"text-sm text-slate-500 mt-2\">Generate documentation first to analyze your code relationships</p>\n            ) : (\n              <p className=\"text-sm text-slate-500 mt-2\">Your components don't have detectable relationships yet. Try adding imports or method calls.</p>\n            )}\n          </div>\n        ) : graphView === \"graph\" ? (\n          <div className=\"h-[85vh] w-full min-h-[700px]\">\n            <InteractiveGraph\n              nodes={graphNodes}\n              edges={graphEdges}\n              focusNodeId={entityId}\n              selectedNodeId={selectedNodeId || undefined}\n              onNodeClick={handleNodeClick}\n              onGroupClick={handleGroupClick}\n            />\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {filteredRelationships.map((rel, index) => {\n              const sourceEntity = components.find((e) => e.id === rel.source)\n              const targetEntity = components.find((e) => e.id === rel.target)\n\n              if (!sourceEntity || !targetEntity) return null\n\n              return (\n                <div\n                  key={index}\n                  className=\"flex items-center gap-4 p-4 rounded-lg border border-slate-100 dark:border-slate-800 hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-colors\"\n                >\n                  <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                    {getEntityIcon(sourceEntity.type)}\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"font-medium text-base\">{sourceEntity.name}</div>\n                      <div className=\"text-xs text-muted-foreground font-mono truncate\" title={sourceEntity.filePath}>\n                        {sourceEntity.filePath?.split('/').slice(-2).join('/') || sourceEntity.filePath}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col items-center mx-2 flex-shrink-0\">\n                    <Badge className={`${getRelationshipColor(rel.type)} text-xs`}>\n                      {getRelationshipLabel(rel.type)}\n                      {rel.weight && rel.weight > 1 && (\n                        <span className=\"ml-1\">×{rel.weight}</span>\n                      )}\n                    </Badge>\n                    {rel.context && (\n                      <div className=\"text-xs text-muted-foreground mt-1 max-w-16 text-center truncate\" title={rel.context}>\n                        {rel.context}\n                      </div>\n                    )}\n                    <ArrowRightIcon className=\"h-5 w-5 text-muted-foreground my-1\" />\n                  </div>\n\n                  <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                    {getEntityIcon(targetEntity.type)}\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"font-medium text-base\">{targetEntity.name}</div>\n                      <div className=\"text-xs text-muted-foreground font-mono truncate\" title={targetEntity.filePath}>\n                        {targetEntity.filePath?.split('/').slice(-2).join('/') || targetEntity.filePath}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n\n    {/* Node Details Side Panel */}\n    {selectedNodeData && (\n      <Card \n        ref={panelRef}\n        className={`fixed bg-white/95 dark:bg-slate-900/95 backdrop-blur-md shadow-2xl border-2 border-blue-200 dark:border-blue-800 z-50 rounded-xl select-none transition-all duration-300 ${\n          isMinimized \n            ? 'w-80 h-16' \n            : 'w-96 max-h-[calc(100vh-5.5rem)] overflow-y-auto'\n        }`}\n        style={{\n          top: `${panelPosition.y}px`,\n          left: `${panelPosition.x}px`,\n          right: 'auto',\n          cursor: isDragging ? 'grabbing' : 'default'\n        }}\n      >\n        <CardHeader \n          className=\"pb-3 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/30 dark:to-purple-950/30 drag-handle cursor-grab hover:cursor-grab active:cursor-grabbing\"\n          onMouseDown={handleMouseDown}\n        >\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2 text-lg pointer-events-none\">\n              <div className=\"p-2 rounded-lg bg-gradient-to-br from-blue-500 to-purple-600 text-white shadow-md\">\n                {getEntityIcon(selectedNodeData.type)}\n              </div>\n              <div className=\"flex flex-col min-w-0\">\n                <span className=\"font-bold text-slate-900 dark:text-slate-100 truncate\">{selectedNodeData.name}</span>\n                <Badge \n                  variant=\"secondary\" \n                  className=\"mt-1 w-fit bg-gradient-to-r from-blue-100 to-purple-100 dark:from-blue-900/30 dark:to-purple-900/30 text-blue-700 dark:text-blue-300\"\n                >\n                  {selectedNodeData.type}\n                </Badge>\n              </div>\n            </CardTitle>\n            <div className=\"flex items-center gap-1 pointer-events-auto\">\n              <div className=\"drag-handle cursor-grab hover:cursor-grab active:cursor-grabbing p-1 rounded hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors\">\n                <Move className=\"h-4 w-4 text-slate-500 dark:text-slate-400\" />\n              </div>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setIsMinimized(!isMinimized)}\n                className=\"h-8 w-8 p-0 hover:bg-blue-100 dark:hover:bg-blue-900/20\"\n              >\n                <Minus className=\"h-4 w-4\" />\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => {\n                  setSelectedNodeId(null)\n                  setSelectedNodeData(null)\n                  setPanelPosition({ \n                    x: typeof window !== 'undefined' ? window.innerWidth - 400 : 0, \n                    y: 80 \n                  })\n                  setIsMinimized(false)\n                }}\n                className=\"h-8 w-8 p-0 hover:bg-red-100 dark:hover:bg-red-900/20\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        {!isMinimized && (\n          <CardContent className=\"p-4\">\n          {selectedNodeData.filePath && (\n            <div className=\"mb-4 p-3 bg-slate-100/80 dark:bg-slate-800/80 rounded-lg\">\n              <div className=\"text-sm text-slate-600 dark:text-slate-400 font-mono break-words\">\n                📁 {selectedNodeData.filePath}\n              </div>\n            </div>\n          )}\n          \n          {/* Connection Info */}\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-semibold text-slate-700 dark:text-slate-300 mb-2\">\n              Connections {focusMode && <span className=\"text-amber-600 dark:text-amber-400\">(Focus Mode)</span>}\n            </h4>\n            <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n              {(() => {\n                // Calculate connections based on current view (focus mode or normal)\n                const relevantRelationships = focusMode && selectedNodeId \n                  ? filteredRelationships.filter(rel => {\n                      const relatedEntityIds = new Set<string>([selectedNodeId])\n                      filteredRelationships.forEach(r => {\n                        if (r.source === selectedNodeId) relatedEntityIds.add(r.target)\n                        if (r.target === selectedNodeId) relatedEntityIds.add(r.source)\n                      })\n                      return relatedEntityIds.has(rel.source) && relatedEntityIds.has(rel.target)\n                    })\n                  : filteredRelationships.filter(rel => rel.source === selectedNodeId || rel.target === selectedNodeId)\n                \n                return `${relevantRelationships.length} relationships`\n              })()}\n            </div>\n          </div>\n\n          {/* Relationship breakdown */}\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-semibold text-slate-700 dark:text-slate-300 mb-2\">Relationship Types</h4>\n            <div className=\"space-y-1\">\n              {['uses', 'inherits', 'contains'].map(relType => {\n                // Calculate count based on current view (focus mode or normal)  \n                const relevantRelationships = focusMode && selectedNodeId \n                  ? filteredRelationships.filter(rel => {\n                      const relatedEntityIds = new Set<string>([selectedNodeId])\n                      filteredRelationships.forEach(r => {\n                        if (r.source === selectedNodeId) relatedEntityIds.add(r.target)\n                        if (r.target === selectedNodeId) relatedEntityIds.add(r.source)\n                      })\n                      return relatedEntityIds.has(rel.source) && relatedEntityIds.has(rel.target) && rel.type === relType\n                    })\n                  : filteredRelationships.filter(rel => \n                      (rel.source === selectedNodeId || rel.target === selectedNodeId) && rel.type === relType\n                    )\n                \n                const count = relevantRelationships.length\n                if (count === 0) return null\n                return (\n                  <div key={relType} className=\"flex items-center justify-between text-sm\">\n                    <Badge className={`${getRelationshipColor(relType as any)} text-xs`}>\n                      {getRelationshipLabel(relType as any)}\n                    </Badge>\n                    <span className=\"text-slate-600 dark:text-slate-400\">{count}</span>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n\n          {/* Focus Mode Switch */}\n          <div className=\"mb-4 p-3 bg-amber-50/50 dark:bg-amber-900/20 rounded-lg border border-amber-200 dark:border-amber-800\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"focus-mode\" className=\"text-sm font-medium cursor-pointer\">\n                <div className=\"flex items-center gap-2\">\n                  <Focus className=\"h-4 w-4 text-amber-600 dark:text-amber-400\" />\n                  <span>Focus Mode</span>\n                </div>\n                <div className=\"text-xs text-slate-600 dark:text-slate-400 mt-1\">\n                  Show only related components\n                </div>\n              </Label>\n              <Switch\n                id=\"focus-mode\"\n                checked={focusMode}\n                onCheckedChange={setFocusMode}\n                className=\"data-[state=checked]:bg-amber-600\"\n              />\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-2\">\n            <Button \n              onClick={() => openCodeModal(selectedNodeId!)}\n              className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white shadow-md\"\n            >\n              <Code className=\"h-4 w-4 mr-2\" />\n              View Full Code\n            </Button>\n            \n            {selectedNodeData.filePath && (\n              <Button \n                variant=\"outline\" \n                asChild\n                className=\"w-full border-blue-200 dark:border-blue-800 hover:bg-blue-50 dark:hover:bg-blue-900/20\"\n              >\n                <a href={`/components/${selectedNodeId}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <ExternalLink className=\"h-4 w-4 mr-2\" />\n                  View Details Page\n                </a>\n              </Button>\n            )}\n          </div>\n        </CardContent>\n        )}\n      </Card>\n    )}\n\n    {/* Group Details Side Panel */}\n    {selectedGroupData && (\n      <Card \n        ref={panelRef}\n        className={`fixed bg-white/95 dark:bg-slate-900/95 backdrop-blur-md shadow-2xl border-2 border-amber-200 dark:border-amber-800 z-50 rounded-xl select-none transition-all duration-300 ${\n          isMinimized \n            ? 'w-80 h-16' \n            : 'w-96 max-h-[calc(100vh-5.5rem)] overflow-y-auto'\n        }`}\n        style={{\n          top: `${panelPosition.y}px`,\n          left: `${panelPosition.x}px`,\n          right: 'auto',\n          cursor: isDragging ? 'grabbing' : 'default'\n        }}\n      >\n        <CardHeader \n          className=\"pb-3 bg-gradient-to-r from-amber-50 to-orange-50 dark:from-amber-950/30 dark:to-orange-950/30 drag-handle cursor-grab hover:cursor-grab active:cursor-grabbing\"\n          onMouseDown={handleMouseDown}\n        >\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2 text-lg pointer-events-none\">\n              <div className=\"p-2 rounded-lg bg-gradient-to-br from-amber-500 to-orange-600 text-white shadow-md\">\n                <FileCode className=\"h-4 w-4\" />\n              </div>\n              <div className=\"flex flex-col min-w-0\">\n                <span className=\"font-bold text-slate-900 dark:text-slate-100 truncate\">{selectedGroupData.name}</span>\n                <Badge \n                  variant=\"secondary\" \n                  className=\"mt-1 w-fit bg-gradient-to-r from-amber-100 to-orange-100 dark:from-amber-900/30 dark:to-orange-900/30 text-amber-700 dark:text-amber-300\"\n                >\n                  {selectedGroupData.nodeCount} nodes\n                </Badge>\n              </div>\n            </CardTitle>\n            <div className=\"flex items-center gap-1 pointer-events-auto\">\n              <div className=\"drag-handle cursor-grab hover:cursor-grab active:cursor-grabbing p-1 rounded hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors\">\n                <Move className=\"h-4 w-4 text-slate-500 dark:text-slate-400\" />\n              </div>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setIsMinimized(!isMinimized)}\n                className=\"h-8 w-8 p-0 hover:bg-amber-100 dark:hover:bg-amber-900/20\"\n              >\n                <Minus className=\"h-4 w-4\" />\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => {\n                  setSelectedGroupId(null)\n                  setSelectedGroupData(null)\n                  setPanelPosition({ \n                    x: typeof window !== 'undefined' ? window.innerWidth - 400 : 0, \n                    y: 80 \n                  })\n                  setIsMinimized(false)\n                }}\n                className=\"h-8 w-8 p-0 hover:bg-red-100 dark:hover:bg-red-900/20\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        {!isMinimized && (\n          <CardContent className=\"p-4\">\n          \n          {/* Group Summary */}\n          <div className=\"mb-4 p-3 bg-amber-100/80 dark:bg-amber-800/80 rounded-lg\">\n            <div className=\"text-sm text-amber-600 dark:text-amber-400 font-mono break-words\">\n              📁 Group: {selectedGroupData.name}\n            </div>\n            <div className=\"text-xs text-amber-700 dark:text-amber-300 mt-1\">\n              {selectedGroupData.nodeCount} components • {selectedGroupData.externalConnections.length} external connections\n            </div>\n          </div>\n          \n          {/* Node Types Breakdown */}\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-semibold text-slate-700 dark:text-slate-300 mb-2\">Node Types</h4>\n            <div className=\"flex flex-wrap gap-1\">\n              {selectedGroupData.types.map((type: string) => {\n                const count = selectedGroupData.nodes.filter((n: any) => n.type === type).length\n                return (\n                  <Badge key={type} className={`${getRelationshipColor('uses')} text-xs`}>\n                    {type} ({count})\n                  </Badge>\n                )\n              })}\n            </div>\n          </div>\n\n          {/* External Connections */}\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-semibold text-slate-700 dark:text-slate-300 mb-2\">\n              External Connections ({selectedGroupData.externalConnections.length})\n            </h4>\n            <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n              {selectedGroupData.externalConnections.slice(0, 5).map((rel: any, index: number) => {\n                const isOutgoing = selectedGroupData.nodes.some((n: any) => n.id === rel.source)\n                const externalNode = isOutgoing ? rel.target : rel.source\n                return (\n                  <div key={index} className=\"flex items-center justify-between text-sm\">\n                    <Badge className={`${getRelationshipColor(rel.type)} text-xs`}>\n                      {getRelationshipLabel(rel.type)}\n                    </Badge>\n                    <span className=\"text-slate-600 dark:text-slate-400 truncate ml-2 flex-1\">\n                      {isOutgoing ? '→' : '←'} {externalNode}\n                    </span>\n                  </div>\n                )\n              })}\n              {selectedGroupData.externalConnections.length > 5 && (\n                <div className=\"text-xs text-slate-500 dark:text-slate-400 text-center\">\n                  +{selectedGroupData.externalConnections.length - 5} more...\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Group Actions */}\n          <div className=\"space-y-2\">\n            <Button \n              onClick={() => {\n                // Set focus mode on this group\n                setFocusMode(true)\n                setSelectedNodeId(selectedGroupData.id)\n              }}\n              className=\"w-full bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white shadow-md\"\n            >\n              <Focus className=\"h-4 w-4 mr-2\" />\n              Focus on Group\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                // Open first component in group\n                const firstNode = selectedGroupData.nodes[0]\n                if (firstNode) {\n                  window.open(`/components/${firstNode.id}`, '_blank')\n                }\n              }}\n              className=\"w-full border-amber-200 dark:border-amber-800 hover:bg-amber-50 dark:hover:bg-amber-900/20\"\n            >\n              <ExternalLink className=\"h-4 w-4 mr-2\" />\n              View Components\n            </Button>\n          </div>\n        </CardContent>\n        )}\n      </Card>\n    )}\n\n    {/* Beautiful Code Preview Modal */}\n    <Dialog open={selectedNodeForCode !== null} onOpenChange={(open) => !open && closeCodePreview()}>\n      <DialogContent className=\"max-w-[98vw] w-[98vw] h-[95vh] flex flex-col p-0 gap-0 bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-700 shadow-2xl\">\n        <DialogHeader className=\"flex-shrink-0 p-4 md:p-6 border-b border-slate-200 dark:border-slate-700 bg-gradient-to-r from-blue-50/50 to-purple-50/50 dark:from-blue-950/20 dark:to-purple-950/20\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              {nodeCodeData && (\n                <>\n                  <div className=\"p-2 rounded-lg bg-gradient-to-br from-blue-500 to-purple-600 text-white shadow-md\">\n                    {getEntityIcon(nodeCodeData.type || \"component\")}\n                  </div>\n                  <div className=\"flex flex-col min-w-0\">\n                    <DialogTitle className=\"font-bold text-slate-900 dark:text-slate-100 truncate text-lg\">\n                      {nodeCodeData.name}\n                    </DialogTitle>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300\">\n                        {nodeCodeData.type || \"component\"}\n                      </Badge>\n                      {nodeCodeData.code && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {nodeCodeData.code.split('\\n').length} lines\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n            <div className=\"flex items-center gap-2\">\n              {nodeCodeData?.filePath && (\n                <Button variant=\"outline\" size=\"sm\" asChild>\n                  <a href={`/components/${selectedNodeForCode}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <ExternalLink className=\"h-4 w-4 mr-1\" />\n                    Details\n                  </a>\n                </Button>\n              )}\n            </div>\n          </div>\n          {nodeCodeData?.filePath && (\n            <div className=\"mt-2 px-2 py-1 bg-slate-100 dark:bg-slate-800 rounded text-xs font-mono text-slate-600 dark:text-slate-400 truncate\">\n              📁 {nodeCodeData.filePath}\n            </div>\n          )}\n        </DialogHeader>\n\n        {/* Scrollable Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          <ScrollArea className=\"h-full w-full\">\n            <div className=\"p-4 md:p-6 lg:p-8 space-y-6\">\n              {nodeCodeData ? (\n                <div className=\"grid grid-cols-1 xl:grid-cols-3 2xl:grid-cols-4 gap-6\">\n                  {/* Left Column - Info Cards */}\n                  <div className=\"space-y-6\">\n                    {/* Description Card */}\n                    {nodeCodeData.description && (\n                      <Card className=\"mt-4 bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/30 dark:to-indigo-950/30 border-blue-200 dark:border-blue-800\">\n                        <CardHeader className=\"p-3 pb-2\">\n                          <CardTitle className=\"text-sm font-medium flex items-center gap-2 text-blue-900 dark:text-blue-100\">\n                            <Info className=\"h-4 w-4\" />\n                            Description\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"p-3 pt-0\">\n                          <div className=\"prose dark:prose-invert max-w-none text-sm\">\n                            <ReactMarkdown rehypePlugins={[rehypeRaw, rehypeHighlight]}>\n                              {nodeCodeData.description}\n                            </ReactMarkdown>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {/* Props Card */}\n                    {nodeCodeData.props && nodeCodeData.props.length > 0 && (\n                      <Card className=\"bg-gradient-to-br from-emerald-50 to-teal-50 dark:from-emerald-950/30 dark:to-teal-950/30 border-emerald-200 dark:border-emerald-800\">\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"text-sm flex items-center gap-2 text-emerald-900 dark:text-emerald-100\">\n                            <div className=\"h-2 w-2 rounded-full bg-emerald-500\"></div>\n                            Props ({nodeCodeData.props.length})\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"pt-0 max-h-64 overflow-y-auto\">\n                          <div className=\"space-y-3\">\n                            {nodeCodeData.props.map((prop: any, index: number) => (\n                              <div key={index} className=\"bg-white/70 dark:bg-slate-800/70 rounded-lg p-3 border border-white/50 dark:border-slate-700/50\">\n                                <div className=\"flex items-center gap-2 mb-1 flex-wrap\">\n                                  <code className=\"px-2 py-1 bg-slate-100 dark:bg-slate-800 rounded text-xs font-semibold\">\n                                    {prop.name}\n                                  </code>\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {prop.type}\n                                  </Badge>\n                                  {prop.required && (\n                                    <Badge className=\"text-xs bg-red-100 text-red-700\">\n                                      required\n                                    </Badge>\n                                  )}\n                                </div>\n                                {prop.description && (\n                                  <div className=\"text-xs text-slate-600 dark:text-slate-400 mb-1 prose dark:prose-invert max-w-none\">\n                                    <ReactMarkdown rehypePlugins={[rehypeRaw, rehypeHighlight]}>\n                                      {prop.description}\n                                    </ReactMarkdown>\n                                  </div>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {/* Relationships Card */}\n                    {nodeCodeData.relationships && nodeCodeData.relationships.length > 0 && (\n                      <Card className=\"bg-gradient-to-br from-orange-50 to-amber-50 dark:from-orange-950/30 dark:to-amber-950/30 border-orange-200 dark:border-orange-800\">\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"text-sm flex items-center gap-2 text-orange-900 dark:text-orange-100\">\n                            <div className=\"h-2 w-2 rounded-full bg-orange-500\"></div>\n                            Relationships ({nodeCodeData.relationships.length})\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"pt-0 max-h-48 overflow-y-auto\">\n                          <div className=\"space-y-2\">\n                            {nodeCodeData.relationships.map((rel: any, index: number) => (\n                              <div key={index} className=\"flex items-center gap-2 p-2 bg-white/70 dark:bg-slate-800/70 rounded-lg border border-white/50 dark:border-slate-700/50 text-sm\">\n                                <Badge className={`${getRelationshipColor(rel.type)} text-xs`}>\n                                  {getRelationshipLabel(rel.type)}\n                                </Badge>\n                                <ArrowRightIcon className=\"h-3 w-3 text-slate-400\" />\n                                <code className=\"text-xs bg-slate-100 dark:bg-slate-800 px-1 rounded flex-1 truncate\">\n                                  {rel.target}\n                                </code>\n                                {rel.context && (\n                                  <span className=\"text-xs text-slate-500 bg-slate-100/50 px-1 rounded\">\n                                    {rel.context}\n                                  </span>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {/* Methods Card */}\n                    {nodeCodeData.methods && nodeCodeData.methods.length > 0 && (\n                      <Card className=\"bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-950/30 dark:to-pink-950/30 border-purple-200 dark:border-purple-800\">\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"text-sm flex items-center gap-2 text-purple-900 dark:text-purple-100\">\n                            <div className=\"h-2 w-2 rounded-full bg-purple-500\"></div>\n                            Methods ({nodeCodeData.methods.length})\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"pt-0 max-h-64 overflow-y-auto\">\n                          <div className=\"space-y-3\">\n                            {nodeCodeData.methods.map((method: any, index: number) => (\n                              <div key={index} className=\"bg-white/70 dark:bg-slate-800/70 rounded-lg p-3 border border-white/50 dark:border-slate-700/50\">\n                                <div className=\"flex items-center gap-2 mb-2 flex-wrap\">\n                                  <code className=\"px-2 py-1 bg-purple-100 dark:bg-purple-900/30 rounded text-xs font-semibold text-purple-800 dark:text-purple-200\">\n                                    {method.name}()\n                                  </code>\n                                  {method.params && method.params.length > 0 && (\n                                    <div className=\"flex gap-1 flex-wrap\">\n                                      {method.params.map((param: any, paramIndex: number) => (\n                                        <Badge key={paramIndex} variant=\"outline\" className=\"text-xs\">\n                                          {param.name}: {param.type}\n                                        </Badge>\n                                      ))}\n                                    </div>\n                                  )}\n                                </div>\n                                {method.description && (\n                                  <div className=\"text-xs text-slate-600 dark:text-slate-400 mb-2 prose dark:prose-invert max-w-none\">\n                                    <ReactMarkdown rehypePlugins={[rehypeRaw, rehypeHighlight]}>\n                                      {method.description}\n                                    </ReactMarkdown>\n                                  </div>\n                                )}\n                                {method.code && (\n                                  <div className=\"bg-slate-900 rounded p-2 overflow-x-auto\">\n                                    <CodeBlock code={method.code} language=\"tsx\" />\n                                  </div>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n\n                  {/* Right Column - Source Code */}\n                  <div className=\"xl:col-span-2 2xl:col-span-3\">\n                    {nodeCodeData.code && (\n                      <Card className=\"h-full bg-gradient-to-br from-slate-50 to-stone-50 dark:from-slate-950/30 dark:to-stone-950/30 border-slate-200 dark:border-slate-800\">\n                        <CardHeader className=\"pb-3\">\n                          <CardTitle className=\"text-sm flex items-center gap-2 text-slate-900 dark:text-slate-100\">\n                            <div className=\"h-2 w-2 rounded-full bg-slate-500\"></div>\n                            Source Code\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"pt-0 h-[calc(100%-4rem)]\">\n                          <ScrollArea className=\"h-full w-full\">\n                            <div className=\"bg-slate-900 rounded-lg h-full\">\n                              <CodeBlock code={nodeCodeData.code} language=\"tsx\" />\n                            </div>\n                          </ScrollArea>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n                </div>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-64 text-center\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mb-4\"></div>\n                  <p className=\"text-slate-600 dark:text-slate-400\">Loading code data...</p>\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n        </div>\n      </DialogContent>\n    </Dialog>\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_coderelationships",
    "imports": [
      "Card",
      "CardContent",
      "CardHeader",
      "CardTitle",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "Badge",
      "Button",
      "Dialog",
      "DialogContent",
      "DialogHeader",
      "DialogTitle",
      "ScrollArea",
      "Switch",
      "Label",
      "Code",
      "Component",
      "Function",
      "FileCode",
      "X",
      "ExternalLink",
      "Server",
      "Zap",
      "Info",
      "Focus",
      "Move",
      "Minus",
      "ArrowRightIcon",
      "InteractiveGraph",
      "CodeBlock",
      "McpServerControl",
      "CodeSimilaritySearch",
      "ReactMarkdown"
    ],
    "references": [
      "Code",
      "Function",
      "FileCode",
      "Card",
      "CardHeader",
      "CardTitle",
      "CardContent",
      "McpServerControl",
      "CodeSimilaritySearch",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "InteractiveGraph",
      "Badge",
      "ArrowRightIcon",
      "Move",
      "Button",
      "Minus",
      "X",
      "Label",
      "Focus",
      "Switch",
      "ExternalLink",
      "Dialog",
      "DialogContent",
      "DialogHeader",
      "DialogTitle",
      "ScrollArea",
      "Info",
      "ReactMarkdown",
      "CodeBlock"
    ],
    "relationships": [
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "cardtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "scrollarea",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "switch",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "label",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "code",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "component",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "function",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "x",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "externallink",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "server",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "zap",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "info",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "focus",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "move",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "minus",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "arrowrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "interactivegraph",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "codeblock",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "mcpservercontrol",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "codesimilaritysearch",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-relationships_coderelationships",
        "target": "reactmarkdown",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "(e.target-as-htmlelement)",
        "type": "uses",
        "weight": 2,
        "context": "calls closest",
        "sourceLine": 466,
        "targetFunction": "closest"
      },
      {
        "target": "object.entries(connectioncounts)",
        "type": "uses",
        "weight": 2,
        "context": "calls forEach",
        "sourceLine": 680,
        "targetFunction": "forEach"
      },
      {
        "target": "object.entries(relationshipstats.bytype)",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 721,
        "targetFunction": "map"
      },
      {
        "target": "['uses',-'inherits',-'contains']",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 962,
        "targetFunction": "map"
      }
    ],
    "methods": [
      {
        "name": "fetchNodeCodeData",
        "code": "const fetchNodeCodeData = async (nodeId: string) => {\n    try {\n      const res = await fetch(`/docs-data/${nodeId}.json`)\n      const data = await res.json()\n      setNodeCodeData(data)\n    } catch (error) {\n      console.error('Error fetching node code data:', error)\n      setNodeCodeData(null)\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "nodeId",
            "type": "string"
          }
        ]
      },
      {
        "name": "handleNodeClick",
        "code": "const handleNodeClick = (nodeId: string) => {\n    setSelectedNodeId(nodeId)\n    // Fetch basic node data for the side panel\n    const nodeEntity = components.find(c => c.id === nodeId)\n    setSelectedNodeData(nodeEntity)\n    // Clear group selection when selecting a node\n    setSelectedGroupId(null)\n    setSelectedGroupData(null)\n    // Reset focus mode when selecting a new node\n    setFocusMode(false)\n    // Reset panel position when selecting a new node (default to right side)\n    setPanelPosition({ \n      x: typeof window !== 'undefined' ? window.innerWidth - 400 : 0, \n      y: 80 \n    })\n    // Reset minimize state\n    setIsMinimized(false)\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "nodeId",
            "type": "string"
          }
        ]
      },
      {
        "name": "handleGroupClick",
        "code": "const handleGroupClick = (groupId: string, groupNodes: any[]) => {\n    setSelectedGroupId(groupId)\n    // Create group data object with summary information\n    const groupData = {\n      id: groupId,\n      name: groupId,\n      nodeCount: groupNodes.length,\n      nodes: groupNodes,\n      types: [...new Set(groupNodes.map(n => n.type))],\n      // Calculate connections to nodes outside this group\n      externalConnections: relationships.filter(rel => {\n        const groupNodeIds = new Set(groupNodes.map(n => n.id))\n        return (groupNodeIds.has(rel.source) && !groupNodeIds.has(rel.target)) ||\n               (groupNodeIds.has(rel.target) && !groupNodeIds.has(rel.source))\n      })\n    }\n    setSelectedGroupData(groupData)\n    // Clear node selection when selecting a group\n    setSelectedNodeId(null)\n    setSelectedNodeData(null)\n    // Reset focus mode when selecting a group\n    setFocusMode(false)\n    // Reset panel position when selecting a group\n    setPanelPosition({ \n      x: typeof window !== 'undefined' ? window.innerWidth - 400 : 0, \n      y: 80 \n    })\n    // Reset minimize state\n    setIsMinimized(false)\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "groupId",
            "type": "string"
          },
          {
            "name": "groupNodes",
            "type": "any[]"
          }
        ]
      },
      {
        "name": "handleMouseDown",
        "code": "const handleMouseDown = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget || (e.target as HTMLElement).closest('.drag-handle')) {\n      setIsDragging(true)\n      setDragStart({\n        x: e.clientX - panelPosition.x,\n        y: e.clientY - panelPosition.y\n      })\n      e.preventDefault()\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "e",
            "type": "React.MouseEvent"
          }
        ]
      },
      {
        "name": "handleMouseMove",
        "code": "const handleMouseMove = (e: MouseEvent) => {\n    if (isDragging) {\n      const newX = e.clientX - dragStart.x\n      const newY = e.clientY - dragStart.y\n      \n      // Allow panel to be dragged anywhere, with minimal constraints to keep it accessible\n      const panel = panelRef.current\n      if (panel) {\n        const rect = panel.getBoundingClientRect()\n        const minVisibleArea = 50 // Minimum pixels that must remain visible\n        \n        setPanelPosition({\n          x: Math.max(-rect.width + minVisibleArea, Math.min(window.innerWidth - minVisibleArea, newX)),\n          y: Math.max(-rect.height + minVisibleArea, Math.min(window.innerHeight - minVisibleArea, newY))\n        })\n      }\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "e",
            "type": "MouseEvent"
          }
        ]
      },
      {
        "name": "handleMouseUp",
        "code": "const handleMouseUp = () => {\n    setIsDragging(false)\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "openCodeModal",
        "code": "const openCodeModal = (nodeId: string) => {\n    setSelectedNodeForCode(nodeId)\n    fetchNodeCodeData(nodeId)\n    setSelectedNodeId(null)\n    setSelectedNodeData(null)\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "nodeId",
            "type": "string"
          }
        ]
      },
      {
        "name": "closeCodePreview",
        "code": "const closeCodePreview = () => {\n    setSelectedNodeForCode(null)\n    setNodeCodeData(null)\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "getEntityIcon",
        "code": "const getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "type",
            "type": "CodeEntity[\"type\"]"
          }
        ]
      },
      {
        "name": "getRelationshipLabel",
        "code": "const getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"uses\":\n        return \"Uses\"\n      case \"inherits\":\n        return \"Inherits\"\n      case \"contains\":\n        return \"Contains\"\n      default:\n        return type\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "type",
            "type": "Relationship[\"type\"]"
          }
        ]
      },
      {
        "name": "getRelationshipColor",
        "code": "const getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"uses\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"inherits\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"contains\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      default:\n        return \"bg-slate-50 text-slate-700 border-slate-200 dark:bg-slate-900/20 dark:text-slate-400 dark:border-slate-800\"\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "type",
            "type": "Relationship[\"type\"]"
          }
        ]
      }
    ]
  },
  {
    "name": "fetchData",
    "kind": "function",
    "code": "async function fetchData() {\n      try {\n        // Fetch component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        const indexData = await indexRes.json()\n\n        // Fetch all component data and classify entity types based on file analysis\n        const componentsData = await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            \n            // Determine entity type based on comprehensive analysis\n            let entityType = \"component\" // default\n            \n            // First, analyze the code content for function patterns\n            if (data.code) {\n              const code = data.code.toLowerCase()\n              \n              // Check for function patterns in the code\n              if (code.includes('function ') || \n                  code.includes('const ') && code.includes(' = ') && (code.includes('=>') || code.includes('function')) ||\n                  code.includes('export const ') && code.includes('=>') ||\n                  code.includes('export function ') ||\n                  code.includes('async ') && code.includes('=>')) {\n                \n                // Further check if it's NOT a React component\n                if (!code.includes('jsx') && \n                    !code.includes('tsx') && \n                    !code.includes('react') && \n                    !code.includes('component') &&\n                    !code.includes('props') &&\n                    !code.includes('return (') &&\n                    !code.includes('<') &&\n                    !data.props?.length) {\n                  entityType = \"function\"\n                }\n              }\n              \n              // Check for class patterns\n              if (code.includes('class ') && code.includes('extends')) {\n                entityType = \"class\"\n              }\n            }\n            \n            // Analyze file path for additional context\n            if (data.filePath) {\n              const filePath = data.filePath.toLowerCase()\n              \n              // File path based classification (higher priority for utilities)\n              if (filePath.includes('/lib/') || \n                  filePath.includes('/utils/') || \n                  filePath.includes('/helpers/') ||\n                  filePath.includes('/functions/')) {\n                entityType = \"function\"\n              } else if (filePath.includes('/services/') || \n                        filePath.includes('/classes/') ||\n                        filePath.includes('/models/')) {\n                entityType = \"class\"\n              }\n            }\n            \n            // Name-based classification\n            if (data.name) {\n              const name = data.name.toLowerCase()\n              \n              // Function naming patterns\n              if (name.includes('use') && name.length > 3 && name[3] === name[3].toUpperCase()) {\n                // React hook pattern (useState, useEffect, etc.)\n                entityType = \"function\"\n              } else if (name.match(/^[a-z][a-z0-9]*[A-Z]/) || // camelCase starting with lowercase\n                        name.includes('to') || \n                        name.includes('get') || \n                        name.includes('set') || \n                        name.includes('create') || \n                        name.includes('update') || \n                        name.includes('delete') || \n                        name.includes('fetch') ||\n                        name.includes('handle') ||\n                        name.includes('copy') ||\n                        name.includes('format') ||\n                        name.includes('parse') ||\n                        name.includes('validate')) {\n                entityType = \"function\"\n              }\n              \n              // Class naming patterns\n              if (name.includes('Service') || \n                  name.includes('Provider') || \n                  name.includes('Manager') ||\n                  name.includes('Controller') ||\n                  name.includes('Handler') && !name.includes('handle')) {\n                entityType = \"class\"\n              }\n            }\n            \n            // Check if it's a method within another component\n            if (data.parent || (data.methods && data.methods.length === 1 && data.props?.length === 0)) {\n              entityType = \"method\"\n            }\n            \n            // Final check: if it has props but no JSX, it might be a utility with TypeScript interface\n            if (data.props && data.props.length > 0 && data.code && !data.code.includes('<')) {\n              entityType = \"function\"\n            }\n            \n            return {\n              id: comp.slug,\n              name: comp.name,\n              type: entityType,\n              filePath: data.filePath || data.route || `src/components/${comp.name}`,\n              methods: data.methods || [],\n              props: data.props || []\n            }\n          })\n        )\n\n        // Extract relationships from component data with enhanced relationship detection\n        const relationshipsData: Relationship[] = []\n\n        // Create a lookup map for easier entity finding\n        const entityLookup = new Map()\n        componentsData.forEach(comp => entityLookup.set(comp.name.toLowerCase(), comp.id))\n\n        // For each component, check for relationships directly\n        await Promise.all(\n          indexData.map(async (comp: { name: string; slug: string }) => {\n            const res = await fetch(`/docs-data/${comp.slug}.json`)\n            const data = await res.json()\n            const currentEntity = componentsData.find(c => c.id === comp.slug)\n\n            // 1. Direct relationships from data.relationships\n            if (data.relationships && Array.isArray(data.relationships)) {\n              data.relationships.forEach((rel: any) => {\n                if (rel.source && rel.target && rel.type) {\n                  relationshipsData.push({\n                    source: rel.source,\n                    target: rel.target,\n                    type: rel.type,\n                    weight: rel.weight || 1,\n                    context: rel.context\n                  })\n                } else if (rel.target && rel.type && !rel.source) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: rel.target,\n                    type: rel.type,\n                    weight: rel.weight || 1,\n                    context: rel.context\n                  })\n                }\n              })\n            }\n\n            // 2. Create \"contains\" relationships for methods within components/classes\n            if (data.methods && Array.isArray(data.methods) && data.methods.length > 0) {\n              data.methods.forEach((method: any) => {\n                const methodSlug = `${comp.slug}-${method.name.toLowerCase()}`\n                // Check if a method entity exists\n                const methodEntity = componentsData.find(c => \n                  c.name.toLowerCase() === method.name.toLowerCase() || \n                  c.id === methodSlug\n                )\n                \n                if (methodEntity) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: methodEntity.id,\n                    type: \"contains\",\n                    weight: 1,\n                    context: \"owns method\"\n                  })\n                }\n              })\n            }\n\n            // 3. Detect inheritance relationships from naming patterns and file structure\n            if (currentEntity && currentEntity.type === \"class\") {\n              // Look for inheritance patterns in the name\n              if (data.name.includes('Service') && data.name !== 'BaseService') {\n                const baseServiceEntity = componentsData.find(c => \n                  c.name.toLowerCase().includes('baseservice') || \n                  c.name.toLowerCase().includes('base')\n                )\n                if (baseServiceEntity) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: baseServiceEntity.id,\n                    type: \"inherits\",\n                    weight: 2,\n                    context: \"class inheritance\"\n                  })\n                }\n              }\n              \n              // Provider pattern inheritance\n              if (data.name.includes('Provider')) {\n                const baseProviderEntity = componentsData.find(c => \n                  c.name.toLowerCase().includes('provider') && \n                  c.name.toLowerCase().includes('base')\n                )\n                if (baseProviderEntity && baseProviderEntity.id !== comp.slug) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: baseProviderEntity.id,\n                    type: \"inherits\",\n                    weight: 2,\n                    context: \"provider inheritance\"\n                  })\n                }\n              }\n            }\n\n            // 4. Import relationships (uses)\n            if (data.imports && Array.isArray(data.imports)) {\n              data.imports.forEach((importItem: string) => {\n                const targetSlug = importItem.toLowerCase().replace(/\\s+/g, \"-\")\n                const targetEntity = componentsData.find(c => \n                  c.name.toLowerCase() === importItem.toLowerCase() ||\n                  c.id === targetSlug\n                )\n                \n                if (targetEntity && !relationshipsData.some(r => \n                  r.source === comp.slug && r.target === targetEntity.id && r.type === \"uses\"\n                )) {\n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetEntity.id,\n                    type: \"uses\",\n                    weight: 2,\n                    context: \"imports\"\n                  })\n                }\n              })\n            }\n\n            // 5. Reference relationships (uses/contains)\n            if (data.references && Array.isArray(data.references)) {\n              data.references.forEach((refItem: string) => {\n                const targetEntity = componentsData.find(c => \n                  c.name.toLowerCase() === refItem.toLowerCase()\n                )\n                \n                if (targetEntity && !relationshipsData.some(r => \n                  r.source === comp.slug && r.target === targetEntity.id\n                )) {\n                  // Determine relationship type based on entity types\n                  let relType: \"uses\" | \"contains\" = \"uses\"\n                  if (currentEntity?.type === \"component\" && targetEntity.type === \"component\") {\n                    relType = \"contains\" // Component containing/rendering another component\n                  }\n                  \n                  relationshipsData.push({\n                    source: comp.slug,\n                    target: targetEntity.id,\n                    type: relType,\n                    weight: relType === \"contains\" ? 2 : 1,\n                    context: relType === \"contains\" ? \"renders component\" : \"references\"\n                  })\n                }\n              })\n            }\n\n            // 6. Analyze method code for function calls (uses relationships)\n            if (data.methods && Array.isArray(data.methods)) {\n              data.methods.forEach((method: any) => {\n                if (method.code) {\n                  // Look for function calls in method code\n                  componentsData.forEach(targetEntity => {\n                    if (targetEntity.type === \"function\" && \n                        targetEntity.id !== comp.slug &&\n                        method.code.includes(targetEntity.name)) {\n                      \n                      if (!relationshipsData.some(r => \n                        r.source === comp.slug && r.target === targetEntity.id && r.type === \"uses\"\n                      )) {\n                        relationshipsData.push({\n                          source: comp.slug,\n                          target: targetEntity.id,\n                          type: \"uses\",\n                          weight: 1,\n                          context: \"calls function\"\n                        })\n                      }\n                    }\n                  })\n                }\n              })\n            }\n          })\n        )\n\n        // Remove duplicate relationships\n        const uniqueRelationships = relationshipsData.filter((rel, index, self) =>\n          index === self.findIndex(r =>\n            r.source === rel.source && r.target === rel.target && r.type === rel.type\n          )\n        )\n\n        // Use only real data from the documentation\n        console.log('Loading real data from documentation')\n        console.log('Components loaded:', componentsData.length)\n        console.log('Relationships found:', uniqueRelationships.length)\n        \n        // Debug file paths\n        const filePathStats = componentsData.reduce((acc, comp) => {\n          if (comp.filePath) {\n            if (comp.filePath.startsWith('src/components/')) {\n              acc.defaultPaths++\n            } else {\n              acc.realPaths++\n            }\n          } else {\n            acc.noPaths++\n          }\n          return acc\n        }, { defaultPaths: 0, realPaths: 0, noPaths: 0 })\n        \n        console.log('File path statistics:', filePathStats)\n        console.log('Sample file paths:', componentsData.slice(0, 5).map(c => ({ name: c.name, filePath: c.filePath })))\n        \n        setComponents(componentsData)\n        setRelationships(uniqueRelationships)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Error fetching relationship data:\", error)\n        // Set empty data if there's an error\n        setComponents([])\n        setRelationships([])\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_fetchdata",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "fetchNodeCodeData",
    "kind": "function",
    "code": "const fetchNodeCodeData = async (nodeId: string) => {\n    try {\n      const res = await fetch(`/docs-data/${nodeId}.json`)\n      const data = await res.json()\n      setNodeCodeData(data)\n    } catch (error) {\n      console.error('Error fetching node code data:', error)\n      setNodeCodeData(null)\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_fetchnodecodedata",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleNodeClick",
    "kind": "function",
    "code": "const handleNodeClick = (nodeId: string) => {\n    setSelectedNodeId(nodeId)\n    // Fetch basic node data for the side panel\n    const nodeEntity = components.find(c => c.id === nodeId)\n    setSelectedNodeData(nodeEntity)\n    // Clear group selection when selecting a node\n    setSelectedGroupId(null)\n    setSelectedGroupData(null)\n    // Reset focus mode when selecting a new node\n    setFocusMode(false)\n    // Reset panel position when selecting a new node (default to right side)\n    setPanelPosition({ \n      x: typeof window !== 'undefined' ? window.innerWidth - 400 : 0, \n      y: 80 \n    })\n    // Reset minimize state\n    setIsMinimized(false)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_handlenodeclick",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleGroupClick",
    "kind": "function",
    "code": "const handleGroupClick = (groupId: string, groupNodes: any[]) => {\n    setSelectedGroupId(groupId)\n    // Create group data object with summary information\n    const groupData = {\n      id: groupId,\n      name: groupId,\n      nodeCount: groupNodes.length,\n      nodes: groupNodes,\n      types: [...new Set(groupNodes.map(n => n.type))],\n      // Calculate connections to nodes outside this group\n      externalConnections: relationships.filter(rel => {\n        const groupNodeIds = new Set(groupNodes.map(n => n.id))\n        return (groupNodeIds.has(rel.source) && !groupNodeIds.has(rel.target)) ||\n               (groupNodeIds.has(rel.target) && !groupNodeIds.has(rel.source))\n      })\n    }\n    setSelectedGroupData(groupData)\n    // Clear node selection when selecting a group\n    setSelectedNodeId(null)\n    setSelectedNodeData(null)\n    // Reset focus mode when selecting a group\n    setFocusMode(false)\n    // Reset panel position when selecting a group\n    setPanelPosition({ \n      x: typeof window !== 'undefined' ? window.innerWidth - 400 : 0, \n      y: 80 \n    })\n    // Reset minimize state\n    setIsMinimized(false)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_handlegroupclick",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleMouseDown",
    "kind": "function",
    "code": "const handleMouseDown = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget || (e.target as HTMLElement).closest('.drag-handle')) {\n      setIsDragging(true)\n      setDragStart({\n        x: e.clientX - panelPosition.x,\n        y: e.clientY - panelPosition.y\n      })\n      e.preventDefault()\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_handlemousedown",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleMouseMove",
    "kind": "function",
    "code": "const handleMouseMove = (e: MouseEvent) => {\n    if (isDragging) {\n      const newX = e.clientX - dragStart.x\n      const newY = e.clientY - dragStart.y\n      \n      // Allow panel to be dragged anywhere, with minimal constraints to keep it accessible\n      const panel = panelRef.current\n      if (panel) {\n        const rect = panel.getBoundingClientRect()\n        const minVisibleArea = 50 // Minimum pixels that must remain visible\n        \n        setPanelPosition({\n          x: Math.max(-rect.width + minVisibleArea, Math.min(window.innerWidth - minVisibleArea, newX)),\n          y: Math.max(-rect.height + minVisibleArea, Math.min(window.innerHeight - minVisibleArea, newY))\n        })\n      }\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_handlemousemove",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleMouseUp",
    "kind": "function",
    "code": "const handleMouseUp = () => {\n    setIsDragging(false)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_handlemouseup",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "openCodeModal",
    "kind": "function",
    "code": "const openCodeModal = (nodeId: string) => {\n    setSelectedNodeForCode(nodeId)\n    fetchNodeCodeData(nodeId)\n    setSelectedNodeId(null)\n    setSelectedNodeData(null)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_opencodemodal",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "closeCodePreview",
    "kind": "function",
    "code": "const closeCodePreview = () => {\n    setSelectedNodeForCode(null)\n    setNodeCodeData(null)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_closecodepreview",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getEntityIcon",
    "kind": "function",
    "code": "const getEntityIcon = (type: CodeEntity[\"type\"]) => {\n    switch (type) {\n      case \"component\":\n        return <Component className=\"h-4 w-4\" />\n      case \"class\":\n        return <Code className=\"h-4 w-4\" />\n      case \"function\":\n        return <Function className=\"h-4 w-4\" />\n      case \"method\":\n        return <FileCode className=\"h-4 w-4\" />\n      default:\n        return <Component className=\"h-4 w-4\" />\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_getentityicon",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getRelationshipLabel",
    "kind": "function",
    "code": "const getRelationshipLabel = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"uses\":\n        return \"Uses\"\n      case \"inherits\":\n        return \"Inherits\"\n      case \"contains\":\n        return \"Contains\"\n      default:\n        return type\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_getrelationshiplabel",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getRelationshipColor",
    "kind": "function",
    "code": "const getRelationshipColor = (type: Relationship[\"type\"]) => {\n    switch (type) {\n      case \"uses\":\n        return \"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\"\n      case \"inherits\":\n        return \"bg-purple-50 text-purple-700 border-purple-200 dark:bg-purple-900/20 dark:text-purple-400 dark:border-purple-800\"\n      case \"contains\":\n        return \"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\"\n      default:\n        return \"bg-slate-50 text-slate-700 border-slate-200 dark:bg-slate-900/20 dark:text-slate-400 dark:border-slate-800\"\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-relationships.tsx",
    "slug": "src_ui_components_code-relationships_getrelationshipcolor",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CodeEntityDetails",
    "kind": "component",
    "code": "export function CodeEntityDetails({ entity, isOpen, onClose }: CodeEntityDetailsProps) {\n  const [subFunctions, setSubFunctions] = useState<SubFunction[]>([])\n  const [expandedFunctions, setExpandedFunctions] = useState<Set<string>>(new Set())\n  const [loading, setLoading] = useState(false)\n  \n  useEffect(() => {\n    if (entity && isOpen) {\n      fetchSubFunctions()\n    }\n  }, [entity, isOpen])\n  \n  const fetchSubFunctions = async () => {\n    if (!entity) return\n    \n    // Get the slug from the entity or create one from the name\n    const slug = entity.slug || entity.name.toLowerCase().replace(/\\s+/g, '-')\n    \n    setLoading(true)\n    try {\n      const res = await fetch(`/docs-data/${slug}.json`)\n      if (!res.ok) {\n        console.error(`Failed to fetch entity details: ${res.status}`)\n        setLoading(false)\n        return\n      }\n      \n      const data = await res.json()\n      if (data.methods && Array.isArray(data.methods)) {\n        // Filter out the main function/component if it's included in methods\n        const filteredMethods = data.methods.filter(\n          (method: SubFunction) => method.name !== entity.name\n        )\n        setSubFunctions(filteredMethods)\n      } else {\n        setSubFunctions([])\n      }\n    } catch (error) {\n      console.error('Error fetching sub-functions:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n  \n  const toggleFunction = (functionName: string) => {\n    setExpandedFunctions(prev => {\n      const newSet = new Set(prev)\n      if (newSet.has(functionName)) {\n        newSet.delete(functionName)\n      } else {\n        newSet.add(functionName)\n      }\n      return newSet\n    })\n  }\n  \n  if (!entity) return null\n\n  const getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n      default:\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n    }\n  }\n\n  const getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n      default:\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n      <DialogContent className=\"max-w-[90vw] w-[90vw] max-h-[85vh] h-[85vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-3\">\n            {getEntityIcon()}\n            <DialogTitle className=\"text-xl\">{entity.name}</DialogTitle>\n            {getEntityTypeBadge()}\n          </div>\n          <p className=\"text-sm text-muted-foreground font-mono mt-2\">{entity.filePath}</p>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"code\">\n          <TabsList className=\"mb-4\">\n            <TabsTrigger value=\"code\">Code</TabsTrigger>\n            {subFunctions.length > 0 && (\n              <TabsTrigger value=\"methods\">Methods & Sub-functions ({subFunctions.length})</TabsTrigger>\n            )}\n            <TabsTrigger value=\"usage\">Usage</TabsTrigger>\n            <TabsTrigger value=\"dependencies\">Dependencies</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"code\" className=\"h-[calc(85vh-12rem)] overflow-y-auto\">\n            <CodeBlock code={entity.code || \"\"} language=\"tsx\" />\n          </TabsContent>\n          \n          {subFunctions.length > 0 && (\n            <TabsContent value=\"methods\" className=\"space-y-4 h-[calc(85vh-12rem)] overflow-y-auto\">\n              {loading ? (\n                <div className=\"p-4 text-center text-muted-foreground\">\n                  Loading sub-functions...\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {subFunctions.map((func) => (\n                    <div key={func.name} className=\"border rounded-md overflow-hidden\">\n                      <div \n                        className=\"flex items-center justify-between p-3 bg-slate-50 dark:bg-slate-800 cursor-pointer\"\n                        onClick={() => toggleFunction(func.name)}\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <FileCode className=\"h-4 w-4 text-amber-500\" />\n                          <span className=\"font-medium\">{func.name}</span>\n                          {func.params && (\n                            <span className=\"text-sm text-muted-foreground\">\n                              ({func.params.map(p => `${p.name}: ${p.type}`).join(', ')})\n                              {func.returnType && ` → ${func.returnType}`}\n                            </span>\n                          )}\n                        </div>\n                        {expandedFunctions.has(func.name) ? (\n                          <ChevronDown className=\"h-4 w-4\" />\n                        ) : (\n                          <ChevronRight className=\"h-4 w-4\" />\n                        )}\n                      </div>\n                      {expandedFunctions.has(func.name) && (\n                        <div className=\"p-0\">\n                          <CodeBlock code={func.code || \"\"} language=\"tsx\" />\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </TabsContent>\n          )}\n          \n          <TabsContent value=\"usage\" className=\"h-[calc(85vh-12rem)] overflow-y-auto\">\n            <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md\">\n              <p className=\"text-muted-foreground\">Usage examples will appear here.</p>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"dependencies\" className=\"h-[calc(85vh-12rem)] overflow-y-auto\">\n            <div className=\"bg-slate-50 dark:bg-slate-900 p-4 rounded-md\">\n              <p className=\"text-muted-foreground\">Dependencies will appear here.</p>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-entity-details.tsx",
    "slug": "src_ui_components_code-entity-details_codeentitydetails",
    "imports": [
      "Dialog",
      "DialogContent",
      "DialogHeader",
      "DialogTitle",
      "Tabs",
      "TabsContent",
      "TabsList",
      "TabsTrigger",
      "Badge",
      "CodeBlock",
      "Component",
      "Code",
      "Function",
      "FileCode",
      "ChevronDown",
      "ChevronRight"
    ],
    "references": [
      "Code",
      "Function",
      "FileCode",
      "Badge",
      "Dialog",
      "DialogContent",
      "DialogHeader",
      "DialogTitle",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "TabsContent",
      "CodeBlock",
      "ChevronDown",
      "ChevronRight"
    ],
    "relationships": [
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "tabscontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "codeblock",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "component",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "code",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "function",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "chevrondown",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-entity-details_codeentitydetails",
        "target": "chevronright",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": [
      {
        "name": "fetchSubFunctions",
        "code": "const fetchSubFunctions = async () => {\n    if (!entity) return\n    \n    // Get the slug from the entity or create one from the name\n    const slug = entity.slug || entity.name.toLowerCase().replace(/\\s+/g, '-')\n    \n    setLoading(true)\n    try {\n      const res = await fetch(`/docs-data/${slug}.json`)\n      if (!res.ok) {\n        console.error(`Failed to fetch entity details: ${res.status}`)\n        setLoading(false)\n        return\n      }\n      \n      const data = await res.json()\n      if (data.methods && Array.isArray(data.methods)) {\n        // Filter out the main function/component if it's included in methods\n        const filteredMethods = data.methods.filter(\n          (method: SubFunction) => method.name !== entity.name\n        )\n        setSubFunctions(filteredMethods)\n      } else {\n        setSubFunctions([])\n      }\n    } catch (error) {\n      console.error('Error fetching sub-functions:', error)\n    } finally {\n      setLoading(false)\n    }\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "toggleFunction",
        "code": "const toggleFunction = (functionName: string) => {\n    setExpandedFunctions(prev => {\n      const newSet = new Set(prev)\n      if (newSet.has(functionName)) {\n        newSet.delete(functionName)\n      } else {\n        newSet.add(functionName)\n      }\n      return newSet\n    })\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "functionName",
            "type": "string"
          }
        ]
      },
      {
        "name": "getEntityIcon",
        "code": "const getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n      default:\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n    }\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "getEntityTypeBadge",
        "code": "const getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n      default:\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n    }\n  }",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "fetchSubFunctions",
    "kind": "function",
    "code": "const fetchSubFunctions = async () => {\n    if (!entity) return\n    \n    // Get the slug from the entity or create one from the name\n    const slug = entity.slug || entity.name.toLowerCase().replace(/\\s+/g, '-')\n    \n    setLoading(true)\n    try {\n      const res = await fetch(`/docs-data/${slug}.json`)\n      if (!res.ok) {\n        console.error(`Failed to fetch entity details: ${res.status}`)\n        setLoading(false)\n        return\n      }\n      \n      const data = await res.json()\n      if (data.methods && Array.isArray(data.methods)) {\n        // Filter out the main function/component if it's included in methods\n        const filteredMethods = data.methods.filter(\n          (method: SubFunction) => method.name !== entity.name\n        )\n        setSubFunctions(filteredMethods)\n      } else {\n        setSubFunctions([])\n      }\n    } catch (error) {\n      console.error('Error fetching sub-functions:', error)\n    } finally {\n      setLoading(false)\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-entity-details.tsx",
    "slug": "src_ui_components_code-entity-details_fetchsubfunctions",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "toggleFunction",
    "kind": "function",
    "code": "const toggleFunction = (functionName: string) => {\n    setExpandedFunctions(prev => {\n      const newSet = new Set(prev)\n      if (newSet.has(functionName)) {\n        newSet.delete(functionName)\n      } else {\n        newSet.add(functionName)\n      }\n      return newSet\n    })\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-entity-details.tsx",
    "slug": "src_ui_components_code-entity-details_togglefunction",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getEntityIcon",
    "kind": "function",
    "code": "const getEntityIcon = () => {\n    switch (entity.type) {\n      case \"component\":\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n      case \"class\":\n        return <Code className=\"h-5 w-5 text-blue-500\" />\n      case \"function\":\n        return <Function className=\"h-5 w-5 text-emerald-500\" />\n      case \"method\":\n        return <FileCode className=\"h-5 w-5 text-amber-500\" />\n      default:\n        return <Component className=\"h-5 w-5 text-violet-500\" />\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-entity-details.tsx",
    "slug": "src_ui_components_code-entity-details_getentityicon",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getEntityTypeBadge",
    "kind": "function",
    "code": "const getEntityTypeBadge = () => {\n    switch (entity.type) {\n      case \"component\":\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n      case \"class\":\n        return (\n          <Badge className=\"bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800\">\n            Class\n          </Badge>\n        )\n      case \"function\":\n        return (\n          <Badge className=\"bg-emerald-50 text-emerald-700 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-400 dark:border-emerald-800\">\n            Function\n          </Badge>\n        )\n      case \"method\":\n        return (\n          <Badge className=\"bg-amber-50 text-amber-700 border-amber-200 dark:bg-amber-900/20 dark:text-amber-400 dark:border-amber-800\">\n            Method\n          </Badge>\n        )\n      default:\n        return (\n          <Badge className=\"bg-violet-50 text-violet-700 border-violet-200 dark:bg-violet-900/20 dark:text-violet-400 dark:border-violet-800\">\n            Component\n          </Badge>\n        )\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-entity-details.tsx",
    "slug": "src_ui_components_code-entity-details_getentitytypebadge",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CodeBlock",
    "kind": "component",
    "code": "export function CodeBlock({ code, language }: CodeBlockProps) {\n  const [copied, setCopied] = useState(false)\n  const { theme } = useTheme()\n  const [mounted, setMounted] = useState(false)\n\n  // Ensure theme is only accessed after mounting to prevent hydration mismatch\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }\n\n  // Determine which syntax highlighting theme to use based on the current theme\n  const syntaxTheme = mounted && (theme === 'dark' || theme === 'system' && typeof window !== 'undefined' && window.matchMedia('(prefers-color-scheme: dark)').matches) \n    ? atomDark \n    : vs;\n\n  // Custom modifications to the chosen theme\n  const customizedTheme = {\n    ...syntaxTheme,\n    'pre[class*=\"language-\"]': {\n      ...syntaxTheme['pre[class*=\"language-\"]'],\n      margin: '0',\n      borderRadius: '0.5rem',\n      padding: '1.5rem',\n    },\n    'code[class*=\"language-\"]': {\n      ...syntaxTheme['code[class*=\"language-\"]'],\n      fontFamily: 'var(--font-mono), monospace',\n      fontSize: '0.9rem',\n      lineHeight: '1.6',\n    }\n  };\n\n  return (\n    <div className=\"relative group my-4\">\n      <div className={cn(\n        \"rounded-lg overflow-hidden border\",\n        \"shadow-sm transition-all duration-200\",\n        \"group-hover:shadow-md\",\n        theme === 'dark' ? \"border-slate-700 bg-slate-950\" : \"border-slate-200 bg-slate-50\"\n      )}>\n        <div className={cn(\n          \"flex items-center justify-between px-4 py-2\",\n          theme === 'dark' ? \"bg-slate-900\" : \"bg-slate-100\"\n        )}>\n          <span className={cn(\n            \"text-xs font-medium\",\n            theme === 'dark' ? \"text-slate-400\" : \"text-slate-500\"\n          )}>\n            {language.toUpperCase()}\n          </span>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            className=\"h-8 px-2 text-xs\"\n            onClick={copyToClipboard}\n          >\n            {copied ? (\n              <>\n                <CheckIcon className=\"h-3.5 w-3.5 mr-1\" />\n                <span>Copied</span>\n              </>\n            ) : (\n              <>\n                <CopyIcon className=\"h-3.5 w-3.5 mr-1\" />\n                <span>Copy</span>\n              </>\n            )}\n          </Button>\n        </div>\n        <SyntaxHighlighter\n          language={language}\n          style={customizedTheme}\n          showLineNumbers={true}\n          wrapLines={true}\n          lineNumberStyle={{\n            minWidth: '2.5em',\n            paddingRight: '1em',\n            textAlign: 'right',\n            userSelect: 'none',\n            opacity: 0.5,\n            borderRight: theme === 'dark' ? '1px solid rgba(255, 255, 255, 0.1)' : '1px solid rgba(0, 0, 0, 0.1)',\n            marginRight: '1em',\n          }}\n        >\n          {code}\n        </SyntaxHighlighter>\n      </div>\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-block.tsx",
    "slug": "src_ui_components_code-block_codeblock",
    "imports": [
      "Button",
      "CheckIcon",
      "CopyIcon",
      "SyntaxHighlighter"
    ],
    "references": [
      "Button",
      "CheckIcon",
      "CopyIcon",
      "SyntaxHighlighter"
    ],
    "relationships": [
      {
        "source": "src_ui_components_code-block_codeblock",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-block_codeblock",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-block_codeblock",
        "target": "copyicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-block_codeblock",
        "target": "syntaxhighlighter",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": [
      {
        "name": "copyToClipboard",
        "code": "const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "copyToClipboard",
    "kind": "function",
    "code": "const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-block.tsx",
    "slug": "src_ui_components_code-block_copytoclipboard",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CodeArchitecture",
    "kind": "component",
    "code": "export function CodeArchitecture() {\n  const [loading, setLoading] = useState(true)\n  const [searchQuery, setSearchQuery] = useState('')\n  const [viewMode, setViewMode] = useState<'architecture' | 'dependencies' | 'layers' | 'patterns' | 'flows'>('architecture')\n  const [filterType, setFilterType] = useState<'all' | 'components' | 'functions' | 'classes' | 'high-coupling' | 'isolated'>('all')\n  const [selectedComponent, setSelectedComponent] = useState<ComponentData | null>(null)\n  \n  const [architecturalLayers, setArchitecturalLayers] = useState<ArchitecturalLayer[]>([])\n  const [dependencyNodes, setDependencyNodes] = useState<DependencyNode[]>([])\n  const [codePatterns, setCodePatterns] = useState<CodePattern[]>([])\n  const [dataFlows, setDataFlows] = useState<any[]>([])\n  const [componentDetails, setComponentDetails] = useState<Record<string, ComponentData[]>>({})\n\n  // Fetch and analyze code architecture\n  useEffect(() => {\n    async function analyzeArchitecture() {\n      try {\n        // Fetch component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        const detailsMap: Record<string, ComponentData[]> = {}\n        const allComponents: ComponentData[] = []\n\n        // Fetch all component details\n        await Promise.all(data.map(async (comp: { name: string; slug: string; filePath: string }) => {\n          if (!comp.filePath) return\n\n          try {\n            const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n            const detailData = await detailRes.json()\n\n            const componentData: ComponentData = {\n              name: comp.name,\n              slug: comp.slug,\n              filePath: comp.filePath,\n              kind: detailData.kind,\n              methods: detailData.methods || [],\n              relationships: detailData.relationships || [],\n              imports: detailData.imports || [],\n              references: detailData.references || [],\n              similarityWarnings: detailData.similarityWarnings || [],\n              description: detailData.description\n            }\n\n            const path = comp.filePath\n            if (!detailsMap[path]) {\n              detailsMap[path] = []\n            }\n            detailsMap[path].push(componentData)\n            allComponents.push(componentData)\n          } catch (error) {\n            console.error(`Error loading details for ${comp.slug}:`, error)\n          }\n        }))\n\n        setComponentDetails(detailsMap)\n\n        // Analyze architectural layers\n        const layers: ArchitecturalLayer[] = [\n          {\n            name: \"Presentation Layer\",\n            components: [],\n            description: \"Pages, routes, and top-level UI components\",\n            icon: Smartphone,\n            color: \"blue\"\n          },\n          {\n            name: \"UI Components\",\n            components: [],\n            description: \"Reusable UI components and design system\",\n            icon: Package,\n            color: \"purple\"\n          },\n          {\n            name: \"Business Logic\",\n            components: [],\n            description: \"Domain-specific components and business rules\",\n            icon: Brain,\n            color: \"green\"\n          },\n          {\n            name: \"Service Layer\",\n            components: [],\n            description: \"API calls, external integrations, and services\",\n            icon: Server,\n            color: \"orange\"\n          },\n          {\n            name: \"Utility Layer\",\n            components: [],\n            description: \"Helper functions, utilities, and shared logic\",\n            icon: Settings,\n            color: \"gray\"\n          },\n          {\n            name: \"Data Layer\",\n            components: [],\n            description: \"Types, interfaces, and data structures\",\n            icon: Database,\n            color: \"indigo\"\n          }\n        ]\n\n        // Categorize components into layers\n        allComponents.forEach(comp => {\n          const path = comp.filePath.toLowerCase()\n          \n          if (path.includes('/pages/') || path.includes('/app/') || path.includes('/routes/')) {\n            layers[0].components.push(comp)\n          } else if (path.includes('/components/ui/') || path.includes('/ui/')) {\n            layers[1].components.push(comp)\n          } else if (path.includes('/components/') && !path.includes('/ui/')) {\n            layers[2].components.push(comp)\n          } else if (path.includes('/services/') || path.includes('/api/') || path.includes('/hooks/')) {\n            layers[3].components.push(comp)\n          } else if (path.includes('/lib/') || path.includes('/utils/') || path.includes('/helpers/')) {\n            layers[4].components.push(comp)\n          } else if (path.includes('/types/') || path.includes('/interfaces/') || path.includes('/models/')) {\n            layers[5].components.push(comp)\n          } else {\n            // Default to business logic\n            layers[2].components.push(comp)\n          }\n        })\n\n        setArchitecturalLayers(layers)\n\n        // Build dependency graph with unique IDs\n        const nodes: DependencyNode[] = allComponents.map((comp, index) => ({\n          id: `${comp.slug}-${index}`, // Make ID unique by adding index\n          name: comp.name,\n          type: comp.kind || 'unknown',\n          layer: layers.find(l => l.components.includes(comp))?.name || 'Unknown',\n          connections: (comp.relationships?.length || 0) + (comp.imports?.length || 0),\n          size: (comp.methods?.length || 0) + (comp.relationships?.length || 0)\n        }))\n\n        setDependencyNodes(nodes)\n\n        // Identify patterns and anti-patterns\n        const patterns: CodePattern[] = []\n\n        allComponents.forEach(comp => {\n          // Complex components\n          if (comp.methods && comp.methods.length > 10) {\n            patterns.push({\n              type: 'God Component',\n              component: comp.name,\n              description: `Has ${comp.methods.length} methods - consider breaking into smaller components`,\n              severity: 'warning',\n              impact: comp.methods.length\n            })\n          }\n\n          // High coupling\n          const totalDeps = (comp.relationships?.length || 0) + (comp.imports?.length || 0)\n          if (totalDeps > 15) {\n            patterns.push({\n              type: 'High Coupling',\n              component: comp.name,\n              description: `Has ${totalDeps} dependencies - violates loose coupling principle`,\n              severity: 'error',\n              impact: totalDeps\n            })\n          }\n\n          // Isolated components (potential dead code)\n          if (totalDeps === 0 && !(comp.filePath.includes('/pages/') || comp.filePath.includes('/app/'))) {\n            patterns.push({\n              type: 'Isolated Component',\n              component: comp.name,\n              description: 'No dependencies or dependents - might be dead code',\n              severity: 'info',\n              impact: 1\n            })\n          }\n\n          // Code duplication\n          if (comp.similarityWarnings && comp.similarityWarnings.length > 0) {\n            patterns.push({\n              type: 'Code Duplication',\n              component: comp.name,\n              description: `Similar to ${comp.similarityWarnings.length} other components`,\n              severity: 'warning',\n              impact: comp.similarityWarnings.length\n            })\n          }\n\n          // Single Responsibility violations\n          if (comp.kind === 'component' && comp.methods && comp.methods.length > 5) {\n            const businessLogicMethods = comp.methods.filter((m: any) => \n              !m.name.startsWith('render') && \n              !m.name.startsWith('on') && \n              !m.name.startsWith('handle')\n            ).length\n            \n            if (businessLogicMethods > 3) {\n              patterns.push({\n                type: 'Mixed Concerns',\n                component: comp.name,\n                description: `Contains both UI and business logic - consider separating concerns`,\n                severity: 'warning',\n                impact: businessLogicMethods\n              })\n            }\n          }\n        })\n\n        setCodePatterns(patterns.sort((a, b) => b.impact - a.impact))\n\n        // Analyze data flows\n        const flows: any[] = []\n        allComponents.forEach(comp => {\n          comp.relationships?.forEach(rel => {\n            if (rel.type === 'uses' || rel.type === 'calls') {\n              flows.push({\n                from: comp.name,\n                to: rel.target,\n                type: rel.type,\n                context: rel.context,\n                weight: rel.weight || 1\n              })\n            }\n          })\n        })\n\n        setDataFlows(flows)\n        setLoading(false)\n\n      } catch (error) {\n        console.error('Error analyzing architecture:', error)\n        setLoading(false)\n      }\n    }\n\n    analyzeArchitecture()\n  }, [])\n\n  // Architecture overview with layer visualization\n  function renderArchitectureView() {\n    const totalComponents = architecturalLayers.reduce((acc, layer) => acc + layer.components.length, 0)\n    \n    return (\n      <div className=\"space-y-6\">\n        {/* Architecture Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Map className=\"h-5 w-5\" />\n              Architecture Overview\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Your application's architectural layers and component distribution\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {architecturalLayers.map((layer, index) => {\n                const percentage = totalComponents > 0 ? (layer.components.length / totalComponents) * 100 : 0\n                const Icon = layer.icon\n                \n                return (\n                  <Card key={layer.name} className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                        onClick={() => setViewMode('layers')}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-3 mb-3\">\n                        <div className={`p-2 rounded-lg bg-${layer.color}-100 dark:bg-${layer.color}-900/20`}>\n                          <Icon className={`h-5 w-5 text-${layer.color}-600 dark:text-${layer.color}-400`} />\n                        </div>\n                        <div>\n                          <h3 className=\"font-medium\">{layer.name}</h3>\n                          <p className=\"text-sm text-muted-foreground\">{layer.components.length} components</p>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mb-2\">{layer.description}</p>\n                      <Progress value={percentage} className=\"h-2\" />\n                      <p className=\"text-xs text-muted-foreground mt-1\">{percentage.toFixed(1)}% of codebase</p>\n                    </CardContent>\n                  </Card>\n                )\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Insights */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{totalComponents}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Components</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{architecturalLayers.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Architectural Layers</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{dependencyNodes.reduce((acc, node) => acc + node.connections, 0)}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Dependencies</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-amber-600\">{codePatterns.filter(p => p.severity === 'error' || p.severity === 'warning').length}</div>\n              <div className=\"text-sm text-muted-foreground\">Architecture Issues</div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  // Dependency network visualization\n  function renderDependencyView() {\n    const highCouplingComponents = dependencyNodes.filter(node => node.connections > 10)\n    const isolatedComponents = dependencyNodes.filter(node => node.connections === 0)\n    \n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Network className=\"h-5 w-5\" />\n              Dependency Network\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Component relationships and coupling analysis\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* High Coupling */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-red-600\">High Coupling ({highCouplingComponents.length})</h3>\n                <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                  {highCouplingComponents.map((node, index) => (\n                    <Card key={`high-coupling-${node.id}-${index}`} className=\"p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"font-medium\">{node.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{node.layer}</div>\n                        </div>\n                        <Badge variant=\"destructive\">{node.connections} deps</Badge>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              {/* Isolated Components */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-yellow-600\">Isolated Components ({isolatedComponents.length})</h3>\n                <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                  {isolatedComponents.map((node, index) => (\n                    <Card key={`isolated-${node.id}-${index}`} className=\"p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"font-medium\">{node.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{node.layer}</div>\n                        </div>\n                        <Badge variant=\"outline\">0 deps</Badge>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Dependency Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Dependency Distribution by Layer</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {architecturalLayers.map(layer => {\n                const layerNodes = dependencyNodes.filter(node => node.layer === layer.name)\n                const avgDependencies = layerNodes.length > 0 \n                  ? layerNodes.reduce((acc, node) => acc + node.connections, 0) / layerNodes.length \n                  : 0\n                \n                return (\n                  <div key={layer.name} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <layer.icon className=\"h-4 w-4\" />\n                      <span>{layer.name}</span>\n                    </div>\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {layerNodes.length} components\n                      </span>\n                      <span className=\"text-sm font-medium\">\n                        {avgDependencies.toFixed(1)} avg deps\n                      </span>\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  // Layer-based view\n  function renderLayersView() {\n    return (\n      <div className=\"space-y-6\">\n        {architecturalLayers.map((layer, index) => {\n          const Icon = layer.icon\n          \n          return (\n            <Card key={layer.name}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Icon className={`h-5 w-5 text-${layer.color}-600`} />\n                  {layer.name}\n                  <Badge variant=\"outline\">{layer.components.length} components</Badge>\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground\">{layer.description}</p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                  {layer.components.map((component, componentIndex) => {\n                    const node = dependencyNodes.find(n => n.id.startsWith(component.slug))\n                    \n                    return (\n                      <Card key={`${layer.name}-${component.slug}-${componentIndex}`} className=\"p-3 cursor-pointer hover:shadow-md transition-shadow\"\n                            onClick={() => setSelectedComponent(component)}>\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium\">{component.name}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {component.methods?.length || 0} methods\n                            </div>\n                          </div>\n                          <div className=\"flex flex-col items-end gap-1\">\n                            <Badge className={`text-xs ${\n                              component.kind === 'component' ? 'bg-blue-50 text-blue-600' :\n                              component.kind === 'function' ? 'bg-green-50 text-green-600' :\n                              component.kind === 'class' ? 'bg-purple-50 text-purple-600' :\n                              'bg-gray-50 text-gray-600'\n                            }`}>\n                              {component.kind || 'unknown'}\n                            </Badge>\n                            {node && node.connections > 0 && (\n                              <span className=\"text-xs text-muted-foreground\">\n                                {node.connections} deps\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </Card>\n                    )\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          )\n        })}\n      </div>\n    )\n  }\n\n  // Pattern analysis view\n  function renderPatternsView() {\n    const errorPatterns = codePatterns.filter(p => p.severity === 'error')\n    const warningPatterns = codePatterns.filter(p => p.severity === 'warning')\n    const infoPatterns = codePatterns.filter(p => p.severity === 'info')\n\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Brain className=\"h-5 w-5\" />\n              Code Patterns & Anti-Patterns\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Architectural patterns, violations, and improvement opportunities\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Critical Issues */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-red-600 flex items-center gap-2\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  Critical Issues ({errorPatterns.length})\n                </h3>\n                <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n                  {errorPatterns.map((pattern, index) => (\n                    <Card key={`error-${pattern.component}-${pattern.type}-${index}`} className=\"p-3 border-red-200 bg-red-50 dark:bg-red-900/10\">\n                      <div className=\"font-medium text-red-800 dark:text-red-200\">{pattern.type}</div>\n                      <div className=\"text-sm text-red-600 dark:text-red-300\">{pattern.component}</div>\n                      <div className=\"text-xs text-red-500 dark:text-red-400 mt-1\">{pattern.description}</div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              {/* Warnings */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-amber-600 flex items-center gap-2\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  Warnings ({warningPatterns.length})\n                </h3>\n                <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n                  {warningPatterns.map((pattern, index) => (\n                    <Card key={`warning-${pattern.component}-${pattern.type}-${index}`} className=\"p-3 border-amber-200 bg-amber-50 dark:bg-amber-900/10\">\n                      <div className=\"font-medium text-amber-800 dark:text-amber-200\">{pattern.type}</div>\n                      <div className=\"text-sm text-amber-600 dark:text-amber-300\">{pattern.component}</div>\n                      <div className=\"text-xs text-amber-500 dark:text-amber-400 mt-1\">{pattern.description}</div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              {/* Information */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-blue-600 flex items-center gap-2\">\n                  <Info className=\"h-4 w-4\" />\n                  Information ({infoPatterns.length})\n                </h3>\n                <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n                  {infoPatterns.map((pattern, index) => (\n                    <Card key={`info-${pattern.component}-${pattern.type}-${index}`} className=\"p-3 border-blue-200 bg-blue-50 dark:bg-blue-900/10\">\n                      <div className=\"font-medium text-blue-800 dark:text-blue-200\">{pattern.type}</div>\n                      <div className=\"text-sm text-blue-600 dark:text-blue-300\">{pattern.component}</div>\n                      <div className=\"text-xs text-blue-500 dark:text-blue-400 mt-1\">{pattern.description}</div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  // Data flow visualization\n  function renderFlowsView() {\n    const componentFlows: Record<string, any[]> = {}\n    \n    dataFlows.forEach(flow => {\n      if (!componentFlows[flow.from]) {\n        componentFlows[flow.from] = []\n      }\n      componentFlows[flow.from].push(flow)\n    })\n\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Workflow className=\"h-5 w-5\" />\n              Data Flow Analysis\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              How data and control flows through your components\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {Object.entries(componentFlows).slice(0, 10).map(([component, flows]) => (\n                <Card key={component} className=\"p-4\">\n                  <div className=\"font-medium mb-2\">{component}</div>\n                  <div className=\"space-y-2\">\n                    {flows.map((flow, index) => (\n                      <div key={`flow-${component}-${flow.to}-${index}`} className=\"flex items-center gap-2 text-sm\">\n                        <ArrowRight className=\"h-3 w-3 text-muted-foreground\" />\n                        <span>{flow.to}</span>\n                        <Badge variant=\"outline\" className=\"text-xs\">{flow.type}</Badge>\n                        {flow.context && (\n                          <span className=\"text-muted-foreground text-xs\">({flow.context})</span>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  if (loading) {\n    return (\n      <Card className=\"bg-white dark:bg-slate-900 shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Analyzing code architecture...</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <TooltipProvider>\n      <div className=\"space-y-6\">\n        {/* Controls */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search components and patterns...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Select value={filterType} onValueChange={(value: any) => setFilterType(value)}>\n                  <SelectTrigger className=\"w-48\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Components</SelectItem>\n                    <SelectItem value=\"components\">UI Components</SelectItem>\n                    <SelectItem value=\"functions\">Functions</SelectItem>\n                    <SelectItem value=\"classes\">Classes</SelectItem>\n                    <SelectItem value=\"high-coupling\">High Coupling</SelectItem>\n                    <SelectItem value=\"isolated\">Isolated</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* View Tabs */}\n        <Tabs value={viewMode} onValueChange={(value: any) => setViewMode(value)}>\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"architecture\" className=\"flex items-center gap-2\">\n              <Layers className=\"h-4 w-4\" />\n              Architecture\n            </TabsTrigger>\n            <TabsTrigger value=\"dependencies\" className=\"flex items-center gap-2\">\n              <Network className=\"h-4 w-4\" />\n              Dependencies\n            </TabsTrigger>\n            <TabsTrigger value=\"layers\" className=\"flex items-center gap-2\">\n              <TreePine className=\"h-4 w-4\" />\n              Layers\n            </TabsTrigger>\n            <TabsTrigger value=\"patterns\" className=\"flex items-center gap-2\">\n              <Brain className=\"h-4 w-4\" />\n              Patterns ({codePatterns.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"flows\" className=\"flex items-center gap-2\">\n              <Workflow className=\"h-4 w-4\" />\n              Data Flows\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"architecture\">\n            {renderArchitectureView()}\n          </TabsContent>\n\n          <TabsContent value=\"dependencies\">\n            {renderDependencyView()}\n          </TabsContent>\n\n          <TabsContent value=\"layers\">\n            {renderLayersView()}\n          </TabsContent>\n\n          <TabsContent value=\"patterns\">\n            {renderPatternsView()}\n          </TabsContent>\n\n          <TabsContent value=\"flows\">\n            {renderFlowsView()}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </TooltipProvider>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-architecture.tsx",
    "slug": "src_ui_components_code-architecture_codearchitecture",
    "imports": [
      "Card",
      "CardContent",
      "CardHeader",
      "CardTitle",
      "Network",
      "Users",
      "Zap",
      "Target",
      "Layers",
      "Search",
      "Filter",
      "GitBranch",
      "Package",
      "AlertCircle",
      "Code",
      "Activity",
      "FileCode",
      "Hash",
      "Info",
      "ArrowRight",
      "Circle",
      "Square",
      "Triangle",
      "Workflow",
      "TreePine",
      "Map",
      "Brain",
      "Eye",
      "Settings",
      "Database",
      "Server",
      "Globe",
      "Smartphone",
      "Cpu",
      "HardDrive",
      "Badge",
      "Link",
      "Input",
      "Button",
      "Tabs",
      "TabsContent",
      "TabsList",
      "TabsTrigger",
      "Progress",
      "Tooltip",
      "TooltipContent",
      "TooltipProvider",
      "TooltipTrigger",
      "Select",
      "SelectContent",
      "SelectItem",
      "SelectTrigger",
      "SelectValue",
      "Separator"
    ],
    "references": [
      "Smartphone",
      "Package",
      "Brain",
      "Server",
      "Settings",
      "Database",
      "Card",
      "CardHeader",
      "CardTitle",
      "Map",
      "CardContent",
      "Icon",
      "Progress",
      "Network",
      "Badge",
      "AlertCircle",
      "Info",
      "Workflow",
      "ArrowRight",
      "TooltipProvider",
      "Search",
      "Input",
      "Select",
      "SelectTrigger",
      "Filter",
      "SelectValue",
      "SelectContent",
      "SelectItem",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "Layers",
      "TreePine",
      "TabsContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "cardtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "network",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "users",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "zap",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "target",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "layers",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "search",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "filter",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "gitbranch",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "package",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "alertcircle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "code",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "activity",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "filecode",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "hash",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "info",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "arrowright",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "circle",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "square",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "triangle",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "workflow",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "treepine",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "map",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "brain",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "eye",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "settings",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "database",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "server",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "globe",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "smartphone",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "cpu",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "harddrive",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "link",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "input",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "button",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "tabscontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "progress",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "tooltip",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "tooltipcontent",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "tooltipprovider",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "tooltiptrigger",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "select",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "selectcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "selectitem",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "selecttrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "selectvalue",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_code-architecture_codearchitecture",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "target": "object.entries(componentflows).slice(0,-10)",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 634,
        "targetFunction": "map"
      },
      {
        "target": "object.entries(componentflows)",
        "type": "uses",
        "weight": 2,
        "context": "calls slice",
        "sourceLine": 634,
        "targetFunction": "slice"
      }
    ],
    "methods": [
      {
        "name": "renderArchitectureView",
        "code": "function renderArchitectureView() {\n    const totalComponents = architecturalLayers.reduce((acc, layer) => acc + layer.components.length, 0)\n    \n    return (\n      <div className=\"space-y-6\">\n        {/* Architecture Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Map className=\"h-5 w-5\" />\n              Architecture Overview\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Your application's architectural layers and component distribution\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {architecturalLayers.map((layer, index) => {\n                const percentage = totalComponents > 0 ? (layer.components.length / totalComponents) * 100 : 0\n                const Icon = layer.icon\n                \n                return (\n                  <Card key={layer.name} className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                        onClick={() => setViewMode('layers')}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-3 mb-3\">\n                        <div className={`p-2 rounded-lg bg-${layer.color}-100 dark:bg-${layer.color}-900/20`}>\n                          <Icon className={`h-5 w-5 text-${layer.color}-600 dark:text-${layer.color}-400`} />\n                        </div>\n                        <div>\n                          <h3 className=\"font-medium\">{layer.name}</h3>\n                          <p className=\"text-sm text-muted-foreground\">{layer.components.length} components</p>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mb-2\">{layer.description}</p>\n                      <Progress value={percentage} className=\"h-2\" />\n                      <p className=\"text-xs text-muted-foreground mt-1\">{percentage.toFixed(1)}% of codebase</p>\n                    </CardContent>\n                  </Card>\n                )\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Insights */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{totalComponents}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Components</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{architecturalLayers.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Architectural Layers</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{dependencyNodes.reduce((acc, node) => acc + node.connections, 0)}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Dependencies</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-amber-600\">{codePatterns.filter(p => p.severity === 'error' || p.severity === 'warning').length}</div>\n              <div className=\"text-sm text-muted-foreground\">Architecture Issues</div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "renderDependencyView",
        "code": "function renderDependencyView() {\n    const highCouplingComponents = dependencyNodes.filter(node => node.connections > 10)\n    const isolatedComponents = dependencyNodes.filter(node => node.connections === 0)\n    \n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Network className=\"h-5 w-5\" />\n              Dependency Network\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Component relationships and coupling analysis\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* High Coupling */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-red-600\">High Coupling ({highCouplingComponents.length})</h3>\n                <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                  {highCouplingComponents.map((node, index) => (\n                    <Card key={`high-coupling-${node.id}-${index}`} className=\"p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"font-medium\">{node.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{node.layer}</div>\n                        </div>\n                        <Badge variant=\"destructive\">{node.connections} deps</Badge>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              {/* Isolated Components */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-yellow-600\">Isolated Components ({isolatedComponents.length})</h3>\n                <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                  {isolatedComponents.map((node, index) => (\n                    <Card key={`isolated-${node.id}-${index}`} className=\"p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"font-medium\">{node.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{node.layer}</div>\n                        </div>\n                        <Badge variant=\"outline\">0 deps</Badge>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Dependency Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Dependency Distribution by Layer</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {architecturalLayers.map(layer => {\n                const layerNodes = dependencyNodes.filter(node => node.layer === layer.name)\n                const avgDependencies = layerNodes.length > 0 \n                  ? layerNodes.reduce((acc, node) => acc + node.connections, 0) / layerNodes.length \n                  : 0\n                \n                return (\n                  <div key={layer.name} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <layer.icon className=\"h-4 w-4\" />\n                      <span>{layer.name}</span>\n                    </div>\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {layerNodes.length} components\n                      </span>\n                      <span className=\"text-sm font-medium\">\n                        {avgDependencies.toFixed(1)} avg deps\n                      </span>\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "renderLayersView",
        "code": "function renderLayersView() {\n    return (\n      <div className=\"space-y-6\">\n        {architecturalLayers.map((layer, index) => {\n          const Icon = layer.icon\n          \n          return (\n            <Card key={layer.name}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Icon className={`h-5 w-5 text-${layer.color}-600`} />\n                  {layer.name}\n                  <Badge variant=\"outline\">{layer.components.length} components</Badge>\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground\">{layer.description}</p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                  {layer.components.map((component, componentIndex) => {\n                    const node = dependencyNodes.find(n => n.id.startsWith(component.slug))\n                    \n                    return (\n                      <Card key={`${layer.name}-${component.slug}-${componentIndex}`} className=\"p-3 cursor-pointer hover:shadow-md transition-shadow\"\n                            onClick={() => setSelectedComponent(component)}>\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium\">{component.name}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {component.methods?.length || 0} methods\n                            </div>\n                          </div>\n                          <div className=\"flex flex-col items-end gap-1\">\n                            <Badge className={`text-xs ${\n                              component.kind === 'component' ? 'bg-blue-50 text-blue-600' :\n                              component.kind === 'function' ? 'bg-green-50 text-green-600' :\n                              component.kind === 'class' ? 'bg-purple-50 text-purple-600' :\n                              'bg-gray-50 text-gray-600'\n                            }`}>\n                              {component.kind || 'unknown'}\n                            </Badge>\n                            {node && node.connections > 0 && (\n                              <span className=\"text-xs text-muted-foreground\">\n                                {node.connections} deps\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </Card>\n                    )\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          )\n        })}\n      </div>\n    )\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "renderPatternsView",
        "code": "function renderPatternsView() {\n    const errorPatterns = codePatterns.filter(p => p.severity === 'error')\n    const warningPatterns = codePatterns.filter(p => p.severity === 'warning')\n    const infoPatterns = codePatterns.filter(p => p.severity === 'info')\n\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Brain className=\"h-5 w-5\" />\n              Code Patterns & Anti-Patterns\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Architectural patterns, violations, and improvement opportunities\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Critical Issues */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-red-600 flex items-center gap-2\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  Critical Issues ({errorPatterns.length})\n                </h3>\n                <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n                  {errorPatterns.map((pattern, index) => (\n                    <Card key={`error-${pattern.component}-${pattern.type}-${index}`} className=\"p-3 border-red-200 bg-red-50 dark:bg-red-900/10\">\n                      <div className=\"font-medium text-red-800 dark:text-red-200\">{pattern.type}</div>\n                      <div className=\"text-sm text-red-600 dark:text-red-300\">{pattern.component}</div>\n                      <div className=\"text-xs text-red-500 dark:text-red-400 mt-1\">{pattern.description}</div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              {/* Warnings */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-amber-600 flex items-center gap-2\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  Warnings ({warningPatterns.length})\n                </h3>\n                <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n                  {warningPatterns.map((pattern, index) => (\n                    <Card key={`warning-${pattern.component}-${pattern.type}-${index}`} className=\"p-3 border-amber-200 bg-amber-50 dark:bg-amber-900/10\">\n                      <div className=\"font-medium text-amber-800 dark:text-amber-200\">{pattern.type}</div>\n                      <div className=\"text-sm text-amber-600 dark:text-amber-300\">{pattern.component}</div>\n                      <div className=\"text-xs text-amber-500 dark:text-amber-400 mt-1\">{pattern.description}</div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              {/* Information */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-blue-600 flex items-center gap-2\">\n                  <Info className=\"h-4 w-4\" />\n                  Information ({infoPatterns.length})\n                </h3>\n                <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n                  {infoPatterns.map((pattern, index) => (\n                    <Card key={`info-${pattern.component}-${pattern.type}-${index}`} className=\"p-3 border-blue-200 bg-blue-50 dark:bg-blue-900/10\">\n                      <div className=\"font-medium text-blue-800 dark:text-blue-200\">{pattern.type}</div>\n                      <div className=\"text-sm text-blue-600 dark:text-blue-300\">{pattern.component}</div>\n                      <div className=\"text-xs text-blue-500 dark:text-blue-400 mt-1\">{pattern.description}</div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "renderFlowsView",
        "code": "function renderFlowsView() {\n    const componentFlows: Record<string, any[]> = {}\n    \n    dataFlows.forEach(flow => {\n      if (!componentFlows[flow.from]) {\n        componentFlows[flow.from] = []\n      }\n      componentFlows[flow.from].push(flow)\n    })\n\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Workflow className=\"h-5 w-5\" />\n              Data Flow Analysis\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              How data and control flows through your components\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {Object.entries(componentFlows).slice(0, 10).map(([component, flows]) => (\n                <Card key={component} className=\"p-4\">\n                  <div className=\"font-medium mb-2\">{component}</div>\n                  <div className=\"space-y-2\">\n                    {flows.map((flow, index) => (\n                      <div key={`flow-${component}-${flow.to}-${index}`} className=\"flex items-center gap-2 text-sm\">\n                        <ArrowRight className=\"h-3 w-3 text-muted-foreground\" />\n                        <span>{flow.to}</span>\n                        <Badge variant=\"outline\" className=\"text-xs\">{flow.type}</Badge>\n                        {flow.context && (\n                          <span className=\"text-muted-foreground text-xs\">({flow.context})</span>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }",
        "returnType": "void",
        "params": []
      }
    ]
  },
  {
    "name": "analyzeArchitecture",
    "kind": "function",
    "code": "async function analyzeArchitecture() {\n      try {\n        // Fetch component index\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        const detailsMap: Record<string, ComponentData[]> = {}\n        const allComponents: ComponentData[] = []\n\n        // Fetch all component details\n        await Promise.all(data.map(async (comp: { name: string; slug: string; filePath: string }) => {\n          if (!comp.filePath) return\n\n          try {\n            const detailRes = await fetch(`/docs-data/${comp.slug}.json`)\n            const detailData = await detailRes.json()\n\n            const componentData: ComponentData = {\n              name: comp.name,\n              slug: comp.slug,\n              filePath: comp.filePath,\n              kind: detailData.kind,\n              methods: detailData.methods || [],\n              relationships: detailData.relationships || [],\n              imports: detailData.imports || [],\n              references: detailData.references || [],\n              similarityWarnings: detailData.similarityWarnings || [],\n              description: detailData.description\n            }\n\n            const path = comp.filePath\n            if (!detailsMap[path]) {\n              detailsMap[path] = []\n            }\n            detailsMap[path].push(componentData)\n            allComponents.push(componentData)\n          } catch (error) {\n            console.error(`Error loading details for ${comp.slug}:`, error)\n          }\n        }))\n\n        setComponentDetails(detailsMap)\n\n        // Analyze architectural layers\n        const layers: ArchitecturalLayer[] = [\n          {\n            name: \"Presentation Layer\",\n            components: [],\n            description: \"Pages, routes, and top-level UI components\",\n            icon: Smartphone,\n            color: \"blue\"\n          },\n          {\n            name: \"UI Components\",\n            components: [],\n            description: \"Reusable UI components and design system\",\n            icon: Package,\n            color: \"purple\"\n          },\n          {\n            name: \"Business Logic\",\n            components: [],\n            description: \"Domain-specific components and business rules\",\n            icon: Brain,\n            color: \"green\"\n          },\n          {\n            name: \"Service Layer\",\n            components: [],\n            description: \"API calls, external integrations, and services\",\n            icon: Server,\n            color: \"orange\"\n          },\n          {\n            name: \"Utility Layer\",\n            components: [],\n            description: \"Helper functions, utilities, and shared logic\",\n            icon: Settings,\n            color: \"gray\"\n          },\n          {\n            name: \"Data Layer\",\n            components: [],\n            description: \"Types, interfaces, and data structures\",\n            icon: Database,\n            color: \"indigo\"\n          }\n        ]\n\n        // Categorize components into layers\n        allComponents.forEach(comp => {\n          const path = comp.filePath.toLowerCase()\n          \n          if (path.includes('/pages/') || path.includes('/app/') || path.includes('/routes/')) {\n            layers[0].components.push(comp)\n          } else if (path.includes('/components/ui/') || path.includes('/ui/')) {\n            layers[1].components.push(comp)\n          } else if (path.includes('/components/') && !path.includes('/ui/')) {\n            layers[2].components.push(comp)\n          } else if (path.includes('/services/') || path.includes('/api/') || path.includes('/hooks/')) {\n            layers[3].components.push(comp)\n          } else if (path.includes('/lib/') || path.includes('/utils/') || path.includes('/helpers/')) {\n            layers[4].components.push(comp)\n          } else if (path.includes('/types/') || path.includes('/interfaces/') || path.includes('/models/')) {\n            layers[5].components.push(comp)\n          } else {\n            // Default to business logic\n            layers[2].components.push(comp)\n          }\n        })\n\n        setArchitecturalLayers(layers)\n\n        // Build dependency graph with unique IDs\n        const nodes: DependencyNode[] = allComponents.map((comp, index) => ({\n          id: `${comp.slug}-${index}`, // Make ID unique by adding index\n          name: comp.name,\n          type: comp.kind || 'unknown',\n          layer: layers.find(l => l.components.includes(comp))?.name || 'Unknown',\n          connections: (comp.relationships?.length || 0) + (comp.imports?.length || 0),\n          size: (comp.methods?.length || 0) + (comp.relationships?.length || 0)\n        }))\n\n        setDependencyNodes(nodes)\n\n        // Identify patterns and anti-patterns\n        const patterns: CodePattern[] = []\n\n        allComponents.forEach(comp => {\n          // Complex components\n          if (comp.methods && comp.methods.length > 10) {\n            patterns.push({\n              type: 'God Component',\n              component: comp.name,\n              description: `Has ${comp.methods.length} methods - consider breaking into smaller components`,\n              severity: 'warning',\n              impact: comp.methods.length\n            })\n          }\n\n          // High coupling\n          const totalDeps = (comp.relationships?.length || 0) + (comp.imports?.length || 0)\n          if (totalDeps > 15) {\n            patterns.push({\n              type: 'High Coupling',\n              component: comp.name,\n              description: `Has ${totalDeps} dependencies - violates loose coupling principle`,\n              severity: 'error',\n              impact: totalDeps\n            })\n          }\n\n          // Isolated components (potential dead code)\n          if (totalDeps === 0 && !(comp.filePath.includes('/pages/') || comp.filePath.includes('/app/'))) {\n            patterns.push({\n              type: 'Isolated Component',\n              component: comp.name,\n              description: 'No dependencies or dependents - might be dead code',\n              severity: 'info',\n              impact: 1\n            })\n          }\n\n          // Code duplication\n          if (comp.similarityWarnings && comp.similarityWarnings.length > 0) {\n            patterns.push({\n              type: 'Code Duplication',\n              component: comp.name,\n              description: `Similar to ${comp.similarityWarnings.length} other components`,\n              severity: 'warning',\n              impact: comp.similarityWarnings.length\n            })\n          }\n\n          // Single Responsibility violations\n          if (comp.kind === 'component' && comp.methods && comp.methods.length > 5) {\n            const businessLogicMethods = comp.methods.filter((m: any) => \n              !m.name.startsWith('render') && \n              !m.name.startsWith('on') && \n              !m.name.startsWith('handle')\n            ).length\n            \n            if (businessLogicMethods > 3) {\n              patterns.push({\n                type: 'Mixed Concerns',\n                component: comp.name,\n                description: `Contains both UI and business logic - consider separating concerns`,\n                severity: 'warning',\n                impact: businessLogicMethods\n              })\n            }\n          }\n        })\n\n        setCodePatterns(patterns.sort((a, b) => b.impact - a.impact))\n\n        // Analyze data flows\n        const flows: any[] = []\n        allComponents.forEach(comp => {\n          comp.relationships?.forEach(rel => {\n            if (rel.type === 'uses' || rel.type === 'calls') {\n              flows.push({\n                from: comp.name,\n                to: rel.target,\n                type: rel.type,\n                context: rel.context,\n                weight: rel.weight || 1\n              })\n            }\n          })\n        })\n\n        setDataFlows(flows)\n        setLoading(false)\n\n      } catch (error) {\n        console.error('Error analyzing architecture:', error)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-architecture.tsx",
    "slug": "src_ui_components_code-architecture_analyzearchitecture",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "renderArchitectureView",
    "kind": "function",
    "code": "function renderArchitectureView() {\n    const totalComponents = architecturalLayers.reduce((acc, layer) => acc + layer.components.length, 0)\n    \n    return (\n      <div className=\"space-y-6\">\n        {/* Architecture Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Map className=\"h-5 w-5\" />\n              Architecture Overview\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Your application's architectural layers and component distribution\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {architecturalLayers.map((layer, index) => {\n                const percentage = totalComponents > 0 ? (layer.components.length / totalComponents) * 100 : 0\n                const Icon = layer.icon\n                \n                return (\n                  <Card key={layer.name} className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                        onClick={() => setViewMode('layers')}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-3 mb-3\">\n                        <div className={`p-2 rounded-lg bg-${layer.color}-100 dark:bg-${layer.color}-900/20`}>\n                          <Icon className={`h-5 w-5 text-${layer.color}-600 dark:text-${layer.color}-400`} />\n                        </div>\n                        <div>\n                          <h3 className=\"font-medium\">{layer.name}</h3>\n                          <p className=\"text-sm text-muted-foreground\">{layer.components.length} components</p>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mb-2\">{layer.description}</p>\n                      <Progress value={percentage} className=\"h-2\" />\n                      <p className=\"text-xs text-muted-foreground mt-1\">{percentage.toFixed(1)}% of codebase</p>\n                    </CardContent>\n                  </Card>\n                )\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Insights */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{totalComponents}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Components</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{architecturalLayers.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Architectural Layers</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{dependencyNodes.reduce((acc, node) => acc + node.connections, 0)}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Dependencies</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-amber-600\">{codePatterns.filter(p => p.severity === 'error' || p.severity === 'warning').length}</div>\n              <div className=\"text-sm text-muted-foreground\">Architecture Issues</div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-architecture.tsx",
    "slug": "src_ui_components_code-architecture_renderarchitectureview",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "renderDependencyView",
    "kind": "function",
    "code": "function renderDependencyView() {\n    const highCouplingComponents = dependencyNodes.filter(node => node.connections > 10)\n    const isolatedComponents = dependencyNodes.filter(node => node.connections === 0)\n    \n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Network className=\"h-5 w-5\" />\n              Dependency Network\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Component relationships and coupling analysis\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* High Coupling */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-red-600\">High Coupling ({highCouplingComponents.length})</h3>\n                <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                  {highCouplingComponents.map((node, index) => (\n                    <Card key={`high-coupling-${node.id}-${index}`} className=\"p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"font-medium\">{node.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{node.layer}</div>\n                        </div>\n                        <Badge variant=\"destructive\">{node.connections} deps</Badge>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              {/* Isolated Components */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-yellow-600\">Isolated Components ({isolatedComponents.length})</h3>\n                <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                  {isolatedComponents.map((node, index) => (\n                    <Card key={`isolated-${node.id}-${index}`} className=\"p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"font-medium\">{node.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{node.layer}</div>\n                        </div>\n                        <Badge variant=\"outline\">0 deps</Badge>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Dependency Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Dependency Distribution by Layer</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {architecturalLayers.map(layer => {\n                const layerNodes = dependencyNodes.filter(node => node.layer === layer.name)\n                const avgDependencies = layerNodes.length > 0 \n                  ? layerNodes.reduce((acc, node) => acc + node.connections, 0) / layerNodes.length \n                  : 0\n                \n                return (\n                  <div key={layer.name} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <layer.icon className=\"h-4 w-4\" />\n                      <span>{layer.name}</span>\n                    </div>\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {layerNodes.length} components\n                      </span>\n                      <span className=\"text-sm font-medium\">\n                        {avgDependencies.toFixed(1)} avg deps\n                      </span>\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-architecture.tsx",
    "slug": "src_ui_components_code-architecture_renderdependencyview",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "renderLayersView",
    "kind": "function",
    "code": "function renderLayersView() {\n    return (\n      <div className=\"space-y-6\">\n        {architecturalLayers.map((layer, index) => {\n          const Icon = layer.icon\n          \n          return (\n            <Card key={layer.name}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Icon className={`h-5 w-5 text-${layer.color}-600`} />\n                  {layer.name}\n                  <Badge variant=\"outline\">{layer.components.length} components</Badge>\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground\">{layer.description}</p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                  {layer.components.map((component, componentIndex) => {\n                    const node = dependencyNodes.find(n => n.id.startsWith(component.slug))\n                    \n                    return (\n                      <Card key={`${layer.name}-${component.slug}-${componentIndex}`} className=\"p-3 cursor-pointer hover:shadow-md transition-shadow\"\n                            onClick={() => setSelectedComponent(component)}>\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium\">{component.name}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {component.methods?.length || 0} methods\n                            </div>\n                          </div>\n                          <div className=\"flex flex-col items-end gap-1\">\n                            <Badge className={`text-xs ${\n                              component.kind === 'component' ? 'bg-blue-50 text-blue-600' :\n                              component.kind === 'function' ? 'bg-green-50 text-green-600' :\n                              component.kind === 'class' ? 'bg-purple-50 text-purple-600' :\n                              'bg-gray-50 text-gray-600'\n                            }`}>\n                              {component.kind || 'unknown'}\n                            </Badge>\n                            {node && node.connections > 0 && (\n                              <span className=\"text-xs text-muted-foreground\">\n                                {node.connections} deps\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </Card>\n                    )\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          )\n        })}\n      </div>\n    )\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-architecture.tsx",
    "slug": "src_ui_components_code-architecture_renderlayersview",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "renderPatternsView",
    "kind": "function",
    "code": "function renderPatternsView() {\n    const errorPatterns = codePatterns.filter(p => p.severity === 'error')\n    const warningPatterns = codePatterns.filter(p => p.severity === 'warning')\n    const infoPatterns = codePatterns.filter(p => p.severity === 'info')\n\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Brain className=\"h-5 w-5\" />\n              Code Patterns & Anti-Patterns\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Architectural patterns, violations, and improvement opportunities\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Critical Issues */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-red-600 flex items-center gap-2\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  Critical Issues ({errorPatterns.length})\n                </h3>\n                <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n                  {errorPatterns.map((pattern, index) => (\n                    <Card key={`error-${pattern.component}-${pattern.type}-${index}`} className=\"p-3 border-red-200 bg-red-50 dark:bg-red-900/10\">\n                      <div className=\"font-medium text-red-800 dark:text-red-200\">{pattern.type}</div>\n                      <div className=\"text-sm text-red-600 dark:text-red-300\">{pattern.component}</div>\n                      <div className=\"text-xs text-red-500 dark:text-red-400 mt-1\">{pattern.description}</div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              {/* Warnings */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-amber-600 flex items-center gap-2\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  Warnings ({warningPatterns.length})\n                </h3>\n                <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n                  {warningPatterns.map((pattern, index) => (\n                    <Card key={`warning-${pattern.component}-${pattern.type}-${index}`} className=\"p-3 border-amber-200 bg-amber-50 dark:bg-amber-900/10\">\n                      <div className=\"font-medium text-amber-800 dark:text-amber-200\">{pattern.type}</div>\n                      <div className=\"text-sm text-amber-600 dark:text-amber-300\">{pattern.component}</div>\n                      <div className=\"text-xs text-amber-500 dark:text-amber-400 mt-1\">{pattern.description}</div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n\n              {/* Information */}\n              <div>\n                <h3 className=\"font-medium mb-3 text-blue-600 flex items-center gap-2\">\n                  <Info className=\"h-4 w-4\" />\n                  Information ({infoPatterns.length})\n                </h3>\n                <div className=\"space-y-2 max-h-80 overflow-y-auto\">\n                  {infoPatterns.map((pattern, index) => (\n                    <Card key={`info-${pattern.component}-${pattern.type}-${index}`} className=\"p-3 border-blue-200 bg-blue-50 dark:bg-blue-900/10\">\n                      <div className=\"font-medium text-blue-800 dark:text-blue-200\">{pattern.type}</div>\n                      <div className=\"text-sm text-blue-600 dark:text-blue-300\">{pattern.component}</div>\n                      <div className=\"text-xs text-blue-500 dark:text-blue-400 mt-1\">{pattern.description}</div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-architecture.tsx",
    "slug": "src_ui_components_code-architecture_renderpatternsview",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "renderFlowsView",
    "kind": "function",
    "code": "function renderFlowsView() {\n    const componentFlows: Record<string, any[]> = {}\n    \n    dataFlows.forEach(flow => {\n      if (!componentFlows[flow.from]) {\n        componentFlows[flow.from] = []\n      }\n      componentFlows[flow.from].push(flow)\n    })\n\n    return (\n      <div className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Workflow className=\"h-5 w-5\" />\n              Data Flow Analysis\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              How data and control flows through your components\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {Object.entries(componentFlows).slice(0, 10).map(([component, flows]) => (\n                <Card key={component} className=\"p-4\">\n                  <div className=\"font-medium mb-2\">{component}</div>\n                  <div className=\"space-y-2\">\n                    {flows.map((flow, index) => (\n                      <div key={`flow-${component}-${flow.to}-${index}`} className=\"flex items-center gap-2 text-sm\">\n                        <ArrowRight className=\"h-3 w-3 text-muted-foreground\" />\n                        <span>{flow.to}</span>\n                        <Badge variant=\"outline\" className=\"text-xs\">{flow.type}</Badge>\n                        {flow.context && (\n                          <span className=\"text-muted-foreground text-xs\">({flow.context})</span>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/code-architecture.tsx",
    "slug": "src_ui_components_code-architecture_renderflowsview",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "ChatBubble",
    "kind": "component",
    "code": "export function ChatBubble() {\n  const [isOpen, setIsOpen] = useState(false)\n  const [isExpanded, setIsExpanded] = useState(false)\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    { text: \"Hi there! I can help you understand your code. What would you like to know?\", isUser: false, role: \"assistant\" },\n  ])\n  const [input, setInput] = useState(\"\")\n  const [isLoading, setIsLoading] = useState(false)\n\n  // Convert UI chat messages to API format\n  const getApiMessages = (): ApiChatMessage[] => {\n    return messages\n      .filter(msg => msg.role !== \"system\") // Filter out system messages if any\n      .map(msg => ({\n        role: msg.role || (msg.isUser ? \"user\" : \"assistant\"),\n        content: msg.text\n      }))\n  }\n\n  const handleSend = async () => {\n    if (!input.trim() || isLoading) return\n\n    // Add user message to chat\n    setMessages([...messages, { text: input, isUser: true, role: \"user\" }])\n    const userQuery = input\n    setInput(\"\")\n    setIsLoading(true)\n\n    try {\n      // Make API request to chat endpoint\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          history: getApiMessages(),\n          query: userQuery,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`API request failed with status ${response.status}`)\n      }\n\n      const data = await response.json()\n\n      // Add AI response to chat\n      setMessages(prev => [\n        ...prev,\n        { text: data.response, isUser: false, role: \"assistant\" },\n      ])\n    } catch (error) {\n      console.error(\"Error sending message:\", error)\n\n      // Add error message to chat\n      setMessages(prev => [\n        ...prev,\n        {\n          text: \"Sorry, I encountered an error. Please try again or check if Ollama is running properly.\",\n          isUser: false,\n          role: \"assistant\"\n        },\n      ])\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const toggleExpand = () => {\n    setIsExpanded(!isExpanded)\n  }\n\n  const clearMessages = () => {\n    setMessages([\n      { text: \"Hi there! I can help you understand your code. What would you like to know?\", isUser: false, role: \"assistant\" },\n    ])\n  }\n\n  // Custom renderer for code blocks with syntax highlighting\n  const MarkdownMessage = ({ content }: { content: string }) => (\n    <ReactMarkdown\n      rehypePlugins={[rehypeRaw, rehypeHighlight]}\n      components={{\n        // Override paragraph to avoid nesting issues\n        p({ children }) {\n          return <div className=\"my-3 text-sm md:text-base text-slate-700 dark:text-slate-300 leading-relaxed\">{children}</div>\n        },\n        // Style for code blocks\n        code({ className, children, ...props }: React.HTMLProps<HTMLElement> & { inline?: boolean }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          const inline = props.inline\n          return !inline ? (\n            <div className=\"relative rounded-lg overflow-hidden my-4 shadow-lg border border-slate-200 dark:border-slate-700\">\n              <div className=\"px-4 py-2 bg-gradient-to-r from-slate-700 to-slate-800 text-xs font-mono text-slate-200 flex items-center justify-between\">\n                <span className=\"text-xs uppercase tracking-wider\">{match?.[1] || 'code'}</span>\n              </div>\n              <pre className=\"p-4 overflow-x-auto bg-[#1a1b26] text-[#c9d1d9] text-sm\">\n                <code className={className} {...props}>\n                  {children}\n                </code>\n              </pre>\n            </div>\n          ) : (\n            <code className=\"px-2 py-1 mx-0.5 bg-violet-100 dark:bg-violet-900/30 text-violet-700 dark:text-violet-300 rounded-md text-sm font-mono\" {...props}>\n              {children}\n            </code>\n          )\n        },\n        // Style for links\n        a(props) {\n          return (\n            <a\n              {...props}\n              className=\"text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 hover:underline font-medium\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            />\n          )\n        },\n        // Style for lists\n        ul({ children }) {\n          return <ul className=\"list-disc pl-6 my-3 space-y-2 marker:text-violet-500\">{children}</ul>\n        },\n        ol({ children }) {\n          return <ol className=\"list-decimal pl-6 my-3 space-y-2 marker:text-violet-500\">{children}</ol>\n        },\n        // Style for list items\n        li({ children }) {\n          return <li className=\"text-sm md:text-base text-slate-700 dark:text-slate-300 leading-relaxed\">{children}</li>\n        },\n        // Style for headings\n        h1({ children }) {\n          return <h1 className=\"text-2xl font-bold my-4 pb-2 border-b-2 border-violet-200 dark:border-violet-800 text-slate-900 dark:text-white\">{children}</h1>\n        },\n        h2({ children }) {\n          return <h2 className=\"text-xl font-bold my-3 text-violet-700 dark:text-violet-400\">{children}</h2>\n        },\n        h3({ children }) {\n          return <h3 className=\"text-lg font-semibold my-2 text-slate-800 dark:text-slate-200\">{children}</h3>\n        },\n        // Style for blockquotes\n        blockquote({ children }) {\n          return <blockquote className=\"border-l-4 border-violet-400 dark:border-violet-600 pl-4 py-2 my-3 bg-violet-50 dark:bg-violet-900/10 rounded-r-lg text-slate-700 dark:text-slate-300 italic\">{children}</blockquote>\n        },\n        // Style for horizontal rules\n        hr() {\n          return <hr className=\"my-4 border-slate-200 dark:border-slate-700\" />\n        },\n        // Style for tables\n        table({ children }) {\n          return (\n            <div className=\"overflow-x-auto my-3\">\n              <table className=\"min-w-full divide-y divide-slate-200 dark:divide-slate-700 border border-slate-200 dark:border-slate-700 rounded-md\">\n                {children}\n              </table>\n            </div>\n          )\n        },\n        thead({ children }) {\n          return <thead className=\"bg-slate-100 dark:bg-slate-800\">{children}</thead>\n        },\n        tbody({ children }) {\n          return <tbody className=\"divide-y divide-slate-200 dark:divide-slate-700\">{children}</tbody>\n        },\n        tr({ children }) {\n          return <tr>{children}</tr>\n        },\n        th({ children }) {\n          return <th className=\"px-4 py-2 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">{children}</th>\n        },\n        td({ children }) {\n          return <td className=\"px-4 py-2 text-slate-700 dark:text-slate-300\">{children}</td>\n        }\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  )\n\n  return (\n    <>\n      <Button\n        className=\"fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg bg-gradient-to-r from-violet-500 to-indigo-600 hover:from-violet-600 hover:to-indigo-700\"\n        onClick={() => setIsOpen(true)}\n      >\n        <MessageSquare className=\"h-6 w-6\" />\n      </Button>\n\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: 20 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: 20 }}\n            transition={{ duration: 0.2 }}\n            className={`fixed ${isExpanded ? \"inset-4 md:inset-8\" : \"bottom-6 right-6 w-[90vw] max-w-[600px] h-[80vh] max-h-[700px]\"\n              } bg-white dark:bg-slate-900 rounded-2xl shadow-2xl flex flex-col overflow-hidden border border-slate-200 dark:border-slate-800 z-50`}\n          >\n            <div className=\"p-4 border-b border-slate-100 dark:border-slate-800 flex items-center justify-between bg-gradient-to-r from-violet-500 to-indigo-600 text-white\">\n              <div className=\"flex items-center gap-2\">\n                <Avatar className=\"h-8 w-8 border-2 border-white/20\">\n                  <AvatarImage src=\"/placeholder.svg?height=32&width=32\" />\n                  <AvatarFallback>AI</AvatarFallback>\n                </Avatar>\n                <h3 className=\"font-medium\">Code Assistant</h3>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={clearMessages}\n                  className=\"text-white hover:bg-white/20 flex items-center gap-1\"\n                  title=\"Clear chat\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                  <span>Clear</span>\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" onClick={toggleExpand} className=\"text-white hover:bg-white/20\">\n                  {isExpanded ? <Minimize2 className=\"h-4 w-4\" /> : <Maximize2 className=\"h-4 w-4\" />}\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"text-white hover:bg-white/20\"\n                >\n                  <Cross2Icon className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n              {messages.map((message, i) => (\n                <div key={i} className={`flex ${message.isUser ? \"justify-end\" : \"justify-start\"}`}>\n                  {!message.isUser && (\n                    <Avatar className=\"h-8 w-8 mr-2 mt-1 flex-shrink-0\">\n                      <AvatarImage src=\"/placeholder.svg?height=32&width=32\" />\n                      <AvatarFallback>AI</AvatarFallback>\n                    </Avatar>\n                  )}\n                  <div\n                    className={`max-w-[85%] rounded-2xl ${message.isUser\n                      ? \"bg-gradient-to-r from-violet-500 to-indigo-600 text-white px-4 py-3 shadow-md\"\n                      : \"bg-gray-50 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 shadow-sm px-5 py-4\"\n                      }`}\n                  >\n                    {message.isUser ? (\n                      message.text\n                    ) : (\n                      <MarkdownMessage content={message.text} />\n                    )}\n                  </div>\n                  {message.isUser && (\n                    <Avatar className=\"h-8 w-8 ml-2 mt-1 flex-shrink-0\">\n                      <AvatarImage src=\"/placeholder.svg?height=32&width=32\" />\n                      <AvatarFallback>You</AvatarFallback>\n                    </Avatar>\n                  )}\n                </div>\n              ))}\n              {isLoading && (\n                <div className=\"flex justify-start\">\n                  <Avatar className=\"h-8 w-8 mr-2 mt-1 flex-shrink-0\">\n                    <AvatarImage src=\"/placeholder.svg?height=32&width=32\" />\n                    <AvatarFallback>AI</AvatarFallback>\n                  </Avatar>\n                  <div className=\"max-w-[85%] rounded-2xl px-5 py-4 bg-gray-50 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 shadow-sm\">\n                    <div className=\"flex space-x-2\">\n                      <div className=\"h-3 w-3 bg-gradient-to-r from-violet-400 to-indigo-500 rounded-full animate-bounce\" style={{ animationDelay: \"0ms\" }}></div>\n                      <div className=\"h-3 w-3 bg-gradient-to-r from-violet-400 to-indigo-500 rounded-full animate-bounce\" style={{ animationDelay: \"150ms\" }}></div>\n                      <div className=\"h-3 w-3 bg-gradient-to-r from-violet-400 to-indigo-500 rounded-full animate-bounce\" style={{ animationDelay: \"300ms\" }}></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"p-5 border-t border-slate-200 dark:border-slate-800 bg-gray-50 dark:bg-slate-900/50 backdrop-blur-sm\">\n              <div className=\"flex gap-3 items-end\">\n                <Textarea\n                  placeholder=\"Ask me anything about your code...\"\n                  className=\"min-h-12 max-h-32 resize-none rounded-2xl border-slate-200 dark:border-slate-700 focus-visible:ring-2 focus-visible:ring-violet-500 bg-white dark:bg-slate-800 text-sm md:text-base\"\n                  value={input}\n                  onChange={(e) => setInput(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\" && !e.shiftKey) {\n                      e.preventDefault()\n                      handleSend()\n                    }\n                  }}\n                  disabled={isLoading}\n                />\n                <Button\n                  onClick={handleSend}\n                  size=\"icon\"\n                  className=\"h-12 w-12 rounded-full bg-gradient-to-r from-violet-500 to-indigo-600 hover:from-violet-600 hover:to-indigo-700 shadow-lg transition-all hover:shadow-xl\"\n                  disabled={isLoading}\n                >\n                  <PaperPlaneIcon className=\"h-5 w-5\" />\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/chat-bubble.tsx",
    "slug": "src_ui_components_chat-bubble_chatbubble",
    "imports": [
      "AnimatePresence",
      "MessageSquare",
      "Maximize2",
      "Minimize2",
      "Trash2",
      "Button",
      "Textarea",
      "Avatar",
      "AvatarFallback",
      "AvatarImage",
      "Cross2Icon",
      "PaperPlaneIcon",
      "ReactMarkdown"
    ],
    "references": [
      "ReactMarkdown",
      "Button",
      "MessageSquare",
      "AnimatePresence",
      "Avatar",
      "AvatarImage",
      "AvatarFallback",
      "Trash2",
      "Minimize2",
      "Maximize2",
      "Cross2Icon",
      "MarkdownMessage",
      "Textarea",
      "PaperPlaneIcon"
    ],
    "relationships": [
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "animatepresence",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "messagesquare",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "maximize2",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "minimize2",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "trash2",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "textarea",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "avatar",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "avatarfallback",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "avatarimage",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "cross2icon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "paperplaneicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "reactmarkdown",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_chat-bubble_chatbubble",
        "target": "markdownmessage",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "target": "/language-(\\w+)/",
        "type": "uses",
        "weight": 2,
        "context": "calls exec",
        "sourceLine": 118,
        "targetFunction": "exec"
      }
    ],
    "methods": [
      {
        "name": "getApiMessages",
        "code": "const getApiMessages = (): ApiChatMessage[] => {\n    return messages\n      .filter(msg => msg.role !== \"system\") // Filter out system messages if any\n      .map(msg => ({\n        role: msg.role || (msg.isUser ? \"user\" : \"assistant\"),\n        content: msg.text\n      }))\n  }",
        "returnType": "ApiChatMessage[]",
        "params": []
      },
      {
        "name": "handleSend",
        "code": "const handleSend = async () => {\n    if (!input.trim() || isLoading) return\n\n    // Add user message to chat\n    setMessages([...messages, { text: input, isUser: true, role: \"user\" }])\n    const userQuery = input\n    setInput(\"\")\n    setIsLoading(true)\n\n    try {\n      // Make API request to chat endpoint\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          history: getApiMessages(),\n          query: userQuery,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`API request failed with status ${response.status}`)\n      }\n\n      const data = await response.json()\n\n      // Add AI response to chat\n      setMessages(prev => [\n        ...prev,\n        { text: data.response, isUser: false, role: \"assistant\" },\n      ])\n    } catch (error) {\n      console.error(\"Error sending message:\", error)\n\n      // Add error message to chat\n      setMessages(prev => [\n        ...prev,\n        {\n          text: \"Sorry, I encountered an error. Please try again or check if Ollama is running properly.\",\n          isUser: false,\n          role: \"assistant\"\n        },\n      ])\n    } finally {\n      setIsLoading(false)\n    }\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "toggleExpand",
        "code": "const toggleExpand = () => {\n    setIsExpanded(!isExpanded)\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "clearMessages",
        "code": "const clearMessages = () => {\n    setMessages([\n      { text: \"Hi there! I can help you understand your code. What would you like to know?\", isUser: false, role: \"assistant\" },\n    ])\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "MarkdownMessage",
        "code": "const MarkdownMessage = ({ content }: { content: string }) => (\n    <ReactMarkdown\n      rehypePlugins={[rehypeRaw, rehypeHighlight]}\n      components={{\n        // Override paragraph to avoid nesting issues\n        p({ children }) {\n          return <div className=\"my-3 text-sm md:text-base text-slate-700 dark:text-slate-300 leading-relaxed\">{children}</div>\n        },\n        // Style for code blocks\n        code({ className, children, ...props }: React.HTMLProps<HTMLElement> & { inline?: boolean }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          const inline = props.inline\n          return !inline ? (\n            <div className=\"relative rounded-lg overflow-hidden my-4 shadow-lg border border-slate-200 dark:border-slate-700\">\n              <div className=\"px-4 py-2 bg-gradient-to-r from-slate-700 to-slate-800 text-xs font-mono text-slate-200 flex items-center justify-between\">\n                <span className=\"text-xs uppercase tracking-wider\">{match?.[1] || 'code'}</span>\n              </div>\n              <pre className=\"p-4 overflow-x-auto bg-[#1a1b26] text-[#c9d1d9] text-sm\">\n                <code className={className} {...props}>\n                  {children}\n                </code>\n              </pre>\n            </div>\n          ) : (\n            <code className=\"px-2 py-1 mx-0.5 bg-violet-100 dark:bg-violet-900/30 text-violet-700 dark:text-violet-300 rounded-md text-sm font-mono\" {...props}>\n              {children}\n            </code>\n          )\n        },\n        // Style for links\n        a(props) {\n          return (\n            <a\n              {...props}\n              className=\"text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 hover:underline font-medium\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            />\n          )\n        },\n        // Style for lists\n        ul({ children }) {\n          return <ul className=\"list-disc pl-6 my-3 space-y-2 marker:text-violet-500\">{children}</ul>\n        },\n        ol({ children }) {\n          return <ol className=\"list-decimal pl-6 my-3 space-y-2 marker:text-violet-500\">{children}</ol>\n        },\n        // Style for list items\n        li({ children }) {\n          return <li className=\"text-sm md:text-base text-slate-700 dark:text-slate-300 leading-relaxed\">{children}</li>\n        },\n        // Style for headings\n        h1({ children }) {\n          return <h1 className=\"text-2xl font-bold my-4 pb-2 border-b-2 border-violet-200 dark:border-violet-800 text-slate-900 dark:text-white\">{children}</h1>\n        },\n        h2({ children }) {\n          return <h2 className=\"text-xl font-bold my-3 text-violet-700 dark:text-violet-400\">{children}</h2>\n        },\n        h3({ children }) {\n          return <h3 className=\"text-lg font-semibold my-2 text-slate-800 dark:text-slate-200\">{children}</h3>\n        },\n        // Style for blockquotes\n        blockquote({ children }) {\n          return <blockquote className=\"border-l-4 border-violet-400 dark:border-violet-600 pl-4 py-2 my-3 bg-violet-50 dark:bg-violet-900/10 rounded-r-lg text-slate-700 dark:text-slate-300 italic\">{children}</blockquote>\n        },\n        // Style for horizontal rules\n        hr() {\n          return <hr className=\"my-4 border-slate-200 dark:border-slate-700\" />\n        },\n        // Style for tables\n        table({ children }) {\n          return (\n            <div className=\"overflow-x-auto my-3\">\n              <table className=\"min-w-full divide-y divide-slate-200 dark:divide-slate-700 border border-slate-200 dark:border-slate-700 rounded-md\">\n                {children}\n              </table>\n            </div>\n          )\n        },\n        thead({ children }) {\n          return <thead className=\"bg-slate-100 dark:bg-slate-800\">{children}</thead>\n        },\n        tbody({ children }) {\n          return <tbody className=\"divide-y divide-slate-200 dark:divide-slate-700\">{children}</tbody>\n        },\n        tr({ children }) {\n          return <tr>{children}</tr>\n        },\n        th({ children }) {\n          return <th className=\"px-4 py-2 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">{children}</th>\n        },\n        td({ children }) {\n          return <td className=\"px-4 py-2 text-slate-700 dark:text-slate-300\">{children}</td>\n        }\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  )",
        "returnType": "void",
        "params": [
          {
            "name": "{ content }",
            "type": "{ content: string }"
          }
        ]
      }
    ]
  },
  {
    "name": "getApiMessages",
    "kind": "function",
    "code": "const getApiMessages = (): ApiChatMessage[] => {\n    return messages\n      .filter(msg => msg.role !== \"system\") // Filter out system messages if any\n      .map(msg => ({\n        role: msg.role || (msg.isUser ? \"user\" : \"assistant\"),\n        content: msg.text\n      }))\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/chat-bubble.tsx",
    "slug": "src_ui_components_chat-bubble_getapimessages",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "handleSend",
    "kind": "function",
    "code": "const handleSend = async () => {\n    if (!input.trim() || isLoading) return\n\n    // Add user message to chat\n    setMessages([...messages, { text: input, isUser: true, role: \"user\" }])\n    const userQuery = input\n    setInput(\"\")\n    setIsLoading(true)\n\n    try {\n      // Make API request to chat endpoint\n      const response = await fetch(\"/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          history: getApiMessages(),\n          query: userQuery,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`API request failed with status ${response.status}`)\n      }\n\n      const data = await response.json()\n\n      // Add AI response to chat\n      setMessages(prev => [\n        ...prev,\n        { text: data.response, isUser: false, role: \"assistant\" },\n      ])\n    } catch (error) {\n      console.error(\"Error sending message:\", error)\n\n      // Add error message to chat\n      setMessages(prev => [\n        ...prev,\n        {\n          text: \"Sorry, I encountered an error. Please try again or check if Ollama is running properly.\",\n          isUser: false,\n          role: \"assistant\"\n        },\n      ])\n    } finally {\n      setIsLoading(false)\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/chat-bubble.tsx",
    "slug": "src_ui_components_chat-bubble_handlesend",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "toggleExpand",
    "kind": "function",
    "code": "const toggleExpand = () => {\n    setIsExpanded(!isExpanded)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/chat-bubble.tsx",
    "slug": "src_ui_components_chat-bubble_toggleexpand",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "clearMessages",
    "kind": "function",
    "code": "const clearMessages = () => {\n    setMessages([\n      { text: \"Hi there! I can help you understand your code. What would you like to know?\", isUser: false, role: \"assistant\" },\n    ])\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/chat-bubble.tsx",
    "slug": "src_ui_components_chat-bubble_clearmessages",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "MarkdownMessage",
    "kind": "component",
    "code": "const MarkdownMessage = ({ content }: { content: string }) => (\n    <ReactMarkdown\n      rehypePlugins={[rehypeRaw, rehypeHighlight]}\n      components={{\n        // Override paragraph to avoid nesting issues\n        p({ children }) {\n          return <div className=\"my-3 text-sm md:text-base text-slate-700 dark:text-slate-300 leading-relaxed\">{children}</div>\n        },\n        // Style for code blocks\n        code({ className, children, ...props }: React.HTMLProps<HTMLElement> & { inline?: boolean }) {\n          const match = /language-(\\w+)/.exec(className || '')\n          const inline = props.inline\n          return !inline ? (\n            <div className=\"relative rounded-lg overflow-hidden my-4 shadow-lg border border-slate-200 dark:border-slate-700\">\n              <div className=\"px-4 py-2 bg-gradient-to-r from-slate-700 to-slate-800 text-xs font-mono text-slate-200 flex items-center justify-between\">\n                <span className=\"text-xs uppercase tracking-wider\">{match?.[1] || 'code'}</span>\n              </div>\n              <pre className=\"p-4 overflow-x-auto bg-[#1a1b26] text-[#c9d1d9] text-sm\">\n                <code className={className} {...props}>\n                  {children}\n                </code>\n              </pre>\n            </div>\n          ) : (\n            <code className=\"px-2 py-1 mx-0.5 bg-violet-100 dark:bg-violet-900/30 text-violet-700 dark:text-violet-300 rounded-md text-sm font-mono\" {...props}>\n              {children}\n            </code>\n          )\n        },\n        // Style for links\n        a(props) {\n          return (\n            <a\n              {...props}\n              className=\"text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300 hover:underline font-medium\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            />\n          )\n        },\n        // Style for lists\n        ul({ children }) {\n          return <ul className=\"list-disc pl-6 my-3 space-y-2 marker:text-violet-500\">{children}</ul>\n        },\n        ol({ children }) {\n          return <ol className=\"list-decimal pl-6 my-3 space-y-2 marker:text-violet-500\">{children}</ol>\n        },\n        // Style for list items\n        li({ children }) {\n          return <li className=\"text-sm md:text-base text-slate-700 dark:text-slate-300 leading-relaxed\">{children}</li>\n        },\n        // Style for headings\n        h1({ children }) {\n          return <h1 className=\"text-2xl font-bold my-4 pb-2 border-b-2 border-violet-200 dark:border-violet-800 text-slate-900 dark:text-white\">{children}</h1>\n        },\n        h2({ children }) {\n          return <h2 className=\"text-xl font-bold my-3 text-violet-700 dark:text-violet-400\">{children}</h2>\n        },\n        h3({ children }) {\n          return <h3 className=\"text-lg font-semibold my-2 text-slate-800 dark:text-slate-200\">{children}</h3>\n        },\n        // Style for blockquotes\n        blockquote({ children }) {\n          return <blockquote className=\"border-l-4 border-violet-400 dark:border-violet-600 pl-4 py-2 my-3 bg-violet-50 dark:bg-violet-900/10 rounded-r-lg text-slate-700 dark:text-slate-300 italic\">{children}</blockquote>\n        },\n        // Style for horizontal rules\n        hr() {\n          return <hr className=\"my-4 border-slate-200 dark:border-slate-700\" />\n        },\n        // Style for tables\n        table({ children }) {\n          return (\n            <div className=\"overflow-x-auto my-3\">\n              <table className=\"min-w-full divide-y divide-slate-200 dark:divide-slate-700 border border-slate-200 dark:border-slate-700 rounded-md\">\n                {children}\n              </table>\n            </div>\n          )\n        },\n        thead({ children }) {\n          return <thead className=\"bg-slate-100 dark:bg-slate-800\">{children}</thead>\n        },\n        tbody({ children }) {\n          return <tbody className=\"divide-y divide-slate-200 dark:divide-slate-700\">{children}</tbody>\n        },\n        tr({ children }) {\n          return <tr>{children}</tr>\n        },\n        th({ children }) {\n          return <th className=\"px-4 py-2 text-left text-xs font-medium text-slate-500 dark:text-slate-400 uppercase tracking-wider\">{children}</th>\n        },\n        td({ children }) {\n          return <td className=\"px-4 py-2 text-slate-700 dark:text-slate-300\">{children}</td>\n        }\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  )",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/chat-bubble.tsx",
    "slug": "src_ui_components_chat-bubble_markdownmessage",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Home",
    "kind": "component",
    "code": "export default function Home() {\n  return (\n    <main className=\"flex flex-col items-center justify-center min-h-screen p-6\">\n      <div className=\"w-full max-w-7xl\">\n        <div className=\"flex flex-col gap-4 mb-12\">\n            <h1 className=\"text-4xl font-bold tracking-tight\">Code Relationships</h1>\n            <p className=\"text-muted-foreground text-xl\">\n                Explore dependencies and relationships between code elements\n            </p>\n        </div>\n        <CodeRelationships />\n      </div>\n    </main>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/page.tsx",
    "slug": "src_ui_app_page_home",
    "imports": [
      "CodeRelationships"
    ],
    "references": [
      "CodeRelationships"
    ],
    "relationships": [
      {
        "source": "src_ui_app_page_home",
        "target": "coderelationships",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "Loading",
    "kind": "function",
    "code": "export default function Loading() {\n  return null\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/loading.tsx",
    "slug": "src_ui_app_loading_loading",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "RootLayout",
    "kind": "component",
    "code": "export default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body className={cn(\"min-h-screen bg-background font-sans antialiased\", fontSans.variable)}>\n        <ThemeProvider attribute=\"class\" defaultTheme=\"light\" enableSystem disableTransitionOnChange>\n          <div className=\"flex h-screen\">\n            <Sidebar />\n            <div className=\"flex-1 flex flex-col overflow-hidden\">\n              <Header />\n              <main className=\"flex-1 overflow-auto bg-slate-50 dark:bg-slate-950\">{children}</main>\n            </div>\n            <ChatBubble />\n          </div>\n        </ThemeProvider>\n      </body>\n    </html>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/layout.tsx",
    "slug": "src_ui_app_layout_rootlayout",
    "imports": [
      "Metadata",
      "FontSans",
      "ThemeProvider",
      "ChatBubble",
      "Header",
      "Sidebar"
    ],
    "references": [
      "FontSans",
      "ThemeProvider",
      "Sidebar",
      "Header",
      "ChatBubble"
    ],
    "relationships": [
      {
        "source": "src_ui_app_layout_rootlayout",
        "target": "metadata",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_layout_rootlayout",
        "target": "fontsans",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_layout_rootlayout",
        "target": "themeprovider",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_layout_rootlayout",
        "target": "chatbubble",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_layout_rootlayout",
        "target": "header",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_layout_rootlayout",
        "target": "sidebar",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "fontsans",
        "type": "uses",
        "weight": 2,
        "context": "calls FontSans",
        "sourceLine": 11,
        "targetFunction": "FontSans"
      }
    ],
    "methods": []
  },
  {
    "name": "VectorServiceAdapter",
    "kind": "class",
    "code": "class VectorServiceAdapter {\n  private service: VectorSimilarityService;\n  \n  constructor(service: VectorSimilarityService) {\n    this.service = service;\n  }\n  \n  /**\n   * Add a document to the vector similarity service\n   */\n  async addDocument(document: {\n    id: string;\n    text: string;\n    metadata: {\n      componentName: string;\n      methodName: string;\n      filePath: string;\n      slug?: string;\n    }\n  }): Promise<void> {\n    // Create a MethodDefinition object from the document\n    const methodDef: MethodDefinition = {\n      name: document.metadata.methodName,\n      code: document.text,\n      params: [],\n      returnType: 'unknown'\n    };\n    \n    // Use the original service's addMethod function\n    await this.service.addMethod(\n      methodDef,\n      document.metadata.componentName,\n      document.metadata.filePath\n    );\n  }\n  \n  /**\n   * Search for similar documents\n   */\n  async search(options: {\n    query: string;\n    limit?: number;\n    excludeIds?: string[];\n  }): Promise<SearchResult[]> {\n    // Create a temporary method for searching\n    const tempMethod: MethodDefinition = {\n      name: 'temp_search_method',\n      code: options.query,\n      params: [],\n      returnType: 'unknown'\n    };\n    \n    // Use original findSimilarMethods function\n    const results = await this.service.findSimilarMethods(\n      tempMethod,\n      'temp_component',\n      'temp_path'\n    );\n    \n    // Convert to SearchResult format\n    return results.map(warning => ({\n      id: `${warning.similarTo}`,\n      score: warning.score,\n      text: warning.code || '',\n      metadata: {\n        componentName: warning.similarTo.split('.')[0],\n        methodName: warning.similarTo,\n        filePath: warning.filePath\n      }\n    })).slice(0, options.limit || 5);\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/similarity.ts",
    "slug": "src_core_parser_similarity_vectorserviceadapter",
    "imports": [
      "ComponentDefinition",
      "MethodDefinition",
      "SimilarityWarning",
      "VectorSimilarityService"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_similarity_vectorserviceadapter",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_similarity_vectorserviceadapter",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_similarity_vectorserviceadapter",
        "target": "similaritywarning",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_similarity_vectorserviceadapter",
        "target": "vectorsimilarityservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": [
      {
        "name": "addDocument",
        "code": "async addDocument(document: {\n    id: string;\n    text: string;\n    metadata: {\n      componentName: string;\n      methodName: string;\n      filePath: string;\n      slug?: string;\n    }\n  }): Promise<void> {\n    // Create a MethodDefinition object from the document\n    const methodDef: MethodDefinition = {\n      name: document.metadata.methodName,\n      code: document.text,\n      params: [],\n      returnType: 'unknown'\n    };\n    \n    // Use the original service's addMethod function\n    await this.service.addMethod(\n      methodDef,\n      document.metadata.componentName,\n      document.metadata.filePath\n    );\n  }",
        "returnType": "Promise<void>",
        "params": [
          {
            "name": "document",
            "type": "{\n    id: string;\n    text: string;\n    metadata: {\n      componentName: string;\n      methodName: string;\n      filePath: string;\n      slug?: string;\n    }\n  }",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "search",
        "code": "async search(options: {\n    query: string;\n    limit?: number;\n    excludeIds?: string[];\n  }): Promise<SearchResult[]> {\n    // Create a temporary method for searching\n    const tempMethod: MethodDefinition = {\n      name: 'temp_search_method',\n      code: options.query,\n      params: [],\n      returnType: 'unknown'\n    };\n    \n    // Use original findSimilarMethods function\n    const results = await this.service.findSimilarMethods(\n      tempMethod,\n      'temp_component',\n      'temp_path'\n    );\n    \n    // Convert to SearchResult format\n    return results.map(warning => ({\n      id: `${warning.similarTo}`,\n      score: warning.score,\n      text: warning.code || '',\n      metadata: {\n        componentName: warning.similarTo.split('.')[0],\n        methodName: warning.similarTo,\n        filePath: warning.filePath\n      }\n    })).slice(0, options.limit || 5);\n  }",
        "returnType": "Promise<SearchResult[]>",
        "params": [
          {
            "name": "options",
            "type": "{\n    query: string;\n    limit?: number;\n    excludeIds?: string[];\n  }",
            "description": "",
            "optional": false
          }
        ]
      }
    ]
  },
  {
    "name": "processComponentListSimilarities",
    "kind": "function",
    "code": "export async function processComponentListSimilarities(\n  allParsedComponents: ComponentDefinition[],\n  vectorSimilarityService: VectorSimilarityService\n): Promise<void> {\n  debug(\"Starting similarity processing pass for all components...\");\n\n  // Create an adapter for the vector similarity service\n  const vectorAdapter = new VectorServiceAdapter(vectorSimilarityService);\n\n  // 2a: Add all methods to the vector database\n  debug(\"Building vector database...\");\n  let methodCount = 0;\n  for (const component of allParsedComponents) {\n    if (component.methods) {\n      for (const method of component.methods) {\n        // Debug log before the check in Pass 2a\n        if (method.name.toLowerCase().includes(\"zach\")) {\n          console.log(\n            `[DEBUG ZACH PARSER 2A] Checking method ${component.name}.${method.name}`\n          );\n          console.log(`[DEBUG ZACH PARSER 2A] Code exists: ${!!method.code}`);\n          console.log(\n            `[DEBUG ZACH PARSER 2A] Code trimmed: \"${method.code?.trim()}\"`\n          );\n        }\n\n        if (method.code && method.code.trim().length > 0) {\n          // Construct a unique ID for the method\n          const methodId = `${component.name}.${method.name}`;\n          \n          // Create a document object for the vector service\n          await vectorAdapter.addDocument({\n            id: methodId,\n            text: method.code,\n            metadata: {\n              componentName: component.name,\n              methodName: method.name,\n              filePath: component.filePath,\n              slug: component.slug\n            }\n          });\n          \n          methodCount++;\n          debug(`Added method ${methodId} to vector DB`);\n        } else {\n          debug(\n            `Skipping method with no code: ${component.name}.${method.name}`\n          );\n        }\n      }\n    }\n  }\n  debug(`Added ${methodCount} methods to vector database`);\n\n  // 2b: Compare all methods against each other and add warnings\n  debug(\"Processing similarity warnings...\");\n  let warningCount = 0;\n  for (const component of allParsedComponents) {\n    if (component.methods) {\n      for (const method of component.methods) {\n        if (method.code && method.code.trim().length > 0) {\n          // Find similar methods in the database\n          const searchResults = await vectorAdapter.search({\n            query: method.code,\n            limit: 5,  // Get top 5 similar methods\n            excludeIds: [`${component.name}.${method.name}`] // Exclude current method\n          });\n          \n          // Convert search results to SimilarityWarning objects\n          const similarMethods = searchResults.map(result => ({\n            score: result.score,\n            similarTo: result.metadata?.componentName || 'Unknown Component',\n            reason: `Similar implementation to ${result.metadata?.methodName || 'Unknown Method'}`,\n            filePath: result.metadata?.filePath || '',\n            code: result.text,\n            slug: result.metadata?.slug\n          }));\n          \n          if (similarMethods.length > 0) {\n            // IMPORTANT: Modify the original object in the list\n            method.similarityWarnings = similarMethods.map(m => ({\n              ...m,\n              code: m.code || ''\n            }));\n            warningCount += similarMethods.length;\n            debug(\n              `Found ${similarMethods.length} warnings for ${component.name}.${method.name}`\n            );\n          }\n        }\n      }\n    }\n  }\n  debug(`Found a total of ${warningCount} similarity warnings.`);\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/similarity.ts",
    "slug": "src_core_parser_similarity_processcomponentlistsimilarities",
    "imports": [
      "ComponentDefinition",
      "MethodDefinition",
      "SimilarityWarning",
      "VectorSimilarityService"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_similarity_processcomponentlistsimilarities",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_similarity_processcomponentlistsimilarities",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_similarity_processcomponentlistsimilarities",
        "target": "similaritywarning",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_similarity_processcomponentlistsimilarities",
        "target": "vectorsimilarityservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "calculateCosineSimilarity",
    "kind": "function",
    "code": "export function calculateCosineSimilarity(vecA: number[], vecB: number[]): number {\n  if (vecA.length !== vecB.length) {\n    throw new Error(\"Vectors must have the same length\");\n  }\n\n  let dotProduct = 0;\n  let normA = 0;\n  let normB = 0;\n\n  for (let i = 0; i < vecA.length; i++) {\n    dotProduct += vecA[i] * vecB[i];\n    normA += vecA[i] * vecA[i];\n    normB += vecB[i] * vecB[i];\n  }\n\n  if (normA === 0 || normB === 0) {\n    return 0;\n  }\n\n  return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/similarity.ts",
    "slug": "src_core_parser_similarity_calculatecosinesimilarity",
    "imports": [
      "ComponentDefinition",
      "MethodDefinition",
      "SimilarityWarning",
      "VectorSimilarityService"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_similarity_calculatecosinesimilarity",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_similarity_calculatecosinesimilarity",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_similarity_calculatecosinesimilarity",
        "target": "similaritywarning",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_similarity_calculatecosinesimilarity",
        "target": "vectorsimilarityservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "extractImports",
    "kind": "function",
    "code": "export function extractImports(fileContent: string): string[] {\n  const imports: string[] = [];\n  try {\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      fileContent,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    function visit(node: ts.Node) {\n      if (ts.isImportDeclaration(node)) {\n        // Get the module specifier (the string after 'from')\n        const moduleSpecifier = node.moduleSpecifier;\n        if (ts.isStringLiteral(moduleSpecifier)) {\n          const importPath = moduleSpecifier.text;\n          \n          // Skip node_modules imports and style files\n          if (!importPath.includes('node_modules') && \n              !importPath.endsWith('.css') && \n              !importPath.endsWith('.scss') && \n              !importPath.endsWith('.less') &&\n              !importPath.endsWith('.svg') &&\n              !importPath.endsWith('.png') &&\n              !importPath.endsWith('.jpg') &&\n              !importPath.endsWith('.jpeg')) {\n            \n            // Handle different import patterns\n            if (node.importClause) {\n              // Named imports: import { Component } from './Component'\n              if (node.importClause.namedBindings && ts.isNamedImports(node.importClause.namedBindings)) {\n                node.importClause.namedBindings.elements.forEach(element => {\n                  const importName = element.name.text;\n                  if (!imports.includes(importName) && /^[A-Z]/.test(importName)) {\n                    imports.push(importName);\n                  }\n                });\n              }\n              // Default import: import Component from './Component'\n              else if (node.importClause.name) {\n                const importName = node.importClause.name.text;\n                if (!imports.includes(importName) && /^[A-Z]/.test(importName)) {\n                  imports.push(importName);\n                }\n              }\n            }\n            \n            // Also extract from the path if it's a relative import\n            if (importPath.startsWith('.')) {\n              const componentName = path.basename(importPath, path.extname(importPath));\n              \n              // Add the component name if it looks like a component (PascalCase)\n              if (!imports.includes(componentName) && \n                  componentName !== 'index' && \n                  componentName.length > 0 &&\n                  /^[A-Z]/.test(componentName)) {\n                imports.push(componentName);\n              }\n            }\n          }\n        }\n      }\n      \n      ts.forEachChild(node, visit);\n    }\n\n    ts.forEachChild(sourceFile, visit);\n    return imports;\n  } catch (error) {\n    console.error(\"Error extracting imports:\", error);\n    return [];\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_extractimports",
    "imports": [
      "MethodCallInfo",
      "EntityUsage",
      "Relationship",
      "CallRelationship",
      "RelationshipType"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_relationship-extractor_extractimports",
        "target": "methodcallinfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractimports",
        "target": "entityusage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractimports",
        "target": "relationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractimports",
        "target": "callrelationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractimports",
        "target": "relationshiptype",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 48,
        "targetFunction": "test"
      },
      {
        "target": "/^[a-z][a-za-z0-9]*$/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 122,
        "targetFunction": "test"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 124,
        "targetFunction": "includes"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent',-'array',-'object',-'string',-'number',-'boolean',-'date',-'error',-'promise']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 143,
        "targetFunction": "includes"
      }
    ],
    "methods": []
  },
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node: ts.Node) {\n      if (ts.isImportDeclaration(node)) {\n        // Get the module specifier (the string after 'from')\n        const moduleSpecifier = node.moduleSpecifier;\n        if (ts.isStringLiteral(moduleSpecifier)) {\n          const importPath = moduleSpecifier.text;\n          \n          // Skip node_modules imports and style files\n          if (!importPath.includes('node_modules') && \n              !importPath.endsWith('.css') && \n              !importPath.endsWith('.scss') && \n              !importPath.endsWith('.less') &&\n              !importPath.endsWith('.svg') &&\n              !importPath.endsWith('.png') &&\n              !importPath.endsWith('.jpg') &&\n              !importPath.endsWith('.jpeg')) {\n            \n            // Handle different import patterns\n            if (node.importClause) {\n              // Named imports: import { Component } from './Component'\n              if (node.importClause.namedBindings && ts.isNamedImports(node.importClause.namedBindings)) {\n                node.importClause.namedBindings.elements.forEach(element => {\n                  const importName = element.name.text;\n                  if (!imports.includes(importName) && /^[A-Z]/.test(importName)) {\n                    imports.push(importName);\n                  }\n                });\n              }\n              // Default import: import Component from './Component'\n              else if (node.importClause.name) {\n                const importName = node.importClause.name.text;\n                if (!imports.includes(importName) && /^[A-Z]/.test(importName)) {\n                  imports.push(importName);\n                }\n              }\n            }\n            \n            // Also extract from the path if it's a relative import\n            if (importPath.startsWith('.')) {\n              const componentName = path.basename(importPath, path.extname(importPath));\n              \n              // Add the component name if it looks like a component (PascalCase)\n              if (!imports.includes(componentName) && \n                  componentName !== 'index' && \n                  componentName.length > 0 &&\n                  /^[A-Z]/.test(componentName)) {\n                imports.push(componentName);\n              }\n            }\n          }\n        }\n      }\n      \n      ts.forEachChild(node, visit);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractComponentReferences",
    "kind": "function",
    "code": "export function extractComponentReferences(fileContent: string): string[] {\n  const references: string[] = [];\n  const seenComponents = new Set<string>();\n  \n  try {\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      fileContent,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    function visit(node: ts.Node) {\n      // Check for JSX elements (both opening and self-closing)\n      if (ts.isJsxOpeningElement(node) || ts.isJsxSelfClosingElement(node)) {\n        let tagName = '';\n        \n        // Handle different tag name types\n        if (ts.isIdentifier(node.tagName)) {\n          tagName = node.tagName.text;\n        } else if (ts.isPropertyAccessExpression(node.tagName)) {\n          // Handle namespaced components like React.Fragment\n          tagName = node.tagName.name.text;\n        }\n        \n        // Only include PascalCase component names (React convention)\n        if (tagName && \n            /^[A-Z][A-Za-z0-9]*$/.test(tagName) && \n            !seenComponents.has(tagName) &&\n            !['Fragment', 'React', 'Component', 'PureComponent'].includes(tagName)) {\n          seenComponents.add(tagName);\n          references.push(tagName);\n        }\n      }\n      \n      // Also check for components passed as props or used in expressions\n      if (ts.isIdentifier(node) && /^[A-Z][A-Za-z0-9]*$/.test(node.text)) {\n        const parent = node.parent;\n        \n        // Check if this is a component being passed as a prop\n        if (parent && (\n          ts.isPropertyAssignment(parent) ||\n          ts.isJsxAttribute(parent) ||\n          ts.isCallExpression(parent) ||\n          ts.isArrayLiteralExpression(parent)\n        )) {\n          const componentName = node.text;\n          if (!seenComponents.has(componentName) &&\n              !['Fragment', 'React', 'Component', 'PureComponent', 'Array', 'Object', 'String', 'Number', 'Boolean', 'Date', 'Error', 'Promise'].includes(componentName)) {\n            seenComponents.add(componentName);\n            references.push(componentName);\n          }\n        }\n      }\n      \n      ts.forEachChild(node, visit);\n    }\n\n    ts.forEachChild(sourceFile, visit);\n    return references;\n  } catch (error) {\n    console.error(\"Error extracting component references:\", error);\n    return [];\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_extractcomponentreferences",
    "imports": [
      "MethodCallInfo",
      "EntityUsage",
      "Relationship",
      "CallRelationship",
      "RelationshipType"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_relationship-extractor_extractcomponentreferences",
        "target": "methodcallinfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractcomponentreferences",
        "target": "entityusage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractcomponentreferences",
        "target": "relationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractcomponentreferences",
        "target": "callrelationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractcomponentreferences",
        "target": "relationshiptype",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 48,
        "targetFunction": "test"
      },
      {
        "target": "/^[a-z][a-za-z0-9]*$/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 122,
        "targetFunction": "test"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 124,
        "targetFunction": "includes"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent',-'array',-'object',-'string',-'number',-'boolean',-'date',-'error',-'promise']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 143,
        "targetFunction": "includes"
      }
    ],
    "methods": []
  },
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node: ts.Node) {\n      // Check for JSX elements (both opening and self-closing)\n      if (ts.isJsxOpeningElement(node) || ts.isJsxSelfClosingElement(node)) {\n        let tagName = '';\n        \n        // Handle different tag name types\n        if (ts.isIdentifier(node.tagName)) {\n          tagName = node.tagName.text;\n        } else if (ts.isPropertyAccessExpression(node.tagName)) {\n          // Handle namespaced components like React.Fragment\n          tagName = node.tagName.name.text;\n        }\n        \n        // Only include PascalCase component names (React convention)\n        if (tagName && \n            /^[A-Z][A-Za-z0-9]*$/.test(tagName) && \n            !seenComponents.has(tagName) &&\n            !['Fragment', 'React', 'Component', 'PureComponent'].includes(tagName)) {\n          seenComponents.add(tagName);\n          references.push(tagName);\n        }\n      }\n      \n      // Also check for components passed as props or used in expressions\n      if (ts.isIdentifier(node) && /^[A-Z][A-Za-z0-9]*$/.test(node.text)) {\n        const parent = node.parent;\n        \n        // Check if this is a component being passed as a prop\n        if (parent && (\n          ts.isPropertyAssignment(parent) ||\n          ts.isJsxAttribute(parent) ||\n          ts.isCallExpression(parent) ||\n          ts.isArrayLiteralExpression(parent)\n        )) {\n          const componentName = node.text;\n          if (!seenComponents.has(componentName) &&\n              !['Fragment', 'React', 'Component', 'PureComponent', 'Array', 'Object', 'String', 'Number', 'Boolean', 'Date', 'Error', 'Promise'].includes(componentName)) {\n            seenComponents.add(componentName);\n            references.push(componentName);\n          }\n        }\n      }\n      \n      ts.forEachChild(node, visit);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractMethodCalls",
    "kind": "function",
    "code": "export function extractMethodCalls(\n  fileContent: string, \n  filePath: string, \n  callingEntitySlug: string,\n  availableEntities?: Set<string>\n): MethodCallInfo[] {\n  const methodCalls: MethodCallInfo[] = [];\n  const seenCalls = new Set<string>(); // Prevent duplicates\n  \n  try {\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      fileContent,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    // Built-in objects and functions to ignore\n    const builtInObjects = new Set([\n      'console', 'document', 'window', 'Array', 'Object', 'String', 'Math', \n      'React', 'this', 'super', 'process', 'Buffer', 'global', 'Date', \n      'Error', 'Promise', 'Set', 'Map', 'WeakSet', 'WeakMap', 'Symbol',\n      'JSON', 'Number', 'Boolean', 'RegExp', 'Infinity', 'NaN', 'undefined'\n    ]);\n    \n    const builtInFunctions = new Set([\n      'parseInt', 'parseFloat', 'setTimeout', 'setInterval', 'clearTimeout', \n      'clearInterval', 'require', 'import', 'eval', 'isNaN', 'isFinite',\n      'encodeURI', 'decodeURI', 'encodeURIComponent', 'decodeURIComponent',\n      'alert', 'confirm', 'prompt', 'toString', 'valueOf', 'hasOwnProperty',\n      'propertyIsEnumerable', 'isPrototypeOf', 'toLocaleString'\n    ]);\n\n    function visit(node: ts.Node) {\n      // Look for call expressions\n      if (ts.isCallExpression(node)) {\n        let targetEntitySlug: string | undefined;\n        let targetMethodName: string | undefined;\n        \n        // Handle property access expressions (e.g., object.method())\n        if (ts.isPropertyAccessExpression(node.expression)) {\n          const objectName = node.expression.expression.getText(sourceFile).trim();\n          targetMethodName = node.expression.name.getText(sourceFile).trim();\n          \n          // Skip built-in methods, local variables, and common patterns\n          if (!builtInObjects.has(objectName) && \n              !objectName.startsWith('_') && // Skip private variables\n              !/^[a-z]/.test(objectName) && // Skip camelCase variables (likely local)\n              objectName.length > 1) {\n            \n            // Convert PascalCase component names to slug format\n            targetEntitySlug = objectName.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '');\n          }\n        }\n        // Handle direct function calls (e.g., functionName())\n        else if (ts.isIdentifier(node.expression)) {\n          const functionName = node.expression.getText(sourceFile).trim();\n          \n          // Only consider PascalCase function names (likely components/classes)\n          if (!builtInFunctions.has(functionName) && \n              /^[A-Z][A-Za-z0-9]*$/.test(functionName) && \n              functionName.length > 1) {\n            \n            targetEntitySlug = functionName.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '');\n            targetMethodName = functionName;\n          }\n        }\n        \n        // Validate the relationship\n        if (targetEntitySlug && \n            targetEntitySlug !== callingEntitySlug &&\n            (!availableEntities || availableEntities.has(targetEntitySlug))) {\n          \n          const callKey = `${callingEntitySlug}->${targetEntitySlug}:${targetMethodName}`;\n          if (!seenCalls.has(callKey)) {\n            seenCalls.add(callKey);\n            \n            const callInfo: MethodCallInfo = {\n              callingEntitySlug: callingEntitySlug,\n              targetEntitySlug: targetEntitySlug,\n              targetMethodName: targetMethodName,\n              sourceFile: filePath,\n              sourceLine: sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1\n            };\n            methodCalls.push(callInfo);\n          }\n        }\n      }\n      \n      ts.forEachChild(node, visit);\n    }\n\n    ts.forEachChild(sourceFile, visit);\n    return methodCalls;\n  } catch (error) {\n    console.error(\"Error extracting method calls:\", error);\n    return [];\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_extractmethodcalls",
    "imports": [
      "MethodCallInfo",
      "EntityUsage",
      "Relationship",
      "CallRelationship",
      "RelationshipType"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_relationship-extractor_extractmethodcalls",
        "target": "methodcallinfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractmethodcalls",
        "target": "entityusage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractmethodcalls",
        "target": "relationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractmethodcalls",
        "target": "callrelationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractmethodcalls",
        "target": "relationshiptype",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 48,
        "targetFunction": "test"
      },
      {
        "target": "/^[a-z][a-za-z0-9]*$/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 122,
        "targetFunction": "test"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 124,
        "targetFunction": "includes"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent',-'array',-'object',-'string',-'number',-'boolean',-'date',-'error',-'promise']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 143,
        "targetFunction": "includes"
      }
    ],
    "methods": []
  },
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node: ts.Node) {\n      // Look for call expressions\n      if (ts.isCallExpression(node)) {\n        let targetEntitySlug: string | undefined;\n        let targetMethodName: string | undefined;\n        \n        // Handle property access expressions (e.g., object.method())\n        if (ts.isPropertyAccessExpression(node.expression)) {\n          const objectName = node.expression.expression.getText(sourceFile).trim();\n          targetMethodName = node.expression.name.getText(sourceFile).trim();\n          \n          // Skip built-in methods, local variables, and common patterns\n          if (!builtInObjects.has(objectName) && \n              !objectName.startsWith('_') && // Skip private variables\n              !/^[a-z]/.test(objectName) && // Skip camelCase variables (likely local)\n              objectName.length > 1) {\n            \n            // Convert PascalCase component names to slug format\n            targetEntitySlug = objectName.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '');\n          }\n        }\n        // Handle direct function calls (e.g., functionName())\n        else if (ts.isIdentifier(node.expression)) {\n          const functionName = node.expression.getText(sourceFile).trim();\n          \n          // Only consider PascalCase function names (likely components/classes)\n          if (!builtInFunctions.has(functionName) && \n              /^[A-Z][A-Za-z0-9]*$/.test(functionName) && \n              functionName.length > 1) {\n            \n            targetEntitySlug = functionName.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '');\n            targetMethodName = functionName;\n          }\n        }\n        \n        // Validate the relationship\n        if (targetEntitySlug && \n            targetEntitySlug !== callingEntitySlug &&\n            (!availableEntities || availableEntities.has(targetEntitySlug))) {\n          \n          const callKey = `${callingEntitySlug}->${targetEntitySlug}:${targetMethodName}`;\n          if (!seenCalls.has(callKey)) {\n            seenCalls.add(callKey);\n            \n            const callInfo: MethodCallInfo = {\n              callingEntitySlug: callingEntitySlug,\n              targetEntitySlug: targetEntitySlug,\n              targetMethodName: targetMethodName,\n              sourceFile: filePath,\n              sourceLine: sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1\n            };\n            methodCalls.push(callInfo);\n          }\n        }\n      }\n      \n      ts.forEachChild(node, visit);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractInheritance",
    "kind": "function",
    "code": "export function extractInheritance(fileContent: string): { extends: string[], implements: string[] } {\n  const inheritance = {\n    extends: [] as string[],\n    implements: [] as string[]\n  };\n  \n  try {\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      fileContent,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    function visit(node: ts.Node) {\n      // Check class declarations\n      if (ts.isClassDeclaration(node)) {\n        if (node.heritageClauses) {\n          for (const clause of node.heritageClauses) {\n            if (clause.token === ts.SyntaxKind.ExtendsKeyword) {\n              for (const type of clause.types) {\n                const extendedClass = type.expression.getText(sourceFile);\n                // Clean up the name (remove generics, namespaces)\n                const cleanName = extendedClass.split('<')[0].split('.').pop() || extendedClass;\n                if (!inheritance.extends.includes(cleanName)) {\n                  inheritance.extends.push(cleanName);\n                }\n              }\n            } else if (clause.token === ts.SyntaxKind.ImplementsKeyword) {\n              for (const type of clause.types) {\n                const implementedInterface = type.expression.getText(sourceFile);\n                const cleanName = implementedInterface.split('<')[0].split('.').pop() || implementedInterface;\n                if (!inheritance.implements.includes(cleanName)) {\n                  inheritance.implements.push(cleanName);\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      // Check interface declarations that extend other interfaces\n      if (ts.isInterfaceDeclaration(node)) {\n        if (node.heritageClauses) {\n          for (const clause of node.heritageClauses) {\n            if (clause.token === ts.SyntaxKind.ExtendsKeyword) {\n              for (const type of clause.types) {\n                const extendedInterface = type.expression.getText(sourceFile);\n                const cleanName = extendedInterface.split('<')[0].split('.').pop() || extendedInterface;\n                if (!inheritance.extends.includes(cleanName)) {\n                  inheritance.extends.push(cleanName);\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      // Check type aliases that extend/intersect with other types\n      if (ts.isTypeAliasDeclaration(node) && node.type) {\n        if (ts.isIntersectionTypeNode(node.type)) {\n          node.type.types.forEach(type => {\n            if (ts.isTypeReferenceNode(type) && ts.isIdentifier(type.typeName)) {\n              const typeName = type.typeName.text;\n              if (/^[A-Z]/.test(typeName) && !inheritance.extends.includes(typeName)) {\n                inheritance.extends.push(typeName);\n              }\n            }\n          });\n        }\n      }\n      \n      ts.forEachChild(node, visit);\n    }\n\n    ts.forEachChild(sourceFile, visit);\n    return inheritance;\n  } catch (error) {\n    console.error(\"Error extracting inheritance:\", error);\n    return { extends: [], implements: [] };\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_extractinheritance",
    "imports": [
      "MethodCallInfo",
      "EntityUsage",
      "Relationship",
      "CallRelationship",
      "RelationshipType"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_relationship-extractor_extractinheritance",
        "target": "methodcallinfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractinheritance",
        "target": "entityusage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractinheritance",
        "target": "relationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractinheritance",
        "target": "callrelationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractinheritance",
        "target": "relationshiptype",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 48,
        "targetFunction": "test"
      },
      {
        "target": "/^[a-z][a-za-z0-9]*$/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 122,
        "targetFunction": "test"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 124,
        "targetFunction": "includes"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent',-'array',-'object',-'string',-'number',-'boolean',-'date',-'error',-'promise']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 143,
        "targetFunction": "includes"
      }
    ],
    "methods": []
  },
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node: ts.Node) {\n      // Check class declarations\n      if (ts.isClassDeclaration(node)) {\n        if (node.heritageClauses) {\n          for (const clause of node.heritageClauses) {\n            if (clause.token === ts.SyntaxKind.ExtendsKeyword) {\n              for (const type of clause.types) {\n                const extendedClass = type.expression.getText(sourceFile);\n                // Clean up the name (remove generics, namespaces)\n                const cleanName = extendedClass.split('<')[0].split('.').pop() || extendedClass;\n                if (!inheritance.extends.includes(cleanName)) {\n                  inheritance.extends.push(cleanName);\n                }\n              }\n            } else if (clause.token === ts.SyntaxKind.ImplementsKeyword) {\n              for (const type of clause.types) {\n                const implementedInterface = type.expression.getText(sourceFile);\n                const cleanName = implementedInterface.split('<')[0].split('.').pop() || implementedInterface;\n                if (!inheritance.implements.includes(cleanName)) {\n                  inheritance.implements.push(cleanName);\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      // Check interface declarations that extend other interfaces\n      if (ts.isInterfaceDeclaration(node)) {\n        if (node.heritageClauses) {\n          for (const clause of node.heritageClauses) {\n            if (clause.token === ts.SyntaxKind.ExtendsKeyword) {\n              for (const type of clause.types) {\n                const extendedInterface = type.expression.getText(sourceFile);\n                const cleanName = extendedInterface.split('<')[0].split('.').pop() || extendedInterface;\n                if (!inheritance.extends.includes(cleanName)) {\n                  inheritance.extends.push(cleanName);\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      // Check type aliases that extend/intersect with other types\n      if (ts.isTypeAliasDeclaration(node) && node.type) {\n        if (ts.isIntersectionTypeNode(node.type)) {\n          node.type.types.forEach(type => {\n            if (ts.isTypeReferenceNode(type) && ts.isIdentifier(type.typeName)) {\n              const typeName = type.typeName.text;\n              if (/^[A-Z]/.test(typeName) && !inheritance.extends.includes(typeName)) {\n                inheritance.extends.push(typeName);\n              }\n            }\n          });\n        }\n      }\n      \n      ts.forEachChild(node, visit);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractPropDrilling",
    "kind": "function",
    "code": "export function extractPropDrilling(\n  fileContent: string,\n  filePath: string,\n  currentEntitySlug: string\n): PropDrillingInfo[] {\n  const propDrilling: PropDrillingInfo[] = [];\n  \n  try {\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      fileContent,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    function visit(node: ts.Node) {\n      // Look for prop destructuring patterns\n      if (ts.isVariableDeclaration(node) && node.initializer) {\n        if (ts.isObjectBindingPattern(node.name)) {\n          // const { prop1, prop2 } = props\n          const destructuredProps = node.name.elements\n            .filter(ts.isBindingElement)\n            .map(el => el.name.getText(sourceFile))\n            .filter(name => name !== 'children');\n          \n          if (destructuredProps.length > 3) { // Threshold for too many props\n            propDrilling.push({\n              entitySlug: currentEntitySlug,\n              filePath,\n              propsCount: destructuredProps.length,\n              propNames: destructuredProps,\n              line: sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1,\n              severity: destructuredProps.length > 6 ? 'high' : 'medium'\n            });\n          }\n        }\n      }\n      \n      ts.forEachChild(node, visit);\n    }\n\n    ts.forEachChild(sourceFile, visit);\n    return propDrilling;\n  } catch (error) {\n    console.error('Error extracting prop drilling:', error);\n    return [];\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_extractpropdrilling",
    "imports": [
      "MethodCallInfo",
      "EntityUsage",
      "Relationship",
      "CallRelationship",
      "RelationshipType"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_relationship-extractor_extractpropdrilling",
        "target": "methodcallinfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractpropdrilling",
        "target": "entityusage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractpropdrilling",
        "target": "relationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractpropdrilling",
        "target": "callrelationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractpropdrilling",
        "target": "relationshiptype",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 48,
        "targetFunction": "test"
      },
      {
        "target": "/^[a-z][a-za-z0-9]*$/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 122,
        "targetFunction": "test"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 124,
        "targetFunction": "includes"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent',-'array',-'object',-'string',-'number',-'boolean',-'date',-'error',-'promise']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 143,
        "targetFunction": "includes"
      }
    ],
    "methods": []
  },
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node: ts.Node) {\n      // Look for prop destructuring patterns\n      if (ts.isVariableDeclaration(node) && node.initializer) {\n        if (ts.isObjectBindingPattern(node.name)) {\n          // const { prop1, prop2 } = props\n          const destructuredProps = node.name.elements\n            .filter(ts.isBindingElement)\n            .map(el => el.name.getText(sourceFile))\n            .filter(name => name !== 'children');\n          \n          if (destructuredProps.length > 3) { // Threshold for too many props\n            propDrilling.push({\n              entitySlug: currentEntitySlug,\n              filePath,\n              propsCount: destructuredProps.length,\n              propNames: destructuredProps,\n              line: sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1,\n              severity: destructuredProps.length > 6 ? 'high' : 'medium'\n            });\n          }\n        }\n      }\n      \n      ts.forEachChild(node, visit);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "detectCircularDependencies",
    "kind": "function",
    "code": "export function detectCircularDependencies(\n  entities: { slug: string; imports: string[]; filePath: string }[]\n): CircularDependency[] {\n  const dependencies = new Map<string, Set<string>>();\n  const circularDeps: CircularDependency[] = [];\n  \n  // Build dependency graph\n  entities.forEach(entity => {\n    dependencies.set(entity.slug, new Set(entity.imports.map(imp => \n      imp.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '')\n    )));\n  });\n  \n  // Detect cycles using DFS\n  const visited = new Set<string>();\n  const recursionStack = new Set<string>();\n  \n  function hasCycle(entitySlug: string, path: string[]): boolean {\n    visited.add(entitySlug);\n    recursionStack.add(entitySlug);\n    \n    const deps = dependencies.get(entitySlug) || new Set();\n    \n    for (const dep of deps) {\n      if (!visited.has(dep)) {\n        if (hasCycle(dep, [...path, dep])) {\n          return true;\n        }\n      } else if (recursionStack.has(dep)) {\n        // Found cycle\n        const cycleStart = path.indexOf(dep);\n        const cycle = path.slice(cycleStart);\n        \n        circularDeps.push({\n          cycle: [...cycle, dep],\n          severity: cycle.length > 3 ? 'high' : 'medium',\n          description: `Circular dependency detected: ${cycle.join(' → ')} → ${dep}`\n        });\n        \n        return true;\n      }\n    }\n    \n    recursionStack.delete(entitySlug);\n    return false;\n  }\n  \n  entities.forEach(entity => {\n    if (!visited.has(entity.slug)) {\n      hasCycle(entity.slug, [entity.slug]);\n    }\n  });\n  \n  return circularDeps;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_detectcirculardependencies",
    "imports": [
      "MethodCallInfo",
      "EntityUsage",
      "Relationship",
      "CallRelationship",
      "RelationshipType"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_relationship-extractor_detectcirculardependencies",
        "target": "methodcallinfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_detectcirculardependencies",
        "target": "entityusage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_detectcirculardependencies",
        "target": "relationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_detectcirculardependencies",
        "target": "callrelationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_detectcirculardependencies",
        "target": "relationshiptype",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 48,
        "targetFunction": "test"
      },
      {
        "target": "/^[a-z][a-za-z0-9]*$/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 122,
        "targetFunction": "test"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 124,
        "targetFunction": "includes"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent',-'array',-'object',-'string',-'number',-'boolean',-'date',-'error',-'promise']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 143,
        "targetFunction": "includes"
      }
    ],
    "methods": [
      {
        "name": "hasCycle",
        "code": "function hasCycle(entitySlug: string, path: string[]): boolean {\n    visited.add(entitySlug);\n    recursionStack.add(entitySlug);\n    \n    const deps = dependencies.get(entitySlug) || new Set();\n    \n    for (const dep of deps) {\n      if (!visited.has(dep)) {\n        if (hasCycle(dep, [...path, dep])) {\n          return true;\n        }\n      } else if (recursionStack.has(dep)) {\n        // Found cycle\n        const cycleStart = path.indexOf(dep);\n        const cycle = path.slice(cycleStart);\n        \n        circularDeps.push({\n          cycle: [...cycle, dep],\n          severity: cycle.length > 3 ? 'high' : 'medium',\n          description: `Circular dependency detected: ${cycle.join(' → ')} → ${dep}`\n        });\n        \n        return true;\n      }\n    }\n    \n    recursionStack.delete(entitySlug);\n    return false;\n  }",
        "returnType": "boolean",
        "params": [
          {
            "name": "entitySlug",
            "type": "string"
          },
          {
            "name": "path",
            "type": "string[]"
          }
        ]
      }
    ]
  },
  {
    "name": "hasCycle",
    "kind": "function",
    "code": "function hasCycle(entitySlug: string, path: string[]): boolean {\n    visited.add(entitySlug);\n    recursionStack.add(entitySlug);\n    \n    const deps = dependencies.get(entitySlug) || new Set();\n    \n    for (const dep of deps) {\n      if (!visited.has(dep)) {\n        if (hasCycle(dep, [...path, dep])) {\n          return true;\n        }\n      } else if (recursionStack.has(dep)) {\n        // Found cycle\n        const cycleStart = path.indexOf(dep);\n        const cycle = path.slice(cycleStart);\n        \n        circularDeps.push({\n          cycle: [...cycle, dep],\n          severity: cycle.length > 3 ? 'high' : 'medium',\n          description: `Circular dependency detected: ${cycle.join(' → ')} → ${dep}`\n        });\n        \n        return true;\n      }\n    }\n    \n    recursionStack.delete(entitySlug);\n    return false;\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_hascycle",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractEntityUsages",
    "kind": "function",
    "code": "export function extractEntityUsages(\n  fileContent: string,\n  filePath: string,\n  currentEntitySlug: string,\n  availableEntities?: Set<string>\n): EntityUsage[] {\n  const usages: EntityUsage[] = [];\n  const seenUsages = new Set<string>();\n  \n  try {\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      fileContent,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    // Extract imports as usages\n    const imports = extractImports(fileContent);\n    imports.forEach(importName => {\n      const slug = importName.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '');\n      if (!availableEntities || availableEntities.has(slug)) {\n        const key = `import:${slug}`;\n        if (!seenUsages.has(key)) {\n          seenUsages.add(key);\n          usages.push({\n            entitySlug: slug,\n            usedInFile: filePath,\n            usedByEntity: currentEntitySlug,\n            usageType: 'import',\n            usageLine: 1 // TODO: Get actual import line\n          });\n        }\n      }\n    });\n\n    // Extract component references (JSX usage) as usages\n    const references = extractComponentReferences(fileContent);\n    references.forEach(refName => {\n      const slug = refName.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '');\n      if (!availableEntities || availableEntities.has(slug)) {\n        const key = `render:${slug}`;\n        if (!seenUsages.has(key)) {\n          seenUsages.add(key);\n          usages.push({\n            entitySlug: slug,\n            usedInFile: filePath,\n            usedByEntity: currentEntitySlug,\n            usageType: 'render',\n            usageLine: 1 // TODO: Get actual usage line\n          });\n        }\n      }\n    });\n\n    // Extract method calls as usages\n    const methodCalls = extractMethodCalls(fileContent, filePath, currentEntitySlug, availableEntities);\n    methodCalls.forEach(call => {\n      const key = `call:${call.targetEntitySlug}:${call.sourceLine}`;\n      if (!seenUsages.has(key)) {\n        seenUsages.add(key);\n        usages.push({\n          entitySlug: call.targetEntitySlug,\n          usedInFile: filePath,\n          usedByEntity: currentEntitySlug,\n          usageType: 'call',\n          usageLine: call.sourceLine\n        });\n      }\n    });\n\n    // Extract inheritance as usages\n    const inheritance = extractInheritance(fileContent);\n    inheritance.extends.forEach(extendedClass => {\n      const slug = extendedClass.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '');\n      if (!availableEntities || availableEntities.has(slug)) {\n        const key = `extends:${slug}`;\n        if (!seenUsages.has(key)) {\n          seenUsages.add(key);\n          usages.push({\n            entitySlug: slug,\n            usedInFile: filePath,\n            usedByEntity: currentEntitySlug,\n            usageType: 'extends',\n            usageLine: 1 // TODO: Get actual extends line\n          });\n        }\n      }\n    });\n\n    inheritance.implements.forEach(implementedInterface => {\n      const slug = implementedInterface.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '');\n      if (!availableEntities || availableEntities.has(slug)) {\n        const key = `implements:${slug}`;\n        if (!seenUsages.has(key)) {\n          seenUsages.add(key);\n          usages.push({\n            entitySlug: slug,\n            usedInFile: filePath,\n            usedByEntity: currentEntitySlug,\n            usageType: 'implements',\n            usageLine: 1 // TODO: Get actual implements line\n          });\n        }\n      }\n    });\n\n    return usages;\n  } catch (error) {\n    console.error('Error extracting entity usages:', error);\n    return [];\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_extractentityusages",
    "imports": [
      "MethodCallInfo",
      "EntityUsage",
      "Relationship",
      "CallRelationship",
      "RelationshipType"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_relationship-extractor_extractentityusages",
        "target": "methodcallinfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractentityusages",
        "target": "entityusage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractentityusages",
        "target": "relationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractentityusages",
        "target": "callrelationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_extractentityusages",
        "target": "relationshiptype",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 48,
        "targetFunction": "test"
      },
      {
        "target": "/^[a-z][a-za-z0-9]*$/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 122,
        "targetFunction": "test"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 124,
        "targetFunction": "includes"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent',-'array',-'object',-'string',-'number',-'boolean',-'date',-'error',-'promise']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 143,
        "targetFunction": "includes"
      }
    ],
    "methods": []
  },
  {
    "name": "generateRelationships",
    "kind": "function",
    "code": "export function generateRelationships(\n  componentSlug: string,\n  imports: string[],\n  references: string[],\n  inheritance: { extends: string[], implements: string[] },\n  methodCalls: MethodCallInfo[],\n  availableEntities?: Set<string>\n): Relationship[] {\n  const relationships: Relationship[] = [];\n  const seenRelationships = new Set<string>();\n  \n  function toSlug(name: string): string {\n    return name.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '').replace(/\\s+/g, \"-\");\n  }\n  \n  function addRelationship(source: string, target: string, type: RelationshipType, weight = 1, context?: string, extra?: Partial<CallRelationship>) {\n    const targetSlug = toSlug(target);\n    \n    if (source === targetSlug || (availableEntities && !availableEntities.has(targetSlug))) {\n      return;\n    }\n    \n    const relationshipKey = `${source}->${targetSlug}:${type}`;\n    if (!seenRelationships.has(relationshipKey)) {\n      seenRelationships.add(relationshipKey);\n      \n      if (type === \"uses\" && extra) {\n        const callRelationship: CallRelationship = {\n          source,\n          target: targetSlug,\n          type: \"uses\",\n          weight,\n          context,\n          sourceFile: extra.sourceFile!,\n          sourceLine: extra.sourceLine!,\n          targetFunction: extra.targetFunction,\n        };\n        relationships.push(callRelationship);\n      } else {\n        relationships.push({\n          source,\n          target: targetSlug,\n          type,\n          weight,\n          context\n        });\n      }\n    }\n  }\n  \n  // Combine imports and references into \"depends-on\" relationships\n  const allDependencies = new Set([...imports, ...references]);\n  allDependencies.forEach(depName => {\n    const isImported = imports.includes(depName);\n    const isRendered = references.includes(depName);\n    \n    let weight = 1;\n    let context = '';\n    \n    if (isImported && isRendered) {\n      weight = 3;\n      context = 'imports and renders';\n    } else if (isImported) {\n      weight = 2;\n      context = 'imports only';\n    } else if (isRendered) {\n      weight = 2;\n      context = 'renders only';\n    }\n    \n    addRelationship(componentSlug, depName, \"uses\", weight, context);\n  });\n  \n  // Add inheritance relationships\n  inheritance.extends.forEach(extendedClass => {\n    addRelationship(componentSlug, extendedClass, \"inherits\", 2, 'class inheritance');\n  });\n  \n  // Add method call relationships\n  methodCalls.forEach(callInfo => {\n    if (callInfo.targetEntitySlug && callInfo.callingEntitySlug !== callInfo.targetEntitySlug) {\n      addRelationship(\n        callInfo.callingEntitySlug,\n        callInfo.targetEntitySlug,\n        \"uses\",\n        2,\n        `calls ${callInfo.targetMethodName || 'method'}`,\n        {\n          sourceFile: callInfo.sourceFile,\n          sourceLine: callInfo.sourceLine,\n          targetFunction: callInfo.targetMethodName\n        }\n      );\n    }\n  });\n  \n  return relationships;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_generaterelationships",
    "imports": [
      "MethodCallInfo",
      "EntityUsage",
      "Relationship",
      "CallRelationship",
      "RelationshipType"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_relationship-extractor_generaterelationships",
        "target": "methodcallinfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_generaterelationships",
        "target": "entityusage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_generaterelationships",
        "target": "relationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_generaterelationships",
        "target": "callrelationship",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_relationship-extractor_generaterelationships",
        "target": "relationshiptype",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 48,
        "targetFunction": "test"
      },
      {
        "target": "/^[a-z][a-za-z0-9]*$/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 122,
        "targetFunction": "test"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 124,
        "targetFunction": "includes"
      },
      {
        "target": "['fragment',-'react',-'component',-'purecomponent',-'array',-'object',-'string',-'number',-'boolean',-'date',-'error',-'promise']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 143,
        "targetFunction": "includes"
      }
    ],
    "methods": [
      {
        "name": "toSlug",
        "code": "function toSlug(name: string): string {\n    return name.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '').replace(/\\s+/g, \"-\");\n  }",
        "returnType": "string",
        "params": [
          {
            "name": "name",
            "type": "string"
          }
        ]
      },
      {
        "name": "addRelationship",
        "code": "function addRelationship(source: string, target: string, type: RelationshipType, weight = 1, context?: string, extra?: Partial<CallRelationship>) {\n    const targetSlug = toSlug(target);\n    \n    if (source === targetSlug || (availableEntities && !availableEntities.has(targetSlug))) {\n      return;\n    }\n    \n    const relationshipKey = `${source}->${targetSlug}:${type}`;\n    if (!seenRelationships.has(relationshipKey)) {\n      seenRelationships.add(relationshipKey);\n      \n      if (type === \"uses\" && extra) {\n        const callRelationship: CallRelationship = {\n          source,\n          target: targetSlug,\n          type: \"uses\",\n          weight,\n          context,\n          sourceFile: extra.sourceFile!,\n          sourceLine: extra.sourceLine!,\n          targetFunction: extra.targetFunction,\n        };\n        relationships.push(callRelationship);\n      } else {\n        relationships.push({\n          source,\n          target: targetSlug,\n          type,\n          weight,\n          context\n        });\n      }\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "source",
            "type": "string"
          },
          {
            "name": "target",
            "type": "string"
          },
          {
            "name": "type",
            "type": "RelationshipType"
          },
          {
            "name": "weight",
            "type": "any"
          },
          {
            "name": "context",
            "type": "string"
          },
          {
            "name": "extra",
            "type": "Partial<CallRelationship>"
          }
        ]
      }
    ]
  },
  {
    "name": "toSlug",
    "kind": "function",
    "code": "function toSlug(name: string): string {\n    return name.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, '').replace(/\\s+/g, \"-\");\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_toslug",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "addRelationship",
    "kind": "function",
    "code": "function addRelationship(source: string, target: string, type: RelationshipType, weight = 1, context?: string, extra?: Partial<CallRelationship>) {\n    const targetSlug = toSlug(target);\n    \n    if (source === targetSlug || (availableEntities && !availableEntities.has(targetSlug))) {\n      return;\n    }\n    \n    const relationshipKey = `${source}->${targetSlug}:${type}`;\n    if (!seenRelationships.has(relationshipKey)) {\n      seenRelationships.add(relationshipKey);\n      \n      if (type === \"uses\" && extra) {\n        const callRelationship: CallRelationship = {\n          source,\n          target: targetSlug,\n          type: \"uses\",\n          weight,\n          context,\n          sourceFile: extra.sourceFile!,\n          sourceLine: extra.sourceLine!,\n          targetFunction: extra.targetFunction,\n        };\n        relationships.push(callRelationship);\n      } else {\n        relationships.push({\n          source,\n          target: targetSlug,\n          type,\n          weight,\n          context\n        });\n      }\n    }\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/relationship-extractor.ts",
    "slug": "src_core_parser_relationship-extractor_addrelationship",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "parseComponents",
    "kind": "function",
    "code": "export async function parseComponents(\n  options: ParserOptions\n): Promise<ComponentDefinition[]> {\n  const {\n    rootDir,\n    componentPath,\n    excludePatterns = [],\n    includePatterns = [\"**/*.tsx\", \"**/*.jsx\", \"**/*.js\", \"**/*.ts\"],\n    maxDepth = Infinity,\n    apiKey,\n    similarityThreshold,\n    useOllama,\n    ollamaUrl,\n    ollamaModel,\n  } = options;\n\n  // Initialize vector similarity service if API key is provided or Ollama is enabled\n  let vectorSimilarityService: VectorSimilarityService | null = null;\n\n  if (useOllama) {\n    vectorSimilarityService = new VectorSimilarityService({\n      useOllama: true,\n      ollamaUrl,\n      ollamaModel,\n      similarityThreshold,\n    });\n    debug(\"Vector similarity service initialized with Ollama\");\n  } else if (apiKey) {\n    vectorSimilarityService = new VectorSimilarityService({\n      apiKey,\n      similarityThreshold,\n    });\n    debug(\"Vector similarity service initialized with OpenAI\");\n  } else {\n    // Always initialize with Ollama as fallback rather than skipping\n    vectorSimilarityService = new VectorSimilarityService({\n      useOllama: true,\n      ollamaUrl: \"http://localhost:11434\", // Default Ollama URL\n      ollamaModel: \"nomic-embed-text:latest\", // Default Ollama embedding model\n      similarityThreshold: similarityThreshold || 0.85,\n    });\n    debug(\n      \"Vector similarity service initialized with default Ollama settings (fallback)\"\n    );\n  }\n\n  // Resolve absolute paths\n  const absoluteRootDir = path.resolve(rootDir);\n  \n  debug(\"Absolute Root Dir:\", absoluteRootDir);\n  debug(\"Include Patterns:\", includePatterns);\n  debug(\"Exclude Patterns:\", excludePatterns);\n\n  // Find suitable tsconfig.json file\n  const tsconfigPath = findTsConfig(absoluteRootDir);\n  \n  if (!tsconfigPath) {\n    console.warn(\"No tsconfig.json found, using default TypeScript settings\");\n  }\n\n  // Set up react-docgen-typescript parser\n  const parserOptions = {\n    propFilter: (prop: any) => {\n      return !prop.parent || !prop.parent.fileName.includes(\"node_modules\");\n    },\n    shouldExtractLiteralValuesFromEnum: true,\n    shouldRemoveUndefinedFromOptional: true,\n  };\n\n  const parser = tsconfigPath \n    ? reactDocgen.withCustomConfig(tsconfigPath, parserOptions)\n    : reactDocgen.withDefaultConfig(parserOptions);\n\n  // First pass: Extract all available entities for relationship validation\n  debug(`First pass: Extracting all entities...`);\n  const availableEntities = await extractAllEntities(\n    absoluteRootDir,\n    includePatterns,\n    excludePatterns\n  );\n  debug(`Found ${availableEntities.size} entities in codebase`);\n\n  // Parse components with entity validation\n  debug(`Second pass: Starting component parsing with react-docgen-typescript...`);\n  const allParsedComponents = await parseSingleComponentFile(\n    {\n      rootDir,\n      componentPath,\n      excludePatterns,\n      includePatterns,\n      maxDepth,\n      availableEntities,\n    },\n    parser\n  );\n\n  debug(`Parsed ${allParsedComponents.length} components initially`);\n\n  // Only run similarity analysis if we have a vector service and components with methods\n  if (vectorSimilarityService) {\n    debug(`Starting similarity analysis pass...`);\n    \n    // Perform similarity analysis\n    await processComponentListSimilarities(\n      allParsedComponents,\n      vectorSimilarityService\n    );\n    \n    debug(`Similarity analysis completed`);\n  } else {\n    debug(\"Skipping similarity analysis (no vector service)\");\n  }\n\n  return allParsedComponents;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/index.ts",
    "slug": "src_core_parser_index_parsecomponents",
    "imports": [
      "ComponentDefinition",
      "ParserOptions",
      "CodeItem",
      "EntityDeclaration",
      "VectorSimilarityService"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_index_parsecomponents",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_index_parsecomponents",
        "target": "parseroptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_index_parsecomponents",
        "target": "codeitem",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_index_parsecomponents",
        "target": "entitydeclaration",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_index_parsecomponents",
        "target": "vectorsimilarityservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "buildEntityDeclarationMap",
    "kind": "function",
    "code": "export async function buildEntityDeclarationMap(\n  rootDir: string,\n  includePatterns: string[] = [\"**/*.tsx\", \"**/*.jsx\", \"**/*.js\", \"**/*.ts\"],\n  excludePatterns: string[] = [\"node_modules/**\", \"**/node_modules/**\"]\n): Promise<Map<string, EntityDeclaration>> {\n  const entityMap = new Map<string, EntityDeclaration>();\n  \n  try {\n    const files = await glob(includePatterns, {\n      cwd: rootDir,\n      ignore: excludePatterns,\n      absolute: true\n    });\n    \n    for (const filePath of files) {\n      try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        const declarations = extractEntityDeclarations(fileContent, filePath);\n        \n        // Add each declaration to the map\n        declarations.forEach(decl => {\n          // If we already have this entity, prefer exported versions\n          const existing = entityMap.get(decl.entitySlug);\n          if (!existing || \n              (decl.exportType !== 'none' && existing.exportType === 'none') ||\n              (decl.exportType === 'default' && existing.exportType === 'named')) {\n            entityMap.set(decl.entitySlug, decl);\n          }\n        });\n      } catch (error) {\n        debug(`Error processing file ${filePath}:`, error);\n      }\n    }\n    \n    debug(`Built entity map with ${entityMap.size} entities`);\n    return entityMap;\n  } catch (error) {\n    console.error('Error building entity declaration map:', error);\n    return entityMap;\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/index.ts",
    "slug": "src_core_parser_index_buildentitydeclarationmap",
    "imports": [
      "ComponentDefinition",
      "ParserOptions",
      "CodeItem",
      "EntityDeclaration",
      "VectorSimilarityService"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_index_buildentitydeclarationmap",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_index_buildentitydeclarationmap",
        "target": "parseroptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_index_buildentitydeclarationmap",
        "target": "codeitem",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_index_buildentitydeclarationmap",
        "target": "entitydeclaration",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_index_buildentitydeclarationmap",
        "target": "vectorsimilarityservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "parseAllCodeItems",
    "kind": "function",
    "code": "export async function parseAllCodeItems(rootDir: string): Promise<CodeItem[]> {\n  const patterns = [\"**/*.js\", \"**/*.jsx\", \"**/*.ts\", \"**/*.tsx\"];\n  const ignore = [\"**/node_modules/**\"];\n  const files = await glob(patterns, {\n    cwd: rootDir,\n    ignore,\n    absolute: true,\n  });\n  const allItems: CodeItem[] = [];\n  for (const filePath of files) {\n    try {\n      const content = await fs.readFile(filePath, \"utf-8\");\n      const items = extractAllTopLevelCodeItems(content).map(item => ({\n        ...item,\n        filePath,\n        type: item.kind, // Map kind to type for compatibility\n      }));\n      allItems.push(...items);\n    } catch (err) {\n      debug(`Failed to parse file: ${filePath}`, err);\n    }\n  }\n  return allItems;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/index.ts",
    "slug": "src_core_parser_index_parseallcodeitems",
    "imports": [
      "ComponentDefinition",
      "ParserOptions",
      "CodeItem",
      "EntityDeclaration",
      "VectorSimilarityService"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_index_parseallcodeitems",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_index_parseallcodeitems",
        "target": "parseroptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_index_parseallcodeitems",
        "target": "codeitem",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_index_parseallcodeitems",
        "target": "entitydeclaration",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_index_parseallcodeitems",
        "target": "vectorsimilarityservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "debug",
    "kind": "function",
    "code": "export function debug(...args: any[]): void {\n  if (DEBUG) console.log(\"[DEBUG]\", ...args);\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/file-utils.ts",
    "slug": "src_core_parser_file-utils_debug",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "resolveImportPath",
    "kind": "function",
    "code": "export function resolveImportPath(\n  importPath: string,\n  currentFilePath: string,\n  rootDir: string\n): string | null {\n  try {\n    debug(`Resolving import: ${importPath} from ${currentFilePath}`);\n    \n    if (importPath.startsWith(\".\")) {\n      // Relative import path\n      const baseDir = path.dirname(currentFilePath);\n      \n      // Try resolving with different extensions\n      const extensions = [\".tsx\", \".jsx\", \".ts\", \".js\"];\n      \n      // First try direct path with extensions\n      for (const ext of extensions) {\n        const resolvedPath = path.resolve(baseDir, `${importPath}${ext}`);\n        if (fs.existsSync(resolvedPath)) {\n          debug(`  Resolved to: ${resolvedPath}`);\n          return resolvedPath;\n        }\n      }\n      \n      // Then try as directory with index files\n      const dirPath = path.resolve(baseDir, importPath);\n      if (fs.existsSync(dirPath) && fs.statSync(dirPath).isDirectory()) {\n        for (const ext of extensions) {\n          const indexPath = path.resolve(dirPath, `index${ext}`);\n          if (fs.existsSync(indexPath)) {\n            debug(`  Found index file with extension: ${ext}`);\n            return indexPath;\n          }\n        }\n      }\n    }\n    \n    return null;\n  } catch (error) {\n    console.error(`Error resolving import path ${importPath}:`, error);\n    return null;\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/file-utils.ts",
    "slug": "src_core_parser_file-utils_resolveimportpath",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "shouldIncludeFile",
    "kind": "function",
    "code": "export function shouldIncludeFile(\n  filePath: string,\n  rootDir: string,\n  includePatterns: string[],\n  excludePatterns: string[]\n): boolean {\n  // Get relative path for pattern matching\n  const relativePath = path.relative(rootDir, filePath);\n  \n  // Check include patterns\n  const included = includePatterns.some((pattern) => {\n    const matches = minimatch(relativePath, pattern);\n    debug(`  Include pattern ${pattern}: ${matches ? \"✓\" : \"✗\"}`);\n    return matches;\n  });\n  \n  // Check exclude patterns\n  const excluded = excludePatterns.some((pattern) => {\n    const matches = minimatch(relativePath, pattern);\n    debug(`  Exclude pattern ${pattern}: ${matches ? \"✓\" : \"✗\"}`);\n    return matches;\n  });\n  \n  return included && !excluded;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/file-utils.ts",
    "slug": "src_core_parser_file-utils_shouldincludefile",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "findTsConfig",
    "kind": "function",
    "code": "export function findTsConfig(rootDir: string): string | null {\n  // First check in the specified root directory\n  let tsconfigPath = path.join(rootDir, \"tsconfig.json\");\n  debug(\"Looking for tsconfig at:\", tsconfigPath);\n  \n  // Check if the tsconfig exists, if not, try looking for it in parent directories\n  if (!fs.existsSync(tsconfigPath)) {\n    debug(\"tsconfig not found, looking in parent directories\");\n    let currentDir = rootDir;\n    const rootDrive = path.parse(currentDir).root;\n    \n    while (currentDir !== rootDrive) {\n      const testPath = path.join(currentDir, \"tsconfig.json\");\n      debug(\"Checking for tsconfig at:\", testPath);\n      if (fs.existsSync(testPath)) {\n        tsconfigPath = testPath;\n        debug(\"Found tsconfig at:\", tsconfigPath);\n        return tsconfigPath;\n      }\n      currentDir = path.dirname(currentDir);\n    }\n  } else {\n    return tsconfigPath;\n  }\n  \n  // Fall back to the project's main tsconfig if none found\n  debug(\"No tsconfig found in parent directories, falling back to project tsconfig\");\n  const projectRoot = path.resolve(__dirname, \"../../..\");\n  tsconfigPath = path.join(projectRoot, \"tsconfig.json\");\n  \n  if (fs.existsSync(tsconfigPath)) {\n    return tsconfigPath;\n  }\n  \n  return null;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/file-utils.ts",
    "slug": "src_core_parser_file-utils_findtsconfig",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractImportedComponentPaths",
    "kind": "function",
    "code": "export function extractImportedComponentPaths(\n  fileContent: string,\n  currentFilePath: string,\n  rootDir: string\n): string[] {\n  const importPaths: string[] = [];\n  // Track processed paths to avoid circular dependencies\n  const processedPaths = new Set<string>();\n\n  try {\n    // Create a simpler but more robust regex to match all imports\n    const importRegex = /import\\s+.*?from\\s+['\"]([^'\"]+)['\"]/g;\n\n    let match;\n    while ((match = importRegex.exec(fileContent)) !== null) {\n      const importPath = match[1]; // The captured import path\n      debug(\n        `Found import: \"${importPath}\" in ${path.basename(currentFilePath)}`\n      );\n\n      // Only process relative imports\n      if (importPath.startsWith(\".\")) {\n        // Avoid re-processing the same paths\n        if (processedPaths.has(importPath)) {\n          debug(`  Skipping already processed import: ${importPath}`);\n          continue;\n        }\n\n        processedPaths.add(importPath);\n\n        // Resolve the import path\n        const resolvedPath = resolveImportPath(\n          importPath,\n          currentFilePath,\n          rootDir\n        );\n\n        if (resolvedPath) {\n          debug(`  Adding resolved path: ${resolvedPath}`);\n          importPaths.push(resolvedPath);\n        } else {\n          debug(`  Could not resolve import path: ${importPath}`);\n        }\n      } else {\n        debug(`  Skipping non-relative import: ${importPath}`);\n      }\n    }\n\n    return importPaths;\n  } catch (error) {\n    console.error(\n      `Error extracting import paths from ${currentFilePath}:`,\n      error\n    );\n    return [];\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/file-utils.ts",
    "slug": "src_core_parser_file-utils_extractimportedcomponentpaths",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "analyzeCodebase",
    "kind": "function",
    "code": "export function analyzeCodebase(components: ComponentDefinition[]): CodeAnalysisResult {\n  // Extract code blocks for duplicate detection\n  const codeBlocks = extractCodeBlocks(components);\n  \n  // Detect duplicates\n  const duplicates = detectDuplicates(codeBlocks, 0.7, 0.95);\n  \n  // Detect circular dependencies\n  const entitiesForCircularCheck = components.map(comp => ({\n    slug: comp.slug || comp.name.toLowerCase(),\n    imports: comp.imports || [],\n    filePath: comp.filePath\n  }));\n  const circularDependencies = detectCircularDependencies(entitiesForCircularCheck);\n  \n  // Calculate quality metrics\n  const qualityMetrics = calculateQualityMetrics(components, duplicates, circularDependencies);\n  \n  // Generate recommendations\n  const recommendations = generateRecommendations(components, duplicates, circularDependencies, qualityMetrics);\n  \n  return {\n    components,\n    duplicates,\n    circularDependencies,\n    qualityMetrics,\n    recommendations\n  };\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/enhanced-analyzer.ts",
    "slug": "src_core_parser_enhanced-analyzer_analyzecodebase",
    "imports": [
      "ComponentDefinition",
      "DuplicateCodeMatch",
      "PropDrillingInfo",
      "CircularDependency"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_enhanced-analyzer_analyzecodebase",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_analyzecodebase",
        "target": "duplicatecodematch",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_analyzecodebase",
        "target": "propdrillinginfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_analyzecodebase",
        "target": "circulardependency",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "calculateQualityMetrics",
    "kind": "function",
    "code": "function calculateQualityMetrics(\n  components: ComponentDefinition[],\n  duplicates: DuplicateCodeMatch[],\n  circularDependencies: CircularDependency[]\n): CodeQualityMetrics {\n  const totalComponents = components.length;\n  const totalRelationships = components.reduce((sum, comp) => sum + (comp.relationships?.length || 0), 0);\n  \n  // Calculate average complexity (based on methods and relationships)\n  const averageComplexity = totalComponents === 0 ? 0 : \n    components.reduce((sum, comp) => {\n      const methodComplexity = (comp.methods?.length || 0) * 2;\n      const relationshipComplexity = (comp.relationships?.length || 0);\n      return sum + methodComplexity + relationshipComplexity;\n    }, 0) / totalComponents;\n  \n  // Calculate duplicate code percentage\n  const duplicateCodePercentage = totalComponents === 0 ? 0 :\n    (duplicates.filter(d => d.similarity >= 0.85).length / totalComponents) * 100;\n  \n  // Count prop drilling issues\n  const propDrillingIssues = components.reduce((sum, comp) => \n    sum + (comp.propDrilling?.length || 0), 0);\n  \n  // Calculate maintainability score (0-100)\n  let maintainabilityScore = 100;\n  \n  // Deduct points for issues\n  maintainabilityScore -= Math.min(duplicateCodePercentage * 2, 30); // Max 30 points for duplicates\n  maintainabilityScore -= Math.min(circularDependencies.length * 10, 25); // Max 25 points for circular deps\n  maintainabilityScore -= Math.min(propDrillingIssues * 2, 15); // Max 15 points for prop drilling\n  maintainabilityScore -= Math.min((averageComplexity - 5) * 3, 20); // Max 20 points for complexity\n  \n  maintainabilityScore = Math.max(0, maintainabilityScore);\n  \n  // Determine overall health\n  let overallHealth: 'excellent' | 'good' | 'fair' | 'poor';\n  if (maintainabilityScore >= 85) overallHealth = 'excellent';\n  else if (maintainabilityScore >= 70) overallHealth = 'good';\n  else if (maintainabilityScore >= 50) overallHealth = 'fair';\n  else overallHealth = 'poor';\n  \n  return {\n    totalComponents,\n    totalRelationships,\n    averageComplexity: Math.round(averageComplexity * 10) / 10,\n    duplicateCodePercentage: Math.round(duplicateCodePercentage * 10) / 10,\n    circularDependencyCount: circularDependencies.length,\n    propDrillingIssues,\n    maintainabilityScore: Math.round(maintainabilityScore),\n    overallHealth\n  };\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/enhanced-analyzer.ts",
    "slug": "src_core_parser_enhanced-analyzer_calculatequalitymetrics",
    "imports": [
      "ComponentDefinition",
      "DuplicateCodeMatch",
      "PropDrillingInfo",
      "CircularDependency"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_enhanced-analyzer_calculatequalitymetrics",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_calculatequalitymetrics",
        "target": "duplicatecodematch",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_calculatequalitymetrics",
        "target": "propdrillinginfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_calculatequalitymetrics",
        "target": "circulardependency",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "generateRecommendations",
    "kind": "function",
    "code": "function generateRecommendations(\n  components: ComponentDefinition[],\n  duplicates: DuplicateCodeMatch[],\n  circularDependencies: CircularDependency[],\n  metrics: CodeQualityMetrics\n): CodeRecommendation[] {\n  const recommendations: CodeRecommendation[] = [];\n  \n  // Duplicate code recommendations\n  const { exactDuplicates, nearDuplicates } = groupDuplicatesBySeverity(duplicates);\n  \n  if (exactDuplicates.length > 0) {\n    recommendations.push({\n      type: 'duplicate',\n      severity: 'high',\n      title: 'Exact Duplicate Code Detected',\n      description: `Found ${exactDuplicates.length} exact duplicates that should be consolidated immediately.`,\n      affectedComponents: [...new Set(exactDuplicates.flatMap(d => [d.sourceEntity, d.targetEntity]))],\n      suggestedActions: [\n        'Extract common functionality into shared utilities or custom hooks',\n        'Create reusable components for repeated UI patterns',\n        'Use composition patterns to reduce code duplication',\n        'Consider implementing a shared library for common business logic'\n      ]\n    });\n  }\n  \n  if (nearDuplicates.length > 0) {\n    recommendations.push({\n      type: 'duplicate',\n      severity: 'medium',\n      title: 'Similar Code Patterns Found',\n      description: `Found ${nearDuplicates.length} near-duplicate code blocks that could benefit from refactoring.`,\n      affectedComponents: [...new Set(nearDuplicates.flatMap(d => [d.sourceEntity, d.targetEntity]))],\n      suggestedActions: [\n        'Review similar code patterns for potential consolidation',\n        'Extract common patterns into reusable functions',\n        'Consider using strategy pattern for similar but different implementations'\n      ]\n    });\n  }\n  \n  // Circular dependency recommendations\n  if (circularDependencies.length > 0) {\n    const criticalCircular = circularDependencies.filter(cd => cd.severity === 'high');\n    \n    recommendations.push({\n      type: 'circular-dependency',\n      severity: criticalCircular.length > 0 ? 'critical' : 'high',\n      title: 'Circular Dependencies Detected',\n      description: `Found ${circularDependencies.length} circular dependencies that can cause runtime issues and make code harder to maintain.`,\n      affectedComponents: [...new Set(circularDependencies.flatMap(cd => cd.cycle))],\n      suggestedActions: [\n        'Break circular dependencies by introducing interfaces or abstract classes',\n        'Move shared logic to a separate module',\n        'Use dependency injection to invert control',\n        'Consider restructuring the module hierarchy'\n      ]\n    });\n  }\n  \n  // Complexity recommendations\n  if (metrics.averageComplexity > 10) {\n    const complexComponents = components\n      .filter(comp => (comp.methods?.length || 0) > 8)\n      .map(comp => comp.name);\n      \n    recommendations.push({\n      type: 'complexity',\n      severity: metrics.averageComplexity > 15 ? 'high' : 'medium',\n      title: 'High Component Complexity',\n      description: `Average component complexity is ${metrics.averageComplexity}, which may indicate over-complex components.`,\n      affectedComponents: complexComponents,\n      suggestedActions: [\n        'Break down large components into smaller, focused components',\n        'Extract complex logic into custom hooks',\n        'Use composition to reduce component responsibility',\n        'Consider splitting components by concern (UI vs logic)'\n      ]\n    });\n  }\n  \n  // Prop drilling recommendations\n  if (metrics.propDrillingIssues > 3) {\n    const propDrillingComponents = components\n      .filter(comp => comp.propDrilling && comp.propDrilling.length > 0)\n      .map(comp => comp.name);\n      \n    recommendations.push({\n      type: 'prop-drilling',\n      severity: metrics.propDrillingIssues > 6 ? 'high' : 'medium',\n      title: 'Prop Drilling Issues',\n      description: `Detected ${metrics.propDrillingIssues} instances of potential prop drilling, which can make components tightly coupled.`,\n      affectedComponents: propDrillingComponents,\n      suggestedActions: [\n        'Consider using React Context for shared state',\n        'Implement state management solutions like Redux or Zustand',\n        'Use component composition to avoid passing props through multiple layers',\n        'Extract shared logic into custom hooks'\n      ]\n    });\n  }\n  \n  // Coupling recommendations\n  const highlyConnectedComponents = components\n    .filter(comp => (comp.relationships?.length || 0) > 8)\n    .map(comp => comp.name);\n    \n  if (highlyConnectedComponents.length > 0) {\n    recommendations.push({\n      type: 'coupling',\n      severity: 'medium',\n      title: 'High Component Coupling',\n      description: `Found ${highlyConnectedComponents.length} components with many dependencies, indicating tight coupling.`,\n      affectedComponents: highlyConnectedComponents,\n      suggestedActions: [\n        'Review and reduce unnecessary dependencies',\n        'Use interfaces to decouple concrete implementations',\n        'Apply the Single Responsibility Principle',\n        'Consider using event-driven architecture for loose coupling'\n      ]\n    });\n  }\n  \n  // Positive reinforcement for good practices\n  if (recommendations.length === 0) {\n    recommendations.push({\n      type: 'complexity',\n      severity: 'low',\n      title: 'Excellent Code Quality',\n      description: 'Your codebase demonstrates good practices with minimal issues detected.',\n      affectedComponents: [],\n      suggestedActions: [\n        'Continue following current coding practices',\n        'Consider adding more unit tests to maintain quality',\n        'Document architectural decisions for future maintainers',\n        'Regular code reviews help maintain this quality level'\n      ]\n    });\n  }\n  \n  return recommendations;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/enhanced-analyzer.ts",
    "slug": "src_core_parser_enhanced-analyzer_generaterecommendations",
    "imports": [
      "ComponentDefinition",
      "DuplicateCodeMatch",
      "PropDrillingInfo",
      "CircularDependency"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_enhanced-analyzer_generaterecommendations",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_generaterecommendations",
        "target": "duplicatecodematch",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_generaterecommendations",
        "target": "propdrillinginfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_generaterecommendations",
        "target": "circulardependency",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "getHealthScoreColor",
    "kind": "function",
    "code": "export function getHealthScoreColor(score: number): string {\n  if (score >= 85) return 'text-green-600';\n  if (score >= 70) return 'text-blue-600';\n  if (score >= 50) return 'text-yellow-600';\n  return 'text-red-600';\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/enhanced-analyzer.ts",
    "slug": "src_core_parser_enhanced-analyzer_gethealthscorecolor",
    "imports": [
      "ComponentDefinition",
      "DuplicateCodeMatch",
      "PropDrillingInfo",
      "CircularDependency"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_enhanced-analyzer_gethealthscorecolor",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_gethealthscorecolor",
        "target": "duplicatecodematch",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_gethealthscorecolor",
        "target": "propdrillinginfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_gethealthscorecolor",
        "target": "circulardependency",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "getHealthBadgeVariant",
    "kind": "function",
    "code": "export function getHealthBadgeVariant(health: string): 'default' | 'secondary' | 'destructive' {\n  switch (health) {\n    case 'excellent':\n    case 'good':\n      return 'default';\n    case 'fair':\n      return 'secondary';\n    case 'poor':\n      return 'destructive';\n    default:\n      return 'secondary';\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/enhanced-analyzer.ts",
    "slug": "src_core_parser_enhanced-analyzer_gethealthbadgevariant",
    "imports": [
      "ComponentDefinition",
      "DuplicateCodeMatch",
      "PropDrillingInfo",
      "CircularDependency"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_enhanced-analyzer_gethealthbadgevariant",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_gethealthbadgevariant",
        "target": "duplicatecodematch",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_gethealthbadgevariant",
        "target": "propdrillinginfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_enhanced-analyzer_gethealthbadgevariant",
        "target": "circulardependency",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": []
  },
  {
    "name": "extractCodeBlocks",
    "kind": "function",
    "code": "export function extractCodeBlocks(components: ComponentDefinition[]): CodeBlock[] {\n  const blocks: CodeBlock[] = [];\n\n  for (const component of components) {\n    // Add the main component code block\n    if (component.sourceCode) {\n      const tokens = tokenizeCode(component.sourceCode);\n      const structure = extractCodeStructure(component.sourceCode);\n      \n      blocks.push({\n        entitySlug: component.slug || component.name.toLowerCase(),\n        entityName: component.name,\n        code: component.sourceCode,\n        filePath: component.filePath,\n        startLine: component.declarationLineStart,\n        endLine: component.declarationLineEnd,\n        hash: simpleHash(component.sourceCode),\n        tokens,\n        structure\n      });\n    }\n\n    // Add method code blocks\n    if (component.methods) {\n      for (const method of component.methods) {\n        if (method.code) {\n          const tokens = tokenizeCode(method.code);\n          const structure = extractCodeStructure(method.code);\n          \n          blocks.push({\n            entitySlug: component.slug || component.name.toLowerCase(),\n            entityName: component.name,\n            methodName: method.name,\n            code: method.code,\n            filePath: component.filePath,\n            startLine: method.declarationLineStart,\n            endLine: method.declarationLineEnd,\n            hash: simpleHash(method.code),\n            tokens,\n            structure\n          });\n        }\n      }\n    }\n  }\n\n  return blocks;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/duplicate-detector.ts",
    "slug": "src_core_parser_duplicate-detector_extractcodeblocks",
    "imports": [
      "ComponentDefinition",
      "MethodDefinition"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_duplicate-detector_extractcodeblocks",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_duplicate-detector_extractcodeblocks",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "[...seta]",
        "type": "uses",
        "weight": 2,
        "context": "calls filter",
        "sourceLine": 183,
        "targetFunction": "filter"
      }
    ],
    "methods": []
  },
  {
    "name": "detectDuplicates",
    "kind": "function",
    "code": "export function detectDuplicates(\n  codeBlocks: CodeBlock[],\n  similarityThreshold = 0.8,\n  exactDuplicateThreshold = 0.95\n): DuplicateCodeMatch[] {\n  const matches: DuplicateCodeMatch[] = [];\n  const seen = new Set<string>();\n\n  for (let i = 0; i < codeBlocks.length; i++) {\n    for (let j = i + 1; j < codeBlocks.length; j++) {\n      const blockA = codeBlocks[i];\n      const blockB = codeBlocks[j];\n\n      // Skip same entity comparisons\n      if (blockA.entitySlug === blockB.entitySlug && blockA.methodName === blockB.methodName) {\n        continue;\n      }\n\n      // Create unique match identifier to avoid duplicates\n      const matchId = `${blockA.entitySlug}-${blockA.methodName || 'main'}-${blockB.entitySlug}-${blockB.methodName || 'main'}`;\n      const reverseMatchId = `${blockB.entitySlug}-${blockB.methodName || 'main'}-${blockA.entitySlug}-${blockA.methodName || 'main'}`;\n      \n      if (seen.has(matchId) || seen.has(reverseMatchId)) {\n        continue;\n      }\n\n      const similarity = calculateSimilarity(blockA, blockB);\n      \n      if (similarity >= similarityThreshold) {\n        seen.add(matchId);\n        \n        let reason = '';\n        if (similarity >= exactDuplicateThreshold) {\n          reason = 'Exact or near-exact duplicate code detected';\n        } else if (blockA.structure === blockB.structure) {\n          reason = 'Similar code structure with different variable names';\n        } else if (blockA.hash === blockB.hash) {\n          reason = 'Identical code hash - potential exact duplicate';\n        } else {\n          reason = 'Similar code logic and patterns detected';\n        }\n\n        matches.push({\n          sourceEntity: blockA.entitySlug,\n          targetEntity: blockB.entitySlug,\n          sourceMethod: blockA.methodName,\n          targetMethod: blockB.methodName,\n          similarity,\n          reason,\n          sourceCode: blockA.code,\n          targetCode: blockB.code,\n          sourceFile: blockA.filePath,\n          targetFile: blockB.filePath,\n          sourceLine: blockA.startLine,\n          targetLine: blockB.startLine\n        });\n      }\n    }\n  }\n\n  return matches.sort((a, b) => b.similarity - a.similarity);\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/duplicate-detector.ts",
    "slug": "src_core_parser_duplicate-detector_detectduplicates",
    "imports": [
      "ComponentDefinition",
      "MethodDefinition"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_duplicate-detector_detectduplicates",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_duplicate-detector_detectduplicates",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "[...seta]",
        "type": "uses",
        "weight": 2,
        "context": "calls filter",
        "sourceLine": 183,
        "targetFunction": "filter"
      }
    ],
    "methods": []
  },
  {
    "name": "calculateSimilarity",
    "kind": "function",
    "code": "function calculateSimilarity(blockA: CodeBlock, blockB: CodeBlock): number {\n  // Exact hash match\n  if (blockA.hash === blockB.hash) {\n    return 1.0;\n  }\n\n  // Structure similarity\n  const structureSimilarity = blockA.structure === blockB.structure ? 0.4 : 0;\n\n  // Token-based similarity (Jaccard similarity)\n  const tokenSimilarity = calculateJaccardSimilarity(blockA.tokens, blockB.tokens) * 0.4;\n\n  // Length similarity\n  const lengthSimilarity = calculateLengthSimilarity(blockA.code.length, blockB.code.length) * 0.2;\n\n  return structureSimilarity + tokenSimilarity + lengthSimilarity;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/duplicate-detector.ts",
    "slug": "src_core_parser_duplicate-detector_calculatesimilarity",
    "imports": [
      "ComponentDefinition",
      "MethodDefinition"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_duplicate-detector_calculatesimilarity",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_duplicate-detector_calculatesimilarity",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "[...seta]",
        "type": "uses",
        "weight": 2,
        "context": "calls filter",
        "sourceLine": 183,
        "targetFunction": "filter"
      }
    ],
    "methods": []
  },
  {
    "name": "calculateJaccardSimilarity",
    "kind": "function",
    "code": "function calculateJaccardSimilarity(tokensA: string[], tokensB: string[]): number {\n  const setA = new Set(tokensA);\n  const setB = new Set(tokensB);\n  \n  const intersection = new Set([...setA].filter(token => setB.has(token)));\n  const union = new Set([...setA, ...setB]);\n  \n  return union.size === 0 ? 0 : intersection.size / union.size;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/duplicate-detector.ts",
    "slug": "src_core_parser_duplicate-detector_calculatejaccardsimilarity",
    "imports": [
      "ComponentDefinition",
      "MethodDefinition"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_duplicate-detector_calculatejaccardsimilarity",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_duplicate-detector_calculatejaccardsimilarity",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "[...seta]",
        "type": "uses",
        "weight": 2,
        "context": "calls filter",
        "sourceLine": 183,
        "targetFunction": "filter"
      }
    ],
    "methods": []
  },
  {
    "name": "calculateLengthSimilarity",
    "kind": "function",
    "code": "function calculateLengthSimilarity(lengthA: number, lengthB: number): number {\n  const maxLength = Math.max(lengthA, lengthB);\n  const minLength = Math.min(lengthA, lengthB);\n  \n  return maxLength === 0 ? 1 : minLength / maxLength;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/duplicate-detector.ts",
    "slug": "src_core_parser_duplicate-detector_calculatelengthsimilarity",
    "imports": [
      "ComponentDefinition",
      "MethodDefinition"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_duplicate-detector_calculatelengthsimilarity",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_duplicate-detector_calculatelengthsimilarity",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "[...seta]",
        "type": "uses",
        "weight": 2,
        "context": "calls filter",
        "sourceLine": 183,
        "targetFunction": "filter"
      }
    ],
    "methods": []
  },
  {
    "name": "tokenizeCode",
    "kind": "function",
    "code": "function tokenizeCode(code: string): string[] {\n  const tokens: string[] = [];\n  \n  try {\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      code,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    function visit(node: ts.Node) {\n      // Extract different types of tokens\n      if (ts.isIdentifier(node)) {\n        tokens.push(`ID:${node.text}`);\n      } else if (ts.isStringLiteral(node)) {\n        tokens.push('STRING_LITERAL');\n      } else if (ts.isNumericLiteral(node)) {\n        tokens.push('NUMERIC_LITERAL');\n      } else if (ts.isToken(node)) {\n        tokens.push(`TOKEN:${ts.SyntaxKind[node.kind]}`);\n      }\n      \n      ts.forEachChild(node, visit);\n    }\n\n    ts.forEachChild(sourceFile, visit);\n  } catch (error) {\n    // Fallback to simple regex-based tokenization\n    const simpleTokens = code\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove block comments\n      .replace(/\\/\\/.*$/gm, '') // Remove line comments\n      .match(/\\b\\w+\\b/g) || [];\n    \n    tokens.push(...simpleTokens.filter(token => token.length > 1));\n  }\n\n  return tokens;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/duplicate-detector.ts",
    "slug": "src_core_parser_duplicate-detector_tokenizecode",
    "imports": [
      "ComponentDefinition",
      "MethodDefinition"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_duplicate-detector_tokenizecode",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_duplicate-detector_tokenizecode",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "[...seta]",
        "type": "uses",
        "weight": 2,
        "context": "calls filter",
        "sourceLine": 183,
        "targetFunction": "filter"
      }
    ],
    "methods": []
  },
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node: ts.Node) {\n      // Extract different types of tokens\n      if (ts.isIdentifier(node)) {\n        tokens.push(`ID:${node.text}`);\n      } else if (ts.isStringLiteral(node)) {\n        tokens.push('STRING_LITERAL');\n      } else if (ts.isNumericLiteral(node)) {\n        tokens.push('NUMERIC_LITERAL');\n      } else if (ts.isToken(node)) {\n        tokens.push(`TOKEN:${ts.SyntaxKind[node.kind]}`);\n      }\n      \n      ts.forEachChild(node, visit);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/duplicate-detector.ts",
    "slug": "src_core_parser_duplicate-detector_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractCodeStructure",
    "kind": "function",
    "code": "function extractCodeStructure(code: string): string {\n  const structure: string[] = [];\n  \n  try {\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      code,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    function visit(node: ts.Node) {\n      // Extract structural elements\n      if (ts.isIfStatement(node)) {\n        structure.push('IF');\n      } else if (ts.isForStatement(node) || ts.isForInStatement(node) || ts.isForOfStatement(node)) {\n        structure.push('FOR');\n      } else if (ts.isWhileStatement(node) || ts.isDoStatement(node)) {\n        structure.push('WHILE');\n      } else if (ts.isSwitchStatement(node)) {\n        structure.push('SWITCH');\n      } else if (ts.isTryStatement(node)) {\n        structure.push('TRY');\n      } else if (ts.isFunctionDeclaration(node) || ts.isArrowFunction(node) || ts.isFunctionExpression(node)) {\n        structure.push('FUNCTION');\n      } else if (ts.isCallExpression(node)) {\n        structure.push('CALL');\n      } else if (ts.isReturnStatement(node)) {\n        structure.push('RETURN');\n      } else if (ts.isVariableDeclaration(node)) {\n        structure.push('VAR');\n      }\n      \n      ts.forEachChild(node, visit);\n    }\n\n    ts.forEachChild(sourceFile, visit);\n  } catch (error) {\n    // Fallback to regex patterns\n    if (code.includes('if') || code.includes('else')) structure.push('IF');\n    if (code.includes('for') || code.includes('while')) structure.push('LOOP');\n    if (code.includes('function') || code.includes('=>')) structure.push('FUNCTION');\n    if (code.includes('return')) structure.push('RETURN');\n  }\n\n  return structure.join('-');\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/duplicate-detector.ts",
    "slug": "src_core_parser_duplicate-detector_extractcodestructure",
    "imports": [
      "ComponentDefinition",
      "MethodDefinition"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_duplicate-detector_extractcodestructure",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_duplicate-detector_extractcodestructure",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "[...seta]",
        "type": "uses",
        "weight": 2,
        "context": "calls filter",
        "sourceLine": 183,
        "targetFunction": "filter"
      }
    ],
    "methods": []
  },
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node: ts.Node) {\n      // Extract structural elements\n      if (ts.isIfStatement(node)) {\n        structure.push('IF');\n      } else if (ts.isForStatement(node) || ts.isForInStatement(node) || ts.isForOfStatement(node)) {\n        structure.push('FOR');\n      } else if (ts.isWhileStatement(node) || ts.isDoStatement(node)) {\n        structure.push('WHILE');\n      } else if (ts.isSwitchStatement(node)) {\n        structure.push('SWITCH');\n      } else if (ts.isTryStatement(node)) {\n        structure.push('TRY');\n      } else if (ts.isFunctionDeclaration(node) || ts.isArrowFunction(node) || ts.isFunctionExpression(node)) {\n        structure.push('FUNCTION');\n      } else if (ts.isCallExpression(node)) {\n        structure.push('CALL');\n      } else if (ts.isReturnStatement(node)) {\n        structure.push('RETURN');\n      } else if (ts.isVariableDeclaration(node)) {\n        structure.push('VAR');\n      }\n      \n      ts.forEachChild(node, visit);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/duplicate-detector.ts",
    "slug": "src_core_parser_duplicate-detector_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "simpleHash",
    "kind": "function",
    "code": "function simpleHash(code: string): string {\n  // Normalize code for hashing (remove whitespace, comments)\n  const normalized = code\n    .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove block comments\n    .replace(/\\/\\/.*$/gm, '') // Remove line comments\n    .replace(/\\s+/g, ' ') // Normalize whitespace\n    .trim();\n    \n  let hash = 0;\n  for (let i = 0; i < normalized.length; i++) {\n    const char = normalized.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  \n  return hash.toString(16);\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/duplicate-detector.ts",
    "slug": "src_core_parser_duplicate-detector_simplehash",
    "imports": [
      "ComponentDefinition",
      "MethodDefinition"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_duplicate-detector_simplehash",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_duplicate-detector_simplehash",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "[...seta]",
        "type": "uses",
        "weight": 2,
        "context": "calls filter",
        "sourceLine": 183,
        "targetFunction": "filter"
      }
    ],
    "methods": []
  },
  {
    "name": "groupDuplicatesBySeverity",
    "kind": "function",
    "code": "export function groupDuplicatesBySeverity(matches: DuplicateCodeMatch[]): {\n  exactDuplicates: DuplicateCodeMatch[];\n  nearDuplicates: DuplicateCodeMatch[];\n  similarCode: DuplicateCodeMatch[];\n} {\n  return {\n    exactDuplicates: matches.filter(m => m.similarity >= 0.95),\n    nearDuplicates: matches.filter(m => m.similarity >= 0.85 && m.similarity < 0.95),\n    similarCode: matches.filter(m => m.similarity >= 0.7 && m.similarity < 0.85)\n  };\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/duplicate-detector.ts",
    "slug": "src_core_parser_duplicate-detector_groupduplicatesbyseverity",
    "imports": [
      "ComponentDefinition",
      "MethodDefinition"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_duplicate-detector_groupduplicatesbyseverity",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_duplicate-detector_groupduplicatesbyseverity",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "[...seta]",
        "type": "uses",
        "weight": 2,
        "context": "calls filter",
        "sourceLine": 183,
        "targetFunction": "filter"
      }
    ],
    "methods": []
  },
  {
    "name": "parseComponentFile",
    "kind": "function",
    "code": "export function parseComponentFile(\n  filePath: string,\n  rootDir: string,\n  parser: reactDocgen.FileParser,\n  availableEntities?: Set<string>\n): ComponentDefinition[] {\n  try {\n    debug(`Parsing component file: ${filePath}`);\n    const components: ComponentDefinition[] = [];\n\n    // Parse the file with react-docgen-typescript\n    const result = parser.parse(filePath);\n    \n    if (result.length === 0) {\n      debug(`No components found in ${filePath}`);\n      return [];\n    }\n\n    debug(`Found ${result.length} components in ${filePath}`);\n\n    // Read the file content once\n    const fileContent = fs.readFileSync(filePath, \"utf-8\");\n\n    // Process each component\n    for (const component of result) {\n      const componentName = component.displayName;\n      debug(`Processing component: ${componentName}`);\n\n      // Convert props to our format\n      const props: PropDefinition[] = Object.entries(component.props || {}).map(\n        ([name, propDef]) => {\n          const prop = propDef as any;\n          return {\n            name,\n            type: prop.type?.name || \"any\",\n            required: prop.required || false,\n            defaultValue: prop.defaultValue?.value,\n            description: prop.description || \"\",\n          };\n        }\n      );\n\n      // Extract methods using TypeScript AST\n      const methods = extractComponentMethods(fileContent, componentName);\n\n      // The full fileContent will be used for componentDef.sourceCode\n      // const sourceCode = extractComponentSourceCode(fileContent, componentName); // This line is no longer needed for componentDef.sourceCode\n\n      // Generate slug for the component using file path to avoid duplicates\n      const relativePath = path.relative(rootDir, filePath);\n      const slug = `${relativePath.replace(/[\\/\\\\]/g, '_').replace(/\\.(tsx?|jsx?)$/, '')}_${componentName}`.toLowerCase().replace(/\\s+/g, \"-\");\n      \n      // Extract entity usages instead of individual relationship types\n      const usages = extractEntityUsages(fileContent, filePath, slug, availableEntities);\n      \n      // Extract declaration info for this component\n      const declarations = extractEntityDeclarations(fileContent, filePath);\n      const thisDeclaration = declarations.find(d => d.entityName === componentName);\n      \n      // For backward compatibility, still generate relationships\n      const imports = extractImports(fileContent);\n      const references = extractComponentReferences(fileContent);\n      const inheritance = extractInheritance(fileContent);\n      const methodCalls = extractMethodCalls(fileContent, filePath, slug, availableEntities);\n      \n      // Debug logging\n      debug(`Component ${componentName}: imports=${imports.length}, references=${references.length}, inheritance=${inheritance.extends.length + inheritance.implements.length}, methodCalls=${methodCalls.length}`);\n      debug(`Imports: ${imports.join(', ')}`);\n      debug(`References: ${references.join(', ')}`);\n      \n      const relationships = generateRelationships(\n        slug,\n        imports,\n        references,\n        inheritance,\n        methodCalls,\n        availableEntities\n      );\n\n      // Find component declaration line numbers\n      let declarationLineStart: number | undefined = undefined;\n      let declarationLineEnd: number | undefined = undefined;\n\n      const sourceFile = ts.createSourceFile(filePath, fileContent, ts.ScriptTarget.Latest, true);\n\n      function findComponentNode(node: ts.Node) {\n        if (declarationLineStart !== undefined) return; // Already found\n\n        if (ts.isClassDeclaration(node) || ts.isFunctionDeclaration(node)) {\n          if (node.name && node.name.getText(sourceFile) === componentName) {\n            declarationLineStart = sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1;\n            declarationLineEnd = sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line + 1;\n            return;\n          }\n        }\n        // Handle const MyComponent = () => { ... }\n        if (ts.isVariableStatement(node)) {\n          for (const decl of node.declarationList.declarations) {\n            if (ts.isIdentifier(decl.name) && decl.name.getText(sourceFile) === componentName) {\n              if (decl.initializer && (ts.isArrowFunction(decl.initializer) || ts.isFunctionExpression(decl.initializer))) {\n                declarationLineStart = sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1;\n                declarationLineEnd = sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line + 1;\n                return;\n              }\n            }\n          }\n        }\n        ts.forEachChild(node, findComponentNode);\n      }\n      ts.forEachChild(sourceFile, findComponentNode);\n\n      // Extract additional analysis data\n      const propDrilling = extractPropDrilling(fileContent, filePath, slug);\n      \n      // Create component definition\n      const componentDef: ComponentDefinition = {\n        name: componentName,\n        displayName: component.displayName,\n        type: \"component\",\n        description: component.description || \"\",\n        filePath,\n        fileName: path.basename(filePath),\n        sourceCode: fileContent, // Use full file content\n        props,\n        methods,\n        childComponents: [],\n        similarityWarnings: [],\n        slug,\n        imports,\n        references,\n        relationships,\n        declarationLineStart,\n        declarationLineEnd,\n        declaration: thisDeclaration,\n        usages,\n        propDrilling\n      };\n\n      debug(`Added component: ${componentName} with ${methods.length} methods`);\n      components.push(componentDef);\n    }\n\n    return components;\n  } catch (error) {\n    console.error(`Error parsing component file: ${filePath}`, error);\n    return [];\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/component-parser.ts",
    "slug": "src_core_parser_component-parser_parsecomponentfile",
    "imports": [
      "ComponentDefinition",
      "PropDefinition",
      "EntityDeclaration",
      "PropDrillingInfo",
      "DuplicateCodeMatch"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_component-parser_parsecomponentfile",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_component-parser_parsecomponentfile",
        "target": "propdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_component-parser_parsecomponentfile",
        "target": "entitydeclaration",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_component-parser_parsecomponentfile",
        "target": "propdrillinginfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_component-parser_parsecomponentfile",
        "target": "duplicatecodematch",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "object.entries(component.props-||-{})",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 55,
        "targetFunction": "map"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 76,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 76,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "findComponentNode",
    "kind": "function",
    "code": "function findComponentNode(node: ts.Node) {\n        if (declarationLineStart !== undefined) return; // Already found\n\n        if (ts.isClassDeclaration(node) || ts.isFunctionDeclaration(node)) {\n          if (node.name && node.name.getText(sourceFile) === componentName) {\n            declarationLineStart = sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1;\n            declarationLineEnd = sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line + 1;\n            return;\n          }\n        }\n        // Handle const MyComponent = () => { ... }\n        if (ts.isVariableStatement(node)) {\n          for (const decl of node.declarationList.declarations) {\n            if (ts.isIdentifier(decl.name) && decl.name.getText(sourceFile) === componentName) {\n              if (decl.initializer && (ts.isArrowFunction(decl.initializer) || ts.isFunctionExpression(decl.initializer))) {\n                declarationLineStart = sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1;\n                declarationLineEnd = sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line + 1;\n                return;\n              }\n            }\n          }\n        }\n        ts.forEachChild(node, findComponentNode);\n      }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/component-parser.ts",
    "slug": "src_core_parser_component-parser_findcomponentnode",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "collectComponentsRecursively",
    "kind": "function",
    "code": "export async function collectComponentsRecursively(\n  parser: reactDocgen.FileParser,\n  componentPath: string,\n  rootDir: string,\n  includePatterns: string[],\n  excludePatterns: string[],\n  depth: number,\n  maxDepth: number,\n  processedPaths: Set<string>,\n  collectedComponents: ComponentDefinition[],\n  availableEntities?: Set<string>\n): Promise<void> {\n  debug(`Collecting component at depth ${depth}: ${componentPath}`);\n\n  // Stop if we've reached max depth\n  if (depth > maxDepth) {\n    debug(`Reached max depth (${maxDepth}), stopping recursion`);\n    return;\n  }\n\n  // Skip if we've already processed this path\n  if (processedPaths.has(componentPath)) {\n    debug(`Already processed: ${componentPath}, skipping`);\n    return;\n  }\n\n  // Mark as processed to avoid cycles\n  processedPaths.add(componentPath);\n\n  try {\n    const stats = await fs.stat(componentPath);\n\n    // If it's a directory, get all files in it\n    if (stats.isDirectory()) {\n      debug(`${componentPath} is a directory, scanning files`);\n      const files = await fs.readdir(componentPath);\n\n      for (const file of files) {\n        const filePath = path.join(componentPath, file);\n        \n        // Skip node_modules and hidden files\n        if (file === \"node_modules\" || file.startsWith(\".\")) {\n          continue;\n        }\n\n        // Recursively process\n        await collectComponentsRecursively(\n          parser,\n          filePath,\n          rootDir,\n          includePatterns,\n          excludePatterns,\n          depth + 1,\n          maxDepth,\n          processedPaths,\n          collectedComponents,\n          availableEntities\n        );\n      }\n    } \n    // If it's a file, parse it if it matches patterns\n    else if (stats.isFile()) {\n      const relativePath = path.relative(rootDir, componentPath);\n      \n      // Check if this file should be included based on patterns\n      if (shouldIncludeFile(componentPath, rootDir, includePatterns, excludePatterns)) {\n        debug(`Parsing file: ${relativePath}`);\n        \n        // Parse the current file\n        const components = parseComponentFile(componentPath, rootDir, parser, availableEntities);\n        \n        // Add components to the collection\n        for (const component of components) {\n          collectedComponents.push(component);\n        }\n        \n        // Read file content once for import extraction\n        const fileContent = await fs.readFile(componentPath, \"utf8\");\n        \n        // Extract and process imported components\n        const importPaths = extractImportedComponentPaths(\n          fileContent,\n          componentPath,\n          rootDir\n        );\n        \n        debug(`Found ${importPaths.length} imports in ${relativePath}`);\n        \n        // Filter to only valid paths based on patterns\n        const validPaths = importPaths.filter((importPath) => {\n          // Skip already processed paths\n          if (processedPaths.has(importPath)) {\n            debug(`  Skipping already processed import: ${importPath}`);\n            return false;\n          }\n          \n          // Check against include/exclude patterns\n          const included = includePatterns.some((pattern) => {\n            const matches = shouldIncludeFile(importPath, rootDir, includePatterns, excludePatterns);\n            debug(`  Include pattern ${pattern}: ${matches ? \"✓\" : \"✗\"}`);\n            return matches;\n          });\n          \n          const excluded = excludePatterns.some((pattern) => {\n            const matches = shouldIncludeFile(importPath, rootDir, includePatterns, excludePatterns);\n            debug(`  Exclude pattern ${pattern}: ${matches ? \"✓\" : \"✗\"}`);\n            return matches;\n          });\n          \n          return included && !excluded;\n        });\n        \n        debug(`Found ${validPaths.length} valid child component paths`);\n        \n        // Recursively process imported components\n        for (const importPath of validPaths) {\n          debug(`Recursively collecting children for: ${importPath}`);\n          // Pass the set of processed paths to avoid circular dependencies\n          await collectComponentsRecursively(\n            parser,\n            importPath,\n            rootDir,\n            includePatterns,\n            excludePatterns,\n            depth + 1,\n            maxDepth,\n            processedPaths,\n            collectedComponents,\n            availableEntities\n          );\n        }\n      } else {\n        debug(`Skipping file (excluded by patterns): ${relativePath}`);\n      }\n    }\n  } catch (error) {\n    console.error(\n      `Error collecting components recursively from ${componentPath}:`,\n      error\n    );\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/component-parser.ts",
    "slug": "src_core_parser_component-parser_collectcomponentsrecursively",
    "imports": [
      "ComponentDefinition",
      "PropDefinition",
      "EntityDeclaration",
      "PropDrillingInfo",
      "DuplicateCodeMatch"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_component-parser_collectcomponentsrecursively",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_component-parser_collectcomponentsrecursively",
        "target": "propdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_component-parser_collectcomponentsrecursively",
        "target": "entitydeclaration",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_component-parser_collectcomponentsrecursively",
        "target": "propdrillinginfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_component-parser_collectcomponentsrecursively",
        "target": "duplicatecodematch",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "object.entries(component.props-||-{})",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 55,
        "targetFunction": "map"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 76,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 76,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "parseSingleComponentFile",
    "kind": "function",
    "code": "export async function parseSingleComponentFile(\n  options: {\n    rootDir: string;\n    componentPath: string;\n    excludePatterns?: string[];\n    includePatterns?: string[];\n    maxDepth?: number;\n    availableEntities?: Set<string>;\n  },\n  parserInstance: reactDocgen.FileParser\n): Promise<ComponentDefinition[]> {\n  const {\n    rootDir,\n    componentPath,\n    excludePatterns = [],\n    includePatterns = [\"**/*.tsx\", \"**/*.jsx\", \"**/*.js\", \"**/*.ts\"],\n    maxDepth = Infinity,\n    availableEntities,\n  } = options;\n\n  // Resolve absolute paths\n  const absoluteRootDir = path.resolve(rootDir);\n  const absoluteComponentPath = path.resolve(rootDir, componentPath);\n\n  debug(\"Absolute Root Dir:\", absoluteRootDir);\n  debug(\"Absolute Component Path:\", absoluteComponentPath);\n\n  const collectedComponents: ComponentDefinition[] = [];\n  await collectComponentsRecursively(\n    parserInstance,\n    absoluteComponentPath,\n    absoluteRootDir,\n    includePatterns,\n    excludePatterns,\n    0, // Start depth at 0\n    maxDepth,\n    new Set(), // New set for each file parse to handle its own recursion tracking\n    collectedComponents,\n    availableEntities\n  );\n\n  debug(\n    `Collected ${collectedComponents.length} component definitions from ${componentPath}.`\n  );\n  return collectedComponents;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/component-parser.ts",
    "slug": "src_core_parser_component-parser_parsesinglecomponentfile",
    "imports": [
      "ComponentDefinition",
      "PropDefinition",
      "EntityDeclaration",
      "PropDrillingInfo",
      "DuplicateCodeMatch"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_component-parser_parsesinglecomponentfile",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_component-parser_parsesinglecomponentfile",
        "target": "propdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_component-parser_parsesinglecomponentfile",
        "target": "entitydeclaration",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_component-parser_parsesinglecomponentfile",
        "target": "propdrillinginfo",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_component-parser_parsesinglecomponentfile",
        "target": "duplicatecodematch",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "object.entries(component.props-||-{})",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 55,
        "targetFunction": "map"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`.tolowercase()",
        "type": "uses",
        "weight": 2,
        "context": "calls replace",
        "sourceLine": 76,
        "targetFunction": "replace"
      },
      {
        "target": "`${relativepath.replace(/[\\/\\\\]/g,-'_').replace(/\\.(tsx?|jsx?)$/,-'')}_${componentname}`",
        "type": "uses",
        "weight": 2,
        "context": "calls toLowerCase",
        "sourceLine": 76,
        "targetFunction": "toLowerCase"
      }
    ],
    "methods": []
  },
  {
    "name": "extractComponentSourceCode",
    "kind": "function",
    "code": "export function extractComponentSourceCode(\n  fileContent: string,\n  componentName: string\n): string {\n  try {\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\", // Temporary file name\n      fileContent,\n      ts.ScriptTarget.Latest,\n      true // Set parent pointers\n    );\n\n    let componentNode: ts.Node | undefined;\n\n    // Find the component node in the AST\n    function visit(node: ts.Node) {\n      if (componentNode) return; // Stop searching once found\n\n      // Check for class declarations\n      if (\n        ts.isClassDeclaration(node) &&\n        node.name &&\n        node.name.text === componentName\n      ) {\n        componentNode = node;\n        return;\n      }\n\n      // Check for function declarations\n      if (\n        ts.isFunctionDeclaration(node) &&\n        node.name &&\n        node.name.text === componentName\n      ) {\n        componentNode = node;\n        return;\n      }\n\n      // Check for variable statements (for const/let/var components)\n      if (ts.isVariableStatement(node)) {\n        for (const declaration of node.declarationList.declarations) {\n          if (\n            declaration.name &&\n            ts.isIdentifier(declaration.name) &&\n            declaration.name.text === componentName\n          ) {\n            // Check if it's an arrow function or function expression\n            if (\n              declaration.initializer &&\n              (ts.isArrowFunction(declaration.initializer) ||\n                ts.isFunctionExpression(declaration.initializer))\n            ) {\n              // Use the entire variable statement node for source code extraction\n              componentNode = node;\n              return;\n            }\n          }\n        }\n      }\n\n      ts.forEachChild(node, visit);\n    }\n\n    // Visit the AST to find the component\n    ts.forEachChild(sourceFile, visit);\n\n    // Extract the source code for the component if found\n    if (componentNode) {\n      const { pos, end } = componentNode;\n      const componentSource = fileContent.substring(pos, end);\n      debug(`Found component source code for: ${componentName}`);\n      \n      // Limit large component source code with a warning\n      if (componentSource.length > 5000) {\n        return componentSource.substring(0, 5000) + \"\\n// ... truncated ...\";\n      }\n      return componentSource;\n    } else {\n      debug(`Component source code not found via AST for: ${componentName}`);\n      // Fallback if specific component node isn't found\n      return fileContent.length > 5000\n        ? fileContent.substring(0, 5000) + \"\\n// ... truncated ...\"\n        : fileContent;\n    }\n  } catch (error) {\n    console.error(\n      `Error extracting source code for component ${componentName} using AST:`,\n      error\n    );\n    // Return a portion of the file as fallback in case of AST errors\n    return fileContent.length > 5000\n      ? fileContent.substring(0, 5000) + \"\\n// ... truncated ...\"\n      : fileContent;\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_extractcomponentsourcecode",
    "imports": [
      "MethodDefinition",
      "ParamDefinition",
      "EntityDeclaration"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_ast-utils_extractcomponentsourcecode",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_ast-utils_extractcomponentsourcecode",
        "target": "paramdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_ast-utils_extractcomponentsourcecode",
        "target": "entitydeclaration",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 394,
        "targetFunction": "test"
      }
    ],
    "methods": []
  },
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node: ts.Node) {\n      if (componentNode) return; // Stop searching once found\n\n      // Check for class declarations\n      if (\n        ts.isClassDeclaration(node) &&\n        node.name &&\n        node.name.text === componentName\n      ) {\n        componentNode = node;\n        return;\n      }\n\n      // Check for function declarations\n      if (\n        ts.isFunctionDeclaration(node) &&\n        node.name &&\n        node.name.text === componentName\n      ) {\n        componentNode = node;\n        return;\n      }\n\n      // Check for variable statements (for const/let/var components)\n      if (ts.isVariableStatement(node)) {\n        for (const declaration of node.declarationList.declarations) {\n          if (\n            declaration.name &&\n            ts.isIdentifier(declaration.name) &&\n            declaration.name.text === componentName\n          ) {\n            // Check if it's an arrow function or function expression\n            if (\n              declaration.initializer &&\n              (ts.isArrowFunction(declaration.initializer) ||\n                ts.isFunctionExpression(declaration.initializer))\n            ) {\n              // Use the entire variable statement node for source code extraction\n              componentNode = node;\n              return;\n            }\n          }\n        }\n      }\n\n      ts.forEachChild(node, visit);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractAllTopLevelCodeItems",
    "kind": "function",
    "code": "export function extractAllTopLevelCodeItems(fileContent: string): Array<{ \n  name: string; \n  kind: 'function' | 'class'; \n  code: string;\n  props?: Array<{\n    name: string;\n    type: string;\n    required?: boolean;\n    defaultValue?: string;\n    description?: string;\n  }>;\n}> {\n  const results: Array<{\n    name: string;\n    kind: 'function' | 'class';\n    code: string;\n    props?: Array<{\n      name: string;\n      type: string;\n      required?: boolean;\n      defaultValue?: string;\n      description?: string;\n    }>;\n  }> = [];\n  \n  // Store interfaces and their properties for later use\n  const interfaces: Record<string, Array<{\n    name: string;\n    type: string;\n    required: boolean;\n    description?: string;\n  }>> = {};\n  \n  try {\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      fileContent,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    // First pass: collect all interfaces\n    function collectInterfaces(node: ts.Node) {\n      if (ts.isInterfaceDeclaration(node) && node.name) {\n        const interfaceName = node.name.text;\n        const props: Array<{\n          name: string;\n          type: string;\n          required: boolean;\n          description?: string;\n        }> = [];\n        \n        // Get JSDoc comment for the property if available\n        function getJSDocComment(node: ts.Node): string | undefined {\n          const jsDocComments = (node as any).jsDoc;\n          if (jsDocComments && jsDocComments.length > 0) {\n            return jsDocComments[0].comment;\n          }\n          return undefined;\n        }\n        \n        // Process each property in the interface\n        node.members.forEach(member => {\n          if (ts.isPropertySignature(member) && member.name) {\n            const propName = member.name.getText(sourceFile);\n            const propType = member.type ? member.type.getText(sourceFile) : 'any';\n            const required = !member.questionToken;\n            const description = getJSDocComment(member);\n            \n            props.push({\n              name: propName,\n              type: propType,\n              required,\n              description\n            });\n          }\n        });\n        \n        interfaces[interfaceName] = props;\n      }\n      ts.forEachChild(node, collectInterfaces);\n    }\n    \n    // Collect all interfaces first\n    ts.forEachChild(sourceFile, collectInterfaces);\n    \n    // Second pass: process components and link to their props\n    function visit(node: ts.Node) {\n      // Top-level function declarations\n      if (ts.isFunctionDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const code = fileContent.substring(node.pos, node.end);\n        const componentResult: {\n          name: string;\n          kind: 'function';\n          code: string;\n          props?: Array<{\n            name: string;\n            type: string;\n            required: boolean;\n            description?: string;\n          }>;\n        } = { name, kind: 'function', code };\n        \n        // Try to find props for this component\n        const propsTypeName = findPropsTypeForComponent(node, sourceFile);\n        if (propsTypeName && interfaces[propsTypeName]) {\n          componentResult.props = interfaces[propsTypeName];\n        }\n        \n        results.push(componentResult);\n      }\n      // Top-level class declarations\n      else if (ts.isClassDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const code = fileContent.substring(node.pos, node.end);\n        const componentResult: {\n          name: string;\n          kind: 'class';\n          code: string;\n          props?: Array<{\n            name: string;\n            type: string;\n            required: boolean;\n            description?: string;\n          }>;\n        } = { name, kind: 'class', code };\n        \n        // Try to find props for this component\n        const propsTypeName = findPropsTypeForComponent(node, sourceFile);\n        if (propsTypeName && interfaces[propsTypeName]) {\n          componentResult.props = interfaces[propsTypeName];\n        }\n        \n        results.push(componentResult);\n      }\n      // Top-level variable statements with function expressions or arrow functions\n      else if (ts.isVariableStatement(node)) {\n        for (const declaration of node.declarationList.declarations) {\n          if (\n            declaration.name &&\n            ts.isIdentifier(declaration.name) &&\n            declaration.initializer &&\n            (ts.isArrowFunction(declaration.initializer) || ts.isFunctionExpression(declaration.initializer))\n          ) {\n            const name = declaration.name.text;\n            const code = fileContent.substring(node.pos, node.end);\n            const componentResult: {\n              name: string;\n              kind: 'function';\n              code: string;\n              props?: Array<{\n                name: string;\n                type: string;\n                required: boolean;\n                description?: string;\n              }>;\n            } = { name, kind: 'function', code };\n            \n            // Try to find props for this component\n            const propsTypeName = findPropsTypeForComponent(declaration.initializer, sourceFile);\n            if (propsTypeName && interfaces[propsTypeName]) {\n              componentResult.props = interfaces[propsTypeName];\n            }\n            \n            results.push(componentResult);\n          }\n        }\n      }\n    }\n    \n    // Helper function to find props type for a component\n    function findPropsTypeForComponent(node: ts.Node, sourceFile: ts.SourceFile): string | undefined {\n      // For arrow functions or function expressions with destructured parameters\n      if ((ts.isArrowFunction(node) || ts.isFunctionExpression(node)) && node.parameters.length > 0) {\n        const firstParam = node.parameters[0];\n        if (firstParam.type) {\n          return firstParam.type.getText(sourceFile);\n        }\n      }\n      \n      // For function declarations with type annotations\n      if (ts.isFunctionDeclaration(node) && node.type) {\n        const typeText = node.type.getText(sourceFile);\n        // Extract component props type from React.FC<PropsType>\n        const match = typeText.match(/React\\.FC<([^>]+)>/i) || typeText.match(/FC<([^>]+)>/i);\n        if (match && match[1]) {\n          return match[1];\n        }\n      }\n      \n      return undefined;\n    }\n\n    // Only visit top-level nodes\n    sourceFile.statements.forEach(visit);\n    return results;\n  } catch (error) {\n    debug('Error in extractAllTopLevelCodeItems:', error);\n    return results;\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_extractalltoplevelcodeitems",
    "imports": [
      "MethodDefinition",
      "ParamDefinition",
      "EntityDeclaration"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_ast-utils_extractalltoplevelcodeitems",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_ast-utils_extractalltoplevelcodeitems",
        "target": "paramdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_ast-utils_extractalltoplevelcodeitems",
        "target": "entitydeclaration",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 394,
        "targetFunction": "test"
      }
    ],
    "methods": []
  },
  {
    "name": "collectInterfaces",
    "kind": "function",
    "code": "function collectInterfaces(node: ts.Node) {\n      if (ts.isInterfaceDeclaration(node) && node.name) {\n        const interfaceName = node.name.text;\n        const props: Array<{\n          name: string;\n          type: string;\n          required: boolean;\n          description?: string;\n        }> = [];\n        \n        // Get JSDoc comment for the property if available\n        function getJSDocComment(node: ts.Node): string | undefined {\n          const jsDocComments = (node as any).jsDoc;\n          if (jsDocComments && jsDocComments.length > 0) {\n            return jsDocComments[0].comment;\n          }\n          return undefined;\n        }\n        \n        // Process each property in the interface\n        node.members.forEach(member => {\n          if (ts.isPropertySignature(member) && member.name) {\n            const propName = member.name.getText(sourceFile);\n            const propType = member.type ? member.type.getText(sourceFile) : 'any';\n            const required = !member.questionToken;\n            const description = getJSDocComment(member);\n            \n            props.push({\n              name: propName,\n              type: propType,\n              required,\n              description\n            });\n          }\n        });\n        \n        interfaces[interfaceName] = props;\n      }\n      ts.forEachChild(node, collectInterfaces);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_collectinterfaces",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "getJSDocComment",
    "kind": "function",
    "code": "function getJSDocComment(node: ts.Node): string | undefined {\n          const jsDocComments = (node as any).jsDoc;\n          if (jsDocComments && jsDocComments.length > 0) {\n            return jsDocComments[0].comment;\n          }\n          return undefined;\n        }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_getjsdoccomment",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node: ts.Node) {\n      // Top-level function declarations\n      if (ts.isFunctionDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const code = fileContent.substring(node.pos, node.end);\n        const componentResult: {\n          name: string;\n          kind: 'function';\n          code: string;\n          props?: Array<{\n            name: string;\n            type: string;\n            required: boolean;\n            description?: string;\n          }>;\n        } = { name, kind: 'function', code };\n        \n        // Try to find props for this component\n        const propsTypeName = findPropsTypeForComponent(node, sourceFile);\n        if (propsTypeName && interfaces[propsTypeName]) {\n          componentResult.props = interfaces[propsTypeName];\n        }\n        \n        results.push(componentResult);\n      }\n      // Top-level class declarations\n      else if (ts.isClassDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const code = fileContent.substring(node.pos, node.end);\n        const componentResult: {\n          name: string;\n          kind: 'class';\n          code: string;\n          props?: Array<{\n            name: string;\n            type: string;\n            required: boolean;\n            description?: string;\n          }>;\n        } = { name, kind: 'class', code };\n        \n        // Try to find props for this component\n        const propsTypeName = findPropsTypeForComponent(node, sourceFile);\n        if (propsTypeName && interfaces[propsTypeName]) {\n          componentResult.props = interfaces[propsTypeName];\n        }\n        \n        results.push(componentResult);\n      }\n      // Top-level variable statements with function expressions or arrow functions\n      else if (ts.isVariableStatement(node)) {\n        for (const declaration of node.declarationList.declarations) {\n          if (\n            declaration.name &&\n            ts.isIdentifier(declaration.name) &&\n            declaration.initializer &&\n            (ts.isArrowFunction(declaration.initializer) || ts.isFunctionExpression(declaration.initializer))\n          ) {\n            const name = declaration.name.text;\n            const code = fileContent.substring(node.pos, node.end);\n            const componentResult: {\n              name: string;\n              kind: 'function';\n              code: string;\n              props?: Array<{\n                name: string;\n                type: string;\n                required: boolean;\n                description?: string;\n              }>;\n            } = { name, kind: 'function', code };\n            \n            // Try to find props for this component\n            const propsTypeName = findPropsTypeForComponent(declaration.initializer, sourceFile);\n            if (propsTypeName && interfaces[propsTypeName]) {\n              componentResult.props = interfaces[propsTypeName];\n            }\n            \n            results.push(componentResult);\n          }\n        }\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "findPropsTypeForComponent",
    "kind": "function",
    "code": "function findPropsTypeForComponent(node: ts.Node, sourceFile: ts.SourceFile): string | undefined {\n      // For arrow functions or function expressions with destructured parameters\n      if ((ts.isArrowFunction(node) || ts.isFunctionExpression(node)) && node.parameters.length > 0) {\n        const firstParam = node.parameters[0];\n        if (firstParam.type) {\n          return firstParam.type.getText(sourceFile);\n        }\n      }\n      \n      // For function declarations with type annotations\n      if (ts.isFunctionDeclaration(node) && node.type) {\n        const typeText = node.type.getText(sourceFile);\n        // Extract component props type from React.FC<PropsType>\n        const match = typeText.match(/React\\.FC<([^>]+)>/i) || typeText.match(/FC<([^>]+)>/i);\n        if (match && match[1]) {\n          return match[1];\n        }\n      }\n      \n      return undefined;\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_findpropstypeforcomponent",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractEntityDeclarations",
    "kind": "function",
    "code": "export function extractEntityDeclarations(\n  fileContent: string,\n  filePath: string\n): EntityDeclaration[] {\n  const declarations: EntityDeclaration[] = [];\n  \n  try {\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      fileContent,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    function visit(node: ts.Node) {\n      // Function declarations\n      if (ts.isFunctionDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const line = sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1;\n        \n        declarations.push({\n          entitySlug: name.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, ''),\n          entityName: name,\n          entityType: 'function',\n          declarationFile: filePath,\n          declarationLine: line,\n          exportType: hasExportModifier(node) ? 'named' : 'none'\n        });\n      }\n      // Class declarations\n      else if (ts.isClassDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const line = sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1;\n        \n        declarations.push({\n          entitySlug: name.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, ''),\n          entityName: name,\n          entityType: 'class',\n          declarationFile: filePath,\n          declarationLine: line,\n          exportType: hasExportModifier(node) ? 'named' : 'none'\n        });\n      }\n      // Variable declarations (arrow functions, const components)\n      else if (ts.isVariableStatement(node)) {\n        const isExported = hasExportModifier(node);\n        \n        for (const declaration of node.declarationList.declarations) {\n          if (declaration.name && ts.isIdentifier(declaration.name) &&\n              declaration.initializer &&\n              (ts.isArrowFunction(declaration.initializer) || \n               ts.isFunctionExpression(declaration.initializer))) {\n            \n            const name = declaration.name.text;\n            const line = sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1;\n            \n            // Check if it's a React component (PascalCase and returns JSX)\n            const entityType = /^[A-Z]/.test(name) ? 'component' : 'function';\n            \n            declarations.push({\n              entitySlug: name.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, ''),\n              entityName: name,\n              entityType,\n              declarationFile: filePath,\n              declarationLine: line,\n              exportType: isExported ? 'named' : 'none'\n            });\n          }\n        }\n      }\n      // Export default statements\n      else if (ts.isExportAssignment(node) && !node.isExportEquals) {\n        // Handle: export default ComponentName\n        if (ts.isIdentifier(node.expression)) {\n          const name = node.expression.text;\n          // Find the original declaration\n          const decl = declarations.find(d => d.entityName === name);\n          if (decl) {\n            decl.exportType = 'default';\n          }\n        }\n      }\n      \n      ts.forEachChild(node, visit);\n    }\n    \n    function hasExportModifier(node: ts.Node): boolean {\n      if (!ts.canHaveModifiers(node)) return false;\n      const modifiers = ts.getModifiers(node);\n      return modifiers?.some(m => m.kind === ts.SyntaxKind.ExportKeyword) || false;\n    }\n\n    ts.forEachChild(sourceFile, visit);\n    return declarations;\n  } catch (error) {\n    console.error('Error extracting entity declarations:', error);\n    return [];\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_extractentitydeclarations",
    "imports": [
      "MethodDefinition",
      "ParamDefinition",
      "EntityDeclaration"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_ast-utils_extractentitydeclarations",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_ast-utils_extractentitydeclarations",
        "target": "paramdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_ast-utils_extractentitydeclarations",
        "target": "entitydeclaration",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 394,
        "targetFunction": "test"
      }
    ],
    "methods": []
  },
  {
    "name": "visit",
    "kind": "function",
    "code": "function visit(node: ts.Node) {\n      // Function declarations\n      if (ts.isFunctionDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const line = sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1;\n        \n        declarations.push({\n          entitySlug: name.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, ''),\n          entityName: name,\n          entityType: 'function',\n          declarationFile: filePath,\n          declarationLine: line,\n          exportType: hasExportModifier(node) ? 'named' : 'none'\n        });\n      }\n      // Class declarations\n      else if (ts.isClassDeclaration(node) && node.name) {\n        const name = node.name.text;\n        const line = sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1;\n        \n        declarations.push({\n          entitySlug: name.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, ''),\n          entityName: name,\n          entityType: 'class',\n          declarationFile: filePath,\n          declarationLine: line,\n          exportType: hasExportModifier(node) ? 'named' : 'none'\n        });\n      }\n      // Variable declarations (arrow functions, const components)\n      else if (ts.isVariableStatement(node)) {\n        const isExported = hasExportModifier(node);\n        \n        for (const declaration of node.declarationList.declarations) {\n          if (declaration.name && ts.isIdentifier(declaration.name) &&\n              declaration.initializer &&\n              (ts.isArrowFunction(declaration.initializer) || \n               ts.isFunctionExpression(declaration.initializer))) {\n            \n            const name = declaration.name.text;\n            const line = sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1;\n            \n            // Check if it's a React component (PascalCase and returns JSX)\n            const entityType = /^[A-Z]/.test(name) ? 'component' : 'function';\n            \n            declarations.push({\n              entitySlug: name.toLowerCase().replace(/([A-Z])/g, '-$1').replace(/^-/, ''),\n              entityName: name,\n              entityType,\n              declarationFile: filePath,\n              declarationLine: line,\n              exportType: isExported ? 'named' : 'none'\n            });\n          }\n        }\n      }\n      // Export default statements\n      else if (ts.isExportAssignment(node) && !node.isExportEquals) {\n        // Handle: export default ComponentName\n        if (ts.isIdentifier(node.expression)) {\n          const name = node.expression.text;\n          // Find the original declaration\n          const decl = declarations.find(d => d.entityName === name);\n          if (decl) {\n            decl.exportType = 'default';\n          }\n        }\n      }\n      \n      ts.forEachChild(node, visit);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_visit",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "hasExportModifier",
    "kind": "function",
    "code": "function hasExportModifier(node: ts.Node): boolean {\n      if (!ts.canHaveModifiers(node)) return false;\n      const modifiers = ts.getModifiers(node);\n      return modifiers?.some(m => m.kind === ts.SyntaxKind.ExportKeyword) || false;\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_hasexportmodifier",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractAllEntities",
    "kind": "function",
    "code": "export async function extractAllEntities(\n  rootDir: string,\n  includePatterns: string[] = [\"**/*.tsx\", \"**/*.jsx\", \"**/*.js\", \"**/*.ts\"],\n  excludePatterns: string[] = [\"node_modules/**\", \"**/node_modules/**\"]\n): Promise<Set<string>> {\n  const entities = new Set<string>();\n  \n  try {\n    const { glob } = await import('glob');\n    const fs = await import('fs-extra');\n    \n    // Find all matching files\n    const files = await glob(includePatterns, {\n      cwd: rootDir,\n      ignore: excludePatterns,\n      absolute: true\n    });\n    \n    // Process each file\n    for (const filePath of files) {\n      try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        const declarations = extractEntityDeclarations(fileContent, filePath);\n        \n        // Add each entity slug\n        declarations.forEach(decl => {\n          entities.add(decl.entitySlug);\n        });\n      } catch (error) {\n        debug(`Error processing file ${filePath}:`, error);\n      }\n    }\n    \n    debug(`Extracted ${entities.size} entities from ${files.length} files`);\n    return entities;\n  } catch (error) {\n    console.error('Error extracting entities:', error);\n    return entities;\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_extractallentities",
    "imports": [
      "MethodDefinition",
      "ParamDefinition",
      "EntityDeclaration"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_ast-utils_extractallentities",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_ast-utils_extractallentities",
        "target": "paramdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_ast-utils_extractallentities",
        "target": "entitydeclaration",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 394,
        "targetFunction": "test"
      }
    ],
    "methods": []
  },
  {
    "name": "extractComponentMethods",
    "kind": "function",
    "code": "export function extractComponentMethods(\n  fileContent: string,\n  componentName: string\n): MethodDefinition[] {\n  const methods: MethodDefinition[] = [];\n  const methodNames = new Set<string>(); // Track methods to avoid duplicates\n\n  try {\n    // Create a TS source file\n    const sourceFile = ts.createSourceFile(\n      \"temp.tsx\",\n      fileContent,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    debug(`Extracting methods for component: ${componentName}`);\n\n    // Find the component node first\n    let componentNode: ts.Node | undefined;\n    let isFoundComponent = false;\n\n    // First pass - find the component declaration\n    function findComponentNode(node: ts.Node) {\n      if (isFoundComponent) return;\n\n      // Class component\n      if (\n        ts.isClassDeclaration(node) &&\n        node.name &&\n        node.name.text === componentName\n      ) {\n        componentNode = node;\n        isFoundComponent = true;\n        return;\n      }\n\n      // Function component (function declaration)\n      if (\n        ts.isFunctionDeclaration(node) &&\n        node.name &&\n        node.name.text === componentName\n      ) {\n        componentNode = node;\n        isFoundComponent = true;\n        return;\n      }\n\n      // Function component (variable declaration with function expression or arrow function)\n      if (ts.isVariableStatement(node)) {\n        for (const declaration of node.declarationList.declarations) {\n          if (\n            declaration.name &&\n            ts.isIdentifier(declaration.name) &&\n            declaration.name.text === componentName\n          ) {\n            componentNode = node;\n            isFoundComponent = true;\n            return;\n          }\n        }\n      }\n\n      // Continue searching\n      ts.forEachChild(node, findComponentNode);\n    }\n\n    // Second pass - extract methods from the component\n    function processNodeForMethods(node: ts.Node) {\n      // Class methods\n      if (ts.isMethodDeclaration(node) && node.name) {\n        const methodName = node.name.getText(sourceFile);\n        extractMethod(node, methodName, methods, sourceFile, fileContent);\n      }\n      // Property assignments with arrow functions\n      else if (\n        ts.isPropertyAssignment(node) &&\n        node.initializer &&\n        (ts.isArrowFunction(node.initializer) ||\n          ts.isFunctionExpression(node.initializer))\n      ) {\n        const methodName = node.name.getText(sourceFile);\n        extractMethod(node, methodName, methods, sourceFile, fileContent);\n      }\n      // Continue recursively\n      ts.forEachChild(node, processNodeForMethods);\n    }\n\n    // Extract all functions in the file (fallback when component not found)\n    function extractAllFunctions(\n      node: ts.Node,\n      methods: MethodDefinition[],\n      sourceFile: ts.SourceFile,\n      fileContent: string\n    ) {\n      // Function declarations\n      if (ts.isFunctionDeclaration(node) && node.name) {\n        const methodName = node.name.getText(sourceFile);\n        // Skip if it's the component itself\n        if (methodName !== componentName) {\n          extractMethod(node, methodName, methods, sourceFile, fileContent);\n        }\n      }\n      // Variable declarations with functions\n      else if (ts.isVariableStatement(node)) {\n        for (const declaration of node.declarationList.declarations) {\n          if (\n            declaration.name &&\n            ts.isIdentifier(declaration.name) &&\n            declaration.initializer &&\n            (ts.isArrowFunction(declaration.initializer) ||\n              ts.isFunctionExpression(declaration.initializer))\n          ) {\n            const methodName = declaration.name.getText(sourceFile);\n            // Skip if it's the component itself\n            if (methodName !== componentName) {\n              extractMethod(\n                declaration,\n                methodName,\n                methods,\n                sourceFile,\n                fileContent\n              );\n            }\n          }\n        }\n      }\n      // Continue searching in children\n      ts.forEachChild(node, (child) =>\n        extractAllFunctions(child, methods, sourceFile, fileContent)\n      );\n    }\n\n    // Helper to extract a method from a node\n    function extractMethod(\n      node: ts.Node,\n      methodName: string,\n      methods: MethodDefinition[],\n      sourceFile: ts.SourceFile,\n      fileContent: string\n    ) {\n      // Skip if we've already added this method\n      if (methodNames.has(methodName)) {\n        return;\n      }\n\n      let params: ParamDefinition[] = [];\n      let returnType = \"void\";\n\n      // Extract parameters based on node type\n      if (\n        ts.isFunctionDeclaration(node) ||\n        ts.isFunctionExpression(node) ||\n        ts.isArrowFunction(node) ||\n        ts.isMethodDeclaration(node)\n      ) {\n        if (\"parameters\" in node) {\n          params = node.parameters.map((param) => {\n            const name = param.name.getText(sourceFile);\n            let type = \"any\";\n\n            if (param.type) {\n              type = param.type.getText(sourceFile);\n            }\n\n            return {\n              name,\n              type,\n              description: \"\",\n              optional: param.questionToken !== undefined || param.initializer !== undefined,\n            };\n          });\n        }\n\n        // Extract return type if present\n        if (\"type\" in node && node.type) {\n          returnType = node.type.getText(sourceFile);\n        }\n      }\n\n      // Extract method code\n      const start = node.pos;\n      const end = node.end;\n      const code = fileContent.substring(start, end);\n\n      const declarationLineStart = sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1;\n      const declarationLineEnd = sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line + 1;\n\n      methods.push({\n        name: methodName,\n        description: \"\",\n        params,\n        returnType,\n        code,\n        declarationLineStart,\n        declarationLineEnd,\n      });\n\n      methodNames.add(methodName);\n\n      // Debug log for extracted code\n      if (methodName.toLowerCase().includes(\"zach\")) {\n        console.log(`[DEBUG ZACH EXTRACT] Extracted method: ${methodName}`);\n        console.log(`[DEBUG ZACH EXTRACT] Extracted code:\\n---\\n${code}\\n---`);\n      }\n\n      debug(`Extracted method: ${methodName}`);\n    }\n\n    // Run the component search\n    ts.forEachChild(sourceFile, findComponentNode);\n\n    // Process the component node if found\n    if (componentNode && isFoundComponent) {\n      debug(`Component node found, extracting methods for: ${componentName}`);\n      \n      // For class components, process all methods in the class\n      if (ts.isClassDeclaration(componentNode)) {\n        ts.forEachChild(componentNode, processNodeForMethods);\n      } \n      // For function components, we extract any functions defined inside them\n      else {\n        extractAllFunctions(sourceFile, methods, sourceFile, fileContent);\n        // --- PATCH: Always add main function component as a method if none found ---\n        if (methods.length === 0) {\n          // Find the main function node and add it as a method\n          let fnNode: ts.FunctionDeclaration | ts.VariableDeclaration | undefined = undefined;\n          if (ts.isFunctionDeclaration(componentNode)) {\n            fnNode = componentNode;\n          } else if (ts.isVariableStatement(componentNode)) {\n            for (const declaration of componentNode.declarationList.declarations) {\n              if (\n                declaration.name &&\n                ts.isIdentifier(declaration.name) &&\n                declaration.name.text === componentName &&\n                declaration.initializer &&\n                (ts.isArrowFunction(declaration.initializer) || ts.isFunctionExpression(declaration.initializer))\n              ) {\n                fnNode = declaration;\n                break;\n              }\n            }\n          }\n          if (fnNode) {\n            extractMethod(\n              fnNode,\n              componentName,\n              methods,\n              sourceFile,\n              fileContent\n            );\n          }\n        }\n        // --- END PATCH ---\n      }\n    } else {\n      debug(\n        `Component node not found, extracting all functions in file for: ${componentName}`\n      );\n      extractAllFunctions(sourceFile, methods, sourceFile, fileContent);\n    }\n\n    debug(\n      `Extracted ${methods.length} methods for component: ${componentName}`\n    );\n    return methods;\n  } catch (error) {\n    console.error(\n      `Error extracting methods from component ${componentName}:`,\n      error\n    );\n    return [];\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_extractcomponentmethods",
    "imports": [
      "MethodDefinition",
      "ParamDefinition",
      "EntityDeclaration"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_core_parser_ast-utils_extractcomponentmethods",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_ast-utils_extractcomponentmethods",
        "target": "paramdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_core_parser_ast-utils_extractcomponentmethods",
        "target": "entitydeclaration",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/^[a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 394,
        "targetFunction": "test"
      }
    ],
    "methods": []
  },
  {
    "name": "findComponentNode",
    "kind": "function",
    "code": "function findComponentNode(node: ts.Node) {\n      if (isFoundComponent) return;\n\n      // Class component\n      if (\n        ts.isClassDeclaration(node) &&\n        node.name &&\n        node.name.text === componentName\n      ) {\n        componentNode = node;\n        isFoundComponent = true;\n        return;\n      }\n\n      // Function component (function declaration)\n      if (\n        ts.isFunctionDeclaration(node) &&\n        node.name &&\n        node.name.text === componentName\n      ) {\n        componentNode = node;\n        isFoundComponent = true;\n        return;\n      }\n\n      // Function component (variable declaration with function expression or arrow function)\n      if (ts.isVariableStatement(node)) {\n        for (const declaration of node.declarationList.declarations) {\n          if (\n            declaration.name &&\n            ts.isIdentifier(declaration.name) &&\n            declaration.name.text === componentName\n          ) {\n            componentNode = node;\n            isFoundComponent = true;\n            return;\n          }\n        }\n      }\n\n      // Continue searching\n      ts.forEachChild(node, findComponentNode);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_findcomponentnode",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "processNodeForMethods",
    "kind": "function",
    "code": "function processNodeForMethods(node: ts.Node) {\n      // Class methods\n      if (ts.isMethodDeclaration(node) && node.name) {\n        const methodName = node.name.getText(sourceFile);\n        extractMethod(node, methodName, methods, sourceFile, fileContent);\n      }\n      // Property assignments with arrow functions\n      else if (\n        ts.isPropertyAssignment(node) &&\n        node.initializer &&\n        (ts.isArrowFunction(node.initializer) ||\n          ts.isFunctionExpression(node.initializer))\n      ) {\n        const methodName = node.name.getText(sourceFile);\n        extractMethod(node, methodName, methods, sourceFile, fileContent);\n      }\n      // Continue recursively\n      ts.forEachChild(node, processNodeForMethods);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_processnodeformethods",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractAllFunctions",
    "kind": "function",
    "code": "function extractAllFunctions(\n      node: ts.Node,\n      methods: MethodDefinition[],\n      sourceFile: ts.SourceFile,\n      fileContent: string\n    ) {\n      // Function declarations\n      if (ts.isFunctionDeclaration(node) && node.name) {\n        const methodName = node.name.getText(sourceFile);\n        // Skip if it's the component itself\n        if (methodName !== componentName) {\n          extractMethod(node, methodName, methods, sourceFile, fileContent);\n        }\n      }\n      // Variable declarations with functions\n      else if (ts.isVariableStatement(node)) {\n        for (const declaration of node.declarationList.declarations) {\n          if (\n            declaration.name &&\n            ts.isIdentifier(declaration.name) &&\n            declaration.initializer &&\n            (ts.isArrowFunction(declaration.initializer) ||\n              ts.isFunctionExpression(declaration.initializer))\n          ) {\n            const methodName = declaration.name.getText(sourceFile);\n            // Skip if it's the component itself\n            if (methodName !== componentName) {\n              extractMethod(\n                declaration,\n                methodName,\n                methods,\n                sourceFile,\n                fileContent\n              );\n            }\n          }\n        }\n      }\n      // Continue searching in children\n      ts.forEachChild(node, (child) =>\n        extractAllFunctions(child, methods, sourceFile, fileContent)\n      );\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_extractallfunctions",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "extractMethod",
    "kind": "function",
    "code": "function extractMethod(\n      node: ts.Node,\n      methodName: string,\n      methods: MethodDefinition[],\n      sourceFile: ts.SourceFile,\n      fileContent: string\n    ) {\n      // Skip if we've already added this method\n      if (methodNames.has(methodName)) {\n        return;\n      }\n\n      let params: ParamDefinition[] = [];\n      let returnType = \"void\";\n\n      // Extract parameters based on node type\n      if (\n        ts.isFunctionDeclaration(node) ||\n        ts.isFunctionExpression(node) ||\n        ts.isArrowFunction(node) ||\n        ts.isMethodDeclaration(node)\n      ) {\n        if (\"parameters\" in node) {\n          params = node.parameters.map((param) => {\n            const name = param.name.getText(sourceFile);\n            let type = \"any\";\n\n            if (param.type) {\n              type = param.type.getText(sourceFile);\n            }\n\n            return {\n              name,\n              type,\n              description: \"\",\n              optional: param.questionToken !== undefined || param.initializer !== undefined,\n            };\n          });\n        }\n\n        // Extract return type if present\n        if (\"type\" in node && node.type) {\n          returnType = node.type.getText(sourceFile);\n        }\n      }\n\n      // Extract method code\n      const start = node.pos;\n      const end = node.end;\n      const code = fileContent.substring(start, end);\n\n      const declarationLineStart = sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line + 1;\n      const declarationLineEnd = sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line + 1;\n\n      methods.push({\n        name: methodName,\n        description: \"\",\n        params,\n        returnType,\n        code,\n        declarationLineStart,\n        declarationLineEnd,\n      });\n\n      methodNames.add(methodName);\n\n      // Debug log for extracted code\n      if (methodName.toLowerCase().includes(\"zach\")) {\n        console.log(`[DEBUG ZACH EXTRACT] Extracted method: ${methodName}`);\n        console.log(`[DEBUG ZACH EXTRACT] Extracted code:\\n---\\n${code}\\n---`);\n      }\n\n      debug(`Extracted method: ${methodName}`);\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/core/parser/ast-utils.ts",
    "slug": "src_core_parser_ast-utils_extractmethod",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "isPortInUse",
    "kind": "function",
    "code": "export function isPortInUse(port: number): Promise<boolean> {\n  return new Promise((resolve) => {\n    const server = net.createServer();\n    server.once(\"error\", () => {\n      resolve(true); // Port is in use\n    });\n    server.once(\"listening\", () => {\n      server.close();\n      resolve(false); // Port is free\n    });\n    server.listen(port);\n  });\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/utils/cli-helpers.ts",
    "slug": "src_cli_utils_cli-helpers_isportinuse",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "findFreePort",
    "kind": "function",
    "code": "export async function findFreePort(startPort: number): Promise<number> {\n  let port = startPort;\n  while (await isPortInUse(port)) {\n    console.log(`Port ${port} is already in use, trying next port...`);\n    port++;\n  }\n  return port;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/cli/utils/cli-helpers.ts",
    "slug": "src_cli_utils_cli-helpers_findfreeport",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "VectorSimilarityService",
    "kind": "class",
    "code": "export class VectorSimilarityService {\n  private vectorDb: VectorEntry[] = [];\n  private similarityThreshold: number;\n  private ollamaUrl: string = process.env.OLLAMA_URL || \"http://localhost:11434\";\n  private ollamaEmbeddingModel: string = process.env.OLLAMA_EMBEDDING_MODEL || \"nomic-embed-text:latest\";\n\n  constructor(options: VectorSimilarityOptions) {\n    // Always use Ollama for embeddings by default\n    this.ollamaUrl = options.ollamaUrl || process.env.OLLAMA_URL || \"http://localhost:11434\";\n    this.ollamaEmbeddingModel = options.ollamaEmbeddingModel || process.env.OLLAMA_EMBEDDING_MODEL || \"nomic-embed-text:latest\";\n\n    // Use a lower default threshold to catch more potential matches\n    this.similarityThreshold =\n      options.similarityThreshold ||\n      (process.env.SIMILARITY_THRESHOLD\n        ? parseFloat(process.env.SIMILARITY_THRESHOLD)\n        : 0.3); // Use a 30% threshold by default for better detection\n\n    console.log(\n      `Vector similarity service initialized with Ollama embeddings (model: ${this.ollamaEmbeddingModel}) at ${this.ollamaUrl} and threshold: ${this.similarityThreshold}`\n    );\n  }\n\n  /**\n   * Generate embedding vector using Ollama\n   */\n  private async generateOllamaEmbedding(text: string): Promise<number[]> {\n    // Ensure we have text to embed\n    if (!text || text.trim() === \"\") {\n      console.warn(\"Empty text provided for embedding generation\");\n      return new Array(1536).fill(0);\n    }\n    \n    // Trim text if it's too long (Ollama may have token limits)\n    const trimmedText = text.length > 8000 ? text.substring(0, 8000) : text;\n    \n    try {\n      console.log(`Generating embedding for text (length: ${trimmedText.length}) with model: ${this.ollamaEmbeddingModel}`);\n      \n      // Make the request to Ollama\n      const response = await axios.post(`${this.ollamaUrl}/api/embeddings`, {\n        model: this.ollamaEmbeddingModel,\n        prompt: trimmedText,\n      });\n\n      // Validate the response\n      if (response.data && response.data.embedding && response.data.embedding.length > 0) {\n        console.log(`Successfully generated embedding vector with length: ${response.data.embedding.length}`);\n        return response.data.embedding;\n      } else {\n        console.error(\"Unexpected response format from Ollama:\", response.data);\n        throw new Error(\"Invalid embedding response from Ollama\");\n      }\n    } catch (error) {\n      console.error(\"Error generating embedding with Ollama:\", error);\n      console.error(\"Make sure Ollama is running and the embedding model is available\");\n      \n      // For debugging purposes, let's try to make a simple request to Ollama\n      try {\n        const testResponse = await axios.get(`${this.ollamaUrl}/api/tags`);\n        console.log(\"Ollama is running. Available models:\", testResponse.data);\n      } catch (testError) {\n        console.error(\"Failed to connect to Ollama server. Is it running?\", testError);\n      }\n      \n      // Return a zero vector as fallback (nomic-embed-text uses 768 dimensions)\n      return new Array(768).fill(0);\n    }\n  }\n\n  /**\n   * Generate embedding vector for a method\n   */\n  private async generateEmbedding(method: MethodDefinition): Promise<number[]> {\n    // Create a text representation of the method\n    const paramsText = method.params\n      ? method.params.map((param) => `${param.name}: ${param.type}`).join(\", \")\n      : \"\";\n\n    const methodText = `\\nMethod Name: ${method.name}\\nParameters: ${paramsText}\\nReturn Type: ${method.returnType || \"void\"}\\nDescription: ${method.description || \"\"}\\nImplementation: ${method.code || \"\"}\\n    `.trim();\n\n    // Always use Ollama for embeddings\n    return this.generateOllamaEmbedding(methodText);\n  }\n\n  /**\n   * Generate embedding vector for a component definition\n   */\n  private async generateComponentEmbedding(component: ComponentDefinition): Promise<number[]> {\n    // Create a text representation of the component\n    const componentText = `\nComponent Name: ${component.name}\nDescription: ${component.description || \"\"}\nFile Path: ${component.filePath || \"unknown-path\"}\nKind: ${component.type || \"component\"} \nSource Code:\n${component.sourceCode || component.code || \"\"}\n    `.trim();\n\n    // Always use Ollama for embeddings\n    return this.generateOllamaEmbedding(componentText);\n  }\n\n  /**\n   * Add a component definition to the vector database\n   */\n  private async addComponentDefinitionToDb(component: ComponentDefinition): Promise<void> {\n    // Don't add components without source code (either sourceCode or code property)\n    if (!(component.sourceCode?.trim() || component.code?.trim())) {\n      console.warn(`Skipping component definition ${component.name} without source code.`);\n      return;\n    }\n    if (!component.filePath) {\n      console.warn(`Skipping component definition ${component.name} due to missing filePath.`);\n      return;\n    }\n\n    try {\n      // Generate embedding vector for the component definition\n      const vector = await this.generateComponentEmbedding(component);\n\n      const normalizedPath = path.normalize(component.filePath);\n      const id = `${component.name}__COMPONENT_DEFINITION__${normalizedPath}`;\n\n      this.vectorDb.push({\n        id,\n        vector,\n        componentName: component.name,\n        methodName: \"\", // Empty string for component-level entries\n        filePath: normalizedPath,\n        code: component.sourceCode || component.code || \"\", // This is what's used for display\n        description: component.description || \"\",\n      });\n      console.log(`Added component definition to vector DB: ${id}`);\n    } catch (error) {\n      console.error(\n        `Error adding component definition ${component.name} to vector database:`,\n        error\n      );\n    }\n  }\n\n  /**\n   * Add a method to the vector database\n   */\n  async addMethod(\n    method: MethodDefinition,\n    componentName: string,\n    filePath: string\n  ): Promise<void> {\n    // Don't add empty methods\n    if (!method.code || method.code.trim() === \"\") return;\n\n    try {\n      // Generate embedding vector for the method\n      const vector = await this.generateEmbedding(method);\n\n      // Normalize the file path to ensure consistent comparison\n      const normalizedPath = path.normalize(filePath);\n\n      // Create a unique ID based on component, method name and path\n      const id = `${componentName}_${method.name}_${normalizedPath}`;\n\n      // *** Debug log for adding ***\n      if (method.name.toLowerCase().includes(\"zach\")) {\n        console.log(`[DEBUG ZACH ADD EMBED-ONLY] Adding method: ${id}`);\n        console.log(\n          `[DEBUG ZACH ADD EMBED-ONLY] Original code:\\n---\\n${method.code}\\n---`\n        );\n      }\n\n      // Add to vector database\n      this.vectorDb.push({\n        id,\n        vector,\n        methodName: method.name,\n        componentName,\n        filePath: normalizedPath,\n        code: method.code,\n      });\n    } catch (error) {\n      console.error(\n        `Error adding method ${method.name} to vector database:`,\n        error\n      );\n    }\n  }\n\n  /**\n   * Find similar methods for a given method\n   */\n  async findSimilarMethods(\n    method: MethodDefinition,\n    componentName: string,\n    filePath: string\n  ): Promise<SimilarityWarning[]> {\n    // Generate embedding for the input method\n    const inputVector = await this.generateEmbedding(method);\n    const warnings: SimilarityWarning[] = [];\n\n    for (const entry of this.vectorDb) {\n      // Skip self-comparison\n      if (\n        entry.componentName === componentName &&\n        entry.methodName === method.name &&\n        entry.filePath === filePath\n      ) {\n        continue;\n      }\n      const similarity = cosineSimilarity(inputVector, entry.vector);\n      if (similarity >= this.similarityThreshold) {\n        warnings.push({\n          similarTo: entry.methodName,\n          score: similarity,\n          reason: `Similar to ${entry.methodName} in ${entry.componentName}`,\n          filePath: entry.filePath,\n          code: entry.code,\n        });\n      }\n    }\n    return warnings;\n  }\n\n  /**\n   * Process a component definition to add its main information to the vector database.\n   */\n  async processComponentDefinition(component: ComponentDefinition): Promise<void> {\n    console.log(`Processing component definition for: ${component.name}`);\n    \n    if (!component.name) {\n      console.warn(\"Skipping component definition with no name.\");\n      return;\n    }\n    // Check for main code in either sourceCode or code property\n    if (!(component.sourceCode?.trim() || component.code?.trim())) {\n      console.warn(`Skipping component definition ${component.name} due to empty source code.`);\n      return;\n    }\n    if (!component.filePath) {\n      console.warn(`Skipping component definition ${component.name} due to missing filePath.`);\n      return;\n    }\n\n    try {\n      await this.addComponentDefinitionToDb(component);\n      console.log(`Successfully processed component definition for: ${component.name}`);\n    } catch (error) {\n      console.error(`Error processing component definition ${component.name}:`, error);\n    }\n  }\n\n  /**\n   * Process all methods in a component to find similarities\n   */\n  async processComponentMethods(\n    componentName: string,\n    methods: MethodDefinition[],\n    filePath: string\n  ): Promise<MethodDefinition[]> {\n    console.log(`Processing ${methods.length} methods for component: ${componentName}`);\n    \n    // Skip if no methods to process\n    if (!methods || methods.length === 0) {\n      console.warn(`No methods to process for component: ${componentName}`);\n      return methods;\n    }\n    \n    // Process each method\n    let processedCount = 0;\n    let errorCount = 0;\n    \n    for (const method of methods) {\n      try {\n        // Skip methods without code\n        if (!method.code || method.code.trim() === \"\") {\n          console.warn(`Skipping method without code: ${method.name} in ${componentName}`);\n          continue;\n        }\n        \n        // Add method to vector database\n        await this.addMethod(method, componentName, filePath);\n        processedCount++;\n        \n        // Find similar methods\n        const warnings = await this.findSimilarMethods(method, componentName, filePath);\n        method.similarityWarnings = warnings;\n        \n        if (warnings.length > 0) {\n          console.log(`Found ${warnings.length} similar methods for ${method.name} in ${componentName}`);\n        }\n      } catch (error) {\n        console.error(`Error processing method ${method.name} in ${componentName}:`, error);\n        errorCount++;\n      }\n    }\n    \n    console.log(`Processed ${processedCount}/${methods.length} methods for ${componentName} (${errorCount} errors)`);\n    console.log(`Vector database now contains ${this.vectorDb.length} entries`);\n    \n    return methods;\n  }\n\n  /**\n   * Export the vector database to JSON\n   */\n  exportVectorDatabase(): string {\n    return JSON.stringify(this.vectorDb, null, 2);\n  }\n\n  /**\n   * Clear the in-memory vector database\n   */\n  public clearVectorDatabase(): void {\n    this.vectorDb = [];\n    console.log(\"In-memory vector database cleared.\");\n    // Optionally, also delete the file if it exists to prevent reloading old data on next full app restart\n    // if (fs.existsSync(this.vectorDbPath)) {\n    //   try {\n    //     fs.unlinkSync(this.vectorDbPath);\n    //     console.log(`Deleted vector database file: ${this.vectorDbPath}`);\n    //   } catch (err) {\n    //     console.error(`Error deleting vector database file ${this.vectorDbPath}:`, err);\n    //   }\n    // }\n  }\n\n  /**\n   * Import vector database from JSON\n   */\n  importVectorDatabase(json: string): void {\n    try {\n      const data = JSON.parse(json);\n      if (Array.isArray(data)) {\n        this.vectorDb = data;\n      } else {\n        throw new Error(\"Invalid vector database format\");\n      }\n    } catch (error) {\n      console.error(\"Error importing vector database:\", error);\n    }\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ai/vector-similarity/vector-similarity.ts",
    "slug": "src_ai_vector-similarity_vector-similarity_vectorsimilarityservice",
    "imports": [
      "OpenAI",
      "ComponentDefinition",
      "MethodDefinition",
      "SimilarityWarning",
      "VectorEntry",
      "VectorSimilarityOptions"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ai_vector-similarity_vector-similarity_vectorsimilarityservice",
        "target": "openai",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_vector-similarity_vector-similarity_vectorsimilarityservice",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_vector-similarity_vector-similarity_vectorsimilarityservice",
        "target": "methoddefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_vector-similarity_vector-similarity_vectorsimilarityservice",
        "target": "similaritywarning",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_vector-similarity_vector-similarity_vectorsimilarityservice",
        "target": "vectorentry",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_vector-similarity_vector-similarity_vectorsimilarityservice",
        "target": "vectorsimilarityoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "`\\nmethod-name:-${method.name}\\nparameters:-${paramstext}\\nreturn-type:-${method.returntype-||-\"void\"}\\ndescription:-${method.description-||-\"\"}\\nimplementation:-${method.code-||-\"\"}\\n-`",
        "type": "uses",
        "weight": 2,
        "context": "calls trim",
        "sourceLine": 91,
        "targetFunction": "trim"
      },
      {
        "target": "`-component-name:-${component.name}-description:-${component.description-||-\"\"}-file-path:-${component.filepath-||-\"unknown-path\"}-kind:-${component.type-||-\"component\"}-source-code:-${component.sourcecode-||-component.code-||-\"\"}-`",
        "type": "uses",
        "weight": 2,
        "context": "calls trim",
        "sourceLine": 102,
        "targetFunction": "trim"
      }
    ],
    "methods": [
      {
        "name": "generateOllamaEmbedding",
        "code": "private async generateOllamaEmbedding(text: string): Promise<number[]> {\n    // Ensure we have text to embed\n    if (!text || text.trim() === \"\") {\n      console.warn(\"Empty text provided for embedding generation\");\n      return new Array(1536).fill(0);\n    }\n    \n    // Trim text if it's too long (Ollama may have token limits)\n    const trimmedText = text.length > 8000 ? text.substring(0, 8000) : text;\n    \n    try {\n      console.log(`Generating embedding for text (length: ${trimmedText.length}) with model: ${this.ollamaEmbeddingModel}`);\n      \n      // Make the request to Ollama\n      const response = await axios.post(`${this.ollamaUrl}/api/embeddings`, {\n        model: this.ollamaEmbeddingModel,\n        prompt: trimmedText,\n      });\n\n      // Validate the response\n      if (response.data && response.data.embedding && response.data.embedding.length > 0) {\n        console.log(`Successfully generated embedding vector with length: ${response.data.embedding.length}`);\n        return response.data.embedding;\n      } else {\n        console.error(\"Unexpected response format from Ollama:\", response.data);\n        throw new Error(\"Invalid embedding response from Ollama\");\n      }\n    } catch (error) {\n      console.error(\"Error generating embedding with Ollama:\", error);\n      console.error(\"Make sure Ollama is running and the embedding model is available\");\n      \n      // For debugging purposes, let's try to make a simple request to Ollama\n      try {\n        const testResponse = await axios.get(`${this.ollamaUrl}/api/tags`);\n        console.log(\"Ollama is running. Available models:\", testResponse.data);\n      } catch (testError) {\n        console.error(\"Failed to connect to Ollama server. Is it running?\", testError);\n      }\n      \n      // Return a zero vector as fallback (nomic-embed-text uses 768 dimensions)\n      return new Array(768).fill(0);\n    }\n  }",
        "returnType": "Promise<number[]>",
        "params": [
          {
            "name": "text",
            "type": "string",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "generateEmbedding",
        "code": "private async generateEmbedding(method: MethodDefinition): Promise<number[]> {\n    // Create a text representation of the method\n    const paramsText = method.params\n      ? method.params.map((param) => `${param.name}: ${param.type}`).join(\", \")\n      : \"\";\n\n    const methodText = `\\nMethod Name: ${method.name}\\nParameters: ${paramsText}\\nReturn Type: ${method.returnType || \"void\"}\\nDescription: ${method.description || \"\"}\\nImplementation: ${method.code || \"\"}\\n    `.trim();\n\n    // Always use Ollama for embeddings\n    return this.generateOllamaEmbedding(methodText);\n  }",
        "returnType": "Promise<number[]>",
        "params": [
          {
            "name": "method",
            "type": "MethodDefinition",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "generateComponentEmbedding",
        "code": "private async generateComponentEmbedding(component: ComponentDefinition): Promise<number[]> {\n    // Create a text representation of the component\n    const componentText = `\nComponent Name: ${component.name}\nDescription: ${component.description || \"\"}\nFile Path: ${component.filePath || \"unknown-path\"}\nKind: ${component.type || \"component\"} \nSource Code:\n${component.sourceCode || component.code || \"\"}\n    `.trim();\n\n    // Always use Ollama for embeddings\n    return this.generateOllamaEmbedding(componentText);\n  }",
        "returnType": "Promise<number[]>",
        "params": [
          {
            "name": "component",
            "type": "ComponentDefinition",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "addComponentDefinitionToDb",
        "code": "private async addComponentDefinitionToDb(component: ComponentDefinition): Promise<void> {\n    // Don't add components without source code (either sourceCode or code property)\n    if (!(component.sourceCode?.trim() || component.code?.trim())) {\n      console.warn(`Skipping component definition ${component.name} without source code.`);\n      return;\n    }\n    if (!component.filePath) {\n      console.warn(`Skipping component definition ${component.name} due to missing filePath.`);\n      return;\n    }\n\n    try {\n      // Generate embedding vector for the component definition\n      const vector = await this.generateComponentEmbedding(component);\n\n      const normalizedPath = path.normalize(component.filePath);\n      const id = `${component.name}__COMPONENT_DEFINITION__${normalizedPath}`;\n\n      this.vectorDb.push({\n        id,\n        vector,\n        componentName: component.name,\n        methodName: \"\", // Empty string for component-level entries\n        filePath: normalizedPath,\n        code: component.sourceCode || component.code || \"\", // This is what's used for display\n        description: component.description || \"\",\n      });\n      console.log(`Added component definition to vector DB: ${id}`);\n    } catch (error) {\n      console.error(\n        `Error adding component definition ${component.name} to vector database:`,\n        error\n      );\n    }\n  }",
        "returnType": "Promise<void>",
        "params": [
          {
            "name": "component",
            "type": "ComponentDefinition",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "addMethod",
        "code": "async addMethod(\n    method: MethodDefinition,\n    componentName: string,\n    filePath: string\n  ): Promise<void> {\n    // Don't add empty methods\n    if (!method.code || method.code.trim() === \"\") return;\n\n    try {\n      // Generate embedding vector for the method\n      const vector = await this.generateEmbedding(method);\n\n      // Normalize the file path to ensure consistent comparison\n      const normalizedPath = path.normalize(filePath);\n\n      // Create a unique ID based on component, method name and path\n      const id = `${componentName}_${method.name}_${normalizedPath}`;\n\n      // *** Debug log for adding ***\n      if (method.name.toLowerCase().includes(\"zach\")) {\n        console.log(`[DEBUG ZACH ADD EMBED-ONLY] Adding method: ${id}`);\n        console.log(\n          `[DEBUG ZACH ADD EMBED-ONLY] Original code:\\n---\\n${method.code}\\n---`\n        );\n      }\n\n      // Add to vector database\n      this.vectorDb.push({\n        id,\n        vector,\n        methodName: method.name,\n        componentName,\n        filePath: normalizedPath,\n        code: method.code,\n      });\n    } catch (error) {\n      console.error(\n        `Error adding method ${method.name} to vector database:`,\n        error\n      );\n    }\n  }",
        "returnType": "Promise<void>",
        "params": [
          {
            "name": "method",
            "type": "MethodDefinition",
            "description": "",
            "optional": false
          },
          {
            "name": "componentName",
            "type": "string",
            "description": "",
            "optional": false
          },
          {
            "name": "filePath",
            "type": "string",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "findSimilarMethods",
        "code": "async findSimilarMethods(\n    method: MethodDefinition,\n    componentName: string,\n    filePath: string\n  ): Promise<SimilarityWarning[]> {\n    // Generate embedding for the input method\n    const inputVector = await this.generateEmbedding(method);\n    const warnings: SimilarityWarning[] = [];\n\n    for (const entry of this.vectorDb) {\n      // Skip self-comparison\n      if (\n        entry.componentName === componentName &&\n        entry.methodName === method.name &&\n        entry.filePath === filePath\n      ) {\n        continue;\n      }\n      const similarity = cosineSimilarity(inputVector, entry.vector);\n      if (similarity >= this.similarityThreshold) {\n        warnings.push({\n          similarTo: entry.methodName,\n          score: similarity,\n          reason: `Similar to ${entry.methodName} in ${entry.componentName}`,\n          filePath: entry.filePath,\n          code: entry.code,\n        });\n      }\n    }\n    return warnings;\n  }",
        "returnType": "Promise<SimilarityWarning[]>",
        "params": [
          {
            "name": "method",
            "type": "MethodDefinition",
            "description": "",
            "optional": false
          },
          {
            "name": "componentName",
            "type": "string",
            "description": "",
            "optional": false
          },
          {
            "name": "filePath",
            "type": "string",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "processComponentDefinition",
        "code": "async processComponentDefinition(component: ComponentDefinition): Promise<void> {\n    console.log(`Processing component definition for: ${component.name}`);\n    \n    if (!component.name) {\n      console.warn(\"Skipping component definition with no name.\");\n      return;\n    }\n    // Check for main code in either sourceCode or code property\n    if (!(component.sourceCode?.trim() || component.code?.trim())) {\n      console.warn(`Skipping component definition ${component.name} due to empty source code.`);\n      return;\n    }\n    if (!component.filePath) {\n      console.warn(`Skipping component definition ${component.name} due to missing filePath.`);\n      return;\n    }\n\n    try {\n      await this.addComponentDefinitionToDb(component);\n      console.log(`Successfully processed component definition for: ${component.name}`);\n    } catch (error) {\n      console.error(`Error processing component definition ${component.name}:`, error);\n    }\n  }",
        "returnType": "Promise<void>",
        "params": [
          {
            "name": "component",
            "type": "ComponentDefinition",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "processComponentMethods",
        "code": "async processComponentMethods(\n    componentName: string,\n    methods: MethodDefinition[],\n    filePath: string\n  ): Promise<MethodDefinition[]> {\n    console.log(`Processing ${methods.length} methods for component: ${componentName}`);\n    \n    // Skip if no methods to process\n    if (!methods || methods.length === 0) {\n      console.warn(`No methods to process for component: ${componentName}`);\n      return methods;\n    }\n    \n    // Process each method\n    let processedCount = 0;\n    let errorCount = 0;\n    \n    for (const method of methods) {\n      try {\n        // Skip methods without code\n        if (!method.code || method.code.trim() === \"\") {\n          console.warn(`Skipping method without code: ${method.name} in ${componentName}`);\n          continue;\n        }\n        \n        // Add method to vector database\n        await this.addMethod(method, componentName, filePath);\n        processedCount++;\n        \n        // Find similar methods\n        const warnings = await this.findSimilarMethods(method, componentName, filePath);\n        method.similarityWarnings = warnings;\n        \n        if (warnings.length > 0) {\n          console.log(`Found ${warnings.length} similar methods for ${method.name} in ${componentName}`);\n        }\n      } catch (error) {\n        console.error(`Error processing method ${method.name} in ${componentName}:`, error);\n        errorCount++;\n      }\n    }\n    \n    console.log(`Processed ${processedCount}/${methods.length} methods for ${componentName} (${errorCount} errors)`);\n    console.log(`Vector database now contains ${this.vectorDb.length} entries`);\n    \n    return methods;\n  }",
        "returnType": "Promise<MethodDefinition[]>",
        "params": [
          {
            "name": "componentName",
            "type": "string",
            "description": "",
            "optional": false
          },
          {
            "name": "methods",
            "type": "MethodDefinition[]",
            "description": "",
            "optional": false
          },
          {
            "name": "filePath",
            "type": "string",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "exportVectorDatabase",
        "code": "exportVectorDatabase(): string {\n    return JSON.stringify(this.vectorDb, null, 2);\n  }",
        "returnType": "string",
        "params": []
      },
      {
        "name": "clearVectorDatabase",
        "code": "public clearVectorDatabase(): void {\n    this.vectorDb = [];\n    console.log(\"In-memory vector database cleared.\");\n    // Optionally, also delete the file if it exists to prevent reloading old data on next full app restart\n    // if (fs.existsSync(this.vectorDbPath)) {\n    //   try {\n    //     fs.unlinkSync(this.vectorDbPath);\n    //     console.log(`Deleted vector database file: ${this.vectorDbPath}`);\n    //   } catch (err) {\n    //     console.error(`Error deleting vector database file ${this.vectorDbPath}:`, err);\n    //   }\n    // }\n  }",
        "returnType": "void",
        "params": []
      },
      {
        "name": "importVectorDatabase",
        "code": "importVectorDatabase(json: string): void {\n    try {\n      const data = JSON.parse(json);\n      if (Array.isArray(data)) {\n        this.vectorDb = data;\n      } else {\n        throw new Error(\"Invalid vector database format\");\n      }\n    } catch (error) {\n      console.error(\"Error importing vector database:\", error);\n    }\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "json",
            "type": "string",
            "description": "",
            "optional": false
          }
        ]
      }
    ]
  },
  {
    "name": "CodebaseChatService",
    "kind": "class",
    "code": "export class CodebaseChatService {\n  private openai: OpenAI | null = null;\n  public vectorService: VectorSimilarityService;\n  private components: ComponentDefinition[] = [];\n  private useOllama: boolean;\n  private ollamaUrl: string = process.env.OLLAMA_URL || \"http://localhost:11434\";\n  private ollamaModel: string = process.env.OLLAMA_MODEL || \"nomic-embed-text:latest\";\n  private ollamaEmbeddingModel: string = process.env.OLLAMA_EMBEDDING_MODEL || \"nomic-embed-text:latest\";\n  private chatModel: string;\n\n  /**\n   * Create a new CodebaseChatService.\n   * @param components List of parsed codebase components.\n   * @param options Chat service options (see {@link ChatServiceOptions}).\n   * @example\n   * const chatService = new CodebaseChatService(components, { apiKey: 'sk-...', useOllama: false });\n   */\n  constructor(components: ComponentDefinition[], options: ChatServiceOptions) {\n    this.components = components;\n\n    // Use useOpenAI if explicitly set, otherwise use !useOllama\n    const useOpenAI =\n      options.useOpenAI !== undefined\n        ? options.useOpenAI\n        : !(options.useOllama || false);\n\n    this.useOllama = !useOpenAI;\n\n    // Initialize vector service for embeddings and similarity search\n    this.vectorService = new VectorSimilarityService({\n      apiKey: options.apiKey,\n      ollamaUrl: options.ollamaUrl,\n      ollamaEmbeddingModel: options.ollamaEmbeddingModel,\n      similarityThreshold: options.similarityThreshold,\n    });\n\n    // Ollama chat config\n    this.ollamaUrl = options.ollamaUrl || process.env.OLLAMA_URL || \"http://localhost:11434\";\n    this.ollamaModel = options.ollamaModel || process.env.OLLAMA_MODEL || \"nomic-embed-text:latest\";\n    this.ollamaEmbeddingModel = options.ollamaEmbeddingModel || process.env.OLLAMA_EMBEDDING_MODEL || \"nomic-embed-text:latest\";\n    this.chatModel = options.chatModel || process.env.CHAT_MODEL || \"gemma3:4b\";\n    console.log(`Using Ollama for chat (${this.chatModel}) at ${this.ollamaUrl}`);\n\n    // If OpenAI is selected for chat, configure it (not for embeddings)\n    if (!this.useOllama) {\n      if (!options.apiKey) {\n        throw new Error(\"API key is required when using OpenAI\");\n      }\n      this.openai = new OpenAI({\n        apiKey: options.apiKey,\n      });\n      this.chatModel = options.chatModel || \"gpt-3.5-turbo\";\n    }\n\n    // Initialize the vector database with all component methods\n    // Only initialize if we have components and won't be importing a saved database\n    if (components.length > 0) {\n      // Delay initialization to allow for manual import\n      setTimeout(() => {\n        const vectorDbString = this.vectorService.exportVectorDatabase();\n        const vectorDb = JSON.parse(vectorDbString);\n        if (true || vectorDb.length === 0) { // Temporarily forcing reinitialization\n          console.log(\"Vector database is empty or reinitialization is forced, initializing from components...\");\n          this.initializeVectorDatabase();\n        } else {\n          console.log(`Vector database already contains ${vectorDb.length} entries, skipping initialization`);\n        }\n      }, 100);\n    }\n  }\n\n  /**\n   * Verify the integrity of the vector database\n   * @returns true if the database is valid, false otherwise\n   */\n  public verifyVectorDatabase(): boolean {\n    const vectorDbString = this.vectorService.exportVectorDatabase();\n    const vectorDb = JSON.parse(vectorDbString);\n    \n    if (vectorDb.length === 0) {\n      console.error(\"Vector database is empty\");\n      return false;\n    }\n    \n    let validEntries = 0;\n    let invalidEntries = 0;\n    \n    for (const entry of vectorDb) {\n      if (entry.vector && entry.vector.length > 0 && entry.componentName && entry.code) {\n        validEntries++;\n      } else {\n        invalidEntries++;\n        console.warn(`Invalid entry: ${entry.componentName}.${entry.methodName}`);\n      }\n    }\n    \n    console.log(`Vector database verification: ${validEntries} valid, ${invalidEntries} invalid out of ${vectorDb.length} total`);\n    return invalidEntries === 0;\n  }\n\n  /**\n   * Initialize the vector database with component definitions and their methods.\n   * This should be called once after instantiation.\n   * @private\n   */\n  private async initializeVectorDatabase(): Promise<void> {\n    this.vectorService.clearVectorDatabase(); // Ensure we start with a clean slate\n    console.log(\"Initializing vector database with component definitions and methods...\");\n    console.log(`Found ${this.components.length} components to process`);\n\n    let processedComponentDefinitionCount = 0;\n    let processedComponentWithMethodsCount = 0;\n    let totalMethodCount = 0;\n\n    // Process each component\n    for (const component of this.components) {\n      if (component.filePath && component.filePath.endsWith('components/ui/card.tsx')) {\n        console.log('DEBUG: ComponentDefinition for card.tsx:', JSON.stringify(component, null, 2));\n      }\n      try {\n        if (!component.name) {\n          console.warn(\"Skipping component with no name\");\n          continue;\n        }\n\n        // Process the component definition itself\n        // This will call a new method in VectorSimilarityService to handle component-level embedding\n        console.log(`Processing component definition: ${component.name}`);\n        await this.vectorService.processComponentDefinition(component);\n        processedComponentDefinitionCount++;\n\n        // Process methods if they exist\n        if (component.methods && component.methods.length > 0) {\n          console.log(`Processing methods for component: ${component.name} (${component.methods.length} methods)`);\n          totalMethodCount += component.methods.length;\n\n          await this.vectorService.processComponentMethods(\n            component.name,\n            component.methods,\n            component.filePath || \"unknown-path\"\n          );\n          processedComponentWithMethodsCount++;\n        } else {\n          console.log(`Component ${component.name} has no methods to process.`);\n        }\n\n      } catch (error) {\n        console.error(`Error processing component ${component.name}:`, error);\n      }\n    }\n\n    const vectorDbString = this.vectorService.exportVectorDatabase();\n    const vectorDb = JSON.parse(vectorDbString);\n\n    console.log(`Vector database initialization complete:`);\n    console.log(`- Processed ${processedComponentDefinitionCount}/${this.components.length} component definitions`);\n    console.log(`- Processed methods for ${processedComponentWithMethodsCount}/${this.components.length} components with methods`);\n    console.log(`- Processed ${totalMethodCount} total methods`);\n    console.log(`- Vector database contains ${vectorDb.length} entries`);\n\n    // If the vector database is empty despite having components, log a warning\n    if (vectorDb.length === 0 && this.components.length > 0) {\n      console.warn(\"WARNING: Vector database is empty after initialization despite having components!\");\n      console.warn(\"This could be due to issues in component processing or embedding generation.\");\n      console.warn(\"Check that Ollama embedding service is running and accessible.\");\n    }\n  }\n\n  /**\n   * Generate embeddings for a user query\n   */\n  /**\n   * Generate an embedding vector for a user query.\n   * @param query The user's natural language query.\n   * @returns The embedding vector.\n   * @private\n   */\n  private async generateQueryEmbedding(query: string): Promise<number[]> {\n    // Always use Ollama for embeddings\n    try {\n      console.log(`Generating embedding for query: \"${query}\" using model: ${this.ollamaEmbeddingModel}`);\n      \n      const response = await axios.post(`${this.ollamaUrl}/api/embeddings`, {\n        model: this.ollamaEmbeddingModel,\n        prompt: query,\n      }, {\n        timeout: 30000 // 30 second timeout\n      });\n\n      if (response.data && response.data.embedding) {\n        console.log(`Successfully generated embedding with dimension: ${response.data.embedding.length}`);\n        return response.data.embedding;\n      } else {\n        console.error(\n          \"Unexpected response format from Ollama:\",\n          response.data\n        );\n        return new Array(768).fill(0);\n      }\n    } catch (error: any) {\n      console.error(\"Error generating query embedding with Ollama:\", error.message || error);\n      \n      // Check if Ollama is running\n      try {\n        const healthCheck = await axios.get(`${this.ollamaUrl}/api/tags`, { timeout: 5000 });\n        console.log(\"Ollama is running. Available models:\", healthCheck.data.models?.map((m: any) => m.name));\n        console.error(`Model ${this.ollamaEmbeddingModel} might not be available. Please run: ollama pull ${this.ollamaEmbeddingModel}`);\n      } catch (healthError) {\n        console.error(\"Ollama server is not responding. Please ensure Ollama is running.\");\n      }\n      \n      return new Array(768).fill(0);\n    }\n  }\n\n  /**\n   * Search the codebase for relevant components and methods\n   */\n  /**\n   * Search the codebase for relevant components and methods based on a query.\n   * @param query The user's natural language query.\n   * @returns Array of relevant codebase search results, sorted by similarity (highest first).\n   * @example\n   * const results = await chatService.searchCodebase('How does Button handle clicks?');\n   */\n  async searchCodebase(query: string): Promise<CodebaseSearchResult[]> {\n    console.log(`\\n=== VECTOR SEARCH START ===`);\n    console.log(`Query: \"${query}\"`);\n    \n    // Generate embedding for the query\n    const queryEmbedding = await this.generateQueryEmbedding(query);\n    console.log(`Generated query embedding with length: ${queryEmbedding.length}`);\n    \n    // Check if embedding generation failed\n    if (queryEmbedding.every(val => val === 0)) {\n      console.error(\"ERROR: Query embedding is all zeros. Ollama embedding generation failed.\");\n      return [];\n    }\n    \n    const results: CodebaseSearchResult[] = [];\n\n    // Get the vector database from the service\n    const vectorDbString = this.vectorService.exportVectorDatabase();\n    const vectorDb = JSON.parse(vectorDbString);\n    console.log(`Vector database contains ${vectorDb.length} entries`);\n\n    if (vectorDb.length === 0) {\n      console.error(\"ERROR: Vector database is empty! Documentation needs to be regenerated.\");\n      return [];\n    }\n\n    // Log a sample entry to verify structure\n    if (vectorDb.length > 0) {\n      const sampleEntry = vectorDb[0];\n      console.log(`Sample vector DB entry structure:`, {\n        hasVector: !!sampleEntry.vector,\n        vectorLength: sampleEntry.vector?.length || 0,\n        componentName: sampleEntry.componentName,\n        methodName: sampleEntry.methodName,\n        hasCode: !!sampleEntry.code\n      });\n    }\n\n    // Calculate similarity with all methods in the database\n    let matchCount = 0;\n    let processedCount = 0;\n    const topMatches: CodebaseSearchResult[] = [];\n    \n    for (const entry of vectorDb) {\n      processedCount++;\n      \n      if (!entry.vector || entry.vector.length === 0) {\n        console.warn(`Entry ${processedCount}: ${entry.componentName}.${entry.methodName} has no valid embedding vector`);\n        continue;\n      }\n      \n      // Ensure vectors have the same length\n      if (entry.vector.length !== queryEmbedding.length) {\n        console.warn(`Entry ${processedCount}: Vector length mismatch - query: ${queryEmbedding.length}, entry: ${entry.vector.length}`);\n        continue;\n      }\n      \n      const similarity = this.calculateCosineSimilarity(\n        queryEmbedding,\n        entry.vector\n      );\n\n      // Log high similarity matches for debugging\n      if (similarity > 0.5) {\n        console.log(`HIGH MATCH (${similarity.toFixed(3)}): ${entry.componentName}.${entry.methodName}`);\n      }\n\n      // Use a very low threshold (0.2) for queries to ensure we get results\n      if (similarity > 0.2) {\n        matchCount++;\n        results.push({\n          componentName: entry.componentName,\n          methodName: entry.methodName,\n          code: entry.code,\n          filePath: entry.filePath,\n          similarity: similarity,\n        });\n      }\n    }\n\n    console.log(`Processed ${processedCount} entries, found ${matchCount} matches above threshold (0.2)`);\n\n    // Sort by similarity score (highest first) and return top results\n    const sortedResults = results.sort((a, b) => b.similarity - a.similarity).slice(0, 5);\n\n    if (sortedResults.length > 0) {\n      console.log(`Top ${sortedResults.length} results:`);\n      sortedResults.forEach((result, idx) => {\n        console.log(`  ${idx + 1}. ${result.componentName}.${result.methodName || 'N/A'} (${result.similarity.toFixed(3)})`);\n      });\n    } else {\n      console.warn(\"WARNING: No results found after vector search. This might indicate:\");\n      console.warn(\"  - Ollama embedding service is not running or query embedding failed.\");\n      console.warn(\"  - Wrong embedding model is being used.\");\n      console.warn(\"  - Vector database wasn't generated properly or is empty.\");\n    }\n\n    console.log(`=== VECTOR SEARCH END ===\\n`);\n    return sortedResults;\n  }\n\n  /**\n   * Calculate cosine similarity between two vectors.\n   * @param vecA First vector.\n   * @param vecB Second vector.\n   * @returns Cosine similarity score (0-1).\n   * @private\n   */\n  private calculateCosineSimilarity(vecA: number[], vecB: number[]): number {\n    if (vecA.length !== vecB.length) {\n      // console.error(`Vector length mismatch: ${vecA.length} vs ${vecB.length}`);\n      return 0; // Return 0 if lengths don't match, to prevent errors\n    }\n\n    let dotProduct = 0;\n    let normA = 0;\n    let normB = 0;\n\n    for (let i = 0; i < vecA.length; i++) {\n      dotProduct += vecA[i] * vecB[i];\n      normA += vecA[i] * vecA[i];\n      normB += vecB[i] * vecB[i];\n    }\n\n    if (normA === 0 || normB === 0) {\n      return 0;\n    }\n\n    const similarity = dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n    return similarity;\n  }\n\n  /**\n   * Get a chat response using OpenAI.\n   * @param messages Array of chat messages (history + user message).\n   * @returns Assistant response string.\n   * @private\n   */\n  private async getOpenAIResponse(messages: ChatMessage[]): Promise<string> {\n    if (!this.openai) {\n      throw new Error(\"OpenAI client not initialized\");\n    }\n\n    try {\n      const response = await this.openai.chat.completions.create({\n        model: this.chatModel,\n        messages: messages as any, // OpenAI SDK has specific types for messages\n        temperature: 0.7,\n        max_tokens: 1000,\n      });\n\n      return response.choices[0]?.message?.content || \"No response generated\";\n    } catch (error) {\n      console.error(\"Error getting OpenAI response:\", error);\n      if (axios.isAxiosError(error) && error.response) {\n        console.error(\"OpenAI API Error Details:\", error.response.data);\n        return `Sorry, I encountered an API error with OpenAI: ${error.response.data.error?.message || error.message}`;\n      }\n      return \"Sorry, I encountered an error when trying to respond with OpenAI.\";\n    }\n  }\n\n  /**\n   * Get a chat response using Ollama.\n   * @param messages Array of chat messages (history + user message).\n   * @returns Assistant response string.\n   * @private\n   */\n  private async checkOllamaAvailability(): Promise<boolean> {\n    try {\n      // Use a simple endpoint like /api/tags or /api/ps to check connectivity\n      // /api/ps is lightweight and shows running models\n      await axios.get(`${this.ollamaUrl}/api/ps`, { timeout: 3000 }); // 3-second timeout\n      console.log(\"Ollama server is available.\");\n      return true;\n    } catch (error) {\n      let errorMessage = \"An unknown error occurred during Ollama availability check.\";\n      if (axios.isAxiosError(error)) {\n        errorMessage = error.code ? `${error.code}: ${error.message}` : error.message;\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      console.error(`Ollama server check failed at ${this.ollamaUrl}:`, errorMessage);\n      return false;\n    }\n  }\n\n  private async getOllamaResponse(messages: ChatMessage[]): Promise<string> {\n    try {\n      // First, check if Ollama is available\n      const isAvailable = await this.checkOllamaAvailability();\n      if (!isAvailable) {\n        return `Sorry, I couldn't connect to the Ollama server at ${this.ollamaUrl}. Please ensure Ollama is running and accessible.`;\n      }\n\n      // Log the request payload (or a summary if too large)\n      console.log(\"Sending request to Ollama with model:\", this.chatModel);\n      // console.log(\"Ollama request messages:\", JSON.stringify(messages, null, 2)); // Potentially verbose\n      if (messages.length > 0) {\n          console.log(`Ollama request: ${messages.length} messages, last user message: \"${messages[messages.length -1].content.substring(0,100)}...\"`);\n      }\n\n      const response = await axios.post(`${this.ollamaUrl}/api/chat`, {\n        model: this.chatModel,\n        messages: messages,\n        stream: false,\n      }, { timeout: 30000 }); // 30-second timeout for the chat request\n\n      if (response.data && response.data.message) {\n        return response.data.message.content;\n      } else {\n        console.error(\"Unexpected response format from Ollama:\", response.data);\n        return \"Sorry, I received an unexpected response format from Ollama.\";\n      }\n    } catch (error) {\n    // console.error(\"Full error object in getOllamaResponse:\", error); // For deep debugging\n    if (axios.isAxiosError(error)) {\n      console.error(`Ollama Axios Error: ${error.code || 'No Code'} - ${error.message}`);\n      if (error.code === 'ECONNREFUSED' || (error.message && error.message.includes('ECONNREFUSED'))) {\n          return `Sorry, I couldn't connect to the Ollama server at ${this.ollamaUrl}. Please ensure Ollama is running.`;\n      }\n      if (error.code === 'ECONNABORTED' || (error.message && error.message.toLowerCase().includes('timeout'))) {\n        return `Sorry, the request to Ollama timed out. The server at ${this.ollamaUrl} might be too busy or the task is too complex.`;\n      }\n      if (error.response) {\n          console.error(\"Ollama API Error Status:\", error.response.status, error.response.statusText);\n          console.error(\"Ollama API Error Data:\", JSON.stringify(error.response.data, null, 2));\n          let specificError = \"an API error.\";\n          if (error.response.data && typeof error.response.data.error === 'string') {\n            specificError = error.response.data.error;\n            if (specificError.toLowerCase().includes(\"model not found\")) {\n              return `Sorry, the Ollama model '${this.chatModel}' was not found on the server at ${this.ollamaUrl}. Please ensure the model is pulled and available.`;\n            }\n             if (specificError.toLowerCase().includes(\"context window\")) {\n              return `Sorry, the conversation context is too long for the Ollama model '${this.chatModel}'. Please try a shorter query or start a new conversation.`;\n            }\n          }\n          return `Sorry, I encountered an API error with Ollama: ${specificError}`;\n      } else if (!error.response && error.request) {\n        console.error(\"Ollama Error: No response received from server for request:\", error.request);\n        return `Sorry, I didn't receive a response from the Ollama server at ${this.ollamaUrl}. It might be down or unreachable.`;\n      }\n    } else if (error instanceof Error) {\n      console.error(\"Generic Error in getOllamaResponse:\", error.message, error.stack);\n    } else {\n      console.error(\"Unknown error type in getOllamaResponse:\", error);\n    }\n    return \"Sorry, I encountered an unexpected error when trying to respond with Ollama. Please check the server logs for more details.\";\n  }\n  }\n\n\n  /**\n   * Chat with the codebase assistant\n   */\n  /**\n   * Chat with the codebase assistant. Searches for relevant code, injects context, and gets an LLM response.\n   *\n   * @param history Chat history (array of messages).\n   * @param query User's new question or message.\n   * @returns An object with the assistant's response and relevant code search results.\n   * @example\n   * const { response, searchResults } = await chatService.chat([{ role: 'user', content: 'How does Button work?' }], 'How does Button work?');\n   */\n  async chat(\n    history: ChatMessage[],\n    query: string\n  ): Promise<{ response: string; searchResults: CodebaseSearchResult[] }> {\n    console.log(\"\\n=== STARTING CHAT PROCESSING ===\");\n    console.log(`Query: \"${query}\"`);\n    \n    // Debug the vector database state\n    const vectorDbString = this.vectorService.exportVectorDatabase();\n    const vectorDb = JSON.parse(vectorDbString);\n    console.log(`Vector database has ${vectorDb.length} entries before search`);\n    \n    // Force initialization if vector DB is empty\n    if (vectorDb.length === 0) {\n      console.log(\"Vector database is empty, reinitializing...\");\n      await this.initializeVectorDatabase();\n      console.log(\"Vector database reinitialized\");\n    }\n    \n    // Check if this is a direct search for a specific function or component\n    // Enhanced pattern matching to catch more search variations\n    const isDirectSearch = /\\b(function|component|method|class|fetch|api|element|module|table of contents|toc|code\\s*graph|codegraph)\\s+named\\s+([\\w-]+)\\b/i.test(query) || \n                           /\\bis\\s+there\\s+(a|an)\\s+(function|component|method|class|fetch|api|element|module|table of contents|toc|code\\s*graph|codegraph)\\s+([\\w-]+)\\b/i.test(query) ||\n                           /\\bfind\\s+(the|a|an)?\\s*(function|component|method|class|fetch|api|element|module|code|table of contents|toc|code\\s*graph|codegraph)?\\s*([\\w-]+)\\b/i.test(query) ||\n                           /\\bshow\\s+(the|a|an)?\\s*(function|component|method|class|fetch|api|element|module|code|table of contents|toc|code\\s*graph|codegraph)?\\s*([\\w-]+)\\b/i.test(query) ||\n                           /\\b(get|display|locate|tell\\s+me\\s+about)\\s+(the|a|an)?\\s*(function|component|method|class|fetch|api|element|module|code|table of contents|toc|code\\s*graph|codegraph)?\\s*([\\w-]+)\\b/i.test(query) ||\n                           /\\b(table of contents|toc|code\\s*graph|codegraph)\\b/i.test(query) ||\n                           /\\btell\\s+me\\s+about\\s+(the\\s+)?(code\\s*graph|codegraph)\\b/i.test(query);\n    \n    // Extract the name being searched for\n    let searchName = \"\";\n    const specificNameMatch = query.match(/\\b(?:code for|function|component|method|class)\\s+([\\w.-]+)(?:\\s|\\?|$)/i);\n\n    if (specificNameMatch && specificNameMatch[1]) {\n      searchName = specificNameMatch[1].toLowerCase();\n      console.log(`Detected specific entity name: \"${searchName}\"`);\n    } else if (query.toLowerCase().includes('table of contents') || query.toLowerCase().includes(' toc ')) {\n        // Special handling for table of contents queries\n        searchName = 'tableofcontents';\n        console.log(`Detected table of contents query, using search term: \"${searchName}\"`);\n    } else if (query.toLowerCase().includes('code graph') || query.toLowerCase().includes('codegraph')) {\n        // Special handling for code graph queries\n        searchName = 'codegraph';\n        console.log(`Detected code graph query, using search term: \"${searchName}\"`);\n    } \n    // Search for relevant code with explicit logging\n    console.log(\"Performing vector search for query:\", query);\n    const searchResults = await this.searchCodebase(query);\n    console.log(`Vector search found ${searchResults.length} relevant results`);\n    \n    // For direct searches, also try to find exact name matches\n    let exactMatches: CodebaseSearchResult[] = [];\n    \n    // Special case for table of contents queries\n    if (query.toLowerCase().includes('table of contents') || query.toLowerCase().includes(' toc ')) {\n      console.log(\"Detected table of contents query, adding TableOfContents component directly\");\n      \n      // Create a synthetic result for the TableOfContents component\n      const tableOfContentsResult: CodebaseSearchResult = {\n        componentName: \"TableOfContents\",\n        methodName: \"\",\n        code: `\"use client\"\nimport * as React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { cn } from \"../lib/utils\"\nimport Link from \"next/link\"\nimport { ScrollArea } from \"./ui/scroll-area\"\n\ninterface TOCItem {\n  id: string\n  title: string\n  level: number\n  children?: TOCItem[]\n}\n\ninterface TableOfContentsProps {\n  /**\n   * The container element to extract headings from\n   * If not provided, it will use the document body\n   */\n  contentRef?: React.RefObject<HTMLElement>\n  \n  /**\n   * Custom heading elements to display instead of extracting from the document\n   */\n  items?: TOCItem[]\n  \n  /**\n   * Minimum heading level to include (1-6)\n   * Default: 2 (h2)\n   */\n  minLevel?: number\n  \n  /**\n   * Maximum heading level to include (1-6)\n   * Default: 4 (h4)\n   */\n  maxLevel?: number\n  \n  /**\n   * Title to display above the table of contents\n   */\n  title?: string\n  \n  /**\n   * CSS class to apply to the container\n   */\n  className?: string\n}\n\n/**\n * TableOfContents component that automatically extracts headings from content\n * and displays them as a navigable table of contents.\n */\nexport function TableOfContents({\n  contentRef,\n  items: propItems,\n  minLevel = 2,\n  maxLevel = 4,\n  title = \"On this page\",\n  className,\n}: TableOfContentsProps) {\n  const [activeId, setActiveId] = useState<string>(\"\")\n  const [items, setItems] = useState<TOCItem[]>(propItems || [])\n\n  // Extract headings from content if items are not provided\n  useEffect(() => {\n    if (propItems) {\n      setItems(propItems)\n      return\n    }\n\n    const container = contentRef?.current || document.body\n    \n    // Find all heading elements in the container\n    const headingElements = Array.from(\n      container.querySelectorAll<HTMLHeadingElement>(\n        \\`h\\${minLevel}, h\\${minLevel + 1}, h\\${minLevel + 2}, h\\${minLevel + 3}, h\\${minLevel + 4}, h\\${minLevel + 5}\\`.slice(0, (maxLevel - minLevel + 1) * 4)\n      )\n    )\n\n    // Convert heading elements to TOC items\n    const tocItems: TOCItem[] = []\n    \n    headingElements.forEach((heading) => {\n      const id = heading.id || heading.textContent?.trim().toLowerCase().replace(/\\s+/g, \"-\") || \"\"\n      \n      // Set ID on the heading if it doesn't have one\n      if (!heading.id) {\n        heading.id = id\n      }\n      \n      const level = parseInt(heading.tagName[1])\n      \n      tocItems.push({\n        id,\n        title: heading.textContent || \"\",\n        level,\n      })\n    })\n    \n    setItems(tocItems)\n  }, [contentRef, propItems, minLevel, maxLevel])\n\n  // Render TOC items recursively\n  const renderItems = (items: TOCItem[], depth = 0) => {\n    return (\n      <ul className={cn(\"m-0 list-none\", depth > 0 ? \"pl-4\" : \"\")}>\n        {items.map((item) => (\n          <li key={item.id} className=\"mt-2\">\n            <Link\n              href={\\`#\\${item.id}\\`}\n              className={cn(\n                \"inline-block text-sm no-underline transition-colors hover:text-foreground\",\n                activeId === item.id\n                  ? \"font-medium text-foreground\"\n                  : \"text-muted-foreground\"\n              )}\n              onClick={(e) => {\n                e.preventDefault()\n                document.getElementById(item.id)?.scrollIntoView({\n                  behavior: \"smooth\",\n                }); // End of scrollIntoView call\n              }} // End of onClick handler\n            /> // End of Link component\n          </li> // End of li element\n        ))} \n      </ul> // End of ul element\n    ); // End of renderItems return\n  }; // End of renderItems function\n\n  // useEffect for activeId could be re-added here if needed, assuming it was simple\n  // Example: \n  // useEffect(() => { \n  //   const observer = new IntersectionObserver(...); \n  //   document.querySelectorAll(\"h2[id], h3[id], h4[id]\").forEach((section) => observer.observe(section)); \n  //   return () => observer.disconnect(); \n  // }, [items]);\n\n  return ( // Return for TableOfContents functional component\n    <ScrollArea className={cn(\"py-4 pr-4\", className)}>\n      {title && <h3 className=\"mb-2 font-semibold text-sm\">{title}</h3>}\n      {items.length > 0 ? renderItems(items) : <p className=\"text-sm text-muted-foreground\">No headings found.</p>}\n    </ScrollArea>\n  );\n} // End of TableOfContents function definition (within the string literal)\n\"`, // End of the 'code' string literal for TableOfContents\n        similarity: 1.0, // Max similarity for direct match\n        filePath: \"src/components/TableOfContents.tsx\", // Placeholder path\n      };\n      exactMatches.push(tableOfContentsResult);\n      console.log(\"Added synthetic TableOfContents result to exactMatches.\");\n    } else if (query.toLowerCase().includes('code graph') || query.toLowerCase().includes('codegraph')) {\n      console.log(\"Code graph query detected, adding synthetic CodeGraph result (placeholder)\");\n      const codeGraphResult: CodebaseSearchResult = {\n        componentName: \"CodeGraph\",\n        methodName: \"\",\n        code: \"/* Code for CodeGraph component - this is a placeholder. Actual implementation would be dynamically fetched or generated. */\",\n        similarity: 1.0,\n        filePath: \"src/components/CodeGraph.tsx\", // Placeholder path\n      };\n      exactMatches.push(codeGraphResult);\n      console.log(\"Added synthetic CodeGraph result to exactMatches.\");\n    } else if (searchName) {\n      // Find exact matches from the vector DB if a specific name was parsed\n      console.log(`Searching for exact matches in vectorDb for: \\\"${searchName}\\\"...`);\n      vectorDb.forEach((entry: any) => {\n        const compName = entry.componentName?.toLowerCase();\n        const methName = entry.methodName?.toLowerCase();\n        // Check if the component name, method name, or fully qualified name matches\n        if (compName === searchName || methName === searchName || (compName && methName && `${compName}.${methName}` === searchName)) {\n          // Check if this exact match (by component, method, and path) is already in exactMatches\n          if (!exactMatches.some(em => em.componentName === entry.componentName && em.methodName === entry.methodName && em.filePath === entry.filePath)) {\n             exactMatches.push({\n                ...entry, // Spread the original entry data\n                similarity: 1.0, // Assign maximum similarity for an exact match\n             });\n          }\n        }\n      });\n      console.log(`Found ${exactMatches.length} exact matches for \\\"${searchName}\\\" after DB scan.`);\n    }\n\n    // Combine searchResults (from vector search) and exactMatches, ensuring uniqueness\n    const combinedResultsMap = new Map<string, CodebaseSearchResult>();\n    searchResults.forEach(r => combinedResultsMap.set(`${r.filePath}-${r.componentName}-${r.methodName}`, r));\n    exactMatches.forEach(r => combinedResultsMap.set(`${r.filePath}-${r.componentName}-${r.methodName}`, r)); // Exact matches will overwrite vector results if keys are identical\n    \n    const combinedResults = Array.from(combinedResultsMap.values());\n    // Sort combined results by similarity (exact matches with 1.0 will be at the top)\n    combinedResults.sort((a, b) => b.similarity - a.similarity);\n\n    console.log(`Total combined (unique) results: ${combinedResults.length}`);\n\n    // Construct the context for the LLM\n    let contextText = \"You are a helpful AI assistant knowledgeable about this codebase. \" +\n                      \"Use the following code snippets to answer the user's query. \" +\n                      \"Prioritize information from exact matches if available. Be concise and refer to specific components or methods where possible.\\n\\n\";\n\n    if (combinedResults.length > 0) {\n      contextText += \"Relevant code found:\\n\";\n      // Take top N results to build context, e.g., top 5 or 10\n      combinedResults.slice(0, 10).forEach((result, index) => {\n        contextText += `\\n--- Snippet ${index + 1}: ${result.componentName}${result.methodName ? '.' + result.methodName : ''} (Similarity: ${result.similarity.toFixed(2)}, Path: ${result.filePath}) ---\\n`;\n        let codeContent = result.code || \"\";\n        if (codeContent.length > 1000) { // Truncate code snippet if too long\n          codeContent = codeContent.substring(0, 1000) + \"... (truncated)\";\n        }\n        contextText += codeContent + \"\\n\";\n      });\n    } else {\n      contextText += \"No specific code snippets found relevant to the query. Answer based on general knowledge if possible, or state that you couldn't find relevant information in the codebase.\\n\";\n    }\n    \n    console.log(`Context text length for LLM: ${contextText.length}`);\n    // For full context debugging (can be very verbose):\n    // if (contextText.length < 5000) console.log(\"Context text for LLM:\", contextText);\n    // else console.log(\"Context text for LLM is too long to print fully.\");\n\n    const messages: ChatMessage[] = [\n      { role: \"system\", content: contextText },\n      ...history,\n      { role: \"user\", content: query },\n    ];\n\n    let response: string;\n    if (this.useOllama) {\n      console.log(\"Using Ollama for LLM response generation.\");\n      response = await this.getOllamaResponse(messages);\n    } else {\n      console.log(\"Using OpenAI for LLM response generation.\");\n      response = await this.getOpenAIResponse(messages);\n    }\n    \n    console.log(\"LLM Raw Response:\", response);\n    console.log(\"=== CHAT PROCESSING END ===\\n\");\n\n    // Return the LLM's response and the search results used for context (limited for brevity in return)\n    return { response, searchResults: combinedResults.slice(0, 10) };\n  } // End of chat method\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ai/chat/chat-service.ts",
    "slug": "src_ai_chat_chat-service_codebasechatservice",
    "imports": [
      "OpenAI",
      "VectorSimilarityService",
      "ComponentDefinition",
      "ChatServiceOptions",
      "ChatMessage",
      "CodebaseSearchResult"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ai_chat_chat-service_codebasechatservice",
        "target": "openai",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_chat_chat-service_codebasechatservice",
        "target": "vectorsimilarityservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_chat_chat-service_codebasechatservice",
        "target": "componentdefinition",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_chat_chat-service_codebasechatservice",
        "target": "chatserviceoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_chat_chat-service_codebasechatservice",
        "target": "chatmessage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_chat_chat-service_codebasechatservice",
        "target": "codebasesearchresult",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "/\\b(function|component|method|class|fetch|api|element|module|table-of-contents|toc|code\\s*graph|codegraph)\\s+named\\s+([\\w-]+)\\b/i",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 524,
        "targetFunction": "test"
      },
      {
        "target": "/\\bis\\s+there\\s+(a|an)\\s+(function|component|method|class|fetch|api|element|module|table-of-contents|toc|code\\s*graph|codegraph)\\s+([\\w-]+)\\b/i",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 525,
        "targetFunction": "test"
      },
      {
        "target": "/\\bfind\\s+(the|a|an)?\\s*(function|component|method|class|fetch|api|element|module|code|table-of-contents|toc|code\\s*graph|codegraph)?\\s*([\\w-]+)\\b/i",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 526,
        "targetFunction": "test"
      },
      {
        "target": "/\\bshow\\s+(the|a|an)?\\s*(function|component|method|class|fetch|api|element|module|code|table-of-contents|toc|code\\s*graph|codegraph)?\\s*([\\w-]+)\\b/i",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 527,
        "targetFunction": "test"
      },
      {
        "target": "/\\b(get|display|locate|tell\\s+me\\s+about)\\s+(the|a|an)?\\s*(function|component|method|class|fetch|api|element|module|code|table-of-contents|toc|code\\s*graph|codegraph)?\\s*([\\w-]+)\\b/i",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 528,
        "targetFunction": "test"
      },
      {
        "target": "/\\b(table-of-contents|toc|code\\s*graph|codegraph)\\b/i",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 529,
        "targetFunction": "test"
      },
      {
        "target": "/\\btell\\s+me\\s+about\\s+(the\\s+)?(code\\s*graph|codegraph)\\b/i",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 530,
        "targetFunction": "test"
      }
    ],
    "methods": [
      {
        "name": "verifyVectorDatabase",
        "code": "public verifyVectorDatabase(): boolean {\n    const vectorDbString = this.vectorService.exportVectorDatabase();\n    const vectorDb = JSON.parse(vectorDbString);\n    \n    if (vectorDb.length === 0) {\n      console.error(\"Vector database is empty\");\n      return false;\n    }\n    \n    let validEntries = 0;\n    let invalidEntries = 0;\n    \n    for (const entry of vectorDb) {\n      if (entry.vector && entry.vector.length > 0 && entry.componentName && entry.code) {\n        validEntries++;\n      } else {\n        invalidEntries++;\n        console.warn(`Invalid entry: ${entry.componentName}.${entry.methodName}`);\n      }\n    }\n    \n    console.log(`Vector database verification: ${validEntries} valid, ${invalidEntries} invalid out of ${vectorDb.length} total`);\n    return invalidEntries === 0;\n  }",
        "returnType": "boolean",
        "params": []
      },
      {
        "name": "initializeVectorDatabase",
        "code": "private async initializeVectorDatabase(): Promise<void> {\n    this.vectorService.clearVectorDatabase(); // Ensure we start with a clean slate\n    console.log(\"Initializing vector database with component definitions and methods...\");\n    console.log(`Found ${this.components.length} components to process`);\n\n    let processedComponentDefinitionCount = 0;\n    let processedComponentWithMethodsCount = 0;\n    let totalMethodCount = 0;\n\n    // Process each component\n    for (const component of this.components) {\n      if (component.filePath && component.filePath.endsWith('components/ui/card.tsx')) {\n        console.log('DEBUG: ComponentDefinition for card.tsx:', JSON.stringify(component, null, 2));\n      }\n      try {\n        if (!component.name) {\n          console.warn(\"Skipping component with no name\");\n          continue;\n        }\n\n        // Process the component definition itself\n        // This will call a new method in VectorSimilarityService to handle component-level embedding\n        console.log(`Processing component definition: ${component.name}`);\n        await this.vectorService.processComponentDefinition(component);\n        processedComponentDefinitionCount++;\n\n        // Process methods if they exist\n        if (component.methods && component.methods.length > 0) {\n          console.log(`Processing methods for component: ${component.name} (${component.methods.length} methods)`);\n          totalMethodCount += component.methods.length;\n\n          await this.vectorService.processComponentMethods(\n            component.name,\n            component.methods,\n            component.filePath || \"unknown-path\"\n          );\n          processedComponentWithMethodsCount++;\n        } else {\n          console.log(`Component ${component.name} has no methods to process.`);\n        }\n\n      } catch (error) {\n        console.error(`Error processing component ${component.name}:`, error);\n      }\n    }\n\n    const vectorDbString = this.vectorService.exportVectorDatabase();\n    const vectorDb = JSON.parse(vectorDbString);\n\n    console.log(`Vector database initialization complete:`);\n    console.log(`- Processed ${processedComponentDefinitionCount}/${this.components.length} component definitions`);\n    console.log(`- Processed methods for ${processedComponentWithMethodsCount}/${this.components.length} components with methods`);\n    console.log(`- Processed ${totalMethodCount} total methods`);\n    console.log(`- Vector database contains ${vectorDb.length} entries`);\n\n    // If the vector database is empty despite having components, log a warning\n    if (vectorDb.length === 0 && this.components.length > 0) {\n      console.warn(\"WARNING: Vector database is empty after initialization despite having components!\");\n      console.warn(\"This could be due to issues in component processing or embedding generation.\");\n      console.warn(\"Check that Ollama embedding service is running and accessible.\");\n    }\n  }",
        "returnType": "Promise<void>",
        "params": []
      },
      {
        "name": "generateQueryEmbedding",
        "code": "private async generateQueryEmbedding(query: string): Promise<number[]> {\n    // Always use Ollama for embeddings\n    try {\n      console.log(`Generating embedding for query: \"${query}\" using model: ${this.ollamaEmbeddingModel}`);\n      \n      const response = await axios.post(`${this.ollamaUrl}/api/embeddings`, {\n        model: this.ollamaEmbeddingModel,\n        prompt: query,\n      }, {\n        timeout: 30000 // 30 second timeout\n      });\n\n      if (response.data && response.data.embedding) {\n        console.log(`Successfully generated embedding with dimension: ${response.data.embedding.length}`);\n        return response.data.embedding;\n      } else {\n        console.error(\n          \"Unexpected response format from Ollama:\",\n          response.data\n        );\n        return new Array(768).fill(0);\n      }\n    } catch (error: any) {\n      console.error(\"Error generating query embedding with Ollama:\", error.message || error);\n      \n      // Check if Ollama is running\n      try {\n        const healthCheck = await axios.get(`${this.ollamaUrl}/api/tags`, { timeout: 5000 });\n        console.log(\"Ollama is running. Available models:\", healthCheck.data.models?.map((m: any) => m.name));\n        console.error(`Model ${this.ollamaEmbeddingModel} might not be available. Please run: ollama pull ${this.ollamaEmbeddingModel}`);\n      } catch (healthError) {\n        console.error(\"Ollama server is not responding. Please ensure Ollama is running.\");\n      }\n      \n      return new Array(768).fill(0);\n    }\n  }",
        "returnType": "Promise<number[]>",
        "params": [
          {
            "name": "query",
            "type": "string",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "searchCodebase",
        "code": "async searchCodebase(query: string): Promise<CodebaseSearchResult[]> {\n    console.log(`\\n=== VECTOR SEARCH START ===`);\n    console.log(`Query: \"${query}\"`);\n    \n    // Generate embedding for the query\n    const queryEmbedding = await this.generateQueryEmbedding(query);\n    console.log(`Generated query embedding with length: ${queryEmbedding.length}`);\n    \n    // Check if embedding generation failed\n    if (queryEmbedding.every(val => val === 0)) {\n      console.error(\"ERROR: Query embedding is all zeros. Ollama embedding generation failed.\");\n      return [];\n    }\n    \n    const results: CodebaseSearchResult[] = [];\n\n    // Get the vector database from the service\n    const vectorDbString = this.vectorService.exportVectorDatabase();\n    const vectorDb = JSON.parse(vectorDbString);\n    console.log(`Vector database contains ${vectorDb.length} entries`);\n\n    if (vectorDb.length === 0) {\n      console.error(\"ERROR: Vector database is empty! Documentation needs to be regenerated.\");\n      return [];\n    }\n\n    // Log a sample entry to verify structure\n    if (vectorDb.length > 0) {\n      const sampleEntry = vectorDb[0];\n      console.log(`Sample vector DB entry structure:`, {\n        hasVector: !!sampleEntry.vector,\n        vectorLength: sampleEntry.vector?.length || 0,\n        componentName: sampleEntry.componentName,\n        methodName: sampleEntry.methodName,\n        hasCode: !!sampleEntry.code\n      });\n    }\n\n    // Calculate similarity with all methods in the database\n    let matchCount = 0;\n    let processedCount = 0;\n    const topMatches: CodebaseSearchResult[] = [];\n    \n    for (const entry of vectorDb) {\n      processedCount++;\n      \n      if (!entry.vector || entry.vector.length === 0) {\n        console.warn(`Entry ${processedCount}: ${entry.componentName}.${entry.methodName} has no valid embedding vector`);\n        continue;\n      }\n      \n      // Ensure vectors have the same length\n      if (entry.vector.length !== queryEmbedding.length) {\n        console.warn(`Entry ${processedCount}: Vector length mismatch - query: ${queryEmbedding.length}, entry: ${entry.vector.length}`);\n        continue;\n      }\n      \n      const similarity = this.calculateCosineSimilarity(\n        queryEmbedding,\n        entry.vector\n      );\n\n      // Log high similarity matches for debugging\n      if (similarity > 0.5) {\n        console.log(`HIGH MATCH (${similarity.toFixed(3)}): ${entry.componentName}.${entry.methodName}`);\n      }\n\n      // Use a very low threshold (0.2) for queries to ensure we get results\n      if (similarity > 0.2) {\n        matchCount++;\n        results.push({\n          componentName: entry.componentName,\n          methodName: entry.methodName,\n          code: entry.code,\n          filePath: entry.filePath,\n          similarity: similarity,\n        });\n      }\n    }\n\n    console.log(`Processed ${processedCount} entries, found ${matchCount} matches above threshold (0.2)`);\n\n    // Sort by similarity score (highest first) and return top results\n    const sortedResults = results.sort((a, b) => b.similarity - a.similarity).slice(0, 5);\n\n    if (sortedResults.length > 0) {\n      console.log(`Top ${sortedResults.length} results:`);\n      sortedResults.forEach((result, idx) => {\n        console.log(`  ${idx + 1}. ${result.componentName}.${result.methodName || 'N/A'} (${result.similarity.toFixed(3)})`);\n      });\n    } else {\n      console.warn(\"WARNING: No results found after vector search. This might indicate:\");\n      console.warn(\"  - Ollama embedding service is not running or query embedding failed.\");\n      console.warn(\"  - Wrong embedding model is being used.\");\n      console.warn(\"  - Vector database wasn't generated properly or is empty.\");\n    }\n\n    console.log(`=== VECTOR SEARCH END ===\\n`);\n    return sortedResults;\n  }",
        "returnType": "Promise<CodebaseSearchResult[]>",
        "params": [
          {
            "name": "query",
            "type": "string",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "calculateCosineSimilarity",
        "code": "private calculateCosineSimilarity(vecA: number[], vecB: number[]): number {\n    if (vecA.length !== vecB.length) {\n      // console.error(`Vector length mismatch: ${vecA.length} vs ${vecB.length}`);\n      return 0; // Return 0 if lengths don't match, to prevent errors\n    }\n\n    let dotProduct = 0;\n    let normA = 0;\n    let normB = 0;\n\n    for (let i = 0; i < vecA.length; i++) {\n      dotProduct += vecA[i] * vecB[i];\n      normA += vecA[i] * vecA[i];\n      normB += vecB[i] * vecB[i];\n    }\n\n    if (normA === 0 || normB === 0) {\n      return 0;\n    }\n\n    const similarity = dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n    return similarity;\n  }",
        "returnType": "number",
        "params": [
          {
            "name": "vecA",
            "type": "number[]",
            "description": "",
            "optional": false
          },
          {
            "name": "vecB",
            "type": "number[]",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "getOpenAIResponse",
        "code": "private async getOpenAIResponse(messages: ChatMessage[]): Promise<string> {\n    if (!this.openai) {\n      throw new Error(\"OpenAI client not initialized\");\n    }\n\n    try {\n      const response = await this.openai.chat.completions.create({\n        model: this.chatModel,\n        messages: messages as any, // OpenAI SDK has specific types for messages\n        temperature: 0.7,\n        max_tokens: 1000,\n      });\n\n      return response.choices[0]?.message?.content || \"No response generated\";\n    } catch (error) {\n      console.error(\"Error getting OpenAI response:\", error);\n      if (axios.isAxiosError(error) && error.response) {\n        console.error(\"OpenAI API Error Details:\", error.response.data);\n        return `Sorry, I encountered an API error with OpenAI: ${error.response.data.error?.message || error.message}`;\n      }\n      return \"Sorry, I encountered an error when trying to respond with OpenAI.\";\n    }\n  }",
        "returnType": "Promise<string>",
        "params": [
          {
            "name": "messages",
            "type": "ChatMessage[]",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "checkOllamaAvailability",
        "code": "private async checkOllamaAvailability(): Promise<boolean> {\n    try {\n      // Use a simple endpoint like /api/tags or /api/ps to check connectivity\n      // /api/ps is lightweight and shows running models\n      await axios.get(`${this.ollamaUrl}/api/ps`, { timeout: 3000 }); // 3-second timeout\n      console.log(\"Ollama server is available.\");\n      return true;\n    } catch (error) {\n      let errorMessage = \"An unknown error occurred during Ollama availability check.\";\n      if (axios.isAxiosError(error)) {\n        errorMessage = error.code ? `${error.code}: ${error.message}` : error.message;\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      console.error(`Ollama server check failed at ${this.ollamaUrl}:`, errorMessage);\n      return false;\n    }\n  }",
        "returnType": "Promise<boolean>",
        "params": []
      },
      {
        "name": "getOllamaResponse",
        "code": "private async getOllamaResponse(messages: ChatMessage[]): Promise<string> {\n    try {\n      // First, check if Ollama is available\n      const isAvailable = await this.checkOllamaAvailability();\n      if (!isAvailable) {\n        return `Sorry, I couldn't connect to the Ollama server at ${this.ollamaUrl}. Please ensure Ollama is running and accessible.`;\n      }\n\n      // Log the request payload (or a summary if too large)\n      console.log(\"Sending request to Ollama with model:\", this.chatModel);\n      // console.log(\"Ollama request messages:\", JSON.stringify(messages, null, 2)); // Potentially verbose\n      if (messages.length > 0) {\n          console.log(`Ollama request: ${messages.length} messages, last user message: \"${messages[messages.length -1].content.substring(0,100)}...\"`);\n      }\n\n      const response = await axios.post(`${this.ollamaUrl}/api/chat`, {\n        model: this.chatModel,\n        messages: messages,\n        stream: false,\n      }, { timeout: 30000 }); // 30-second timeout for the chat request\n\n      if (response.data && response.data.message) {\n        return response.data.message.content;\n      } else {\n        console.error(\"Unexpected response format from Ollama:\", response.data);\n        return \"Sorry, I received an unexpected response format from Ollama.\";\n      }\n    } catch (error) {\n    // console.error(\"Full error object in getOllamaResponse:\", error); // For deep debugging\n    if (axios.isAxiosError(error)) {\n      console.error(`Ollama Axios Error: ${error.code || 'No Code'} - ${error.message}`);\n      if (error.code === 'ECONNREFUSED' || (error.message && error.message.includes('ECONNREFUSED'))) {\n          return `Sorry, I couldn't connect to the Ollama server at ${this.ollamaUrl}. Please ensure Ollama is running.`;\n      }\n      if (error.code === 'ECONNABORTED' || (error.message && error.message.toLowerCase().includes('timeout'))) {\n        return `Sorry, the request to Ollama timed out. The server at ${this.ollamaUrl} might be too busy or the task is too complex.`;\n      }\n      if (error.response) {\n          console.error(\"Ollama API Error Status:\", error.response.status, error.response.statusText);\n          console.error(\"Ollama API Error Data:\", JSON.stringify(error.response.data, null, 2));\n          let specificError = \"an API error.\";\n          if (error.response.data && typeof error.response.data.error === 'string') {\n            specificError = error.response.data.error;\n            if (specificError.toLowerCase().includes(\"model not found\")) {\n              return `Sorry, the Ollama model '${this.chatModel}' was not found on the server at ${this.ollamaUrl}. Please ensure the model is pulled and available.`;\n            }\n             if (specificError.toLowerCase().includes(\"context window\")) {\n              return `Sorry, the conversation context is too long for the Ollama model '${this.chatModel}'. Please try a shorter query or start a new conversation.`;\n            }\n          }\n          return `Sorry, I encountered an API error with Ollama: ${specificError}`;\n      } else if (!error.response && error.request) {\n        console.error(\"Ollama Error: No response received from server for request:\", error.request);\n        return `Sorry, I didn't receive a response from the Ollama server at ${this.ollamaUrl}. It might be down or unreachable.`;\n      }\n    } else if (error instanceof Error) {\n      console.error(\"Generic Error in getOllamaResponse:\", error.message, error.stack);\n    } else {\n      console.error(\"Unknown error type in getOllamaResponse:\", error);\n    }\n    return \"Sorry, I encountered an unexpected error when trying to respond with Ollama. Please check the server logs for more details.\";\n  }\n  }",
        "returnType": "Promise<string>",
        "params": [
          {
            "name": "messages",
            "type": "ChatMessage[]",
            "description": "",
            "optional": false
          }
        ]
      },
      {
        "name": "chat",
        "code": "async chat(\n    history: ChatMessage[],\n    query: string\n  ): Promise<{ response: string; searchResults: CodebaseSearchResult[] }> {\n    console.log(\"\\n=== STARTING CHAT PROCESSING ===\");\n    console.log(`Query: \"${query}\"`);\n    \n    // Debug the vector database state\n    const vectorDbString = this.vectorService.exportVectorDatabase();\n    const vectorDb = JSON.parse(vectorDbString);\n    console.log(`Vector database has ${vectorDb.length} entries before search`);\n    \n    // Force initialization if vector DB is empty\n    if (vectorDb.length === 0) {\n      console.log(\"Vector database is empty, reinitializing...\");\n      await this.initializeVectorDatabase();\n      console.log(\"Vector database reinitialized\");\n    }\n    \n    // Check if this is a direct search for a specific function or component\n    // Enhanced pattern matching to catch more search variations\n    const isDirectSearch = /\\b(function|component|method|class|fetch|api|element|module|table of contents|toc|code\\s*graph|codegraph)\\s+named\\s+([\\w-]+)\\b/i.test(query) || \n                           /\\bis\\s+there\\s+(a|an)\\s+(function|component|method|class|fetch|api|element|module|table of contents|toc|code\\s*graph|codegraph)\\s+([\\w-]+)\\b/i.test(query) ||\n                           /\\bfind\\s+(the|a|an)?\\s*(function|component|method|class|fetch|api|element|module|code|table of contents|toc|code\\s*graph|codegraph)?\\s*([\\w-]+)\\b/i.test(query) ||\n                           /\\bshow\\s+(the|a|an)?\\s*(function|component|method|class|fetch|api|element|module|code|table of contents|toc|code\\s*graph|codegraph)?\\s*([\\w-]+)\\b/i.test(query) ||\n                           /\\b(get|display|locate|tell\\s+me\\s+about)\\s+(the|a|an)?\\s*(function|component|method|class|fetch|api|element|module|code|table of contents|toc|code\\s*graph|codegraph)?\\s*([\\w-]+)\\b/i.test(query) ||\n                           /\\b(table of contents|toc|code\\s*graph|codegraph)\\b/i.test(query) ||\n                           /\\btell\\s+me\\s+about\\s+(the\\s+)?(code\\s*graph|codegraph)\\b/i.test(query);\n    \n    // Extract the name being searched for\n    let searchName = \"\";\n    const specificNameMatch = query.match(/\\b(?:code for|function|component|method|class)\\s+([\\w.-]+)(?:\\s|\\?|$)/i);\n\n    if (specificNameMatch && specificNameMatch[1]) {\n      searchName = specificNameMatch[1].toLowerCase();\n      console.log(`Detected specific entity name: \"${searchName}\"`);\n    } else if (query.toLowerCase().includes('table of contents') || query.toLowerCase().includes(' toc ')) {\n        // Special handling for table of contents queries\n        searchName = 'tableofcontents';\n        console.log(`Detected table of contents query, using search term: \"${searchName}\"`);\n    } else if (query.toLowerCase().includes('code graph') || query.toLowerCase().includes('codegraph')) {\n        // Special handling for code graph queries\n        searchName = 'codegraph';\n        console.log(`Detected code graph query, using search term: \"${searchName}\"`);\n    } \n    // Search for relevant code with explicit logging\n    console.log(\"Performing vector search for query:\", query);\n    const searchResults = await this.searchCodebase(query);\n    console.log(`Vector search found ${searchResults.length} relevant results`);\n    \n    // For direct searches, also try to find exact name matches\n    let exactMatches: CodebaseSearchResult[] = [];\n    \n    // Special case for table of contents queries\n    if (query.toLowerCase().includes('table of contents') || query.toLowerCase().includes(' toc ')) {\n      console.log(\"Detected table of contents query, adding TableOfContents component directly\");\n      \n      // Create a synthetic result for the TableOfContents component\n      const tableOfContentsResult: CodebaseSearchResult = {\n        componentName: \"TableOfContents\",\n        methodName: \"\",\n        code: `\"use client\"\nimport * as React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport { cn } from \"../lib/utils\"\nimport Link from \"next/link\"\nimport { ScrollArea } from \"./ui/scroll-area\"\n\ninterface TOCItem {\n  id: string\n  title: string\n  level: number\n  children?: TOCItem[]\n}\n\ninterface TableOfContentsProps {\n  /**\n   * The container element to extract headings from\n   * If not provided, it will use the document body\n   */\n  contentRef?: React.RefObject<HTMLElement>\n  \n  /**\n   * Custom heading elements to display instead of extracting from the document\n   */\n  items?: TOCItem[]\n  \n  /**\n   * Minimum heading level to include (1-6)\n   * Default: 2 (h2)\n   */\n  minLevel?: number\n  \n  /**\n   * Maximum heading level to include (1-6)\n   * Default: 4 (h4)\n   */\n  maxLevel?: number\n  \n  /**\n   * Title to display above the table of contents\n   */\n  title?: string\n  \n  /**\n   * CSS class to apply to the container\n   */\n  className?: string\n}\n\n/**\n * TableOfContents component that automatically extracts headings from content\n * and displays them as a navigable table of contents.\n */\nexport function TableOfContents({\n  contentRef,\n  items: propItems,\n  minLevel = 2,\n  maxLevel = 4,\n  title = \"On this page\",\n  className,\n}: TableOfContentsProps) {\n  const [activeId, setActiveId] = useState<string>(\"\")\n  const [items, setItems] = useState<TOCItem[]>(propItems || [])\n\n  // Extract headings from content if items are not provided\n  useEffect(() => {\n    if (propItems) {\n      setItems(propItems)\n      return\n    }\n\n    const container = contentRef?.current || document.body\n    \n    // Find all heading elements in the container\n    const headingElements = Array.from(\n      container.querySelectorAll<HTMLHeadingElement>(\n        \\`h\\${minLevel}, h\\${minLevel + 1}, h\\${minLevel + 2}, h\\${minLevel + 3}, h\\${minLevel + 4}, h\\${minLevel + 5}\\`.slice(0, (maxLevel - minLevel + 1) * 4)\n      )\n    )\n\n    // Convert heading elements to TOC items\n    const tocItems: TOCItem[] = []\n    \n    headingElements.forEach((heading) => {\n      const id = heading.id || heading.textContent?.trim().toLowerCase().replace(/\\s+/g, \"-\") || \"\"\n      \n      // Set ID on the heading if it doesn't have one\n      if (!heading.id) {\n        heading.id = id\n      }\n      \n      const level = parseInt(heading.tagName[1])\n      \n      tocItems.push({\n        id,\n        title: heading.textContent || \"\",\n        level,\n      })\n    })\n    \n    setItems(tocItems)\n  }, [contentRef, propItems, minLevel, maxLevel])\n\n  // Render TOC items recursively\n  const renderItems = (items: TOCItem[], depth = 0) => {\n    return (\n      <ul className={cn(\"m-0 list-none\", depth > 0 ? \"pl-4\" : \"\")}>\n        {items.map((item) => (\n          <li key={item.id} className=\"mt-2\">\n            <Link\n              href={\\`#\\${item.id}\\`}\n              className={cn(\n                \"inline-block text-sm no-underline transition-colors hover:text-foreground\",\n                activeId === item.id\n                  ? \"font-medium text-foreground\"\n                  : \"text-muted-foreground\"\n              )}\n              onClick={(e) => {\n                e.preventDefault()\n                document.getElementById(item.id)?.scrollIntoView({\n                  behavior: \"smooth\",\n                }); // End of scrollIntoView call\n              }} // End of onClick handler\n            /> // End of Link component\n          </li> // End of li element\n        ))} \n      </ul> // End of ul element\n    ); // End of renderItems return\n  }; // End of renderItems function\n\n  // useEffect for activeId could be re-added here if needed, assuming it was simple\n  // Example: \n  // useEffect(() => { \n  //   const observer = new IntersectionObserver(...); \n  //   document.querySelectorAll(\"h2[id], h3[id], h4[id]\").forEach((section) => observer.observe(section)); \n  //   return () => observer.disconnect(); \n  // }, [items]);\n\n  return ( // Return for TableOfContents functional component\n    <ScrollArea className={cn(\"py-4 pr-4\", className)}>\n      {title && <h3 className=\"mb-2 font-semibold text-sm\">{title}</h3>}\n      {items.length > 0 ? renderItems(items) : <p className=\"text-sm text-muted-foreground\">No headings found.</p>}\n    </ScrollArea>\n  );\n} // End of TableOfContents function definition (within the string literal)\n\"`, // End of the 'code' string literal for TableOfContents\n        similarity: 1.0, // Max similarity for direct match\n        filePath: \"src/components/TableOfContents.tsx\", // Placeholder path\n      };\n      exactMatches.push(tableOfContentsResult);\n      console.log(\"Added synthetic TableOfContents result to exactMatches.\");\n    } else if (query.toLowerCase().includes('code graph') || query.toLowerCase().includes('codegraph')) {\n      console.log(\"Code graph query detected, adding synthetic CodeGraph result (placeholder)\");\n      const codeGraphResult: CodebaseSearchResult = {\n        componentName: \"CodeGraph\",\n        methodName: \"\",\n        code: \"/* Code for CodeGraph component - this is a placeholder. Actual implementation would be dynamically fetched or generated. */\",\n        similarity: 1.0,\n        filePath: \"src/components/CodeGraph.tsx\", // Placeholder path\n      };\n      exactMatches.push(codeGraphResult);\n      console.log(\"Added synthetic CodeGraph result to exactMatches.\");\n    } else if (searchName) {\n      // Find exact matches from the vector DB if a specific name was parsed\n      console.log(`Searching for exact matches in vectorDb for: \\\"${searchName}\\\"...`);\n      vectorDb.forEach((entry: any) => {\n        const compName = entry.componentName?.toLowerCase();\n        const methName = entry.methodName?.toLowerCase();\n        // Check if the component name, method name, or fully qualified name matches\n        if (compName === searchName || methName === searchName || (compName && methName && `${compName}.${methName}` === searchName)) {\n          // Check if this exact match (by component, method, and path) is already in exactMatches\n          if (!exactMatches.some(em => em.componentName === entry.componentName && em.methodName === entry.methodName && em.filePath === entry.filePath)) {\n             exactMatches.push({\n                ...entry, // Spread the original entry data\n                similarity: 1.0, // Assign maximum similarity for an exact match\n             });\n          }\n        }\n      });\n      console.log(`Found ${exactMatches.length} exact matches for \\\"${searchName}\\\" after DB scan.`);\n    }\n\n    // Combine searchResults (from vector search) and exactMatches, ensuring uniqueness\n    const combinedResultsMap = new Map<string, CodebaseSearchResult>();\n    searchResults.forEach(r => combinedResultsMap.set(`${r.filePath}-${r.componentName}-${r.methodName}`, r));\n    exactMatches.forEach(r => combinedResultsMap.set(`${r.filePath}-${r.componentName}-${r.methodName}`, r)); // Exact matches will overwrite vector results if keys are identical\n    \n    const combinedResults = Array.from(combinedResultsMap.values());\n    // Sort combined results by similarity (exact matches with 1.0 will be at the top)\n    combinedResults.sort((a, b) => b.similarity - a.similarity);\n\n    console.log(`Total combined (unique) results: ${combinedResults.length}`);\n\n    // Construct the context for the LLM\n    let contextText = \"You are a helpful AI assistant knowledgeable about this codebase. \" +\n                      \"Use the following code snippets to answer the user's query. \" +\n                      \"Prioritize information from exact matches if available. Be concise and refer to specific components or methods where possible.\\n\\n\";\n\n    if (combinedResults.length > 0) {\n      contextText += \"Relevant code found:\\n\";\n      // Take top N results to build context, e.g., top 5 or 10\n      combinedResults.slice(0, 10).forEach((result, index) => {\n        contextText += `\\n--- Snippet ${index + 1}: ${result.componentName}${result.methodName ? '.' + result.methodName : ''} (Similarity: ${result.similarity.toFixed(2)}, Path: ${result.filePath}) ---\\n`;\n        let codeContent = result.code || \"\";\n        if (codeContent.length > 1000) { // Truncate code snippet if too long\n          codeContent = codeContent.substring(0, 1000) + \"... (truncated)\";\n        }\n        contextText += codeContent + \"\\n\";\n      });\n    } else {\n      contextText += \"No specific code snippets found relevant to the query. Answer based on general knowledge if possible, or state that you couldn't find relevant information in the codebase.\\n\";\n    }\n    \n    console.log(`Context text length for LLM: ${contextText.length}`);\n    // For full context debugging (can be very verbose):\n    // if (contextText.length < 5000) console.log(\"Context text for LLM:\", contextText);\n    // else console.log(\"Context text for LLM is too long to print fully.\");\n\n    const messages: ChatMessage[] = [\n      { role: \"system\", content: contextText },\n      ...history,\n      { role: \"user\", content: query },\n    ];\n\n    let response: string;\n    if (this.useOllama) {\n      console.log(\"Using Ollama for LLM response generation.\");\n      response = await this.getOllamaResponse(messages);\n    } else {\n      console.log(\"Using OpenAI for LLM response generation.\");\n      response = await this.getOpenAIResponse(messages);\n    }\n    \n    console.log(\"LLM Raw Response:\", response);\n    console.log(\"=== CHAT PROCESSING END ===\\n\");\n\n    // Return the LLM's response and the search results used for context (limited for brevity in return)\n    return { response, searchResults: combinedResults.slice(0, 10) };\n  }",
        "returnType": "Promise<{ response: string; searchResults: CodebaseSearchResult[] }>",
        "params": [
          {
            "name": "history",
            "type": "ChatMessage[]",
            "description": "",
            "optional": false
          },
          {
            "name": "query",
            "type": "string",
            "description": "",
            "optional": false
          }
        ]
      }
    ]
  },
  {
    "name": "CodebaseGeneratorService",
    "kind": "class",
    "code": "export class CodebaseGeneratorService {\n  private apiKey?: string;\n  private useOllama: boolean;\n  private ollamaUrl: string;\n  private model: string;\n\n  constructor(options: GeneratorServiceOptions) {\n    this.apiKey = options.apiKey;\n    this.useOllama = options.useOllama || false;\n    this.ollamaUrl = options.ollamaUrl || \"http://localhost:11434\";\n    this.model = options.model || (this.useOllama ? \"gemma3:4b\" : \"gpt-4\");\n  }\n\n  /**\n   * Generate code from a user prompt.\n   * @param prompt The user's natural language prompt.\n   * @returns The generated code as a string.\n   * @example\n   * const code = await generator.generateComponent('Create a React button');\n   */\n  async generateComponent(prompt: string): Promise<GeneratorResult> {\n    // Implementation to call OpenAI or Ollama API goes here\n    return { code: `// Generated code for: ${prompt}` };\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ai/generator/generator-service.ts",
    "slug": "src_ai_generator_generator-service_codebasegeneratorservice",
    "imports": [
      "GeneratorServiceOptions",
      "GeneratorResult"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ai_generator_generator-service_codebasegeneratorservice",
        "target": "generatorserviceoptions",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ai_generator_generator-service_codebasegeneratorservice",
        "target": "generatorresult",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      }
    ],
    "methods": [
      {
        "name": "generateComponent",
        "code": "async generateComponent(prompt: string): Promise<GeneratorResult> {\n    // Implementation to call OpenAI or Ollama API goes here\n    return { code: `// Generated code for: ${prompt}` };\n  }",
        "returnType": "Promise<GeneratorResult>",
        "params": [
          {
            "name": "prompt",
            "type": "string",
            "description": "",
            "optional": false
          }
        ]
      }
    ]
  },
  {
    "name": "RelationshipsPage",
    "kind": "component",
    "code": "export default function RelationshipsPage() {\n  return (\n    <div className=\"container max-w-6xl py-12\">\n      <div className=\"flex flex-col gap-4 mb-12\">\n        <h1 className=\"text-4xl font-bold tracking-tight\">Code Relationships</h1>\n        <p className=\"text-muted-foreground text-xl\">Explore dependencies and relationships between code elements</p>\n      </div>\n\n      <div className=\"space-y-12\">\n        <CodeGraph />\n        <CodeRelationships />\n      </div>\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/app/relationships/page.tsx",
    "slug": "test-docs-project_app_relationships_page_relationshipspage",
    "imports": [
      "CodeRelationships",
      "CodeGraph"
    ],
    "references": [
      "CodeGraph",
      "CodeRelationships"
    ],
    "relationships": [
      {
        "source": "test-docs-project_app_relationships_page_relationshipspage",
        "target": "coderelationships",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_relationships_page_relationshipspage",
        "target": "codegraph",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "SimilarityPage",
    "kind": "component",
    "code": "export default function SimilarityPage() {\n  const [threshold, setThreshold] = useState([50])\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [componentsData, setComponentsData] = useState<ComponentData[]>([])\n\n  // Add debug code to verify the data files are accessible\n  useEffect(() => {\n    async function loadAllData() {\n      try {\n        // Debug: Check if we can access the component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`);\n        }\n\n        const indexData = await indexRes.json();\n        console.log('Component index data loaded:', indexData);\n\n        // Load all component data files\n        const allComponentsData = await Promise.all(\n          indexData.map(async (comp: { slug: string }) => {\n            try {\n              const res = await fetch(`/docs-data/${comp.slug}.json`);\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`);\n                return null;\n              }\n              return await res.json();\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err);\n              return null;\n            }\n          })\n        );\n\n        // Filter out null results\n        const validComponentsData = allComponentsData.filter(Boolean) as ComponentData[];\n        console.log('Valid components loaded:', validComponentsData.length);\n\n        // Process the data to extract and incorporate methods from entities\n        const processedData = validComponentsData.map(data => {\n          if (data.entities && data.entities.length > 0) {\n            // Extract methods from entities\n            if (!data.methods) {\n              data.methods = [];\n            }\n\n            data.entities.forEach((entity) => {\n              if (entity.methods && entity.methods.length > 0) {\n                data.methods!.push(...entity.methods);\n              }\n            });\n          }\n          return data;\n        });\n\n        // Check for methods with similarities\n        let totalMethodsWithSimilarities = 0;\n        processedData.forEach((comp) => {\n          if (comp.methods) {\n            const withSimilarities = comp.methods.filter((m) =>\n              m.similarityWarnings && m.similarityWarnings.length > 0\n            );\n            totalMethodsWithSimilarities += withSimilarities.length;\n          }\n        });\n\n        console.log(`Found ${totalMethodsWithSimilarities} total methods with similarity warnings`);\n\n        // Set components data for the SimilarityList to use\n        // Ensure each component has a unique ID to prevent duplicate key issues\n        const uniqueComponents = processedData.map((comp, index) => ({\n          ...comp,\n          // Add a unique ID based on index to prevent React duplicate key errors\n          _uniqueId: `${comp.slug || comp.name}-${index}`\n        }));\n        \n        setComponentsData(uniqueComponents);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n        setError(error instanceof Error ? error.message : \"Unknown error\");\n        setIsLoading(false);\n      }\n    }\n\n    loadAllData();\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"container max-w-5xl py-12\">\n        <p className=\"text-center text-lg\">Loading components data...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container max-w-5xl py-12\">\n        <p className=\"text-center text-lg text-red-500\">Error: {error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container max-w-5xl py-12\">\n      <div className=\"mb-12\">\n        <h1 className=\"text-4xl font-bold tracking-tight\">Component Similarity</h1>\n        <p className=\"text-muted-foreground text-xl mt-2\">\n          Identify components with similar functionality or structure\n        </p>\n      </div>\n\n      <Card className=\"mb-10 border-none shadow-md bg-white dark:bg-slate-900\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col gap-6\">\n            <h3 className=\"text-lg font-medium\">Similarity Threshold</h3>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-2xl font-bold\">{threshold}%</span>\n              <span className=\"text-sm text-muted-foreground\">Higher values show fewer, more similar matches</span>\n            </div>\n            <Slider value={threshold} onValueChange={setThreshold} min={50} max={95} step={5} className=\"py-4\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      <SimilarityList\n        threshold={threshold[0]}\n        preloadedComponents={componentsData}\n      />\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/app/similarity/page.tsx",
    "slug": "test-docs-project_app_similarity_page_similaritypage",
    "imports": [
      "Card",
      "CardContent",
      "Slider",
      "SimilarityList"
    ],
    "references": [
      "Card",
      "CardContent",
      "Slider",
      "SimilarityList"
    ],
    "relationships": [
      {
        "source": "test-docs-project_app_similarity_page_similaritypage",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_similarity_page_similaritypage",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_similarity_page_similaritypage",
        "target": "slider",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "test-docs-project_app_similarity_page_similaritypage",
        "target": "similaritylist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "loadAllData",
    "kind": "function",
    "code": "async function loadAllData() {\n      try {\n        // Debug: Check if we can access the component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`);\n        }\n\n        const indexData = await indexRes.json();\n        console.log('Component index data loaded:', indexData);\n\n        // Load all component data files\n        const allComponentsData = await Promise.all(\n          indexData.map(async (comp: { slug: string }) => {\n            try {\n              const res = await fetch(`/docs-data/${comp.slug}.json`);\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`);\n                return null;\n              }\n              return await res.json();\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err);\n              return null;\n            }\n          })\n        );\n\n        // Filter out null results\n        const validComponentsData = allComponentsData.filter(Boolean) as ComponentData[];\n        console.log('Valid components loaded:', validComponentsData.length);\n\n        // Process the data to extract and incorporate methods from entities\n        const processedData = validComponentsData.map(data => {\n          if (data.entities && data.entities.length > 0) {\n            // Extract methods from entities\n            if (!data.methods) {\n              data.methods = [];\n            }\n\n            data.entities.forEach((entity) => {\n              if (entity.methods && entity.methods.length > 0) {\n                data.methods!.push(...entity.methods);\n              }\n            });\n          }\n          return data;\n        });\n\n        // Check for methods with similarities\n        let totalMethodsWithSimilarities = 0;\n        processedData.forEach((comp) => {\n          if (comp.methods) {\n            const withSimilarities = comp.methods.filter((m) =>\n              m.similarityWarnings && m.similarityWarnings.length > 0\n            );\n            totalMethodsWithSimilarities += withSimilarities.length;\n          }\n        });\n\n        console.log(`Found ${totalMethodsWithSimilarities} total methods with similarity warnings`);\n\n        // Set components data for the SimilarityList to use\n        // Ensure each component has a unique ID to prevent duplicate key issues\n        const uniqueComponents = processedData.map((comp, index) => ({\n          ...comp,\n          // Add a unique ID based on index to prevent React duplicate key errors\n          _uniqueId: `${comp.slug || comp.name}-${index}`\n        }));\n        \n        setComponentsData(uniqueComponents);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n        setError(error instanceof Error ? error.message : \"Unknown error\");\n        setIsLoading(false);\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/app/similarity/page.tsx",
    "slug": "test-docs-project_app_similarity_page_loadalldata",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "TooltipProvider",
    "kind": "component",
    "code": "function TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/tooltip.tsx",
    "slug": "src_ui_components_ui_tooltip_tooltipprovider",
    "imports": [],
    "references": [
      "Provider",
      "TooltipProvider",
      "Root",
      "Trigger",
      "Portal",
      "Content",
      "Arrow"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_tooltip_tooltipprovider",
        "target": "provider",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltipprovider",
        "target": "tooltipprovider",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltipprovider",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltipprovider",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltipprovider",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltipprovider",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltipprovider",
        "target": "arrow",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Tooltip",
    "kind": "component",
    "code": "function Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/tooltip.tsx",
    "slug": "src_ui_components_ui_tooltip_tooltip",
    "imports": [],
    "references": [
      "Provider",
      "TooltipProvider",
      "Root",
      "Trigger",
      "Portal",
      "Content",
      "Arrow"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_tooltip_tooltip",
        "target": "provider",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltip",
        "target": "tooltipprovider",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltip",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltip",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltip",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltip",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltip",
        "target": "arrow",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "TooltipTrigger",
    "kind": "component",
    "code": "function TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/tooltip.tsx",
    "slug": "src_ui_components_ui_tooltip_tooltiptrigger",
    "imports": [],
    "references": [
      "Provider",
      "TooltipProvider",
      "Root",
      "Trigger",
      "Portal",
      "Content",
      "Arrow"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_tooltip_tooltiptrigger",
        "target": "provider",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltiptrigger",
        "target": "tooltipprovider",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltiptrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltiptrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltiptrigger",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltiptrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltiptrigger",
        "target": "arrow",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "TooltipContent",
    "kind": "component",
    "code": "function TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/tooltip.tsx",
    "slug": "src_ui_components_ui_tooltip_tooltipcontent",
    "imports": [],
    "references": [
      "Provider",
      "TooltipProvider",
      "Root",
      "Trigger",
      "Portal",
      "Content",
      "Arrow"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_tooltip_tooltipcontent",
        "target": "provider",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltipcontent",
        "target": "tooltipprovider",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltipcontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltipcontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltipcontent",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltipcontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tooltip_tooltipcontent",
        "target": "arrow",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Textarea",
    "kind": "component",
    "code": "function Textarea({ className, ...props }: React.ComponentProps<\"textarea\">) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        \"border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/textarea.tsx",
    "slug": "src_ui_components_ui_textarea_textarea",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Tabs",
    "kind": "component",
    "code": "function Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/tabs.tsx",
    "slug": "src_ui_components_ui_tabs_tabs",
    "imports": [],
    "references": [
      "Root",
      "List",
      "Trigger",
      "Content"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_tabs_tabs",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tabs_tabs",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tabs_tabs",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tabs_tabs",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "TabsList",
    "kind": "component",
    "code": "function TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/tabs.tsx",
    "slug": "src_ui_components_ui_tabs_tabslist",
    "imports": [],
    "references": [
      "Root",
      "List",
      "Trigger",
      "Content"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_tabs_tabslist",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tabs_tabslist",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tabs_tabslist",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tabs_tabslist",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "TabsTrigger",
    "kind": "component",
    "code": "function TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/tabs.tsx",
    "slug": "src_ui_components_ui_tabs_tabstrigger",
    "imports": [],
    "references": [
      "Root",
      "List",
      "Trigger",
      "Content"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_tabs_tabstrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tabs_tabstrigger",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tabs_tabstrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tabs_tabstrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "TabsContent",
    "kind": "component",
    "code": "function TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/tabs.tsx",
    "slug": "src_ui_components_ui_tabs_tabscontent",
    "imports": [],
    "references": [
      "Root",
      "List",
      "Trigger",
      "Content"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_tabs_tabscontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tabs_tabscontent",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tabs_tabscontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_tabs_tabscontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Table",
    "kind": "component",
    "code": "function Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/table.tsx",
    "slug": "src_ui_components_ui_table_table",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "TableHeader",
    "kind": "component",
    "code": "function TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/table.tsx",
    "slug": "src_ui_components_ui_table_tableheader",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "TableBody",
    "kind": "component",
    "code": "function TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/table.tsx",
    "slug": "src_ui_components_ui_table_tablebody",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "TableFooter",
    "kind": "component",
    "code": "function TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/table.tsx",
    "slug": "src_ui_components_ui_table_tablefooter",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "TableRow",
    "kind": "component",
    "code": "function TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/table.tsx",
    "slug": "src_ui_components_ui_table_tablerow",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "TableHead",
    "kind": "component",
    "code": "function TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/table.tsx",
    "slug": "src_ui_components_ui_table_tablehead",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "TableCell",
    "kind": "component",
    "code": "function TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/table.tsx",
    "slug": "src_ui_components_ui_table_tablecell",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "TableCaption",
    "kind": "component",
    "code": "function TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/table.tsx",
    "slug": "src_ui_components_ui_table_tablecaption",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Switch",
    "kind": "component",
    "code": "function Switch({\n    className,\n    ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n    return (\n        <SwitchPrimitive.Root\n            data-slot=\"switch\"\n            className={cn(\n                \"peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n                className\n            )}\n            {...props}\n        >\n            <SwitchPrimitive.Thumb\n                data-slot=\"switch-thumb\"\n                className={cn(\n                    \"bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0\"\n                )}\n            />\n        </SwitchPrimitive.Root>\n    )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/switch.tsx",
    "slug": "src_ui_components_ui_switch_switch",
    "imports": [],
    "references": [
      "Root",
      "Thumb"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_switch_switch",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_switch_switch",
        "target": "thumb",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Slider",
    "kind": "component",
    "code": "function Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max]\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        \"relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={cn(\n          \"bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5\"\n        )}\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={cn(\n            \"bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full\"\n          )}\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/slider.tsx",
    "slug": "src_ui_components_ui_slider_slider",
    "imports": [],
    "references": [
      "Root",
      "Track",
      "Range",
      "Thumb"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_slider_slider",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_slider_slider",
        "target": "track",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_slider_slider",
        "target": "range",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_slider_slider",
        "target": "thumb",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Skeleton",
    "kind": "component",
    "code": "function Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/skeleton.tsx",
    "slug": "src_ui_components_ui_skeleton_skeleton",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Select",
    "kind": "component",
    "code": "function Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/select.tsx",
    "slug": "src_ui_components_ui_select_select",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_select_select",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_select",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectGroup",
    "kind": "component",
    "code": "function SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/select.tsx",
    "slug": "src_ui_components_ui_select_selectgroup",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectgroup",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectValue",
    "kind": "component",
    "code": "function SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/select.tsx",
    "slug": "src_ui_components_ui_select_selectvalue",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectvalue",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectTrigger",
    "kind": "component",
    "code": "function SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/select.tsx",
    "slug": "src_ui_components_ui_select_selecttrigger",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selecttrigger",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectContent",
    "kind": "component",
    "code": "function SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/select.tsx",
    "slug": "src_ui_components_ui_select_selectcontent",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectcontent",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectLabel",
    "kind": "component",
    "code": "function SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/select.tsx",
    "slug": "src_ui_components_ui_select_selectlabel",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectlabel",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectItem",
    "kind": "component",
    "code": "function SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/select.tsx",
    "slug": "src_ui_components_ui_select_selectitem",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectitem",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectSeparator",
    "kind": "component",
    "code": "function SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/select.tsx",
    "slug": "src_ui_components_ui_select_selectseparator",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectseparator",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectScrollUpButton",
    "kind": "component",
    "code": "function SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/select.tsx",
    "slug": "src_ui_components_ui_select_selectscrollupbutton",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrollupbutton",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "SelectScrollDownButton",
    "kind": "component",
    "code": "function SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/select.tsx",
    "slug": "src_ui_components_ui_select_selectscrolldownbutton",
    "imports": [
      "CheckIcon",
      "ChevronDownIcon",
      "ChevronUpIcon"
    ],
    "references": [
      "Root",
      "Group",
      "Value",
      "Trigger",
      "Icon",
      "ChevronDownIcon",
      "Portal",
      "Content",
      "SelectScrollUpButton",
      "Viewport",
      "SelectScrollDownButton",
      "Label",
      "Item",
      "ItemIndicator",
      "CheckIcon",
      "ItemText",
      "Separator",
      "ScrollUpButton",
      "ChevronUpIcon",
      "ScrollDownButton"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "chevronupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "value",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "icon",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "selectscrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "selectscrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "itemtext",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "scrollupbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_select_selectscrolldownbutton",
        "target": "scrolldownbutton",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "ScrollArea",
    "kind": "component",
    "code": "function ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/scroll-area.tsx",
    "slug": "src_ui_components_ui_scroll-area_scrollarea",
    "imports": [],
    "references": [
      "Root",
      "Viewport",
      "ScrollBar",
      "Corner",
      "ScrollAreaScrollbar",
      "ScrollAreaThumb"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_scroll-area_scrollarea",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_scroll-area_scrollarea",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_scroll-area_scrollarea",
        "target": "scrollbar",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_scroll-area_scrollarea",
        "target": "corner",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_scroll-area_scrollarea",
        "target": "scrollareascrollbar",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_scroll-area_scrollarea",
        "target": "scrollareathumb",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "ScrollBar",
    "kind": "component",
    "code": "function ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/scroll-area.tsx",
    "slug": "src_ui_components_ui_scroll-area_scrollbar",
    "imports": [],
    "references": [
      "Root",
      "Viewport",
      "ScrollBar",
      "Corner",
      "ScrollAreaScrollbar",
      "ScrollAreaThumb"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_scroll-area_scrollbar",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_scroll-area_scrollbar",
        "target": "viewport",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_scroll-area_scrollbar",
        "target": "scrollbar",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_scroll-area_scrollbar",
        "target": "corner",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_scroll-area_scrollbar",
        "target": "scrollareascrollbar",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_scroll-area_scrollbar",
        "target": "scrollareathumb",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Label",
    "kind": "component",
    "code": "function Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/label.tsx",
    "slug": "src_ui_components_ui_label_label",
    "imports": [],
    "references": [
      "Root"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_label_label",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenu",
    "kind": "component",
    "code": "function DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenu",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenu",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuPortal",
    "kind": "component",
    "code": "function DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuportal",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuTrigger",
    "kind": "component",
    "code": "function DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenutrigger",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuContent",
    "kind": "component",
    "code": "function DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucontent",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuGroup",
    "kind": "component",
    "code": "function DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenugroup",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuItem",
    "kind": "component",
    "code": "function DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuitem",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuCheckboxItem",
    "kind": "component",
    "code": "function DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenucheckboxitem",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuRadioGroup",
    "kind": "component",
    "code": "function DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradiogroup",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuRadioItem",
    "kind": "component",
    "code": "function DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuradioitem",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuLabel",
    "kind": "component",
    "code": "function DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenulabel",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuSeparator",
    "kind": "component",
    "code": "function DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenuseparator",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuShortcut",
    "kind": "component",
    "code": "function DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenushortcut",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuSub",
    "kind": "component",
    "code": "function DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusub",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuSubTrigger",
    "kind": "component",
    "code": "function DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubtrigger",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DropdownMenuSubContent",
    "kind": "component",
    "code": "function DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dropdown-menu.tsx",
    "slug": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
    "imports": [
      "CheckIcon",
      "ChevronRightIcon",
      "CircleIcon"
    ],
    "references": [
      "Root",
      "Portal",
      "Trigger",
      "Content",
      "Group",
      "Item",
      "CheckboxItem",
      "ItemIndicator",
      "CheckIcon",
      "RadioGroup",
      "RadioItem",
      "CircleIcon",
      "Label",
      "Separator",
      "Sub",
      "SubTrigger",
      "ChevronRightIcon",
      "SubContent"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "checkicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "chevronrighticon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "circleicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "checkboxitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "itemindicator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "radiogroup",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "radioitem",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "label",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "sub",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "subtrigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dropdown-menu_dropdownmenusubcontent",
        "target": "subcontent",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Dialog",
    "kind": "component",
    "code": "function Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dialog.tsx",
    "slug": "src_ui_components_ui_dialog_dialog",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dialog_dialog",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dialog_dialog",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialog",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialog",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialog",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialog",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialog",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialog",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialog",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialog",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialog",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogTrigger",
    "kind": "component",
    "code": "function DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dialog.tsx",
    "slug": "src_ui_components_ui_dialog_dialogtrigger",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dialog_dialogtrigger",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtrigger",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtrigger",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtrigger",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtrigger",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtrigger",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtrigger",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtrigger",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogPortal",
    "kind": "component",
    "code": "function DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dialog.tsx",
    "slug": "src_ui_components_ui_dialog_dialogportal",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dialog_dialogportal",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogportal",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogportal",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogportal",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogportal",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogportal",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogportal",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogportal",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogportal",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogportal",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogportal",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogClose",
    "kind": "component",
    "code": "function DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dialog.tsx",
    "slug": "src_ui_components_ui_dialog_dialogclose",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dialog_dialogclose",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogclose",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogclose",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogclose",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogclose",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogclose",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogclose",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogclose",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogclose",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogclose",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogclose",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogOverlay",
    "kind": "component",
    "code": "function DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dialog.tsx",
    "slug": "src_ui_components_ui_dialog_dialogoverlay",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dialog_dialogoverlay",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogoverlay",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogoverlay",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogoverlay",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogoverlay",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogoverlay",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogoverlay",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogoverlay",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogoverlay",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogoverlay",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogoverlay",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogContent",
    "kind": "component",
    "code": "function DialogContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content>) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <DialogPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n          <XIcon />\n          <span className=\"sr-only\">Close</span>\n        </DialogPrimitive.Close>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dialog.tsx",
    "slug": "src_ui_components_ui_dialog_dialogcontent",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dialog_dialogcontent",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogcontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogcontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogcontent",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogcontent",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogcontent",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogcontent",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogcontent",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogcontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogcontent",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogcontent",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogHeader",
    "kind": "component",
    "code": "function DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dialog.tsx",
    "slug": "src_ui_components_ui_dialog_dialogheader",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dialog_dialogheader",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogheader",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogheader",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogheader",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogheader",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogheader",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogheader",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogheader",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogheader",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogheader",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogheader",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogFooter",
    "kind": "component",
    "code": "function DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dialog.tsx",
    "slug": "src_ui_components_ui_dialog_dialogfooter",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dialog_dialogfooter",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogfooter",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogfooter",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogfooter",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogfooter",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogfooter",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogfooter",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogfooter",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogfooter",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogfooter",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogfooter",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogTitle",
    "kind": "component",
    "code": "function DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dialog.tsx",
    "slug": "src_ui_components_ui_dialog_dialogtitle",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dialog_dialogtitle",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtitle",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtitle",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtitle",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtitle",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtitle",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtitle",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtitle",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtitle",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtitle",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogtitle",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "DialogDescription",
    "kind": "component",
    "code": "function DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/dialog.tsx",
    "slug": "src_ui_components_ui_dialog_dialogdescription",
    "imports": [
      "XIcon"
    ],
    "references": [
      "Root",
      "Trigger",
      "Portal",
      "Close",
      "Overlay",
      "DialogPortal",
      "DialogOverlay",
      "Content",
      "XIcon",
      "Title",
      "Description"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_dialog_dialogdescription",
        "target": "xicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogdescription",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogdescription",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogdescription",
        "target": "portal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogdescription",
        "target": "close",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogdescription",
        "target": "overlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogdescription",
        "target": "dialogportal",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogdescription",
        "target": "dialogoverlay",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogdescription",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogdescription",
        "target": "title",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_dialog_dialogdescription",
        "target": "description",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Command",
    "kind": "component",
    "code": "function Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        \"bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/command.tsx",
    "slug": "src_ui_components_ui_command_command",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_command_command",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_command",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandDialog",
    "kind": "component",
    "code": "function CommandDialog({\n  title = \"Command Palette\",\n  description = \"Search for a command to run...\",\n  children,\n  contentClassName,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n  contentClassName?: string\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent className={cn(\"overflow-hidden p-0\", contentClassName)}>\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/command.tsx",
    "slug": "src_ui_components_ui_command_commanddialog",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commanddialog",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandInput",
    "kind": "component",
    "code": "function CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          \"placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/command.tsx",
    "slug": "src_ui_components_ui_command_commandinput",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandinput",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandList",
    "kind": "component",
    "code": "function CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        \"max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/command.tsx",
    "slug": "src_ui_components_ui_command_commandlist",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandlist",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandEmpty",
    "kind": "component",
    "code": "function CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/command.tsx",
    "slug": "src_ui_components_ui_command_commandempty",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandempty",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandGroup",
    "kind": "component",
    "code": "function CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        \"text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/command.tsx",
    "slug": "src_ui_components_ui_command_commandgroup",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandgroup",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandSeparator",
    "kind": "component",
    "code": "function CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn(\"bg-border -mx-1 h-px\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/command.tsx",
    "slug": "src_ui_components_ui_command_commandseparator",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandseparator",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandItem",
    "kind": "component",
    "code": "function CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/command.tsx",
    "slug": "src_ui_components_ui_command_commanditem",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commanditem",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "CommandShortcut",
    "kind": "component",
    "code": "function CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/command.tsx",
    "slug": "src_ui_components_ui_command_commandshortcut",
    "imports": [
      "CommandPrimitive",
      "SearchIcon",
      "Dialog",
      "DialogContent",
      "DialogDescription",
      "DialogHeader",
      "DialogTitle"
    ],
    "references": [
      "CommandPrimitive",
      "Dialog",
      "DialogHeader",
      "DialogTitle",
      "DialogDescription",
      "DialogContent",
      "Command",
      "SearchIcon",
      "Input",
      "List",
      "Empty",
      "Group",
      "Separator",
      "Item"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "commandprimitive",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "searchicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "dialog",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "dialogcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "dialogdescription",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "dialogheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "dialogtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "command",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "input",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "list",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "empty",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "group",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "separator",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_command_commandshortcut",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Card",
    "kind": "component",
    "code": "function Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/card.tsx",
    "slug": "src_ui_components_ui_card_card",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": [
      {
        "name": "zach",
        "code": "function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "hi",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "zach",
    "kind": "function",
    "code": "function zach(hi: string) {\n    let z = hi + hi\n    console.log(z)\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/card.tsx",
    "slug": "src_ui_components_ui_card_zach",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CardHeader",
    "kind": "component",
    "code": "function CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/card.tsx",
    "slug": "src_ui_components_ui_card_cardheader",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CardTitle",
    "kind": "component",
    "code": "function CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/card.tsx",
    "slug": "src_ui_components_ui_card_cardtitle",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CardDescription",
    "kind": "component",
    "code": "function CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/card.tsx",
    "slug": "src_ui_components_ui_card_carddescription",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CardAction",
    "kind": "component",
    "code": "function CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/card.tsx",
    "slug": "src_ui_components_ui_card_cardaction",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CardContent",
    "kind": "component",
    "code": "function CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/card.tsx",
    "slug": "src_ui_components_ui_card_cardcontent",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "CardFooter",
    "kind": "component",
    "code": "function CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/card.tsx",
    "slug": "src_ui_components_ui_card_cardfooter",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "Button",
    "kind": "component",
    "code": "function Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/button.tsx",
    "slug": "src_ui_components_ui_button_button",
    "imports": [
      "Slot",
      "VariantProps"
    ],
    "references": [
      "Comp"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_button_button",
        "target": "slot",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_ui_button_button",
        "target": "variantprops",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_ui_button_button",
        "target": "comp",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Badge",
    "kind": "component",
    "code": "function Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/badge.tsx",
    "slug": "src_ui_components_ui_badge_badge",
    "imports": [
      "Slot",
      "VariantProps"
    ],
    "references": [
      "Comp"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_badge_badge",
        "target": "slot",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_ui_badge_badge",
        "target": "variantprops",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_components_ui_badge_badge",
        "target": "comp",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Avatar",
    "kind": "component",
    "code": "function Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        \"relative flex size-8 shrink-0 overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/avatar.tsx",
    "slug": "src_ui_components_ui_avatar_avatar",
    "imports": [],
    "references": [
      "Root",
      "Image",
      "Fallback"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_avatar_avatar",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_avatar_avatar",
        "target": "image",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_avatar_avatar",
        "target": "fallback",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "AvatarImage",
    "kind": "component",
    "code": "function AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/avatar.tsx",
    "slug": "src_ui_components_ui_avatar_avatarimage",
    "imports": [],
    "references": [
      "Root",
      "Image",
      "Fallback"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_avatar_avatarimage",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_avatar_avatarimage",
        "target": "image",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_avatar_avatarimage",
        "target": "fallback",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "AvatarFallback",
    "kind": "component",
    "code": "function AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"bg-muted flex size-full items-center justify-center rounded-full\",\n        className\n      )}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/avatar.tsx",
    "slug": "src_ui_components_ui_avatar_avatarfallback",
    "imports": [],
    "references": [
      "Root",
      "Image",
      "Fallback"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_avatar_avatarfallback",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_avatar_avatarfallback",
        "target": "image",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_avatar_avatarfallback",
        "target": "fallback",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "Accordion",
    "kind": "component",
    "code": "function Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/accordion.tsx",
    "slug": "src_ui_components_ui_accordion_accordion",
    "imports": [
      "ChevronDownIcon"
    ],
    "references": [
      "Root",
      "Item",
      "Header",
      "Trigger",
      "ChevronDownIcon",
      "Content"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_accordion_accordion",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_accordion_accordion",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordion",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordion",
        "target": "header",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordion",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordion",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "AccordionItem",
    "kind": "component",
    "code": "function AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(\"border-b last:border-b-0\", className)}\n      {...props}\n    />\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/accordion.tsx",
    "slug": "src_ui_components_ui_accordion_accordionitem",
    "imports": [
      "ChevronDownIcon"
    ],
    "references": [
      "Root",
      "Item",
      "Header",
      "Trigger",
      "ChevronDownIcon",
      "Content"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_accordion_accordionitem",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_accordion_accordionitem",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordionitem",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordionitem",
        "target": "header",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordionitem",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordionitem",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "AccordionTrigger",
    "kind": "component",
    "code": "function AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          \"focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/accordion.tsx",
    "slug": "src_ui_components_ui_accordion_accordiontrigger",
    "imports": [
      "ChevronDownIcon"
    ],
    "references": [
      "Root",
      "Item",
      "Header",
      "Trigger",
      "ChevronDownIcon",
      "Content"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_accordion_accordiontrigger",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_accordion_accordiontrigger",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordiontrigger",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordiontrigger",
        "target": "header",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordiontrigger",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordiontrigger",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "AccordionContent",
    "kind": "component",
    "code": "function AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn(\"pt-0 pb-4\", className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/components/ui/accordion.tsx",
    "slug": "src_ui_components_ui_accordion_accordioncontent",
    "imports": [
      "ChevronDownIcon"
    ],
    "references": [
      "Root",
      "Item",
      "Header",
      "Trigger",
      "ChevronDownIcon",
      "Content"
    ],
    "relationships": [
      {
        "source": "src_ui_components_ui_accordion_accordioncontent",
        "target": "chevrondownicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_components_ui_accordion_accordioncontent",
        "target": "root",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordioncontent",
        "target": "item",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordioncontent",
        "target": "header",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordioncontent",
        "target": "trigger",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      },
      {
        "source": "src_ui_components_ui_accordion_accordioncontent",
        "target": "content",
        "type": "uses",
        "weight": 2,
        "context": "renders only"
      }
    ],
    "methods": []
  },
  {
    "name": "StructurePage",
    "kind": "component",
    "code": "export default function StructurePage() {\n  return (\n    <div className=\"container max-w-7xl py-12\">\n      <div className=\"flex flex-col gap-4 mb-12\">\n        <h1 className=\"text-4xl font-bold tracking-tight\">Code Architecture</h1>\n        <p className=\"text-muted-foreground text-xl\">\n          Explore your application's architecture, dependencies, and design patterns.\n        </p>\n      </div>\n\n      <div className=\"space-y-12\">\n        <CodeArchitecture />\n      </div>\n    </div>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/structure/page.tsx",
    "slug": "src_ui_app_structure_page_structurepage",
    "imports": [
      "CodeArchitecture"
    ],
    "references": [
      "CodeArchitecture"
    ],
    "relationships": [
      {
        "source": "src_ui_app_structure_page_structurepage",
        "target": "codearchitecture",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "SimilarityPage",
    "kind": "component",
    "code": "export default function SimilarityPage() {\n  const [threshold, setThreshold] = useState([50])\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [componentsData, setComponentsData] = useState<ComponentData[]>([])\n  const [showArchived, setShowArchived] = useState(false)\n  const [archivedCount, setArchivedCount] = useState(0)\n\n  // Add debug code to verify the data files are accessible\n  useEffect(() => {\n    async function loadAllData() {\n      try {\n        // Debug: Check if we can access the component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`);\n        }\n\n        const indexData = await indexRes.json();\n        console.log('Component index data loaded:', indexData);\n\n        // Load all component data files\n        const allComponentsData = await Promise.all(\n          indexData.map(async (comp: { slug: string }) => {\n            try {\n              const res = await fetch(`/docs-data/${comp.slug}.json`);\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`);\n                return null;\n              }\n              return await res.json();\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err);\n              return null;\n            }\n          })\n        );\n\n        // Filter out null results\n        const validComponentsData = allComponentsData.filter(Boolean) as ComponentData[];\n        console.log('Valid components loaded:', validComponentsData.length);\n\n        // Process the data to extract and incorporate methods from entities\n        const processedData = validComponentsData.map(data => {\n          if (data.entities && data.entities.length > 0) {\n            // Extract methods from entities\n            if (!data.methods) {\n              data.methods = [];\n            }\n\n            data.entities.forEach((entity) => {\n              if (entity.methods && entity.methods.length > 0) {\n                data.methods!.push(...entity.methods);\n              }\n            });\n          }\n          return data;\n        });\n\n        // Check for methods with similarities\n        let totalMethodsWithSimilarities = 0;\n        processedData.forEach((comp) => {\n          if (comp.methods) {\n            const withSimilarities = comp.methods.filter((m) =>\n              m.similarityWarnings && m.similarityWarnings.length > 0\n            );\n            totalMethodsWithSimilarities += withSimilarities.length;\n          }\n        });\n\n        console.log(`Found ${totalMethodsWithSimilarities} total methods with similarity warnings`);\n\n        // Set components data for the SimilarityList to use\n        // Ensure each component has a unique ID to prevent duplicate key issues\n        const uniqueComponents = processedData.map((comp, index) => ({\n          ...comp,\n          // Add a unique ID based on index to prevent React duplicate key errors\n          _uniqueId: `${comp.slug || comp.name}-${index}`\n        }));\n        \n        setComponentsData(uniqueComponents);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n        setError(error instanceof Error ? error.message : \"Unknown error\");\n        setIsLoading(false);\n      }\n    }\n\n    loadAllData();\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"container max-w-7xl py-12\">\n        <div className=\"mb-12\">\n          <Skeleton className=\"h-10 w-80 mb-4\" />\n          <Skeleton className=\"h-6 w-96\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"md:col-span-1\">\n            <Card className=\"sticky top-24 border-none shadow-md bg-white dark:bg-slate-900\">\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-6 w-32 mb-6\" />\n                <Skeleton className=\"h-8 w-16 mb-4\" />\n                <Skeleton className=\"h-4 w-full mb-6\" />\n                <Skeleton className=\"h-6 w-full\" />\n              </CardContent>\n            </Card>\n          </div>\n          <div className=\"md:col-span-3\">\n            <div className=\"space-y-4\">\n              <Skeleton className=\"h-8 w-48\" />\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <div key={i} className=\"flex justify-between items-center p-4 border rounded\">\n                        <div className=\"space-y-2\">\n                          <Skeleton className=\"h-5 w-32\" />\n                          <Skeleton className=\"h-4 w-24\" />\n                        </div>\n                        <Skeleton className=\"h-4 w-16\" />\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container max-w-5xl py-12\">\n        <p className=\"text-center text-lg text-red-500\">Error: {error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <TooltipProvider>\n      <div className=\"container max-w-7xl py-12\">\n        <div className=\"mb-12\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <TrendingUpIcon className=\"h-10 w-10 text-primary\" />\n            <h1 className=\"text-4xl font-bold tracking-tight bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent\">\n              Component Similarity Analysis\n            </h1>\n          </div>\n          <p className=\"text-muted-foreground text-xl mt-2 max-w-3xl\">\n            Discover components with similar functionality or structure to identify opportunities for code deduplication and refactoring.\n          </p>\n          <div className=\"flex gap-2 mt-4\">\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n              <InfoIcon className=\"h-3 w-3\" />\n              AI-Powered Analysis\n            </Badge>\n            <Badge variant=\"outline\">\n              {componentsData.length} Components Analyzed\n            </Badge>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"md:col-span-1\">\n            <Card className=\"sticky top-24 border-none shadow-lg bg-gradient-to-br from-white to-slate-50 dark:from-slate-900 dark:to-slate-800\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center gap-2 text-lg\">\n                  <FilterIcon className=\"h-5 w-5\" />\n                  Filter Controls\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-6\">\n                  <div>\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <label className=\"text-sm font-medium flex items-center gap-2\">\n                        Similarity Threshold\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <InfoIcon className=\"h-4 w-4 text-muted-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p className=\"max-w-xs\">Higher values show fewer, more similar matches. Lower values show more potential duplicates.</p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </label>\n                    </div>\n                    <div className=\"text-center mb-4\">\n                      <span className=\"text-3xl font-bold text-primary\">{threshold[0]}%</span>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {threshold[0] >= 90 ? 'Very Similar' : \n                         threshold[0] >= 75 ? 'Moderately Similar' : \n                         threshold[0] >= 60 ? 'Somewhat Similar' : 'All Matches'}\n                      </p>\n                    </div>\n                    <Slider\n                      value={threshold}\n                      onValueChange={setThreshold}\n                      min={50}\n                      max={95}\n                      step={5}\n                      className=\"py-4\"\n                    />\n                    <div className=\"flex justify-between text-xs text-muted-foreground mt-2\">\n                      <span>50%</span>\n                      <span>More Results</span>\n                      <span>95%</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"border-t pt-6\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <label className=\"text-sm font-medium\">Archive Options</label>\n                    </div>\n                    <Button\n                      variant={showArchived ? \"secondary\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setShowArchived(!showArchived)}\n                      className=\"w-full gap-2\"\n                    >\n                      <ArchiveIcon className=\"h-4 w-4\" />\n                      {showArchived ? \"Hide Archived\" : \"Show Archived\"}\n                      {archivedCount > 0 && !showArchived && (\n                        <Badge variant=\"secondary\" className=\"ml-auto\">\n                          {archivedCount}\n                        </Badge>\n                      )}\n                    </Button>\n                    <p className=\"text-xs text-muted-foreground mt-2\">\n                      Archive items you don't need to review\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"md:col-span-3\">\n            <SimilarityList\n              threshold={threshold[0]}\n              preloadedComponents={componentsData}\n              showArchived={showArchived}\n              onShowArchivedChange={setShowArchived}\n              archivedCount={archivedCount}\n              onArchivedCountChange={setArchivedCount}\n            />\n          </div>\n        </div>\n      </div>\n    </TooltipProvider>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/similarity/page.tsx",
    "slug": "src_ui_app_similarity_page_similaritypage",
    "imports": [
      "Card",
      "CardContent",
      "CardHeader",
      "CardTitle",
      "Slider",
      "SimilarityList",
      "Skeleton",
      "Badge",
      "Button",
      "InfoIcon",
      "TrendingUpIcon",
      "FilterIcon",
      "ArchiveIcon",
      "Tooltip",
      "TooltipContent",
      "TooltipProvider",
      "TooltipTrigger"
    ],
    "references": [
      "Skeleton",
      "Card",
      "CardContent",
      "TooltipProvider",
      "TrendingUpIcon",
      "Badge",
      "InfoIcon",
      "CardHeader",
      "CardTitle",
      "FilterIcon",
      "Tooltip",
      "TooltipTrigger",
      "TooltipContent",
      "Slider",
      "Button",
      "ArchiveIcon",
      "SimilarityList"
    ],
    "relationships": [
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "cardtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "slider",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "similaritylist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "skeleton",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "button",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "infoicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "trendingupicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "filtericon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "archiveicon",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "tooltip",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "tooltipcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "tooltipprovider",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_similarity_page_similaritypage",
        "target": "tooltiptrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "[...array(5)]",
        "type": "uses",
        "weight": 2,
        "context": "calls map",
        "sourceLine": 159,
        "targetFunction": "map"
      },
      {
        "target": "array",
        "type": "uses",
        "weight": 2,
        "context": "calls Array",
        "sourceLine": 159,
        "targetFunction": "Array"
      }
    ],
    "methods": []
  },
  {
    "name": "loadAllData",
    "kind": "function",
    "code": "async function loadAllData() {\n      try {\n        // Debug: Check if we can access the component index\n        const indexRes = await fetch('/docs-data/component-index.json')\n        if (!indexRes.ok) {\n          throw new Error(`Failed to fetch component index: ${indexRes.status}`);\n        }\n\n        const indexData = await indexRes.json();\n        console.log('Component index data loaded:', indexData);\n\n        // Load all component data files\n        const allComponentsData = await Promise.all(\n          indexData.map(async (comp: { slug: string }) => {\n            try {\n              const res = await fetch(`/docs-data/${comp.slug}.json`);\n              if (!res.ok) {\n                console.error(`Failed to load ${comp.slug}.json: ${res.status}`);\n                return null;\n              }\n              return await res.json();\n            } catch (err) {\n              console.error(`Error loading ${comp.slug}.json:`, err);\n              return null;\n            }\n          })\n        );\n\n        // Filter out null results\n        const validComponentsData = allComponentsData.filter(Boolean) as ComponentData[];\n        console.log('Valid components loaded:', validComponentsData.length);\n\n        // Process the data to extract and incorporate methods from entities\n        const processedData = validComponentsData.map(data => {\n          if (data.entities && data.entities.length > 0) {\n            // Extract methods from entities\n            if (!data.methods) {\n              data.methods = [];\n            }\n\n            data.entities.forEach((entity) => {\n              if (entity.methods && entity.methods.length > 0) {\n                data.methods!.push(...entity.methods);\n              }\n            });\n          }\n          return data;\n        });\n\n        // Check for methods with similarities\n        let totalMethodsWithSimilarities = 0;\n        processedData.forEach((comp) => {\n          if (comp.methods) {\n            const withSimilarities = comp.methods.filter((m) =>\n              m.similarityWarnings && m.similarityWarnings.length > 0\n            );\n            totalMethodsWithSimilarities += withSimilarities.length;\n          }\n        });\n\n        console.log(`Found ${totalMethodsWithSimilarities} total methods with similarity warnings`);\n\n        // Set components data for the SimilarityList to use\n        // Ensure each component has a unique ID to prevent duplicate key issues\n        const uniqueComponents = processedData.map((comp, index) => ({\n          ...comp,\n          // Add a unique ID based on index to prevent React duplicate key errors\n          _uniqueId: `${comp.slug || comp.name}-${index}`\n        }));\n        \n        setComponentsData(uniqueComponents);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(\"Error loading data:\", error);\n        setError(error instanceof Error ? error.message : \"Unknown error\");\n        setIsLoading(false);\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/similarity/page.tsx",
    "slug": "src_ui_app_similarity_page_loadalldata",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "DocsPage",
    "kind": "component",
    "code": "export default function DocsPage() {\n  const searchParams = useSearchParams()\n  const router = useRouter()\n  const tabParam = searchParams.get('tab')\n  const activeTab = tabParam && ['components', 'classes', 'functions'].includes(tabParam) ? tabParam : 'components'\n\n  const handleTabChange = (value: string) => {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('tab', value)\n    router.replace(`/docs?${params.toString()}`, { scroll: false })\n  }\n\n  const [counts, setCounts] = useState<ComponentCounts>({\n    components: 0,\n    classes: 0,\n    functions: 0,\n    methods: 0,\n    totalCoverage: 0\n  })\n  const [loading, setLoading] = useState(true)\n  const [searchQuery, setSearchQuery] = useState('')\n  const [stats, setStats] = useState<DocsStats>({\n    totalLines: 0,\n    lastUpdated: new Date().toLocaleDateString(),\n    averageComplexity: 0,\n    documentedItems: 0\n  })\n\n  useEffect(() => {\n    async function fetchComponentCounts() {\n      try {\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // The component index already contains type information\n        const componentDetails = data\n\n        // Classify items by type based on naming patterns and characteristics\n        const typeCounts = componentDetails.reduce((acc: ComponentCounts, comp: ComponentDetail) => {\n          let type = 'component' // default\n          \n          // Determine type based on naming patterns and file paths\n          const name = comp.name\n          const filePath = comp.filePath || ''\n          \n          // UI components (from ui/ directory) \n          if (comp.slug?.startsWith('ui_') || filePath.includes('/ui/')) {\n            if (name[0] === name[0].toUpperCase() && !name.includes('_')) {\n              type = 'component' // PascalCase = React component\n            } else {\n              type = 'function' // camelCase = function/method\n            }\n          }\n          // Functions and methods (camelCase names)\n          else if (name[0] === name[0].toLowerCase() && /[a-z][A-Z]/.test(name) || \n                   name.includes('handle') || name.includes('fetch') || name.includes('get') || \n                   name.includes('set') || name.includes('toggle') || name.includes('render')) {\n            type = 'function'\n          }\n          // Classes (usually PascalCase and might contain certain keywords)\n          else if (name[0] === name[0].toUpperCase() && \n                   (name.includes('Service') || name.includes('Manager') || name.includes('Controller') || \n                    name.includes('Handler') || name.includes('Provider') && !filePath.includes('component'))) {\n            type = 'class'  \n          }\n          // Components (PascalCase, typically React components)\n          else if (name[0] === name[0].toUpperCase()) {\n            type = 'component'\n          }\n          // Everything else defaults to function\n          else {\n            type = 'function'\n          }\n\n          // Override with explicit type if provided\n          if (comp.type) {\n            type = comp.type\n          }\n\n          if (type === 'component') {\n            acc.components++\n          } else if (type === 'class') {\n            acc.classes++\n          } else if (type === 'function') {\n            acc.functions++\n          } else if (type === 'method') {\n            acc.methods++\n          }\n\n          return acc\n        }, { components: 0, classes: 0, functions: 0, methods: 0, totalCoverage: 0 })\n\n        const totalItems = componentDetails.length\n        const itemsWithDescription = componentDetails.filter((comp: ComponentDetail) =>\n          comp.description && comp.description.trim().length > 0\n        ).length\n\n        const coveragePercentage = totalItems > 0\n          ? Math.round((itemsWithDescription / totalItems) * 100)\n          : 0\n\n        setCounts({\n          ...typeCounts,\n          totalCoverage: coveragePercentage\n        })\n        \n        // Calculate additional stats\n        const totalLinesEstimate = componentDetails.reduce((acc: number, comp: ComponentDetail) => {\n          return acc + (comp.code ? comp.code.split('\\n').length : 50) // Estimate 50 lines per component if no code\n        }, 0)\n        \n        setStats({\n          totalLines: totalLinesEstimate,\n          lastUpdated: new Date().toLocaleDateString(),\n          averageComplexity: Math.round(totalItems > 0 ? (typeCounts.methods / totalItems) * 10 : 0),\n          documentedItems: itemsWithDescription\n        })\n        \n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }\n\n    fetchComponentCounts()\n  }, [])\n\n  return (\n    <main className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-50 dark:from-slate-950 dark:via-slate-900 dark:to-slate-950\">\n      <div className=\"container max-w-7xl mx-auto px-6 py-12\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16 relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-violet-500/10 via-indigo-500/10 to-emerald-500/10 rounded-3xl blur-3xl\" />\n          <div className=\"relative\">\n            <div className=\"flex items-center justify-center gap-3 mb-6\">\n              <div className=\"p-3 bg-gradient-to-r from-violet-500 to-indigo-500 rounded-2xl\">\n                <BookOpen className=\"h-8 w-8 text-white\" />\n              </div>\n              <h1 className=\"text-6xl font-bold bg-gradient-to-r from-violet-600 via-indigo-600 to-emerald-600 bg-clip-text text-transparent\">\n                Code Documentation\n              </h1>\n            </div>\n            <p className=\"text-muted-foreground text-2xl mb-8 max-w-3xl mx-auto\">\n              AI-powered insights and comprehensive documentation for your entire codebase\n            </p>\n            \n            {/* Search Bar */}\n            <div className=\"max-w-md mx-auto relative mb-8\">\n              <Search className=\"absolute left-3 top-3 h-5 w-5 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search components, classes, functions...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 py-3 text-lg border-2 border-slate-200 dark:border-slate-700 focus:border-violet-500 dark:focus:border-violet-500 rounded-xl\"\n              />\n            </div>\n            \n            {/* Quick Stats Banner */}\n            <div className=\"flex flex-wrap items-center justify-center gap-6 text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-2\">\n                <Target className=\"h-4 w-4\" />\n                <span>{loading ? \"...\" : `${counts.totalCoverage}%`} documented</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-4 w-4\" />\n                <span>{loading ? \"...\" : stats.totalLines.toLocaleString()} lines of code</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4\" />\n                <span>Updated {stats.lastUpdated}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Stats Grid */}\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4 mb-12\">\n          <Card className=\"overflow-hidden border-none shadow-lg bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300\">\n            <div className=\"h-1 bg-gradient-to-r from-violet-500 to-indigo-500\" />\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-2 bg-violet-100 dark:bg-violet-900/20 rounded-lg\">\n                  <Layers className=\"h-6 w-6 text-violet-600 dark:text-violet-400\" />\n                </div>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <TrendingUp className=\"h-3 w-3 mr-1\" />\n                  Active\n                </Badge>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Components</p>\n                <p className=\"text-3xl font-bold\">{loading ? \"...\" : counts.components}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"overflow-hidden border-none shadow-lg bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300\">\n            <div className=\"h-1 bg-gradient-to-r from-amber-500 to-orange-500\" />\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-2 bg-amber-100 dark:bg-amber-900/20 rounded-lg\">\n                  <Code className=\"h-6 w-6 text-amber-600 dark:text-amber-400\" />\n                </div>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <GitBranch className=\"h-3 w-3 mr-1\" />\n                  Typed\n                </Badge>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Classes</p>\n                <p className=\"text-3xl font-bold\">{loading ? \"...\" : counts.classes}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"overflow-hidden border-none shadow-lg bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300\">\n            <div className=\"h-1 bg-gradient-to-r from-emerald-500 to-green-500\" />\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-2 bg-emerald-100 dark:bg-emerald-900/20 rounded-lg\">\n                  <Code className=\"h-6 w-6 text-emerald-600 dark:text-emerald-400\" />\n                </div>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <Zap className=\"h-3 w-3 mr-1\" />\n                  Fast\n                </Badge>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Functions</p>\n                <p className=\"text-3xl font-bold\">{loading ? \"...\" : counts.functions}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"overflow-hidden border-none shadow-lg bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300\">\n            <div className=\"h-1 bg-gradient-to-r from-rose-500 to-pink-500\" />\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-2 bg-rose-100 dark:bg-rose-900/20 rounded-lg\">\n                  <FileCode className=\"h-6 w-6 text-rose-600 dark:text-rose-400\" />\n                </div>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <Target className=\"h-3 w-3 mr-1\" />\n                  Goal\n                </Badge>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Methods</p>\n                <p className=\"text-3xl font-bold\">{loading ? \"...\" : counts.methods}</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Documentation Coverage Section */}\n        <Card className=\"mb-12 border-none shadow-lg bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-gradient-to-r from-violet-500 to-indigo-500 rounded-lg\">\n                <BarChart3 className=\"h-6 w-6 text-white\" />\n              </div>\n              Documentation Coverage\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-2xl font-bold\">{loading ? \"...\" : `${counts.totalCoverage}%`}</span>\n                <Badge variant={counts.totalCoverage >= 80 ? \"default\" : counts.totalCoverage >= 60 ? \"secondary\" : \"destructive\"}>\n                  {counts.totalCoverage >= 80 ? \"Excellent\" : counts.totalCoverage >= 60 ? \"Good\" : \"Needs Work\"}\n                </Badge>\n              </div>\n              <Progress value={counts.totalCoverage} className=\"h-3\" />\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div className=\"text-center p-4 bg-emerald-50 dark:bg-emerald-900/10 rounded-lg\">\n                  <div className=\"font-bold text-emerald-600 dark:text-emerald-400\">{stats.documentedItems}</div>\n                  <div className=\"text-muted-foreground\">Documented Items</div>\n                </div>\n                <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/10 rounded-lg\">\n                  <div className=\"font-bold text-blue-600 dark:text-blue-400\">{stats.totalLines.toLocaleString()}</div>\n                  <div className=\"text-muted-foreground\">Total Lines</div>\n                </div>\n                <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-900/10 rounded-lg\">\n                  <div className=\"font-bold text-purple-600 dark:text-purple-400\">{stats.averageComplexity}/10</div>\n                  <div className=\"text-muted-foreground\">Avg Complexity</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Content Tabs */}\n        <Tabs defaultValue={activeTab} value={activeTab} onValueChange={handleTabChange} className=\"space-y-8\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n            <div>\n              <h2 className=\"text-3xl font-bold mb-2\">Browse Documentation</h2>\n              <p className=\"text-muted-foreground\">Explore your codebase by category</p>\n            </div>\n            <TabsList className=\"bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm p-1 rounded-xl border shadow-lg\">\n              <TabsTrigger value=\"components\" className=\"rounded-lg px-6 py-2 data-[state=active]:bg-violet-500 data-[state=active]:text-white\">\n                <Layers className=\"h-4 w-4 mr-2\" />\n                Components\n              </TabsTrigger>\n              <TabsTrigger value=\"classes\" className=\"rounded-lg px-6 py-2 data-[state=active]:bg-amber-500 data-[state=active]:text-white\">\n                <Code className=\"h-4 w-4 mr-2\" />\n                Classes\n              </TabsTrigger>\n              <TabsTrigger value=\"functions\" className=\"rounded-lg px-6 py-2 data-[state=active]:bg-emerald-500 data-[state=active]:text-white\">\n                <Code className=\"h-4 w-4 mr-2\" />\n                Functions\n              </TabsTrigger>\n            </TabsList>\n          </div>\n          \n          <Separator className=\"my-8\" />\n          \n          <TabsContent value=\"components\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-2xl font-bold flex items-center gap-2\">\n                  <Layers className=\"h-6 w-6 text-violet-500\" />\n                  React Components\n                </h3>\n                <p className=\"text-muted-foreground mt-1\">Reusable UI components and their documentation</p>\n              </div>\n              <Badge variant=\"outline\" className=\"text-sm\">\n                {loading ? \"...\" : `${counts.components} items`}\n              </Badge>\n            </div>\n            <ComponentStats searchQuery={searchQuery} />\n          </TabsContent>\n          \n          <TabsContent value=\"classes\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-2xl font-bold flex items-center gap-2\">\n                  <Code className=\"h-6 w-6 text-amber-500\" />\n                  Classes\n                </h3>\n                <p className=\"text-muted-foreground mt-1\">Object-oriented programming constructs and utilities</p>\n              </div>\n              <Badge variant=\"outline\" className=\"text-sm\">\n                {loading ? \"...\" : `${counts.classes} items`}\n              </Badge>\n            </div>\n            <ComponentStats type=\"class\" searchQuery={searchQuery} />\n          </TabsContent>\n          \n          <TabsContent value=\"functions\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-2xl font-bold flex items-center gap-2\">\n                  <Code className=\"h-6 w-6 text-emerald-500\" />\n                  Functions\n                </h3>\n                <p className=\"text-muted-foreground mt-1\">Utility functions and standalone methods</p>\n              </div>\n              <Badge variant=\"outline\" className=\"text-sm\">\n                {loading ? \"...\" : `${counts.functions} items`}\n              </Badge>\n            </div>\n            <ComponentStats type=\"function\" searchQuery={searchQuery} />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </main>\n  )\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/docs/page.tsx",
    "slug": "src_ui_app_docs_page_docspage",
    "imports": [
      "Card",
      "CardContent",
      "CardHeader",
      "CardTitle",
      "ComponentStats",
      "Tabs",
      "TabsContent",
      "TabsList",
      "TabsTrigger",
      "Input",
      "Button",
      "Progress",
      "Badge",
      "Separator",
      "Search",
      "FileCode",
      "Code",
      "Layers",
      "TrendingUp",
      "BookOpen",
      "Zap",
      "Target",
      "BarChart3",
      "GitBranch",
      "Clock"
    ],
    "references": [
      "BookOpen",
      "Search",
      "Input",
      "Target",
      "BarChart3",
      "Clock",
      "Card",
      "CardContent",
      "Layers",
      "Badge",
      "TrendingUp",
      "Code",
      "GitBranch",
      "Zap",
      "FileCode",
      "CardHeader",
      "CardTitle",
      "Progress",
      "Tabs",
      "TabsList",
      "TabsTrigger",
      "Separator",
      "TabsContent",
      "ComponentStats"
    ],
    "relationships": [
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "card",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "cardcontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "cardheader",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "cardtitle",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "componentstats",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "tabs",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "tabscontent",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "tabslist",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "tabstrigger",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "input",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "button",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "progress",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "badge",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "separator",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "search",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "filecode",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "code",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "layers",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "trendingup",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "bookopen",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "zap",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "target",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "barchart3",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "gitbranch",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "source": "src_ui_app_docs_page_docspage",
        "target": "clock",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      },
      {
        "target": "['components',-'classes',-'functions']",
        "type": "uses",
        "weight": 2,
        "context": "calls includes",
        "sourceLine": 55,
        "targetFunction": "includes"
      },
      {
        "target": "/[a-z][a-z]/",
        "type": "uses",
        "weight": 2,
        "context": "calls test",
        "sourceLine": 105,
        "targetFunction": "test"
      }
    ],
    "methods": [
      {
        "name": "handleTabChange",
        "code": "const handleTabChange = (value: string) => {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('tab', value)\n    router.replace(`/docs?${params.toString()}`, { scroll: false })\n  }",
        "returnType": "void",
        "params": [
          {
            "name": "value",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "name": "handleTabChange",
    "kind": "function",
    "code": "const handleTabChange = (value: string) => {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('tab', value)\n    router.replace(`/docs?${params.toString()}`, { scroll: false })\n  }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/docs/page.tsx",
    "slug": "src_ui_app_docs_page_handletabchange",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "fetchComponentCounts",
    "kind": "function",
    "code": "async function fetchComponentCounts() {\n      try {\n        const res = await fetch('/docs-data/component-index.json')\n        const data = await res.json()\n\n        // The component index already contains type information\n        const componentDetails = data\n\n        // Classify items by type based on naming patterns and characteristics\n        const typeCounts = componentDetails.reduce((acc: ComponentCounts, comp: ComponentDetail) => {\n          let type = 'component' // default\n          \n          // Determine type based on naming patterns and file paths\n          const name = comp.name\n          const filePath = comp.filePath || ''\n          \n          // UI components (from ui/ directory) \n          if (comp.slug?.startsWith('ui_') || filePath.includes('/ui/')) {\n            if (name[0] === name[0].toUpperCase() && !name.includes('_')) {\n              type = 'component' // PascalCase = React component\n            } else {\n              type = 'function' // camelCase = function/method\n            }\n          }\n          // Functions and methods (camelCase names)\n          else if (name[0] === name[0].toLowerCase() && /[a-z][A-Z]/.test(name) || \n                   name.includes('handle') || name.includes('fetch') || name.includes('get') || \n                   name.includes('set') || name.includes('toggle') || name.includes('render')) {\n            type = 'function'\n          }\n          // Classes (usually PascalCase and might contain certain keywords)\n          else if (name[0] === name[0].toUpperCase() && \n                   (name.includes('Service') || name.includes('Manager') || name.includes('Controller') || \n                    name.includes('Handler') || name.includes('Provider') && !filePath.includes('component'))) {\n            type = 'class'  \n          }\n          // Components (PascalCase, typically React components)\n          else if (name[0] === name[0].toUpperCase()) {\n            type = 'component'\n          }\n          // Everything else defaults to function\n          else {\n            type = 'function'\n          }\n\n          // Override with explicit type if provided\n          if (comp.type) {\n            type = comp.type\n          }\n\n          if (type === 'component') {\n            acc.components++\n          } else if (type === 'class') {\n            acc.classes++\n          } else if (type === 'function') {\n            acc.functions++\n          } else if (type === 'method') {\n            acc.methods++\n          }\n\n          return acc\n        }, { components: 0, classes: 0, functions: 0, methods: 0, totalCoverage: 0 })\n\n        const totalItems = componentDetails.length\n        const itemsWithDescription = componentDetails.filter((comp: ComponentDetail) =>\n          comp.description && comp.description.trim().length > 0\n        ).length\n\n        const coveragePercentage = totalItems > 0\n          ? Math.round((itemsWithDescription / totalItems) * 100)\n          : 0\n\n        setCounts({\n          ...typeCounts,\n          totalCoverage: coveragePercentage\n        })\n        \n        // Calculate additional stats\n        const totalLinesEstimate = componentDetails.reduce((acc: number, comp: ComponentDetail) => {\n          return acc + (comp.code ? comp.code.split('\\n').length : 50) // Estimate 50 lines per component if no code\n        }, 0)\n        \n        setStats({\n          totalLines: totalLinesEstimate,\n          lastUpdated: new Date().toLocaleDateString(),\n          averageComplexity: Math.round(totalItems > 0 ? (typeCounts.methods / totalItems) * 10 : 0),\n          documentedItems: itemsWithDescription\n        })\n        \n        setLoading(false)\n      } catch (error) {\n        console.error('Error loading component data:', error)\n        setLoading(false)\n      }\n    }",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/docs/page.tsx",
    "slug": "src_ui_app_docs_page_fetchcomponentcounts",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "cosineSimilarity",
    "kind": "function",
    "code": "export function cosineSimilarity(vecA: number[], vecB: number[]): number {\n  if (vecA.length !== vecB.length) {\n    throw new Error(\"Vectors must have the same length\");\n  }\n  let dotProduct = 0;\n  let normA = 0;\n  let normB = 0;\n  for (let i = 0; i < vecA.length; i++) {\n    dotProduct += vecA[i] * vecB[i];\n    normA += vecA[i] * vecA[i];\n    normB += vecB[i] * vecB[i];\n  }\n  if (normA === 0 || normB === 0) {\n    return 0;\n  }\n  return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ai/vector-similarity/utils/vector-similarity-utils.ts",
    "slug": "src_ai_vector-similarity_utils_vector-similarity-utils_cosinesimilarity",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "formatChatMessage",
    "kind": "function",
    "code": "export function formatChatMessage(msg: { role: string; content: string }): string {\n  return `[${msg.role.toUpperCase()}]: ${msg.content}`;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ai/chat/utils/chat-utils.ts",
    "slug": "src_ai_chat_utils_chat-utils_formatchatmessage",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "truncate",
    "kind": "function",
    "code": "export function truncate(text: string, maxLen: number): string {\n  return text.length > maxLen ? text.slice(0, maxLen) + '...' : text;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ai/chat/utils/chat-utils.ts",
    "slug": "src_ai_chat_utils_chat-utils_truncate",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "formatGeneratedCode",
    "kind": "function",
    "code": "export function formatGeneratedCode(code: string): string {\n  return code.trim();\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ai/generator/utils/generator-utils.ts",
    "slug": "src_ai_generator_utils_generator-utils_formatgeneratedcode",
    "imports": [],
    "references": [],
    "relationships": [],
    "methods": []
  },
  {
    "name": "POST",
    "kind": "function",
    "code": "export async function POST(request: Request) {\n  try {\n    // Parse request body\n    const body = await request.json();\n    const { componentName, code, filePath } = body;\n\n    if (!componentName || !code) {\n      return NextResponse.json(\n        { error: \"Missing required fields: componentName and code\" },\n        { status: 400 }\n      );\n    }\n\n    // Get Ollama configuration\n    const ollamaUrl =\n      process.env.NEXT_PUBLIC_OLLAMA_URL || \"http://localhost:11434\";\n    const chatModel = process.env.NEXT_PUBLIC_CHAT_MODEL || \"gemma:3b\";\n\n    // Create the prompt for description generation\n    const prompt = `\n      You are an expert React developer documenting a component library.\n      Please provide a clear, concise description of the \"${componentName}\" component below.\n      Focus on:\n      - What the component does\n      - Key features and functionality\n      - Typical use cases\n\n      Keep the description between 2-3 sentences. Be precise and informative.\n\n      Component code:\n      ${code}\n      ${filePath ? `File path: ${filePath}` : \"\"}\n    `;\n\n    try {\n      // Make API call to Ollama\n      const response = await fetch(`${ollamaUrl}/api/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          model: chatModel,\n          messages: [\n            {\n              role: \"system\",\n              content:\n                \"You are an AI assistant specializing in React component documentation.\",\n            },\n            {\n              role: \"user\",\n              content: prompt,\n            },\n          ],\n        }),\n      });\n\n      // Handle response\n      if (!response.ok) {\n        // Fallback description if API call fails\n        return NextResponse.json({\n          description: `The ${componentName} component is a UI element that provides functionality based on its props and implementation. It serves as a reusable building block in the application.`,\n        });\n      }\n\n      const data = await response.json();\n      let description;\n\n      if (data.message?.content) {\n        description = data.message.content;\n      } else {\n        description = `The ${componentName} component is a UI element that provides functionality based on its props and implementation. It serves as a reusable building block in the application.`;\n      }\n\n      return NextResponse.json({ description });\n    } catch (error) {\n      console.error(\"Error generating description:\", error);\n      // Provide a generic description as fallback\n      return NextResponse.json({\n        description: `The ${componentName} component is a UI element that provides functionality based on its props and implementation. It serves as a reusable building block in the application.`,\n      });\n    }\n  } catch (error) {\n    console.error(\"Error in API route:\", error);\n    return NextResponse.json(\n      { error: \"Failed to process request\" },\n      { status: 500 }\n    );\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/app/api/describe/route.ts",
    "slug": "test-docs-project_app_api_describe_route_post",
    "imports": [
      "NextResponse"
    ],
    "references": [],
    "relationships": [
      {
        "source": "test-docs-project_app_api_describe_route_post",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 10,
        "targetFunction": "json"
      }
    ],
    "methods": []
  },
  {
    "name": "getComponentDefinitions",
    "kind": "function",
    "code": "async function getComponentDefinitions() {\n  try {\n    // Find the closest docs-data directory to read component data from\n    const docsDataDir = path.join(process.cwd(), \"docs-data\");\n\n    // Read the component index file\n    const indexPath = path.join(docsDataDir, \"component-index.json\");\n    if (!(await fs.exists(indexPath))) {\n      console.error(`Component index file not found at ${indexPath}`);\n      return [];\n    }\n\n    const componentIndex = await fs.readJson(indexPath);\n    const components = [];\n\n    // Load each component's full data\n    for (const component of componentIndex) {\n      const componentPath = path.join(docsDataDir, `${component.slug}.json`);\n      if (await fs.exists(componentPath)) {\n        const componentData = await fs.readJson(componentPath);\n        components.push(componentData);\n      }\n    }\n\n    return components;\n  } catch (error) {\n    console.error(\"Error loading component definitions:\", error);\n    return [];\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/app/api/chat/route.ts",
    "slug": "test-docs-project_app_api_chat_route_getcomponentdefinitions",
    "imports": [
      "NextRequest",
      "NextResponse",
      "CodebaseChatService",
      "ChatMessage"
    ],
    "references": [],
    "relationships": [
      {
        "source": "test-docs-project_app_api_chat_route_getcomponentdefinitions",
        "target": "nextrequest",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_app_api_chat_route_getcomponentdefinitions",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_app_api_chat_route_getcomponentdefinitions",
        "target": "codebasechatservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_app_api_chat_route_getcomponentdefinitions",
        "target": "chatmessage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 63,
        "targetFunction": "json"
      }
    ],
    "methods": []
  },
  {
    "name": "getChatService",
    "kind": "function",
    "code": "async function getChatService() {\n  if (!chatService) {\n    const components = await getComponentDefinitions();\n\n    // Initialize with Ollama by default\n    chatService = new CodebaseChatService(components, {\n      useOllama: true,\n      ollamaUrl: process.env.OLLAMA_URL || \"http://localhost:11434\",\n      ollamaModel: process.env.OLLAMA_MODEL || \"nomic-embed-text:latest\",\n      chatModel: process.env.CHAT_MODEL || \"gemma:3b\",\n    });\n  }\n\n  return chatService;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/app/api/chat/route.ts",
    "slug": "test-docs-project_app_api_chat_route_getchatservice",
    "imports": [
      "NextRequest",
      "NextResponse",
      "CodebaseChatService",
      "ChatMessage"
    ],
    "references": [],
    "relationships": [
      {
        "source": "test-docs-project_app_api_chat_route_getchatservice",
        "target": "nextrequest",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_app_api_chat_route_getchatservice",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_app_api_chat_route_getchatservice",
        "target": "codebasechatservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_app_api_chat_route_getchatservice",
        "target": "chatmessage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 63,
        "targetFunction": "json"
      }
    ],
    "methods": []
  },
  {
    "name": "POST",
    "kind": "function",
    "code": "export async function POST(request: NextRequest) {\n  try {\n    const { history, query } = await request.json();\n\n    if (!query) {\n      return NextResponse.json({ error: \"Query is required\" }, { status: 400 });\n    }\n\n    // Get chat service\n    const service = await getChatService();\n\n    // Process the messages\n    const formattedHistory: ChatMessage[] = history || [];\n\n    // Add formatting instructions to the system message\n    const formattedQuery = `${query}\n\nFORMATTING INSTRUCTIONS:\n- Always use proper Markdown formatting for your responses\n- For code blocks:\n  - Always specify the language after the opening backticks (e.g., \\`\\`\\`javascript or \\`\\`\\`tsx)\n  - Ensure proper indentation in code examples\n  - Add comments to explain complex code sections\n- For inline code references, use single backticks (e.g., \\`useState\\`)\n- When referring to components, use consistent formatting: \\`ComponentName\\` and link them with [ComponentName](/components/component-name)\n- Break your response into sections with clear headings (## Heading)\n- Use bullet points and numbered lists for clarity\n- Include relevant examples that demonstrate the concept\n- Keep explanations concise and focused on answering the question\n\nRemember to format your code with proper syntax highlighting and ensure all code examples are complete and executable when possible.\n`;\n\n    // Get chat response\n    const { response, searchResults } = await service.chat(\n      formattedHistory,\n      formattedQuery\n    );\n\n    return NextResponse.json({ response, searchResults });\n  } catch (error) {\n    console.error(\"Error processing chat request:\", error);\n    return NextResponse.json(\n      { error: \"Failed to process request\" },\n      { status: 500 }\n    );\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/app/api/chat/route.ts",
    "slug": "test-docs-project_app_api_chat_route_post",
    "imports": [
      "NextRequest",
      "NextResponse",
      "CodebaseChatService",
      "ChatMessage"
    ],
    "references": [],
    "relationships": [
      {
        "source": "test-docs-project_app_api_chat_route_post",
        "target": "nextrequest",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_app_api_chat_route_post",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_app_api_chat_route_post",
        "target": "codebasechatservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_app_api_chat_route_post",
        "target": "chatmessage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 63,
        "targetFunction": "json"
      }
    ],
    "methods": []
  },
  {
    "name": "Page",
    "kind": "component",
    "code": "export default function Page({ params }: PageProps) {\n  const { slug } = use(params);\n  return <ComponentClient slug={slug} />;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/test-docs-project/app/components/[slug]/page.tsx",
    "slug": "test-docs-project_app_components_[slug]_page_page",
    "imports": [
      "React",
      "ComponentClient"
    ],
    "references": [
      "ComponentClient"
    ],
    "relationships": [
      {
        "source": "test-docs-project_app_components_[slug]_page_page",
        "target": "react",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "test-docs-project_app_components_[slug]_page_page",
        "target": "componentclient",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "FunctionPage",
    "kind": "component",
    "code": "export default function FunctionPage({ params }: PageProps) {\n  const { slug } = use(params);\n  return <ComponentClient slug={slug} />;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/functions/[slug]/page.tsx",
    "slug": "src_ui_app_functions_[slug]_page_functionpage",
    "imports": [
      "React",
      "ComponentClient"
    ],
    "references": [
      "ComponentClient"
    ],
    "relationships": [
      {
        "source": "src_ui_app_functions_[slug]_page_functionpage",
        "target": "react",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_functions_[slug]_page_functionpage",
        "target": "componentclient",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "Page",
    "kind": "component",
    "code": "export default function Page({ params }: PageProps) {\n  const { slug } = use(params);\n  return <ComponentClient slug={slug} />;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/components/[slug]/page.tsx",
    "slug": "src_ui_app_components_[slug]_page_page",
    "imports": [
      "React",
      "ComponentClient"
    ],
    "references": [
      "ComponentClient"
    ],
    "relationships": [
      {
        "source": "src_ui_app_components_[slug]_page_page",
        "target": "react",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_components_[slug]_page_page",
        "target": "componentclient",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "ClassPage",
    "kind": "component",
    "code": "export default function ClassPage({ params }: PageProps) {\n  const { slug } = use(params);\n  return <ComponentClient slug={slug} />;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/classes/[slug]/page.tsx",
    "slug": "src_ui_app_classes_[slug]_page_classpage",
    "imports": [
      "React",
      "ComponentClient"
    ],
    "references": [
      "ComponentClient"
    ],
    "relationships": [
      {
        "source": "src_ui_app_classes_[slug]_page_classpage",
        "target": "react",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_classes_[slug]_page_classpage",
        "target": "componentclient",
        "type": "uses",
        "weight": 3,
        "context": "imports and renders"
      }
    ],
    "methods": []
  },
  {
    "name": "POST",
    "kind": "function",
    "code": "export async function POST(request: Request) {\n  try {\n    console.log(\"=== PROCESSING COMPONENT DESCRIPTION REQUEST ===\");\n    \n    // Parse request body\n    const body = await request.json();\n    const { componentName, code, filePath, slug } = body;\n\n    console.log(`Generating description for component: ${componentName}`);\n    console.log(`File path: ${filePath || 'Not provided'}`);\n    console.log(`Slug: ${slug || 'Not provided'}`);\n    console.log(`Code length: ${code?.length || 0} characters`);\n\n    if (!componentName || !code) {\n      console.error(\"Missing required fields: componentName and code\");\n      return NextResponse.json(\n        { error: \"Missing required fields: componentName and code\" },\n        { status: 400 }\n      );\n    }\n\n    // Get Ollama configuration\n    const ollamaUrl = process.env.NEXT_PUBLIC_OLLAMA_URL || \"http://localhost:11434\";\n    const chatModel = process.env.NEXT_PUBLIC_CHAT_MODEL || \"gemma3:4b\";\n    \n    console.log(`Using Ollama at: ${ollamaUrl}`);\n    console.log(`Using chat model: ${chatModel}`);\n\n    // Create the prompt for description generation\n    const prompt = `\n      You are an expert React developer documenting a component library.\n      Please provide a clear, concise description of the \"${componentName}\" component below.\n      Focus on:\n      - What the component does\n      - Key features and functionality\n      - Typical use cases\n\n      Keep the description between 2-3 sentences. Be precise and informative.\n\n      Component code:\n      ${code}\n      ${filePath ? `File path: ${filePath}` : \"\"}\n    `;\n\n    try {\n      console.log(\"Sending request to Ollama API...\");\n      \n      // Make API call to Ollama\n      const response = await fetch(`${ollamaUrl}/api/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          model: chatModel,\n          messages: [\n            {\n              role: \"system\",\n              content:\n                \"You are an AI assistant specializing in React component documentation.\",\n            },\n            {\n              role: \"user\",\n              content: prompt,\n            },\n          ],\n          stream: false,\n        }),\n      });\n\n      // Handle response\n      if (!response.ok) {\n        console.error(`Ollama API error: ${response.status} ${response.statusText}`);\n        // Fallback description if API call fails\n        return NextResponse.json({\n          description: `The ${componentName} component is a UI element that provides functionality based on its props and implementation. It serves as a reusable building block in the application.`,\n          error: `Failed to connect to Ollama: ${response.status} ${response.statusText}`\n        });\n      }\n\n      const data = await response.json();\n      console.log(\"Received response from Ollama API\");\n      \n      let description;\n\n      if (data.message?.content) {\n        description = data.message.content;\n        console.log(\"Successfully extracted description from Ollama response\");\n      } else {\n        console.warn(\"Unexpected response format from Ollama:\", JSON.stringify(data));\n        description = `The ${componentName} component is a UI element that provides functionality based on its props and implementation. It serves as a reusable building block in the application.`;\n      }\n\n      // Save the description to the component's JSON file if slug is provided\n      if (slug) {\n        try {\n          const docsDataPath = path.join(process.cwd(), \"public\", \"docs-data\");\n          const componentFilePath = path.join(docsDataPath, `${slug}.json`);\n          \n          console.log(`Attempting to update component file: ${componentFilePath}`);\n          \n          // Check if the component file exists\n          if (await fs.pathExists(componentFilePath)) {\n            // Read the existing component data\n            const componentData = await fs.readJson(componentFilePath);\n            \n            // Update the description\n            componentData.description = description;\n            componentData.lastUpdated = new Date().toISOString();\n            \n            // Write the updated data back to the file\n            await fs.writeJson(componentFilePath, componentData, { spaces: 2 });\n            \n            console.log(`Successfully updated description for component: ${componentName}`);\n          } else {\n            console.warn(`Component file not found: ${componentFilePath}`);\n          }\n        } catch (saveError) {\n          console.error(\"Error saving description to component file:\", saveError);\n          // Don't fail the request if saving fails, just log the error\n        }\n      }\n\n      return NextResponse.json({ \n        description,\n        model: chatModel,\n        success: true\n      });\n    } catch (error) {\n      console.error(\"Error generating description with Ollama:\", error);\n      // Provide a generic description as fallback\n      return NextResponse.json({\n        description: `The ${componentName} component is a UI element that provides functionality based on its props and implementation. It serves as a reusable building block in the application.`,\n        error: `Error connecting to Ollama: ${error instanceof Error ? error.message : String(error)}`\n      });\n    }\n  } catch (error) {\n    console.error(\"Error in API route:\", error);\n    return NextResponse.json(\n      { error: \"Failed to process request\" },\n      { status: 500 }\n    );\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/api/describe/route.ts",
    "slug": "src_ui_app_api_describe_route_post",
    "imports": [
      "NextResponse"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ui_app_api_describe_route_post",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 20,
        "targetFunction": "json"
      },
      {
        "target": "string",
        "type": "uses",
        "weight": 2,
        "context": "calls String",
        "sourceLine": 138,
        "targetFunction": "String"
      }
    ],
    "methods": []
  },
  {
    "name": "getComponentDefinitions",
    "kind": "function",
    "code": "async function getComponentDefinitions() {\n  try {\n    console.log(\"Loading component definitions for vector search...\");\n    \n    // Try multiple possible locations for docs-data\n    const possiblePaths = [\n      path.join(process.cwd(), \"public/docs-data/docs-data\"),  // Symlinked path\n      path.join(process.cwd(), \"public/docs-data\"),\n      path.join(process.cwd(), \"docs-data\"),\n      path.join(process.cwd(), \"src/ui/docs-data\"),\n      path.join(process.cwd(), \"test-docs-project/documentation/docs-data\"),\n      path.join(process.cwd(), \"../test-docs-project/documentation/docs-data\")\n    ];\n    \n    let docsDataDir = \"\";\n    let indexPath = \"\";\n    \n    // Find the first path that exists and has a component-index.json file\n    for (const possiblePath of possiblePaths) {\n      const possibleIndexPath = path.join(possiblePath, \"component-index.json\");\n      if (await fs.exists(possibleIndexPath)) {\n        docsDataDir = possiblePath;\n        indexPath = possibleIndexPath;\n        console.log(`Found component data in: ${docsDataDir}`);\n        break;\n      }\n    }\n    \n    if (!indexPath) {\n      // Try looking for code-index.json as an alternative\n      for (const possiblePath of possiblePaths) {\n        const possibleIndexPath = path.join(possiblePath, \"code-index.json\");\n        if (await fs.exists(possibleIndexPath)) {\n          docsDataDir = possiblePath;\n          indexPath = possibleIndexPath;\n          console.log(`Found code-index.json in: ${docsDataDir}`);\n          break;\n        }\n      }\n    }\n    \n    if (!indexPath) {\n      console.error(\"Component index file not found in any of the expected locations\");\n      console.error(\"This will cause vector search to fail. Make sure docs-data directory exists.\");\n      return [];\n    }\n\n    // Read the index file and determine its type\n    const indexData = await fs.readJson(indexPath);\n    const isCodeIndex = indexPath.includes('code-index.json');\n    const components = [];\n    \n    if (isCodeIndex) {\n      // Handle code-index.json format\n      console.log(`Found code index with ${Object.keys(indexData).length} entries`);\n      \n      // Convert code index format to component format\n      for (const [filePath, fileData] of Object.entries(indexData)) {\n        if (typeof fileData !== 'object' || !fileData) continue;\n        \n        const fileComponents = fileData as any;\n        if (!Array.isArray(fileComponents.components)) continue;\n        \n        for (const component of fileComponents.components) {\n          if (!component.name) continue;\n          \n          // Create a component definition with methods\n          const componentDef = {\n            name: component.name,\n            filePath: filePath,\n            methods: []\n          };\n          \n          // Add methods if they exist\n          if (Array.isArray(component.methods)) {\n            componentDef.methods = component.methods.map((method: any) => ({\n              name: method.name || 'unknown',\n              code: method.code || '',\n              description: method.description || '',\n              params: method.params || [],\n              returnType: method.returnType || 'void'\n            }));\n          }\n          \n          if (componentDef.methods.length > 0) {\n            console.log(`Component ${componentDef.name} has ${componentDef.methods.length} methods`);\n            components.push(componentDef);\n          } else {\n            console.log(`Component ${componentDef.name} has no methods`);\n          }\n        }\n      }\n    } else {\n      // Handle component-index.json format\n      const componentIndex = indexData;\n      console.log(`Found ${componentIndex.length} components in index`);\n      \n      // Load each component's full data\n      for (const component of componentIndex) {\n        try {\n          const componentPath = path.join(docsDataDir, `${component.slug}.json`);\n          if (await fs.exists(componentPath)) {\n            const componentData = await fs.readJson(componentPath);\n            \n            // Ensure the component has methods for vector search\n            if (componentData.methods && componentData.methods.length > 0) {\n              console.log(`Component ${componentData.name} has ${componentData.methods.length} methods`);\n            } else {\n              console.log(`Component ${componentData.name} has no methods`);\n            }\n            \n            components.push(componentData);\n          } else {\n            console.warn(`Component data file not found: ${componentPath}`);\n          }\n        } catch (componentError) {\n          console.error(`Error loading component ${component.slug}:`, componentError);\n        }\n      }\n    }\n\n    console.log(`Successfully loaded ${components.length} components with their methods`);\n    return components;\n  } catch (error) {\n    console.error(\"Error loading component definitions:\", error);\n    return [];\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/api/chat/route.ts",
    "slug": "src_ui_app_api_chat_route_getcomponentdefinitions",
    "imports": [
      "NextRequest",
      "NextResponse",
      "CodebaseChatService",
      "ChatMessage"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ui_app_api_chat_route_getcomponentdefinitions",
        "target": "nextrequest",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_api_chat_route_getcomponentdefinitions",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_api_chat_route_getcomponentdefinitions",
        "target": "codebasechatservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_api_chat_route_getcomponentdefinitions",
        "target": "chatmessage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 261,
        "targetFunction": "json"
      }
    ],
    "methods": []
  },
  {
    "name": "loadVectorDatabase",
    "kind": "function",
    "code": "async function loadVectorDatabase() {\n  try {\n    console.log(\"Loading saved vector database...\");\n    \n    // Try multiple possible locations for the vector database\n    const possiblePaths = [\n      path.join(process.cwd(), \"public/docs-data/docs-data/vector-database.json\"),  // Symlinked path\n      path.join(process.cwd(), \"public/docs-data/vector-database.json\"),\n      path.join(process.cwd(), \"docs-data/vector-database.json\"),\n      path.join(process.cwd(), \"src/ui/public/docs-data/vector-database.json\"),\n      path.join(process.cwd(), \"src/ui/docs-data/vector-database.json\"),\n      path.join(process.cwd(), \"test-docs-project/documentation/docs-data/vector-database.json\"),\n      path.join(process.cwd(), \"../test-docs-project/documentation/docs-data/vector-database.json\")\n    ];\n    \n    for (const possiblePath of possiblePaths) {\n      if (await fs.exists(possiblePath)) {\n        console.log(`Found vector database at: ${possiblePath}`);\n        const vectorDb = await fs.readJson(possiblePath);\n        console.log(`Loaded vector database with ${vectorDb.length} entries`);\n        return vectorDb;\n      }\n    }\n    \n    console.warn(\"Vector database file not found in any of the expected locations\");\n    return null;\n  } catch (error) {\n    console.error(\"Error loading vector database:\", error);\n    return null;\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/api/chat/route.ts",
    "slug": "src_ui_app_api_chat_route_loadvectordatabase",
    "imports": [
      "NextRequest",
      "NextResponse",
      "CodebaseChatService",
      "ChatMessage"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ui_app_api_chat_route_loadvectordatabase",
        "target": "nextrequest",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_api_chat_route_loadvectordatabase",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_api_chat_route_loadvectordatabase",
        "target": "codebasechatservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_api_chat_route_loadvectordatabase",
        "target": "chatmessage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 261,
        "targetFunction": "json"
      }
    ],
    "methods": []
  },
  {
    "name": "getChatService",
    "kind": "function",
    "code": "async function getChatService() {\n  if (!chatService) {\n    console.log(\"=== CREATING NEW CHAT SERVICE INSTANCE ===\");\n    \n    // Load the saved vector database FIRST\n    const savedVectorDb = await loadVectorDatabase();\n    if (!savedVectorDb || savedVectorDb.length === 0) {\n      console.warn(\"WARNING: No saved vector database found. Chat will work but without vector search.\");\n      // Don't throw error, just continue with empty database\n    }\n    \n    const components = await getComponentDefinitions();\n    console.log(`Loaded ${components.length} component definitions`);\n    \n    // Log details about loaded components\n    let totalMethods = 0;\n    components.forEach(comp => {\n      if (comp.methods && comp.methods.length > 0) {\n        totalMethods += comp.methods.length;\n      }\n    });\n    console.log(`Total methods across all components: ${totalMethods}`);\n    \n    const config = {\n      useOllama: true,\n      ollamaUrl: process.env.OLLAMA_URL || \"http://localhost:11434\",\n      ollamaModel: process.env.OLLAMA_MODEL || \"nomic-embed-text:latest\",\n      ollamaEmbeddingModel: process.env.OLLAMA_EMBEDDING_MODEL || \"nomic-embed-text:latest\",\n      chatModel: process.env.CHAT_MODEL || \"gemma3:4b\",\n      similarityThreshold: process.env.SIMILARITY_THRESHOLD ? parseFloat(process.env.SIMILARITY_THRESHOLD) : 0.2\n    };\n    \n    console.log(\"Chat service configuration:\", {\n      ollamaUrl: config.ollamaUrl,\n      embeddingModel: config.ollamaEmbeddingModel,\n      chatModel: config.chatModel,\n      similarityThreshold: config.similarityThreshold\n    });\n    \n    // Create service but skip initialization since we'll import the vector DB\n    chatService = new CodebaseChatService(components, config);\n    \n    // Import the saved vector database immediately (if available)\n    if (savedVectorDb && savedVectorDb.length > 0) {\n      console.log(`Importing saved vector database with ${savedVectorDb.length} entries...`);\n      chatService.vectorService.importVectorDatabase(JSON.stringify(savedVectorDb));\n    } else {\n      console.log(\"No vector database to import - chat will work without similarity search\");\n    }\n    \n    // Verify the import worked\n    const vectorDbString = chatService.vectorService.exportVectorDatabase();\n    const importedDb = JSON.parse(vectorDbString);\n    console.log(`Vector database after import: ${importedDb.length} entries`);\n    \n    // Verify database integrity (only if we have data)\n    if (importedDb.length > 0) {\n      const isValid = chatService.verifyVectorDatabase();\n      if (!isValid) {\n        console.error(\"WARNING: Vector database contains invalid entries!\");\n      }\n    }\n    \n    // Test Ollama connectivity\n    try {\n      const testResponse = await axios.get(`${config.ollamaUrl}/api/tags`, { timeout: 5000 });\n      console.log(\"Ollama server is running. Available models:\", testResponse.data.models?.map((m: any) => m.name));\n      \n      // Check if the embedding model is available\n      const hasEmbeddingModel = testResponse.data.models?.some((m: any) => m.name === config.ollamaEmbeddingModel);\n      if (!hasEmbeddingModel) {\n        console.warn(`WARNING: Embedding model '${config.ollamaEmbeddingModel}' not found in Ollama. Run: ollama pull ${config.ollamaEmbeddingModel}`);\n      }\n    } catch (error) {\n      console.error(\"WARNING: Cannot connect to Ollama server. Vector search will fail!\");\n    }\n    \n    console.log(\"=== CHAT SERVICE INITIALIZATION COMPLETE ===\");\n  }\n\n  return chatService;\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/api/chat/route.ts",
    "slug": "src_ui_app_api_chat_route_getchatservice",
    "imports": [
      "NextRequest",
      "NextResponse",
      "CodebaseChatService",
      "ChatMessage"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ui_app_api_chat_route_getchatservice",
        "target": "nextrequest",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_api_chat_route_getchatservice",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_api_chat_route_getchatservice",
        "target": "codebasechatservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_api_chat_route_getchatservice",
        "target": "chatmessage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 261,
        "targetFunction": "json"
      }
    ],
    "methods": []
  },
  {
    "name": "POST",
    "kind": "function",
    "code": "export async function POST(request: NextRequest) {\n  try {\n    const { history, query } = await request.json();\n    if (!query) {\n      return NextResponse.json({ error: \"Query is required\" }, { status: 400 });\n    }\n    \n    console.log(`\\n=== PROCESSING CHAT REQUEST ===`);\n    console.log(`User query: \"${query}\"`);\n    console.log(`History length: ${history?.length || 0}`);\n    \n    const service = await getChatService();\n    \n    // Verify vector database is loaded\n    const vectorDbString = service.vectorService.exportVectorDatabase();\n    const vectorDb = JSON.parse(vectorDbString);\n    console.log(`Vector database status: ${vectorDb.length} entries loaded`);\n    \n    if (vectorDb.length === 0) {\n      console.warn(\"WARNING: Vector database is empty - similarity search disabled\");\n      // Don't return error, just log warning and continue\n    }\n    \n    // Use the chat service directly - it handles vector search internally\n    console.log(\"Calling chat service...\");\n    const { response, searchResults } = await service.chat(history || [], query);\n    \n    console.log(`Chat service returned ${searchResults.length} search results`);\n    console.log(`Response length: ${response.length} characters`);\n    \n    // Log search results for debugging\n    if (searchResults.length > 0) {\n      console.log(\"Search results summary:\");\n      searchResults.forEach((result, idx) => {\n        console.log(`  ${idx + 1}. ${result.componentName}.${result.methodName || 'N/A'} (similarity: ${result.similarity?.toFixed(3) || 'N/A'})`);\n      });\n    } else {\n      console.warn(\"No search results found for the query\");\n    }\n    \n    console.log(\"=== CHAT REQUEST COMPLETE ===\\n\");\n    \n    return NextResponse.json({ response, searchResults });\n  } catch (error: any) {\n    console.error(\"Error processing chat request:\", error.message || error);\n    console.error(\"Stack trace:\", error.stack);\n    \n    return NextResponse.json({ \n      error: \"Failed to process request\",\n      details: error.message || \"Unknown error\"\n    }, { status: 500 });\n  }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/api/chat/route.ts",
    "slug": "src_ui_app_api_chat_route_post",
    "imports": [
      "NextRequest",
      "NextResponse",
      "CodebaseChatService",
      "ChatMessage"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ui_app_api_chat_route_post",
        "target": "nextrequest",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_api_chat_route_post",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_api_chat_route_post",
        "target": "codebasechatservice",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "source": "src_ui_app_api_chat_route_post",
        "target": "chatmessage",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 261,
        "targetFunction": "json"
      }
    ],
    "methods": []
  },
  {
    "name": "isServerRunning",
    "kind": "function",
    "code": "async function isServerRunning() {\n    try {\n        const response = await fetch(`http://localhost:${mcpPort}/health`);\n        return response.ok;\n    } catch (error) {\n        return false;\n    }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/api/mcp/stop/route.ts",
    "slug": "src_ui_app_api_mcp_stop_route_isserverrunning",
    "imports": [
      "NextResponse"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ui_app_api_mcp_stop_route_isserverrunning",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 20,
        "targetFunction": "json"
      }
    ],
    "methods": []
  },
  {
    "name": "POST",
    "kind": "function",
    "code": "export async function POST() {\n    if (!(await isServerRunning())) {\n        return NextResponse.json({ message: 'MCP Server is not running.' });\n    }\n\n    try {\n        const pid = await fs.readFile(pidFilePath, 'utf-8');\n        if (pid) {\n            try {\n                process.kill(parseInt(pid, 10));\n            } catch (e) {\n                // Ignore error if process is already dead\n            }\n            await fs.unlink(pidFilePath);\n        }\n    } catch (error) {\n        // PID file might not exist, but we can try to shut down via API\n    }\n\n    // Also try to shut down via endpoint, in case the PID belongs to another process\n    try {\n        await fetch(`http://localhost:${mcpPort}/shutdown`, { method: 'POST' });\n    } catch (error) {\n        // Ignore error, server might be already down\n    }\n    \n    // Wait a moment for the server to shut down\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    if (await isServerRunning()) {\n        return NextResponse.json({ error: 'Failed to stop MCP Server.' }, { status: 500 });\n    }\n\n    return NextResponse.json({ message: 'MCP Server stopped.' });\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/api/mcp/stop/route.ts",
    "slug": "src_ui_app_api_mcp_stop_route_post",
    "imports": [
      "NextResponse"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ui_app_api_mcp_stop_route_post",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 20,
        "targetFunction": "json"
      }
    ],
    "methods": []
  },
  {
    "name": "isServerRunning",
    "kind": "function",
    "code": "async function isServerRunning() {\n    try {\n        const response = await fetch(`http://localhost:${mcpPort}/health`);\n        return response.ok;\n    } catch (error) {\n        return false;\n    }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/api/mcp/start/route.ts",
    "slug": "src_ui_app_api_mcp_start_route_isserverrunning",
    "imports": [
      "NextResponse"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ui_app_api_mcp_start_route_isserverrunning",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 22,
        "targetFunction": "json"
      }
    ],
    "methods": []
  },
  {
    "name": "POST",
    "kind": "function",
    "code": "export async function POST() {\n    if (await isServerRunning()) {\n        return NextResponse.json({ message: 'MCP Server is already running.', port: mcpPort });\n    }\n\n    const serverPath = path.join(projectRoot, 'mcp-server.js');\n    \n    try {\n        await fs.access(serverPath);\n    } catch (error) {\n        console.error(`mcp-server.js not found at ${serverPath}`, error);\n        return NextResponse.json({ error: 'mcp-server.js not found.' }, { status: 500 });\n    }\n\n    const child = spawn('node', [serverPath], {\n        detached: true,\n        stdio: 'ignore',\n        cwd: projectRoot, // Set the working directory for the spawned process\n    });\n\n    child.unref();\n\n    // Wait a moment to allow the server to start and write the PID file.\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    if (await isServerRunning()) {\n        return NextResponse.json({ message: 'MCP Server started.', port: mcpPort });\n    } else {\n        return NextResponse.json({ error: 'Failed to start MCP Server.' }, { status: 500 });\n    }\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/api/mcp/start/route.ts",
    "slug": "src_ui_app_api_mcp_start_route_post",
    "imports": [
      "NextResponse"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ui_app_api_mcp_start_route_post",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 22,
        "targetFunction": "json"
      }
    ],
    "methods": []
  },
  {
    "name": "GET",
    "kind": "function",
    "code": "export async function GET() {\n    // Resolve the project root from the API route's location\n    const projectRoot = path.resolve(process.cwd(), '../../');\n    const serverPath = path.join(projectRoot, 'mcp-server.js');\n    \n    // Assumes 'node' is in the user's PATH\n    const config = {\n      mcpServers: {\n        \"code-y-mcp\": {\n          command: \"node\",\n          args: [serverPath]\n        }\n      }\n    };\n    \n    return NextResponse.json(config);\n}",
    "filePath": "/Users/zachrizzo/Desktop/programming/auto_code_docs_react_ai/src/ui/app/api/mcp/config/route.ts",
    "slug": "src_ui_app_api_mcp_config_route_get",
    "imports": [
      "NextResponse"
    ],
    "references": [],
    "relationships": [
      {
        "source": "src_ui_app_api_mcp_config_route_get",
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "imports only"
      },
      {
        "target": "nextresponse",
        "type": "uses",
        "weight": 2,
        "context": "calls json",
        "sourceLine": 19,
        "targetFunction": "json"
      }
    ],
    "methods": []
  }
]
