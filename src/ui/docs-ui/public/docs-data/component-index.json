[
  {
    "name": "DocumentAll",
    "description": "This component brings together all the components, functions and examples for documentation generation purposes.",
    "filePath": "examples/DocumentAll.tsx",
    "methodCount": 36,
    "slug": "document-all"
  },
  {
    "name": "fibonacci",
    "description": "A recursive function to calculate the total cost of a patient's stay including all procedures, medications, and room charges",
    "filePath": "examples/DocumentAll.tsx",
    "methodCount": 0,
    "slug": "fibonacci"
  },
  {
    "name": "App",
    "description": "Main application component that demonstrates various React features",
    "filePath": "examples/App.tsx",
    "methodCount": 0,
    "slug": "app"
  },
  {
    "name": "Todo",
    "description": "A component for managing a list of todo items with categories, priorities, and filters",
    "filePath": "examples/Todo.tsx",
    "methodCount": 0,
    "slug": "todo"
  },
  {
    "name": "TodoItem",
    "description": "Component that displays a single todo item with controls to toggle completion or delete",
    "filePath": "examples/TodoItem.tsx",
    "methodCount": 0,
    "slug": "todo-item"
  },
  {
    "name": "formatDate",
    "description": "Default export from RecursiveExamples.tsx",
    "filePath": "examples/RecursiveExamples.tsx",
    "methodCount": 0,
    "slug": "format-date"
  },
  {
    "name": "factorial",
    "description": "Recursive functions in TypeScript",
    "filePath": "examples/RecursiveExamples.tsx",
    "methodCount": 0,
    "slug": "factorial"
  },
  {
    "name": "fibonacci",
    "description": "",
    "filePath": "examples/RecursiveExamples.tsx",
    "methodCount": 0,
    "slug": "fibonacci"
  },
  {
    "name": "factorial",
    "description": "JavaScript examples with recursion (using JS syntax, no types)",
    "filePath": "examples/RecursiveExamples.tsx",
    "methodCount": 0,
    "slug": "factorial"
  },
  {
    "name": "factorial",
    "description": "Recursive class implementation in TypeScript",
    "filePath": "examples/RecursiveExamples.tsx",
    "methodCount": 0,
    "slug": "factorial"
  },
  {
    "name": "factorial",
    "description": "React component that demonstrates recursive rendering",
    "filePath": "examples/RecursiveExamples.tsx",
    "methodCount": 0,
    "slug": "factorial"
  },
  {
    "name": "factorial",
    "description": "Healthcare Dashboard component that displays and manages patient information",
    "filePath": "examples/HealthcareDashboard.tsx",
    "methodCount": 0,
    "slug": "factorial"
  },
  {
    "name": "generateMockPatient",
    "description": "This file demonstrates how to use the recursive examples in a test environment",
    "filePath": "examples/UseRecursiveExamples.tsx",
    "methodCount": 0,
    "slug": "generate-mock-patient"
  },
  {
    "name": "testPromiseChain",
    "description": "Default export from Fibonacci.tsx",
    "filePath": "examples/Fibonacci.tsx",
    "methodCount": 0,
    "slug": "test-promise-chain"
  },
  {
    "name": "fibonacci",
    "description": "Fibonacci number calculator using recursion with memoization",
    "filePath": "examples/Fibonacci.tsx",
    "methodCount": 0,
    "slug": "fibonacci"
  },
  {
    "name": "Fibonacci",
    "description": "Component that demonstrates the fibonacci sequence calculation",
    "filePath": "examples/Fibonacci.tsx",
    "methodCount": 0,
    "slug": "fibonacci"
  },
  {
    "name": "fibonacci",
    "description": "Recursive function to find a patient in a hospital hierarchy (floors, wings, rooms)",
    "filePath": "examples/DocumentAll.tsx",
    "methodCount": 0,
    "slug": "fibonacci"
  },
  {
    "name": "fibonacci",
    "description": "Recursively build a hospital organizational chart",
    "filePath": "examples/DocumentAll.tsx",
    "methodCount": 0,
    "slug": "fibonacci"
  }
]